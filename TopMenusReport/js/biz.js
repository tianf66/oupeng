/*! 2018 Baidu Inc. All Rights Reserved */
define('ui/validator/PasswordRule', [
    'require',
    'esui/validator/ValidityState',
    'esui/validator/Rule',
    'eoo',
    'esui/main'
], function (require) {
    var ValidityState = require('esui/validator/ValidityState');
    var exports = {};
    exports.type = 'passwordRule';
    exports.errorMessage = '\u5BC6\u7801\u81F3\u5C11\u5305\u542B\u4E00\u4E2A\u5927\u5199\u5B57\u6BCD\uFF0C\u4E00\u4E2A\u5C0F\u5199\u5B57\u6BCD\u548C\u4E00\u4E2A\u963F\u62C9\u4F2F\u6570\u5B57';
    exports.check = function (value, control) {
        var result = /^[a-z0-9]+$/i.test(value) && /[A-Z]/.test(value) && /[a-z]/.test(value) && /[0-9]/.test(value);
        return new ValidityState(!value || result, this.getErrorMessage(control));
    };
    var Rule = require('esui/validator/Rule');
    var PasswordRule = require('eoo').create(Rule, exports);
    require('esui/main').registerRule(PasswordRule, 200);
    return PasswordRule;
});
define('ui/validator/OrientUrlRule', [
    'require',
    'esui/validator/Rule',
    'esui/validator/ValidityState',
    'esui/lib',
    'esui/main'
], function (require) {
    var Rule = require('esui/validator/Rule');
    var ValidityState = require('esui/validator/ValidityState');
    function OrientUrlRule() {
        Rule.apply(this, arguments);
    }
    OrientUrlRule.prototype.type = 'orientUrl';
    OrientUrlRule.prototype.errorMessage = [
        'url\u8D85\u8FC7100\u5B57\u7B26: \u5355\u4E2A url \u4E0D\u80FD\u8D85\u8FC7100\u5B57\u7B26',
        'url\u6761\u6570\u8D85\u8FC7100: url \u6700\u591A\u914D\u7F6E100\u4E2A'
    ];
    OrientUrlRule.prototype.getErrorMessage = function (control, type) {
        return this.errorMessage[type];
    };
    OrientUrlRule.prototype.check = function (value, control) {
        var targetValue = this.getLimitCondition(control);
        value = value.split('\n');
        var len = value.length;
        if (len > targetValue) {
            return new ValidityState(false, this.getErrorMessage(control, 1));
        }
        while (--len > -1) {
            if (value[len].length > targetValue) {
                return new ValidityState(false, this.getErrorMessage(control, 0));
            }
            --len;
        }
        return new ValidityState(true, this.getErrorMessage(control, 1));
    };
    require('esui/lib').inherits(OrientUrlRule, Rule);
    require('esui/main').registerRule(OrientUrlRule, 900);
    return OrientUrlRule;
});
define('ui/validator/CompareRule', [
    'require',
    'esui/validator/Rule',
    'esui/validator/ValidityState',
    'esui/lib',
    'esui/main'
], function (require) {
    var Rule = require('esui/validator/Rule');
    var ValidityState = require('esui/validator/ValidityState');
    function CompareRule() {
        Rule.apply(this, arguments);
    }
    CompareRule.prototype.type = 'compare';
    CompareRule.prototype.errorMessage = '\u60A8\u4E24\u6B21\u8F93\u5165\u7684${title}\u4E0D\u4E00\u81F4\uFF0C\u8BF7\u91CD\u65B0\u8F93\u5165';
    CompareRule.prototype.getErrorMessage = function (control) {
        var lib = require('esui/lib');
        var errorMessage = control.get(this.type + 'ErrorMessage') || this.errorMessage;
        var target = this.getLimitCondition(control);
        target = control.viewContext.get(target);
        return lib.format(errorMessage, target);
    };
    CompareRule.prototype.check = function (value, control) {
        var target = this.getLimitCondition(control);
        var targetValue = control.viewContext.get(target).getValue();
        return new ValidityState(value === targetValue, this.getErrorMessage(control));
    };
    require('esui/lib').inherits(CompareRule, Rule);
    require('esui/main').registerRule(CompareRule, 900);
    return CompareRule;
});
define('ui/extension/ValidationCleaner', [
    'require',
    'esui/InputControl',
    'esui/TextBox',
    'esui/Extension',
    'esui/main',
    'eoo'
], function (require) {
    var InputControl = require('esui/InputControl');
    var TextBox = require('esui/TextBox');
    var Extension = require('esui/Extension');
    var main = require('esui/main');
    var exports = {};
    exports.type = 'ValidationCleaner';
    exports.activate = function () {
        var target = this.target;
        if (!(target instanceof InputControl)) {
            return;
        }
        var type = target instanceof TextBox ? 'focus' : 'change';
        target.on(type, clean);
        this.$super(arguments);
    };
    exports.inactivate = function () {
        var target = this.target;
        if (!(target instanceof InputControl)) {
            return;
        }
        var type = target instanceof TextBox ? 'focus' : 'change';
        target.un(type, clean);
        this.$super(arguments);
    };
    function clean() {
        if (this.validity) {
            this.removeState('validity-' + this.validity.getValidState());
            var label = this.getValidityLabel(true);
            label.set('validity', null);
            this.validity = null;
        }
    }
    var ValidationCleaner = require('eoo').create(Extension, exports);
    main.registerExtension(ValidationCleaner);
    return ValidationCleaner;
});
define('ui/extension/UploaderSessionToken', [
    'require',
    '../../common/ioc',
    'esui/Extension',
    'eoo',
    'esui'
], function (require) {
    var exports = {};
    exports.type = 'UploaderSessionToken';
    exports.activate = function () {
        this.target.on('formcreate', this.addSessionToken, this);
        this.$super(arguments);
    };
    exports.inactivate = function () {
        this.target.un('formcreate', this.addSessionToken, this);
        this.$super(arguments);
    };
    exports.addSessionToken = function () {
        var uploader = this.target;
        uploader.setReadOnly(true);
        require('../../common/ioc').getComponent('globalData', function (globalData) {
            globalData.getUserProperty('sessionToken').thenBind(uploader.addFormField, uploader, 'sessionToken').thenBind(uploader.setReadOnly, uploader, false);
        });
    };
    var Extension = require('esui/Extension');
    var UploaderSessionToken = require('eoo').create(Extension, exports);
    require('esui').registerExtension(UploaderSessionToken);
    return UploaderSessionToken;
});
define('ui/extension/TableMask', [
    'require',
    'eoo',
    'esui/Extension',
    'esui'
], function (require) {
    var exports = {};
    exports.type = 'TableMask';
    function addMask() {
        var mask = this.helper.getPart('mask');
        if (!mask) {
            var body = this.helper.getPart('body');
            mask = this.helper.createPart('mask');
            body.appendChild(mask);
        }
        this.addState('locked');
    }
    function removeMask() {
        this.removeState('locked');
    }
    exports.activate = function () {
        var table = this.target;
        table.addMask = addMask;
        table.removeMask = removeMask;
        this.$super(arguments);
    };
    exports.inactive = function () {
        var table = this.target;
        delete table.addMask;
        delete table.removeMask;
        this.$super(arguments);
    };
    var TableMask = require('eoo').create(require('esui/Extension'), exports);
    require('esui').registerExtension(TableMask);
    return TableMask;
});
define('ui/extension/TableDragSort', [
    'require',
    'common/util',
    'esui/lib',
    'eoo',
    'esui/Extension',
    'esui'
], function (require) {
    var u = require('common/util');
    var lib = require('esui/lib');
    var exports = {};
    exports.type = 'TableDragSort';
    exports.constructor = function () {
        this.$super(arguments);
        u.bindAll(this, 'startDrag', 'moveRow', 'finishDrag');
    };
    exports.findRowElement = function (from) {
        var row = from;
        while (row && !this.target.helper.isPart(row, 'row')) {
            row = row.parentNode;
        }
        return row;
    };
    exports.getRows = function () {
        var body = this.target.helper.getPart('body');
        var rows = body.querySelectorAll('.' + this.target.helper.getPartClasses('row')[0]);
        return rows;
    };
    exports.getDraggableRows = function () {
        var rows = this.getRows();
        var result = 0;
        for (var i = 0; i < rows.length; i++) {
            if (rows[i].querySelectorAll('.' + this.dragZone).length) {
                result++;
            } else {
                return result;
            }
        }
        return result;
    };
    exports.swapRow = function (target) {
        if (target === this.row) {
            return;
        }
        var theRowNextToDraggingOne = this.row.nextSibling;
        var theRowNextToSwapTarget = target.nextSibling;
        var parent = this.row.parentNode;
        parent.insertBefore(target, theRowNextToDraggingOne);
        parent.insertBefore(this.row, theRowNextToSwapTarget);
    };
    exports.updateDatasource = function () {
        var datasource = this.target.get('datasource');
        var sortedDatasource = u.map(this.getRows(), function (row) {
            var index = lib.getAttribute(row, 'data-index');
            return datasource[index];
        });
        u.each(sortedDatasource, function (item, i) {
            datasource[i] = item;
        });
    };
    exports.isDragZone = function (element) {
        var className = this.dragZone || this.target.helper.getPartClasses('row')[0];
        while (element) {
            if (lib.hasClass(element, className)) {
                return true;
            }
            element = element.parentNode;
        }
        return false;
    };
    exports.startDrag = function (e) {
        var button = e.which || e.button;
        if (button !== 1) {
            return;
        }
        if (this.row) {
            return;
        }
        if (!this.isDragZone(e.target)) {
            return;
        }
        this.row = this.findRowElement(e.target);
        if (!this.row) {
            return;
        }
        var table = this.target;
        var body = table.helper.getPart('body');
        this.phantom = this.row.cloneNode(true);
        this.initialY = e.clientY;
        this.initialTop = lib.getOffset(this.row).top - lib.getOffset(body).top;
        this.rowHeight = this.row.offsetHeight;
        this.bodyHeight = body.offsetHeight;
        var draggableRows = this.getDraggableRows();
        this.draggableBoundry = {
            begin: 0,
            end: (draggableRows - 1) * this.rowHeight
        };
        table.helper.addPartClasses('row-dragging', this.row);
        this.phantom.id = '';
        this.phantom.className = table.helper.getPartClassName('row') + ' ' + table.helper.getPartClassName('row-dragging-phantom');
        this.phantom.style.top = this.initialTop + 'px';
        body.appendChild(this.phantom);
        table.helper.addDOMEvent(document.documentElement, 'mousemove', this.moveRow);
        table.helper.addDOMEvent(document.documentElement, 'mouseup', this.finishDrag);
        table.helper.addPartClasses('dragging');
    };
    exports.moveRow = function (e) {
        if (!this.row) {
            return;
        }
        var offsetTop = this.initialTop + (e.clientY - this.initialY);
        if (offsetTop < this.draggableBoundry.begin) {
            offsetTop = this.draggableBoundry.begin;
        } else if (offsetTop > this.draggableBoundry.end) {
            offsetTop = this.draggableBoundry.end;
        }
        this.phantom.style.top = offsetTop + 'px';
        var rows = this.getRows();
        for (var i = 0; i < rows.length; i++) {
            var previousMiddleLineTop = (i - 1) * this.rowHeight + this.rowHeight / 2;
            var currentMiddleLineTop = previousMiddleLineTop + this.rowHeight;
            if (previousMiddleLineTop < offsetTop && currentMiddleLineTop > offsetTop) {
                this.swapRow(rows[i]);
            }
        }
    };
    exports.finishDrag = function () {
        if (!this.row) {
            return;
        }
        var table = this.target;
        table.helper.removeDOMEvent(document.documentElement, 'mousemove', this.moveRow);
        table.helper.removeDOMEvent(document.documentElement, 'mouseup', this.finishDrag);
        lib.removeNode(this.phantom);
        table.helper.removePartClasses('row-dragging', this.row);
        this.row = null;
        this.phantom = null;
        this.updateDatasource();
        this.updateView();
        table.fire('dragsortend');
    };
    exports.updateView = function () {
        this.target.helper.removePartClasses('dragging');
        this.target.setDatasource(this.target.get('datasource'));
    };
    exports.activate = function () {
        this.$super(arguments);
        var table = this.target;
        table.helper.addDOMEvent(table.main, 'mousedown', this.startDrag);
    };
    var TableDragSort = require('eoo').create(require('esui/Extension'), exports);
    require('esui').registerExtension(TableDragSort);
    return TableDragSort;
});
define('ui/extension/RemoveBlank', [
    'require',
    'esui',
    'esui/Extension',
    'esui/InputControl',
    'eoo'
], function (require) {
    var esui = require('esui');
    var Extension = require('esui/Extension');
    var InputControl = require('esui/InputControl');
    var exports = {};
    exports.type = 'RemoveBlank';
    exports.activate = function () {
        var target = this.target;
        if (!(target instanceof InputControl)) {
            return;
        }
        target.on('afterrender', trim, this);
        target.on('change', trim, this);
        this.$super(arguments);
    };
    exports.inactive = function () {
        var target = this.target;
        if (!(target instanceof InputControl)) {
            return;
        }
        target.un('afterrender', trim, this);
        target.un('change', trim, this);
        this.$super(arguments);
    };
    function trim() {
        var value = this.target.getValue();
        var trimedValue = value.replace(/\s/g, '');
        this.target.setValue(trimedValue);
    }
    var RemoveBlank = require('eoo').create(Extension, exports);
    esui.registerExtension(RemoveBlank);
    return RemoveBlank;
});
define('ui/extension/EventBinder', [
    'exports',
    'module',
    'esui/Extension',
    'esui'
], function (exports, module, _esuiExtension, _esui) {
    var _Extension2 = babelHelpers.interopRequireDefault(_esuiExtension);
    var _esui2 = babelHelpers.interopRequireDefault(_esui);
    var EventBinder = function (_Extension) {
        babelHelpers.inherits(EventBinder, _Extension);
        babelHelpers.createClass(EventBinder, [{
                key: 'type',
                get: function get() {
                    return 'EventBinder';
                }
            }]);
        function EventBinder(options) {
            babelHelpers.classCallCheck(this, EventBinder);
            babelHelpers.get(Object.getPrototypeOf(EventBinder.prototype), 'constructor', this).call(this, options);
            this.events = options;
        }
        babelHelpers.createClass(EventBinder, [
            {
                key: 'activate',
                value: function activate() {
                    var _this = this;
                    babelHelpers.get(Object.getPrototypeOf(EventBinder.prototype), 'activate', this).call(this);
                    Object.keys(this.events).forEach(function (name) {
                        return _this.target.on(name, _this.events[name]);
                    });
                }
            },
            {
                key: 'inactive',
                value: function inactive() {
                    var _this2 = this;
                    Object.keys(this.events).forEach(function (name) {
                        return _this2.target.off(name, _this2.events[name]);
                    });
                    babelHelpers.get(Object.getPrototypeOf(EventBinder.prototype), 'inactive', this).call(this);
                }
            }
        ]);
        return EventBinder;
    }(_Extension2['default']);
    module.exports = EventBinder;
    _esui2['default'].registerExtension(EventBinder);
});
define('ui/extension/EncodeFilter', [
    'require',
    'eoo',
    'esui/Extension',
    'esui'
], function (require) {
    var exports = {};
    exports.type = 'EncodeFilter';
    exports.activate = function () {
        this.$super(arguments);
        var target = this.target;
        if (target.hasOwnProperty('getRawValue')) {
            this.originGetRawValue = target.getRawValue;
        }
        var originGetRawValue = this.target.getRawValue;
        var originGetValue = this.target.getValue;
        this.target.getValue = function () {
            var rawValue = originGetRawValue.call(this);
            var value = originGetValue.call(this);
            if (this.type === 'TextBox') {
                value = encodeURIComponent(rawValue);
            }
            return value;
        };
    };
    exports.inactivate = function () {
        delete this.target.getRawValue;
        if (this.originGetRawValue) {
            this.target.getRawValue = this.originGetRawValue;
        }
        this.$super(arguments);
    };
    var EncodeFilter = require('eoo').create(require('esui/Extension'), exports);
    require('esui').registerExtension(EncodeFilter);
    return EncodeFilter;
});
define('ui/extension/ContainerOverlay', [
    'require',
    'esui/Overlay',
    'etpl',
    'esui',
    'common/util',
    'esui/Extension',
    'eoo'
], function (require) {
    require('esui/Overlay');
    var etpl = require('etpl');
    var ui = require('esui');
    var u = require('common/util');
    var plainRenderer = etpl.compile('<p>${data}</p>');
    var arrayifyRenderer = etpl.compile('<!-- for: ${data} as ${content} --><p>${content}</p><!-- /for -->');
    var exports = {};
    exports.type = 'ContainerOverlay';
    exports.getDatasourceField = function (element) {
        return element.getAttribute('data-container-overlay-field');
    };
    function getRow(element) {
        var containerElement = this.target.main;
        var row = element.getAttribute('data-row');
        while (!row && element.parentNode && element.parentNode !== containerElement) {
            element = element.parentNode;
            row = element.getAttribute('data-row');
        }
        return row;
    }
    exports.getOverlayData = function (element) {
        var overlayField = this.getDatasourceField(element);
        var datasource = this.target.get('datasource');
        if (!overlayField) {
            return datasource;
        }
        var row = getRow.call(this, element);
        return row ? datasource[row][overlayField] : datasource[overlayField];
    };
    exports.getOverlayRenderer = function (element, data) {
        var templateTarget = element.getAttribute('data-container-overlay-template-target');
        var renderer = null;
        if (templateTarget) {
            renderer = etpl.getRenderer(templateTarget);
        } else {
            if (u.isArray(data)) {
                renderer = arrayifyRenderer;
            } else {
                renderer = plainRenderer;
            }
        }
        return renderer;
    };
    exports.getOverlayContent = function (element) {
        var overlayData = this.getOverlayData(element);
        var overlayRenderer = this.getOverlayRenderer(element, overlayData);
        return overlayRenderer({ data: overlayData });
    };
    exports.handleClickContainer = function (element) {
        var overlay = this.target.getChild('container-overlay');
        overlay.set('attachedDOM', element);
        overlay.setContent(this.getOverlayContent(element));
        overlay.show();
    };
    exports.getTargetElement = function (element) {
        var topElement = this.target.main.parentNode;
        while (!element.getAttribute('data-container-overlay-enabled') && element.parentNode && element.parentNode !== topElement) {
            element = element.parentNode;
        }
        return element.getAttribute('data-container-overlay-enabled') ? element : null;
    };
    function onClickContainer(e) {
        var element = this.getTargetElement(e.target);
        if (element) {
            this.handleClickContainer(element);
            e.stopPropagation();
        }
    }
    function onClickOverlay(e) {
        e.stopPropagation();
    }
    exports.handleClickDocument = function () {
        var overlay = this.target.getChild('container-overlay');
        overlay.hide();
    };
    function onClickDocument(e) {
        this.handleClickDocument();
    }
    exports.activate = function () {
        this.$super(arguments);
        var container = this.target;
        container.helper.addDOMEvent(container.main, 'click', u.bind(onClickContainer, this));
        var overlay = ui.create('Overlay', {
            autoClose: false,
            skin: 'container-overlay'
        });
        container.addChild(overlay, 'container-overlay');
        overlay.appendTo(container);
        container.helper.addDOMEvent(overlay.main, 'click', u.bind(onClickOverlay, this));
        container.helper.addDOMEvent(document, 'click', u.bind(onClickDocument, this));
    };
    var Extension = require('esui/Extension');
    var ContainerOverlay = require('eoo').create(Extension, exports);
    require('esui').registerExtension(ContainerOverlay);
    return ContainerOverlay;
});
define('ui/TreeEllipsis', [
    'require',
    'common/util',
    'esui/lib',
    'esui/controlHelper',
    'ui/Ellipsis',
    'esui'
], function (require) {
    var u = require('common/util');
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var Ellipsis = require('ui/Ellipsis');
    function TreeEllipsis(options) {
        Ellipsis.apply(this, arguments);
    }
    lib.inherits(TreeEllipsis, Ellipsis);
    TreeEllipsis.prototype.type = 'TreeEllipsis';
    TreeEllipsis.prototype.styleType = 'Ellipsis';
    TreeEllipsis.prototype.initStructure = function () {
        Ellipsis.prototype.initStructure.apply(this);
        lib.addClass(this.main, 'ui-treeellipsis');
    };
    TreeEllipsis.prototype.repaint = helper.createRepaint({
        name: 'datasource',
        paint: ellipse
    });
    function isLeaf(node) {
        return !node.children || !node.children.length;
    }
    function getLeaves(node) {
        var leaves = [];
        if (isLeaf(node)) {
            leaves.push(node);
        } else {
            u.each(node.children, function (child, index) {
                leaves = leaves.concat(getLeaves(child));
            });
        }
        return leaves;
    }
    function generateTree(treeEllipsis, children) {
        var html = [];
        var contentClass;
        u.each(children, function (node, index) {
            var isLastNode = index === children.length - 1;
            var nodeResult = generateNode(treeEllipsis, node, isLastNode);
            html.push(nodeResult.html);
            contentClass = nodeResult.contentClass;
        });
        return {
            html: html.join('\n'),
            contentClass: contentClass
        };
    }
    TreeEllipsis.prototype.nodeTpl = [
        '<div class="${nodeClassName}">',
        '    <div class="${titleClassName}">${title}</div>',
        '    <div class="${contentClassName}">${content}</div>',
        '</div>'
    ].join('\n');
    function generateNode(treeEllipsis, node, isLastNode) {
        if (isLeaf(node)) {
            return {
                html: lib.encodeHTML(node.text) + (isLastNode ? '' : '\u3001'),
                contentClass: 'leaf-node-content'
            };
        }
        var treeResult = generateTree(treeEllipsis, node.children);
        var contentClassName = helper.getPartClasses(treeEllipsis, treeResult.contentClass);
        var html = lib.format(treeEllipsis.nodeTpl, {
            nodeClassName: helper.getPartClasses(treeEllipsis, 'node'),
            titleClassName: helper.getPartClasses(treeEllipsis, 'node-title'),
            title: lib.encodeHTML(node.text) + '\uFF1A',
            contentClassName: contentClassName,
            content: treeResult.html
        });
        return {
            html: html,
            contentClass: 'node-content'
        };
    }
    function ellipse(treeEllipsis, datasource) {
        treeEllipsis.removeState('static');
        if (!datasource) {
            return;
        }
        var generalInfo = lib.g(helper.getId(treeEllipsis, 'general-info'));
        var dataLength = datasource.length;
        if (!dataLength) {
            treeEllipsis.addState('static');
            generalInfo.innerHTML = lib.encodeHTML(treeEllipsis.emptyText);
            return;
        }
        var leaves = [];
        u.each(datasource, function (node) {
            leaves = leaves.concat(getLeaves(node));
        });
        var soOn = '\u7B49' + leaves.length + '\u4E2A' + treeEllipsis.tail;
        if (treeEllipsis.maxLength > leaves.length) {
            soOn = '';
        }
        var detailInfo = lib.g(helper.getId(treeEllipsis, 'detail-info'));
        var tree = generateTree(treeEllipsis, datasource);
        detailInfo.innerHTML = tree.html;
        var ellipsisLeaves = leaves.slice(0, treeEllipsis.maxLength);
        ellipsisLeaves = u.map(ellipsisLeaves, function (leaf) {
            return leaf.text;
        });
        generalInfo.innerHTML = lib.encodeHTML(ellipsisLeaves.join('\u3001')) + soOn;
    }
    require('esui').register(TreeEllipsis);
    return TreeEllipsis;
});
define('ui/TagInput', [
    'require',
    'underscore',
    'esui/InputControl',
    'esui',
    'esui/lib',
    'esui/painters',
    'eoo'
], function (require) {
    var u = require('underscore');
    var InputControl = require('esui/InputControl');
    var ui = require('esui');
    var lib = require('esui/lib');
    var defaultProperties = {
        valueSplit: ',',
        maxTags: Infinity
    };
    var exports = {};
    exports.type = 'TagInput';
    exports.initOptions = function (options) {
        var properties = u.defaults({}, options, defaultProperties);
        if (!properties.value) {
            properties.value = options.main.getAttribute('value') || '';
        }
        properties.maxTags = +properties.maxTags;
        this.setProperties(properties);
    };
    exports.initStructure = function () {
        this.$super(arguments);
        createStructure(this);
    };
    exports.initEvents = function () {
        this.helper.addDOMEvent(this.main, 'click', onMainClick);
        this.helper.addDOMEvent(this.main, 'keydown', onKeyDown);
        this.helper.addDOMEvent(this.main, 'keypress', onKeyPress);
    };
    exports.parseValue = function (value) {
        return value ? ('' + value).split(defaultProperties.valueSplit) : null;
    };
    exports.setRawValue = function (rawValue) {
        this.rawValue = rawValue;
        var currentValue = this.helper.getPart('input').value;
        createStructure(this);
        this.helper.getPart('input').value = currentValue;
    };
    var painter = require('esui/painters');
    exports.repaint = painter.createRepaint(InputControl.prototype.repaint, painter.style('width'), painter.style('height'), {
        name: 'maxTagLength',
        paint: function (control, value) {
            if (typeof value !== 'undefined') {
                control.helper.getPart('input').maxLength = value;
            }
        }
    }, {
        name: 'disabled',
        paint: function (control, disabled) {
            disabled = disabled && disabled !== 'false';
            control.helper.getPart('input').disabled = disabled;
            disabled ? control.disable() : control.enable();
        }
    });
    var template = '<span class=${tagCls} title="\u79FB\u9664" data-index="${index}">${value}</span>';
    function getTagHTML(value, index) {
        return lib.format(template, {
            value: u.escape(value),
            index: index,
            tagCls: this.helper.getPartClassName('tag')
        });
    }
    function createStructure(control) {
        control.main.innerHTML = u.map(control.getRawValue(), getTagHTML, control).join('');
        var input = control.helper.createPart('input', 'input');
        input.type = 'text';
        control.main.appendChild(input);
        var maxLength = control.get('maxTagLength');
        if (typeof maxLength !== 'undefined') {
            control.helper.getPart('input').maxLength = maxLength;
        }
    }
    function onMainClick(e) {
        var target = e.target;
        if (this.helper.isPart(target, 'tag')) {
            var index = e.target.getAttribute('data-index');
            var value = this.getRawValue();
            value.splice(index, 1);
            this.setRawValue(value.slice(0));
        }
        this.helper.getPart('input').focus();
    }
    var ENTER = 13;
    var DELETE = 8;
    function onKeyDown(e) {
        if (!this.helper.isPart(e.target, 'input')) {
            return;
        }
        switch (e.which || e.keyCode) {
        case DELETE:
            if (!e.target.value) {
                var value = this.getRawValue();
                value.pop();
                this.setRawValue(value.slice(0));
            }
            break;
        case ENTER:
            e.preventDefault();
            enterTag(this);
            break;
        }
        this.helper.getPart('input').focus();
    }
    function onKeyPress(e) {
        if (!this.helper.isPart(e.target, 'input')) {
            return;
        }
        e.which = e.which || e.charCode;
        if (e.which === this.get('valueSplit').charCodeAt(0)) {
            e.preventDefault();
            enterTag(this);
        }
    }
    function enterTag(control) {
        var inputValue = control.helper.getPart('input').value;
        var value = control.getRawValue() || [];
        if (value.length >= control.get('maxTags')) {
            return;
        }
        if (inputValue && u.indexOf(value, inputValue) === -1) {
            value.push(inputValue);
            control.setRawValue(value.slice(0));
        }
        control.helper.getPart('input').value = '';
    }
    var oo = require('eoo');
    var TagInput = oo.create(InputControl, exports);
    TagInput.defaultProperties = defaultProperties;
    ui.register(TagInput);
    return TagInput;
});
define('ui/PaletteDialog', [
    'require',
    'esui/Dialog',
    'esui/lib',
    'esui/controlHelper',
    'esui/main',
    'common/util',
    './util/color',
    'ui/Palette',
    'mini-event',
    'eoo',
    'esui'
], function (require) {
    var Dialog = require('esui/Dialog');
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var ui = require('esui/main');
    var u = require('common/util');
    var colorUtil = require('./util/color');
    require('ui/Palette');
    var exports = {};
    exports.type = 'PaletteDialog';
    exports.styleType = 'Dialog';
    exports.initOptions = function (options) {
        var properties = {
            closeButton: true,
            closeOnHide: true,
            draggable: false,
            mask: true,
            title: '\u989C\u8272\u9009\u62E9',
            needFoot: false,
            width: 612,
            roles: {},
            value: '000000',
            cacheValue: '000000'
        };
        if (options.closeOnHide === 'false') {
            options.closeOnHide = false;
        }
        if (options.closeButton === 'false') {
            options.closeButton = false;
        }
        if (options.mask === 'false') {
            options.mask = false;
        }
        if (options.needFoot === 'false') {
            options.needFoot = false;
        }
        lib.extend(properties, options);
        if (properties.needFoot) {
            if (!properties.foot) {
                properties.foot = properties.defaultFoot;
            }
        }
        this.setProperties(properties);
    };
    exports.setContent = function () {
    };
    exports.initStructure = function () {
        this.$super(arguments);
        lib.addClass(this.main, 'ui-palette-dialog');
    };
    exports.createBF = function (type, mainDOM) {
        if (mainDOM) {
            this.content = mainDOM.innerHTML;
        } else {
            mainDOM = document.createElement('div');
            this.main.appendChild(mainDOM);
        }
        lib.addClasses(mainDOM, helper.getPartClasses(this, type + '-panel'));
        if (type === 'body') {
            var panel = ui.create('Panel', { main: mainDOM });
            panel.render();
            this.addChild(panel, 'body');
            var getClasses = helper.getPartClasses;
            var html = '' + '<div class="' + getClasses(this, 'left-section') + '">' + getLeftSectionHtml(this) + '</div>' + '<div class="' + getClasses(this, 'right-section') + '">' + getRightSectionHtml(this) + '</div>';
            panel.setContent(html);
            var colorPalette = panel.getChild('palette');
            colorPalette.on('change', changePalette, this);
            var submitButton = panel.getChild('btnOk');
            var cancelButton = panel.getChild('btnCancel');
            var dialog = this;
            submitButton.on('click', function () {
                var color = colorPalette.getValue();
                updateColorHistory(dialog, color, 'old');
                dialog.fire('submit', { color: color });
            });
            require('mini-event').delegate(cancelButton, 'click', dialog, 'cancel');
            var colorTypes = [
                'red',
                'green',
                'blue'
            ];
            u.each(colorTypes, function (colorType) {
                var colorInput = dialog.getBody().getChild(colorType);
                colorInput.on('input', function (e) {
                    var value = this.getValue();
                    var colorType = this.childName;
                    dialog[colorType + 'Color'] = value;
                    synInputToPalette(dialog);
                });
            });
            return panel;
        }
        return null;
    };
    function changePalette(e) {
        var target = e.target;
        var color = target.getValue();
        updateColorInput(this, color);
        updateColorHistory(this, color, 'new');
    }
    function updateColorInput(control, color) {
        var rgb = colorUtil.hexToRGB(color);
        var colorTypes = [
            'red',
            'green',
            'blue'
        ];
        u.each(colorTypes, function (colorType) {
            var colorInput = control.getBody().getChild(colorType);
            colorInput.setValue(rgb[colorType]);
            control[colorType + 'Color'] = rgb[colorType];
        });
    }
    function synInputToPalette(control) {
        var hex = colorUtil.rgbToHex(control.redColor, control.greenColor, control.blueColor);
        var colorPalette = getColorPalette(control);
        colorPalette.setValue(hex);
        updateColorHistory(control, hex, 'new');
    }
    function updateColorHistory(control, color, type) {
        var colorBlock = lib.g(helper.getId(control, 'color-compare-' + type));
        colorBlock.style.background = '#' + color;
        if (type === 'new') {
            control.cacheValue = color;
        } else {
            control.value = color;
        }
    }
    function getLeftSectionHtml(control) {
        var getClasses = helper.getPartClasses;
        var html = '' + '<div data-ui-type="Palette" data-ui-child-name="palette">' + '</div>' + '<div class="' + getClasses(control, 'color-input') + '">' + getColorFieldHTML(control, 'red', '\u7EA2\u8272') + getColorFieldHTML(control, 'green', '\u7EFF\u8272') + getColorFieldHTML(control, 'blue', '\u84DD\u8272') + '</div>';
        return html;
    }
    function getRightSectionHtml(control) {
        var getClasses = helper.getPartClasses;
        var getId = helper.getId;
        var html = '' + '<div class="' + getClasses(control, 'color-operate') + '">' + '<div data-ui="type:Button;id:btnOk;childName:btnOk;">\u786E\u5B9A</div>' + '<div data-ui="type:Button;id:btnCancel;childName:btnCancel;">\u53D6\u6D88</div>' + '</div>' + '<div class="' + getClasses(control, 'color-compare') + '">' + '<div class="' + getClasses(control, 'color-compare-title') + '">\u65B0\u589E</div>' + '<div id="' + getId(control, 'color-compare-new') + '" ' + 'class="' + getClasses(control, 'color-compare-block') + '"></div>' + '<div id="' + getId(control, 'color-compare-old') + '" ' + 'class="' + getClasses(control, 'color-compare-block') + '"></div>' + '<div class="' + getClasses(control, 'color-compare-title') + '">\u5F53\u524D</div>' + '</div>';
        return html;
    }
    function getColorFieldHTML(control, colorType, colorText) {
        var getClasses = helper.getPartClasses;
        var id = helper.getId(control, colorType);
        var html = '' + '<div class="' + getClasses(control, 'color-field') + '">' + '<label for="' + id + '">' + colorText + '\uFF1A</label>' + '<input id="' + id + '" data-ui-type="TextBox" ' + 'data-ui-child-name="' + colorType + '" />' + '</div>';
        return html;
    }
    function getColorPalette(control) {
        var panel = control.getChild('body');
        var colorPalette = panel.getChild('palette');
        return colorPalette;
    }
    exports.repaint = helper.createRepaint(Dialog.prototype.repaint, {
        name: 'value',
        paint: function (dialog, value) {
            if (!value) {
                return;
            }
            var body = dialog.getBody();
            var colorPalette = body.getChild('palette');
            colorPalette.setProperties({ rawValue: value });
            updateColorInput(dialog, value);
            updateColorHistory(dialog, value, 'old');
            updateColorHistory(dialog, value, 'new');
        }
    });
    var PaletteDialog = require('eoo').create(Dialog, exports);
    require('esui').register(PaletteDialog);
    return PaletteDialog;
});
define('ui/Palette', [
    'require',
    'esui/lib',
    'esui/controlHelper',
    'esui/InputControl',
    './util/color',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var InputControl = require('esui/InputControl');
    var exports = {};
    exports.type = 'Palette';
    exports.initOptions = function (options) {
        var properties = { rawValue: '0000ff' };
        lib.extend(properties, this.$self.defaultProperties, options);
        this.setProperties(properties);
    };
    exports.initStructure = function () {
        var getClasses = helper.getPartClasses;
        function begin(control, tag, part) {
            return lib.format('<' + tag + ' id="${id}" class="${classes}">', {
                id: helper.getId(control, part),
                classes: getClasses(control, part).join(' ')
            });
        }
        function end(control, tag, part) {
            return lib.format('</' + tag + '>', {
                id: helper.getId(control, part),
                classes: getClasses(control, part).join(' ')
            });
        }
        var html = [
            begin(this, 'div', 'canvas'),
            begin(this, 'span', 'canvas-pointer'),
            end(this, 'span', 'canvas-pointer'),
            end(this, 'div', 'canvas'),
            begin(this, 'div', 'light'),
            begin(this, 'div', 'light-slider'),
            begin(this, 'div', 'light-mask'),
            end(this, 'div', 'light-mask'),
            end(this, 'div', 'light-slider'),
            begin(this, 'div', 'light-pointer'),
            end(this, 'div', 'light-pointer'),
            end(this, 'div', 'light')
        ];
        this.main.innerHTML = html.join('');
        var canvas = lib.g(helper.getId(this, 'canvas'));
        helper.addDOMEvent(this, canvas, 'click', syncBaseColor);
        var slider = lib.g(helper.getId(this, 'light'));
        helper.addDOMEvent(this, slider, 'click', syncSaturation);
    };
    function syncBaseColor(e) {
        this.hue = e.offsetX / e.target.offsetWidth * 360;
        this.saturation = 1 - e.offsetY / e.target.offsetHeight;
        syncColorToValue.call(this);
        syncColorToCanvas.call(this);
    }
    function syncSaturation(e) {
        this.light = Math.min(1 - e.offsetY / e.target.offsetHeight, 1);
        syncColorToValue.call(this);
        syncColorToCanvas.call(this);
    }
    function syncColorToValue() {
        var color = require('./util/color').hslToHex(this.hue, this.saturation, this.light);
        if (color !== this.rawValue) {
            this.rawValue = color;
            this.fire('change');
        }
    }
    function syncColorToCanvas() {
        var canvas = lib.g(helper.getId(this, 'canvas'));
        var canvasPointer = lib.g(helper.getId(this, 'canvas-pointer'));
        var canvasX = this.hue / 360 * canvas.offsetWidth;
        canvasX -= canvasPointer.offsetWidth / 2;
        var canvasY = (1 - this.saturation) * canvas.offsetHeight;
        canvasY -= canvasPointer.offsetHeight / 2;
        canvasPointer.style.left = Math.round(canvasX) + 'px';
        canvasPointer.style.top = Math.round(canvasY) + 'px';
        var baseColor = require('./util/color').hslToHex(this.hue, this.saturation, 0.5);
        var lightSlider = lib.g(helper.getId(this, 'light-slider'));
        lightSlider.style.backgroundColor = '#' + baseColor;
        var light = lib.g(helper.getId(this, 'light'));
        var lightPointer = lib.g(helper.getId(this, 'light-pointer'));
        var lightY = (1 - this.light) * light.offsetHeight;
        lightY -= lightPointer.offsetHeight / 2;
        lightPointer.style.top = Math.round(lightY) + 'px';
    }
    exports.repaint = helper.createRepaint(InputControl.prototype.repaint, {
        name: 'rawValue',
        paint: function (palette, rawValue) {
            var colorUtil = require('./util/color');
            var hsl = colorUtil.hexToHSL(rawValue);
            palette.hue = hsl.hue;
            palette.saturation = hsl.saturation;
            palette.light = hsl.light;
            syncColorToCanvas.call(palette);
        }
    });
    var Palette = require('eoo').create(InputControl, exports);
    Palette.defaultProperties = {
        canvasWidth: 180,
        canvasHeight: 140,
        width: 200,
        height: 140
    };
    require('esui').register(Palette);
    return Palette;
});
define('ui/NonSelectTreeStrategy', [
    'require',
    'esui/lib'
], function (require) {
    var lib = require('esui/lib');
    function NonSelectTreeStrategy(options) {
        var defaults = { defaultExpand: true };
        lib.extend(this, defaults, options);
    }
    NonSelectTreeStrategy.prototype.isLeafNode = function (node) {
        return !node.children || !node.children.length;
    };
    NonSelectTreeStrategy.prototype.shouldExpand = function (node) {
        return this.defaultExpand;
    };
    NonSelectTreeStrategy.prototype.attachTo = function (tree) {
        this.enableToggleStrategy(tree);
        this.enableSelectStrategy(tree);
    };
    NonSelectTreeStrategy.prototype.enableToggleStrategy = function (tree) {
        tree.on('expand', function (e) {
            this.expandNode(e.node.id);
        });
        tree.on('collapse', function (e) {
            this.collapseNode(e.node.id, false);
        });
    };
    NonSelectTreeStrategy.prototype.enableSelectStrategy = function (tree) {
        tree.on('select', function (e) {
            return;
        });
        tree.on('unselect', function (e) {
            return;
        });
    };
    return NonSelectTreeStrategy;
});
define('ui/InputRichSelector', [
    'require',
    'esui/TextLine',
    'ub-ria-ui/RichSelector',
    'esui/lib',
    'esui/painters',
    'common/util',
    'eoo',
    'esui'
], function (require) {
    require('esui/TextLine');
    var RichSelector = require('ub-ria-ui/RichSelector');
    var lib = require('esui/lib');
    var painter = require('esui/painters');
    var u = require('common/util');
    var exports = {};
    exports.type = 'InputRichSelector';
    exports.styleType = 'RichSelector';
    exports.template = '' + '<h4 class="${title}">\u6BCF\u884C\u8F93\u5165\u4E00\u4E2A\u503C\uFF0C\u4EE5\u56DE\u8F66\u6362\u884C</h4>' + '<textarea class="${input}" data-ui="type:TextLine;title:URL;' + 'height:${height};width:${width};childName:input;orientUrl:100">' + '</textarea><div class="${add}" ' + 'data-ui="type:Button;childName:add;width:30">\u6DFB\u52A0</div>';
    exports.initStructure = function () {
        this.$super(arguments);
        lib.addClass(this.main, 'ui-input-richselector');
        var html = lib.format(this.template, {
            title: this.helper.getPartClasses('title')[0],
            input: this.helper.getPartClasses('input')[0],
            add: this.helper.getPartClasses('add')[0],
            width: this.width ? this.width - 20 : 205,
            height: this.height ? this.height - 125 : 340
        });
        var queryList = this.getQueryList();
        queryList.setContent(html);
        this.adjustHeight();
        queryList.getChild('add').on('click', addValue, this);
    };
    function addValue() {
        if (this.validate()) {
            var value = lib.trim(this.getValue());
            value && this.fire('add', { items: value.split('\n') });
        }
    }
    exports.repaint = painter.createRepaint(RichSelector.prototype.repaint, {
        name: 'datasource',
        paint: function (control, datasource) {
            if (datasource && u.isArray(datasource)) {
                control.setRawValue(datasource.slice(0));
            }
        }
    });
    exports.getInput = function () {
        return this.getQueryList().getChild('input');
    };
    exports.validate = function () {
        return this.getInput().validate();
    };
    exports.getRawValue = function () {
        return this.getInput().getRawValue();
    };
    exports.setRawValue = function (value) {
        return this.getInput().setRawValue(value);
    };
    exports.getValue = function () {
        return this.getInput().getValue();
    };
    exports.setValue = function (value) {
        return this.getInput().setValue(value);
    };
    exports.getSelectedItems = function () {
        return this.getValue().split(/\r?\n/);
    };
    var InputRichSelector = require('eoo').create(RichSelector, exports);
    require('esui').register(InputRichSelector);
    return InputRichSelector;
});
define('ui/Image', [
    'require',
    'esui/Control',
    'common/util',
    'esui/painters',
    'esui/lib',
    'eoo',
    'esui'
], function (require) {
    var Control = require('esui/Control');
    var u = require('common/util');
    var exports = {};
    exports.type = 'Image';
    exports.createMain = function () {
        return document.createElement('figure');
    };
    exports.initOptions = function (options) {
        options = u.clone(options);
        var defaultProperties = {
            imageType: 'auto',
            icon: true
        };
        if (options.icon === 'false') {
            options.icon = false;
        } else {
            options.icon = true;
        }
        u.extend(defaultProperties, options);
        this.setProperties(defaultProperties);
    };
    exports.initStructure = function () {
        var html = [this.helper.getPartHTML('content', 'div')];
        if (this.icon) {
            html.push([
                this.helper.getPartBeginTag('footer', 'footer'),
                this.helper.getPartBeginTag('magnifier', 'span'),
                '\u653E\u5927\u663E\u793A',
                this.helper.getPartEndTag('magnifier', 'span'),
                this.helper.getPartEndTag('footer', 'footer')
            ].join(''));
        }
        this.main.innerHTML = html.join('');
        if (this.icon) {
            this.helper.addDOMEvent('magnifier', 'click', this.displayFullSize);
        }
    };
    exports.repaint = require('esui/painters').createRepaint(Control.prototype.repaint, {
        name: [
            'url',
            'width',
            'height'
        ],
        paint: function (image, url) {
            if (!url) {
                image.restoreInitialState();
                return;
            }
            var html = image.getPreviewHTML();
            image.helper.getPart('content').innerHTML = html;
            image.removeState('empty');
        }
    });
    exports.restoreInitialState = function () {
        this.url = null;
        this.width = null;
        this.height = null;
        var content = this.helper.getPart('content');
        content.innerHTML = '';
        this.addState('empty');
    };
    exports.getActualImageType = function () {
        if (this.imageType !== 'auto') {
            return this.imageType;
        }
        var match = /\.\w+$/.exec(this.url);
        if (!match) {
            return null;
        }
        var extension = match[0];
        var type = 'image';
        if (extension === '.swf' || extension === '.flv') {
            type = 'flash';
        }
        return type;
    };
    var imageTemplate = [
        '<img src="${url}" ',
        '${widthAttribute} ${heightAttribute} />'
    ].join('');
    var flashTemplate = [
        '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" ',
        '    align="middle" ',
        '    ${widthAttribute} ${heightAttribute}>',
        '    <param name="allowScriptAccess" value="never">',
        '    <param name="quality" value="high">',
        '    <param name="wmode" value="transparent">',
        '    <param name="movie" value="${url}">',
        '    <embed wmode="transparent" src="${url}" ',
        '        quality="high" align="middle" allowScriptAccess="always" ',
        '        ${widthAttribute} ${heightAttribute} ',
        '        type="application/x-shockwave-flash" />',
        '</object>'
    ].join('');
    exports.getPreviewHTML = function () {
        var type = this.getActualImageType();
        if (!type) {
            return '<strong>\u65E0\u6CD5\u9884\u89C8\u8BE5\u683C\u5F0F</strong>';
        }
        var data = {
            url: this.url,
            widthAttribute: this.width ? 'width="' + this.width + '"' : '',
            heightAttribute: this.height ? 'height="' + this.height + '"' : ''
        };
        var htmlSegment = '<strong>\u65E0\u6CD5\u9884\u89C8\u8BE5\u683C\u5F0F</strong>';
        if (type === 'image') {
            htmlSegment = u.template(imageTemplate, data);
        } else if (type === 'flash') {
            htmlSegment = u.template(flashTemplate, data);
        }
        return htmlSegment;
    };
    exports.displayFullSize = function () {
        if (!this.url) {
            return;
        }
        var mask = this.helper.createPart('full-size-mask');
        document.body.appendChild(mask);
        var content = this.helper.createPart('full-size-content');
        content.innerHTML = this.getPreviewHTML();
        if (this.width && this.height) {
            content.style.top = '50%';
            content.style.left = '50%';
            content.style.marginLeft = -Math.round(this.width / 2) + 'px';
            content.style.marginTop = -Math.round(this.height / 2) + 'px';
        }
        document.body.appendChild(content);
        var close = this.helper.createPart('full-size-close');
        close.innerHTML = 'X';
        document.body.appendChild(close);
        this.helper.addDOMEvent(close, 'click', this.cancelFullSize);
    };
    exports.cancelFullSize = function () {
        var lib = require('esui/lib');
        var mask = this.helper.getPart('full-size-mask');
        lib.removeNode(mask);
        var content = this.helper.getPart('full-size-content');
        lib.removeNode(content);
        var close = this.helper.getPart('full-size-close');
        this.helper.clearDOMEvents(close);
        lib.removeNode(close);
    };
    var Image = require('eoo').create(Control, exports);
    require('esui').register(Image);
    return Image;
});
define('ui/Hidden', [
    'require',
    'esui/lib',
    'esui/main',
    'esui/InputControl',
    'common/util',
    'esui/painters'
], function (require) {
    var lib = require('esui/lib');
    var ui = require('esui/main');
    var InputControl = require('esui/InputControl');
    var u = require('common/util');
    function Hidden(options) {
        InputControl.apply(this, arguments);
    }
    lib.inherits(Hidden, InputControl);
    Hidden.prototype.type = 'Hidden';
    Hidden.prototype.initStructure = function () {
        if (lib.isInput(this.main)) {
            var main = this.helper.replaceMain();
            lib.removeAttribute(this.main, 'tabindex');
            this.inputId = main.id || this.helper.getId('input');
            if (this.main.id) {
                this.main.id = this.helper.getId();
            }
            var input = main.cloneNode(false);
            lib.removeAttribute(input, ui.getConfig('instanceAttr'));
            input.id = this.inputId;
            this.main.appendChild(input);
        } else {
            this.inputId = this.helper.getId('input');
            var html = '<input type="hidden" id="' + this.inputId + '"';
            if (this.name) {
                html += ' name="' + u.escape(this.name) + '"';
            }
            html += ' />';
            this.main.innerHTML = html;
        }
        this.main.style.display = 'none';
    };
    Hidden.prototype.repaint = require('esui/painters').createRepaint(InputControl.prototype.repaint, {
        name: 'rawValue',
        paint: function (hiddenInput, rawValue) {
            var input = lib.g(hiddenInput.inputId);
            input.value = hiddenInput.stringifyValue(rawValue);
        }
    });
    Hidden.prototype.getRawValue = function () {
        var input = lib.g(this.inputId);
        return input ? input.value : this.rawValue || this.value || '';
    };
    ui.register(Hidden);
    return Hidden;
});
define('ui/GroupTableRichSelector', [
    'require',
    'esui/lib',
    'esui/painters',
    'common/util',
    'ub-ria/util',
    'ub-ria-ui/RichSelector',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var painter = require('esui/painters');
    var u = require('common/util');
    var util = require('ub-ria/util');
    var RichSelector = require('ub-ria-ui/RichSelector');
    var CLASSES = null;
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        if (!CLASSES) {
            var getClasses = u.bind(this.helper.getPartClasses, this.helper);
            CLASSES = {
                group: getClasses('group')[0],
                groupTitle: getClasses('group-title')[0],
                groupList: getClasses('group-list')[0],
                item: getClasses('group-item')[0],
                content: getClasses('group-item-content')[0]
            };
        }
    };
    exports.type = 'GroupTableRichSelector';
    exports.styleType = 'RichSelector';
    exports.groupTemplate = '' + '<div data-ui="type:Panel;states:${state}">' + '<h4 class="${groupTitle}">${groupName}</h4>' + '<ul class="${groupList}">${listHTML}</ul>' + '</div>';
    exports.itemTemplate = '' + '<li class="${itemCls}" data-index="${index}" ' + 'data-group-index="${groupIndex}">' + '<span class="${contentCls}">${itemName}</span>' + '</li>';
    exports.getGroupHTML = function (group, index) {
        var data = group.data;
        var listHTML = '';
        for (var i = 0, len = data.length; i < len; i++) {
            listHTML += this.getItemHTML(data[i], i, index);
        }
        return lib.format(this.groupTemplate, {
            groupId: u.escape(group.id),
            groupTitle: CLASSES.groupTitle,
            groupList: CLASSES.groupList,
            groupName: u.escape(group.name),
            state: group.state || '',
            listHTML: listHTML
        });
    };
    exports.getItemHTML = function (data, index, groupIndex) {
        return lib.format(this.itemTemplate, {
            itemCls: CLASSES.item,
            index: index,
            groupIndex: groupIndex,
            contentCls: CLASSES.content,
            itemName: u.escape(data.name || data)
        });
    };
    exports.refreshContent = function () {
        var data = this.allData;
        if (!data || data.length === 0) {
            this.addState('empty');
        } else {
            this.removeState('empty');
        }
        var html = '';
        for (var i = 0, len = data.length; i < len; i++) {
            html += this.getGroupHTML(data[i], i);
        }
        var queryList = this.getQueryList();
        queryList.setContent(html);
    };
    exports.initStructure = function () {
        this.$super(arguments);
        lib.addClass(this.main, 'ui-group-table-richselector');
    };
    exports.repaint = painter.createRepaint(RichSelector.prototype.repaint, {
        name: 'datasource',
        paint: function (control, datasource) {
            control.refresh();
            control.fire('change');
        }
    });
    exports.adaptData = function () {
        var allData = util.deepClone(this.datasource);
        this.allData = allData || [];
        return {};
    };
    exports.eventDispatcher = function (e) {
        var target = e.target;
        if (this.helper.isPart(target, 'group-item-content')) {
            target = target.parentNode;
        }
        if (this.helper.isPart(target, 'group-item')) {
            deleteItem.call(this, target);
        }
    };
    function deleteItem(target) {
        var groupIndex = target.getAttribute('data-group-index');
        var index = target.getAttribute('data-index');
        var allData = this.allData;
        var group = allData[groupIndex];
        var item = group.data.splice(index, 1);
        !group.data.length && allData.splice(groupIndex, 1);
        this.set('datasource', allData);
        this.fire('delete', {
            items: [{
                    id: group.id,
                    name: group.name,
                    state: group.state,
                    data: item
                }]
        });
        this.fire('change');
    }
    exports.deleteAll = function () {
        var items = u.clone(this.datasource);
        this.set('datasource', []);
        this.fire('delete', { items: items });
        this.fire('change');
    };
    exports.getSelectedItems = function () {
        return this.allData;
    };
    exports.modifyGroup = function (group) {
        if (group) {
            var allData = this.allData || [];
            var old = null;
            for (var i = allData.length - 1; i >= 0; i--) {
                if (allData[i].id === group.id) {
                    old = allData[i];
                    allData[i] = group;
                    break;
                }
            }
            !old && allData.push(group);
            this.set('datasource', allData);
        }
    };
    exports.getCurrentStateItemsCount = function () {
        return this.allData.length;
    };
    var GroupTableRichSelector = require('eoo').create(RichSelector, exports);
    require('esui').register(GroupTableRichSelector);
    return GroupTableRichSelector;
});
define('ui/FormViewPanel', [
    'require',
    'promise',
    'esui/main',
    'ui/ChildViewPanel',
    'eoo'
], function (require) {
    var Promise = require('promise');
    var ui = require('esui/main');
    var exports = {};
    exports.type = 'FormViewPanel';
    exports.getCategory = function () {
        return 'input';
    };
    exports.getRawValue = function () {
        var rawValue = null;
        var view = this.view;
        if (typeof view.getViewData === 'function') {
            rawValue = view.getViewData();
        }
        return rawValue;
    };
    exports.setRawValue = function (rawValue) {
        var setDataToView = function (view) {
            if (typeof view.setViewData === 'function') {
                view.setViewData(rawValue);
            }
            return view;
        };
        return Promise.resolve(this.view).then(setDataToView);
    };
    exports.setReadOnly = function (readOnly) {
        var setReadOnly = function (view) {
            if (typeof view.setReadOnly === 'function') {
                view.setReadOnly(readOnly);
            }
            return view;
        };
        return Promise.resolve(this.view).then(setReadOnly);
    };
    exports.disableInputControls = function () {
        var disable = function (view) {
            if (typeof view.disableInputControls === 'function') {
                view.disableInputControls();
            }
            return view;
        };
        return Promise.resolve(this.view).then(disable);
    };
    exports.enableInputControls = function () {
        var enable = function (view) {
            if (typeof view.enableInputControls === 'function') {
                view.enableInputControls();
            }
            return view;
        };
        return Promise.resolve(this.view).then(enable);
    };
    exports.notifyErrors = function (errors) {
        var notify = function (view) {
            if (typeof view.notifyErrors === 'function') {
                view.notifyErrors(errors);
            }
            return view;
        };
        return Promise.resolve(this.view).then(notify);
    };
    exports.validate = function () {
        if (typeof this.view.validate === 'function') {
            return this.view.validate();
        }
        return true;
    };
    var ChildViewPanel = require('ui/ChildViewPanel');
    var FormViewPanel = require('eoo').create(ChildViewPanel, exports);
    ui.register(FormViewPanel);
    return FormViewPanel;
});
define('ui/Ellipsis', [
    'require',
    'esui/Label',
    'esui/lib',
    'esui/controlHelper',
    'esui/Control',
    'esui'
], function (require) {
    require('esui/Label');
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var Control = require('esui/Control');
    function Ellipsis(options) {
        Control.apply(this, arguments);
    }
    lib.inherits(Ellipsis, Control);
    Ellipsis.prototype.type = 'Ellipsis';
    Ellipsis.prototype.initOptions = function (options) {
        var properties = {
            maxLength: 2,
            tail: '\u9879',
            emptyText: '\u672A\u9009\u62E9',
            datasource: []
        };
        lib.extend(properties, options);
        this.setProperties(properties);
    };
    Ellipsis.prototype.initStructure = function () {
        var html = [
            '<span id="${generalInfoId}" class="${generalInfoClasses}">',
            '</span>',
            '<div id="${detailInfoId}" class="${detailInfoClasses}">',
            '</div>',
            '<span id="${toggleButtonId}" class="${toggleButtonClasses}">',
            '\u5C55\u5F00</span>'
        ].join('\n');
        var getClass = helper.getPartClasses;
        var getId = helper.getId;
        html = lib.format(html, {
            generalInfoId: getId(this, 'general-info'),
            detailInfoId: getId(this, 'detail-info'),
            toggleButtonId: getId(this, 'toggle-button'),
            generalInfoClasses: getClass(this, 'general-info').join(' '),
            detailInfoClasses: getClass(this, 'detail-info').join(' '),
            toggleButtonClasses: getClass(this, 'toggle-button').join(' ')
        });
        this.main.innerHTML = html;
        this.initChildren(this.main);
        var toggleButton = lib.g(getId(this, 'toggle-button'));
        helper.addDOMEvent(this, toggleButton, 'click', lib.curry(toggleParagraph, this));
    };
    function toggleParagraph() {
        var toggleButton = lib.g(helper.getId(this, 'toggle-button'));
        if (this.hasState('expand')) {
            this.removeState('expand');
            toggleButton.innerHTML = '\u5C55\u5F00';
        } else {
            this.addState('expand');
            toggleButton.innerHTML = '\u6536\u8D77';
        }
    }
    Ellipsis.prototype.repaint = helper.createRepaint(Control.prototype.repaint, {
        name: 'datasource',
        paint: ellipse
    });
    function ellipse(ellipsis, datasource) {
        ellipsis.removeState('static');
        if (!datasource) {
            return;
        }
        var generalInfo = lib.g(helper.getId(ellipsis, 'general-info'));
        var dataLength = datasource.length;
        if (!dataLength) {
            ellipsis.addState('static');
            generalInfo.innerHTML = lib.encodeHTML(ellipsis.emptyText);
            return;
        }
        var soOn = '\u7B49' + dataLength + '\u4E2A' + ellipsis.tail;
        if (ellipsis.maxLength > dataLength) {
            soOn = '';
            ellipsis.addState('static');
        } else {
            var detailInfo = lib.g(helper.getId(ellipsis, 'detail-info'));
            detailInfo.innerHTML = lib.encodeHTML(datasource.join('\u3001'));
        }
        var generalText = datasource.slice(0, ellipsis.maxLength);
        generalInfo.innerHTML = lib.encodeHTML(generalText.join('\u3001')) + soOn;
    }
    require('esui').register(Ellipsis);
    return Ellipsis;
});
define('ui/SimpleColorPicker', [
    'require',
    'esui/lib',
    'esui/controlHelper',
    'esui/InputControl',
    'common/util',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var InputControl = require('esui/InputControl');
    var u = require('common/util');
    var exports = {};
    exports.type = 'SimpleColorPicker';
    exports.initOptions = function (options) {
        var properties = {};
        lib.extend(properties, this.$self.defaultProperties, options);
        this.setProperties(properties);
    };
    function syncValue(colorPicker) {
        var blocks = colorPicker.main.getElementsByTagName('span');
        var blockClass = colorPicker.helper.getPartClasses('block')[0];
        u.each(blocks, function (block) {
            if (lib.hasClass(block, blockClass)) {
                var color = lib.getAttribute(block, 'data-value');
                if (color === this.rawValue) {
                    this.helper.addPartClasses('selected', block);
                } else {
                    this.helper.removePartClasses('selected', block);
                }
            }
        }, colorPicker);
    }
    exports.initStructure = function () {
        this.main.innerHTML = createColorBlocks(this);
        this.helper.addDOMEvent(this.main, 'click', chooseColor);
    };
    function createColorBlocks(colorPicker) {
        var blockTemplate = '' + '<span class="' + colorPicker.helper.getPartClassName('block') + '" ' + 'title="${text}" ' + 'data-value="${value}" ' + 'style="background-color: ${diplayValue}">' + '${text}' + '</span>';
        var html = '';
        u.each(colorPicker.colors, function (color, index) {
            color.diplayValue = color.value;
            if (color.value.indexOf('#') < 0) {
                color.diplayValue = '#' + color.value;
            }
            html += lib.format(blockTemplate, color);
        });
        html += '</div>';
        return html;
    }
    function chooseColor(e) {
        var blockClass = this.helper.getPartClasses('block')[0];
        if (lib.hasClass(e.target, blockClass)) {
            var color = lib.getAttribute(e.target, 'data-value');
            this.setRawValue(color);
        }
    }
    exports.repaint = helper.createRepaint(InputControl.prototype.repaint, {
        name: 'rawValue',
        paint: function (colorPicker, rawValue) {
            syncValue(colorPicker);
        }
    });
    exports.setProperties = function (properties) {
        var changes = this.$super(arguments);
        if (changes.hasOwnProperty('rawValue')) {
            this.fire('change');
        }
        return changes;
    };
    var SimpleColorPicker = require('eoo').create(InputControl, exports);
    SimpleColorPicker.defaultProperties = {
        colors: [
            {
                text: '#ffffff',
                value: 'ffffff'
            },
            {
                text: '#ededed',
                value: 'ededed'
            },
            {
                text: '#d2d2d2',
                value: 'd2d2d2'
            },
            {
                text: '#bfbfbf',
                value: 'bfbfbf'
            },
            {
                text: '#a0a0a0',
                value: 'a0a0a0'
            },
            {
                text: '#898989',
                value: '898989'
            },
            {
                text: '#6f6f6f',
                value: '6f6f6f'
            },
            {
                text: '#626262',
                value: '626262'
            },
            {
                text: '#434343',
                value: '434343'
            },
            {
                text: '#333333',
                value: '333333'
            },
            {
                text: '#1b1b1b',
                value: '1b1b1b'
            },
            {
                text: '#000000',
                value: '000000'
            },
            {
                text: '#50a7f9',
                value: '50a7f9'
            },
            {
                text: '#6ebf40',
                value: '6ebf40'
            },
            {
                text: '#fff45c',
                value: 'fff45c'
            },
            {
                text: '#f39017',
                value: 'f39017'
            },
            {
                text: '#ec5d57',
                value: 'ec5d57'
            },
            {
                text: '#b36ae2',
                value: 'b36ae2'
            },
            {
                text: '#0065c0',
                value: '0065c0'
            },
            {
                text: '#92d500',
                value: '92d500'
            },
            {
                text: '#f5d327',
                value: 'f5d327'
            },
            {
                text: '#c82503',
                value: 'c82503'
            },
            {
                text: '#f39017',
                value: 'f39017'
            },
            {
                text: '#ec5d57',
                value: 'ec5d57'
            },
            {
                text: '#86ccc8',
                value: '86ccc8'
            },
            {
                text: '#acd599',
                value: 'acd599'
            },
            {
                text: '#7fcdf4',
                value: '7fcdf4'
            },
            {
                text: '#8c97cb',
                value: '8c97cb'
            },
            {
                text: '#aa8abd',
                value: 'aa8abd'
            },
            {
                text: '#f19fc2',
                value: 'f19fc2'
            },
            {
                text: '#f26071',
                value: 'f26071'
            },
            {
                text: '#e60013',
                value: 'e60013'
            },
            {
                text: '#eb6102',
                value: 'eb6102'
            },
            {
                text: '#f8b551',
                value: 'f8b551'
            },
            {
                text: '#7fc169',
                value: '7fc169'
            },
            {
                text: '#009d97',
                value: '009d97'
            },
            {
                text: '#0068b7',
                value: '0068b7'
            },
            {
                text: '#1e2087',
                value: '1e2087'
            },
            {
                text: '#611986',
                value: '611986'
            },
            {
                text: '#920783',
                value: '920783'
            },
            {
                text: '#e5007f',
                value: 'e5007f'
            },
            {
                text: '#a40000',
                value: 'a40000'
            },
            {
                text: '#a84300',
                value: 'a84300'
            },
            {
                text: '#cea973',
                value: 'cea973'
            },
            {
                text: '#996b34',
                value: '996b34'
            },
            {
                text: '#81511c',
                value: '81511c'
            },
            {
                text: '#372f2c',
                value: '372f2c'
            },
            {
                text: '#a6927d',
                value: 'a6927d'
            }
        ],
        mode: 'block'
    };
    require('esui').register(SimpleColorPicker);
    return SimpleColorPicker;
});
define('ui/FullColorPicker', [
    'require',
    'esui/Control',
    'esui/controlHelper',
    'esui/lib',
    'common/util',
    './AdvancedColorPicker',
    './SimpleColorPicker',
    'eoo',
    'esui'
], function (require) {
    var Control = require('esui/Control');
    var helper = require('esui/controlHelper');
    var lib = require('esui/lib');
    var u = require('common/util');
    require('./AdvancedColorPicker');
    require('./SimpleColorPicker');
    var exports = {};
    exports.type = 'FullColorPicker';
    exports.initOptions = function (options) {
        var properties = {
            hex: '000000',
            displayHex: '000000',
            alpha: 100,
            displayAlpha: 100,
            defaultMode: 'simple',
            switchable: true,
            hasAlpha: true
        };
        lib.extend(properties, options);
        if (properties.mode === 'full' || properties.switchable === 'false') {
            properties.switchable = false;
        }
        this.setProperties(properties);
    };
    exports.initStructure = function () {
        var html = [];
        var advancedHTML = generateAdvancedHTML.call(this);
        var simpleHTML = generateSimpleHTML.call(this);
        if (this.defaultMode === 'full' || this.switchable === true) {
            html = [
                advancedHTML,
                simpleHTML
            ];
            if (this.switchable === true) {
                var switchClass = this.helper.getPartClassName('mode-switch');
                html.push('<div data-ui-type="Button" data-ui-child-name="switch" ');
                html.push('class="' + switchClass + '">\u5B8C\u6574\u6A21\u5F0F</div>');
            }
        } else if (this.defaultMode === 'simple') {
            html = [simpleHTML];
        } else {
            html = [advancedHTML];
        }
        this.main.innerHTML = html.join('');
        this.initChildren();
        this.currentMode = this.defaultMode;
        this.addState(this.defaultMode);
    };
    function generateAdvancedHTML() {
        return '' + '<div class="' + this.helper.getPartClassName('advanced-section') + '">' + '  <div data-ui-type="AdvancedColorPicker" data-ui-child-name="advanced">' + '  </div>' + '</div>';
    }
    function generateSimpleHTML() {
        return '' + '<div class="' + this.helper.getPartClassName('simple-section') + '">' + '  <div data-ui-type="SimpleColorPicker" data-ui-child-name="simple">' + '  </div>' + '</div>';
    }
    function switchState() {
        var newMode;
        var switchButton = this.getChild('switch');
        if (this.currentMode === 'full') {
            newMode = this.defaultMode;
            switchButton.setContent('\u5B8C\u6574\u6A21\u5F0F');
        } else {
            newMode = 'full';
            if (this.currentMode === 'simple') {
                switchButton.setContent('\u7B80\u5355\u6A21\u5F0F');
            } else {
                switchButton.setContent('\u590D\u6742\u6A21\u5F0F');
            }
        }
        this.removeState(this.currentMode);
        this.addState(newMode);
        this.currentMode = newMode;
    }
    exports.initEvents = function () {
        var control = this;
        var advancedColorPicker = this.getChild('advanced');
        if (advancedColorPicker) {
            advancedColorPicker.on('change', function () {
                var hex = this.getDisplayHex();
                var alpha = this.getDisplayAlpha();
                control.displayHex = hex;
                control.displayAlpha = alpha;
                updateSimpleColorPicker.call(control);
                control.fire('change');
            });
        }
        var SimpleColorPicker = this.getChild('simple');
        if (SimpleColorPicker) {
            SimpleColorPicker.on('change', function () {
                var color = this.getRawValue();
                control.displayHex = color;
                updateAdvancedColorPicker.call(control);
                control.fire('change');
            });
        }
        var switchButton = this.getChild('switch');
        if (switchButton) {
            switchButton.on('click', u.bind(switchState, this));
        }
    };
    function updateAdvancedColorPicker() {
        var colorPicker = this.getChild('advanced');
        if (colorPicker) {
            var color = this.displayHex;
            colorPicker.updateHex(color);
            var alpha = this.displayAlpha;
            colorPicker.updateAlpha(alpha);
        }
    }
    function updateSimpleColorPicker() {
        var colorPicker = this.getChild('simple');
        if (colorPicker) {
            colorPicker.setProperties({ rawValue: this.displayHex });
        }
    }
    exports.repaint = helper.createRepaint(Control.prototype.repaint, {
        name: [
            'hex',
            'alpha'
        ],
        paint: function (colorPicker, hex, alpha) {
            if (hex == null && alpha == null) {
                return;
            }
            colorPicker.displayHex = hex;
            colorPicker.displayAlpha = alpha;
            var advanced = colorPicker.getChild('advanced');
            if (advanced) {
                advanced.setProperties({
                    hex: hex,
                    alpha: alpha
                });
            }
            var simple = colorPicker.getChild('simple');
            if (simple) {
                simple.setProperties({ rawValue: hex });
            }
        }
    });
    exports.getDisplayHex = function () {
        return this.displayHex;
    };
    exports.getDisplayAlpha = function () {
        return this.displayAlpha;
    };
    var AdvancedColorPicker = require('eoo').create(Control, exports);
    require('esui').register(AdvancedColorPicker);
    return AdvancedColorPicker;
});
define('ui/ColorPicker', [
    'require',
    'esui/controlHelper',
    'common/util',
    'esui/lib',
    'esui/main',
    'esui/InputControl',
    './FullColorPicker',
    'esui/Overlay',
    'eoo',
    'esui'
], function (require) {
    var helper = require('esui/controlHelper');
    var u = require('common/util');
    var lib = require('esui/lib');
    var ui = require('esui/main');
    var InputControl = require('esui/InputControl');
    require('./FullColorPicker');
    require('esui/Overlay');
    var exports = {};
    exports.type = 'ColorPicker';
    exports.initOptions = function (options) {
        var properties = {
            displayMode: 'attached',
            featureMode: 'simple',
            switchable: false,
            hex: '000000',
            alpha: 100,
            supportAlpha: true
        };
        lib.extend(properties, options);
        if (properties.supportAlpha === 'false') {
            properties.supportAlpha = false;
        }
        this.setProperties(properties);
    };
    exports.initStructure = function () {
        var mainTpl = '' + '<div class="${colorBlockFrameClass}" id="${colorBlockFrameId}">' + '  <div class="${colorBlockClass}" id="${colorBlockId}"></div>' + '</div>' + '<div class="${colorInputClass}" id="${colorInputId}" data-ui-type="TextBox"' + ' data-ui-child-name="colorInput" data-ui-hint="#" data-ui-hint-type="prefix"' + ' data-ui-width="120" data-ui-height="19" ></div>';
        if (this.supportAlpha) {
            mainTpl += '' + '<div class="${alphaInputClass}" id="${alphaInputId}" data-ui-type="TextBox"' + ' data-ui-child-name="alphaInput" data-ui-hint="%" data-ui-hint-type="suffix"' + ' data-ui-width="80" data-ui-height="19" ></div>';
        }
        this.main.innerHTML = lib.format(mainTpl, {
            colorBlockFrameClass: this.helper.getPartClassName('color-block-frame'),
            colorBlockFrameId: this.helper.getId('color-block-frame'),
            colorBlockClass: this.helper.getPartClassName('color-block'),
            colorBlockId: this.helper.getId('color-block'),
            colorInputClass: this.helper.getPartClassName('color-input'),
            colorInputId: this.helper.getId('color-input'),
            alphaInputClass: this.helper.getPartClassName('alpha-input'),
            alphaInputId: this.helper.getId('alpha-input')
        });
        this.initChildren();
        var colorBlock = this.helper.getPart('color-block');
        this.helper.addDOMEvent(colorBlock, 'mousedown', function (e) {
            e.stopPropagation();
        });
        this.helper.addDOMEvent(colorBlock, 'mousedown', toggleLayer);
        var control = this;
        var colorInput = this.getChild('colorInput');
        colorInput.on('input', function () {
            var hex = this.getValue();
            hex = new Array(6 - hex.length + 1).join('0') + hex;
            colorBlock.style.background = '#' + hex;
            control.hex = hex;
            control.fire('change');
        });
        var alphaInput = this.getChild('alphaInput');
        if (alphaInput) {
            alphaInput.on('input', function () {
                var alpha = this.getValue();
                control.alpha = alpha;
                control.fire('change');
            });
        }
    };
    function updateColorDisplay() {
        var colorBlock = this.helper.getPart('color-block');
        colorBlock.style.backgroundColor = '#' + this.hex;
        var colorInput = this.getChild('colorInput');
        colorInput.setValue(this.hex);
        if (this.supportAlpha) {
            var alphaInput = this.getChild('alphaInput');
            alphaInput.setValue(this.alpha);
        }
    }
    function syncValue() {
        var overlay = this.getChild('layer');
        if (overlay) {
            var properties = {};
            properties.hex = this.getChild('colorInput').getValue();
            if (this.supportAlpha) {
                properties.alpha = this.getChild('alphaInput').getValue();
            }
            var colorPicker = overlay.getChild('colorPicker');
            if (colorPicker) {
                colorPicker.setProperties(properties);
            }
        }
    }
    function createLayer() {
        var overlayMain = this.helper.createPart('layer', 'div');
        lib.addClass(overlayMain, this.helper.getPartClassName('layer'));
        var pickerContent = '' + this.helper.getPartBeginTag('head', 'div') + this.helper.getPartBeginTag('title', 'div') + '\u989C\u8272\u9009\u62E9' + this.helper.getPartEndTag('title', 'div') + this.helper.getPartBeginTag('close-btn', 'div') + '\u5173\u95ED' + this.helper.getPartEndTag('close-btn', 'div') + this.helper.getPartEndTag('head', 'div') + '<div data-ui-type="FullColorPicker" data-ui-child-name="colorPicker"' + ' data-ui-default-mode="' + this.featureMode + '"' + ' data-ui-switchable="' + this.switchable + '"' + '></div>' + this.helper.getPartBeginTag('foot-frame', 'div') + this.helper.getPartBeginTag('foot', 'div') + '<div class="' + this.helper.getPartClassName('ok-btn') + '"' + '  data-ui="type:Button;childName:btnOk;">\u786E\u5B9A</div>' + '<div class="' + this.helper.getPartClassName('cancel-btn') + '"' + '  data-ui="type:Button;childName:btnCancel;">\u53D6\u6D88</div>' + this.helper.getPartEndTag('foot', 'div') + this.helper.getPartEndTag('foot-frame', 'div');
        var colorPickerOverLay = ui.create('Overlay', {
            main: overlayMain,
            childName: 'layer',
            content: pickerContent
        });
        this.addChild(colorPickerOverLay);
        colorPickerOverLay.appendTo(this.main);
        colorPickerOverLay.addState(this.displayMode);
        var colorPicker = colorPickerOverLay.getChild('colorPicker');
        if (this.displayMode === 'attached') {
            var control = this;
            colorPicker.on('change', function (e) {
                var hex = this.getDisplayHex();
                var alpha = this.getDisplayAlpha();
                if (hex !== control.hex || alpha !== control.alpha) {
                    control.setProperties({
                        hex: hex,
                        alpha: alpha
                    });
                    closeOverLay.call(control);
                }
            });
        } else {
            var closeBtn = this.helper.getPart('close-btn');
            if (closeBtn) {
                this.helper.addDOMEvent(closeBtn, 'mousedown', closeOverLay);
            }
            var btnOk = colorPickerOverLay.getChild('btnOk');
            var btnCancel = colorPickerOverLay.getChild('btnCancel');
            btnOk.on('click', u.bind(submit, this));
            btnCancel.on('click', u.bind(closeOverLay, this));
        }
        return this.getChild('layer');
    }
    function submit() {
        var pickerOverlay = this.getChild('layer');
        var fullColorPicker = pickerOverlay.getChild('colorPicker');
        this.setProperties({
            hex: fullColorPicker.getDisplayHex(),
            alpha: fullColorPicker.getDisplayAlpha()
        });
        pickerOverlay.hide();
        this.fire('submit');
    }
    function closeOverLay() {
        var pickerOverlay = this.getChild('layer');
        pickerOverlay.hide();
        pickerOverlay.dispose();
    }
    function showLayer() {
        var colorPickerOverLay = this.getChild('layer');
        if (this.displayMode === 'attached') {
            colorPickerOverLay.setProperties({
                attachedDOM: this.helper.getId('color-block-frame'),
                attachedLayout: 'bottom,left'
            });
        } else {
            colorPickerOverLay.setProperties({
                hasMask: true,
                fixed: false,
                autoClose: false,
                width: 368,
                height: 600
            });
        }
        colorPickerOverLay.show();
        colorPickerOverLay.resize();
    }
    function toggleLayer() {
        var layer = this.getChild('layer');
        if (!layer) {
            layer = createLayer.call(this);
            syncValue.call(this);
            showLayer.call(this);
        } else {
            closeOverLay.call(this);
        }
    }
    exports.repaint = helper.createRepaint(InputControl.prototype.repaint, {
        name: [
            'hex',
            'alpha'
        ],
        paint: function (colorPicker, hex, alpha) {
            updateColorDisplay.call(colorPicker);
            syncValue.call(colorPicker);
            colorPicker.fire('change');
        }
    });
    exports.setProperties = function (properties) {
        var changes = this.$super(arguments);
        if (changes.hasOwnProperty('rawValue')) {
            this.fire('change');
        }
        return changes;
    };
    exports.getRawValue = function () {
        var result = {};
        result.hex = this.hex;
        if (this.supportAlpha) {
            result.alpha = this.alpha;
        }
        return result;
    };
    var ColorPicker = require('eoo').create(InputControl, exports);
    require('esui').register(ColorPicker);
    return ColorPicker;
});
define('ui/ChildViewPanel', [
    'require',
    'common/util',
    'promise',
    'common/ioc',
    'ef/ViewPanel',
    'eoo',
    'esui'
], function (require) {
    var u = require('common/util');
    var exports = {};
    exports.type = 'ChildViewPanel';
    exports.loadView = function (viewType) {
        var Promise = require('promise');
        var ioc = require('common/ioc');
        var loadingView = new Promise(u.bind(ioc.getComponent, ioc, viewType));
        return loadingView;
    };
    var SuperViewPanel = require('ef/ViewPanel');
    var ChildViewPanel = require('eoo').create(SuperViewPanel, exports);
    require('esui').register(ChildViewPanel);
    return ChildViewPanel;
});
define('ui/CheckButton', [
    'require',
    'esui/lib',
    'esui/controlHelper',
    'esui/CheckBox',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var CheckBox = require('esui/CheckBox');
    var exports = {};
    exports.type = 'CheckButton';
    exports.createMain = function () {
        return document.createElement('div');
    };
    exports.initStructure = function () {
        if (this.main.nodeName.toLowerCase() === 'input') {
            this.boxId = this.main.id || helper.getId(this, 'box');
            helper.replaceMain(this);
        } else {
            this.boxId = helper.getId(this, 'box');
        }
        var html = '<input type="checkbox" name="${name}" id="${id}" />';
        this.main.innerHTML = lib.format(html, {
            name: this.name,
            id: this.boxId
        });
        helper.addDOMEvent(this, this.main, 'click', this.toggleChecked);
    };
    exports.updateTitle = function (title) {
        lib.setAttribute(this.main, 'title', title);
    };
    exports.repaint = helper.createRepaint(CheckBox.prototype.repaint, {
        name: 'checked',
        paint: function (button, checked) {
            if (checked) {
                button.addState('checked');
            } else {
                button.removeState('checked');
            }
        }
    });
    exports.getFocusTarget = function () {
        return null;
    };
    exports.toggleChecked = function () {
        var checked = this.isChecked();
        this.setChecked(!checked);
    };
    var CheckButton = require('eoo').create(CheckBox, exports);
    require('esui').register(CheckButton);
    return CheckButton;
});
define('ui/CSVUploader', [
    'require',
    'esui/main',
    'esui/lib',
    'esui/Validity',
    'ub-ria/ui/Uploader',
    'esui'
], function (require) {
    var ui = require('esui/main');
    var lib = require('esui/lib');
    var ValidityLabel = require('esui/Validity');
    var Uploader = require('ub-ria/ui/Uploader');
    function CSVUploader(options) {
        Uploader.apply(this, arguments);
    }
    CSVUploader.prototype.type = 'CSVUploader';
    CSVUploader.prototype.styleType = 'Uploader';
    CSVUploader.errorTableFields = [
        {
            title: '\u884C\u6570',
            field: 'line',
            width: 140,
            sortable: false,
            resizable: false,
            content: 'line'
        },
        {
            title: '\u95EE\u9898',
            field: 'field',
            width: 140,
            sortable: false,
            resizable: false,
            content: 'field'
        },
        {
            title: '\u63CF\u8FF0',
            field: 'message',
            width: 500,
            sortable: false,
            resizable: false,
            content: 'message'
        }
    ];
    CSVUploader.defaultProperties = {
        width: 100,
        fileType: 'csv',
        text: '\u9009\u62E9CSV\u6587\u4EF6',
        errorText: '\u60A8\u4E0A\u4F20\u7684CSV\u6587\u4EF6\u4E2D\u6709\u5982\u4E0B\u95EE\u9898\uFF0C\u8BF7\u4FEE\u6539\u540E\u91CD\u65B0\u4E0A\u4F20',
        preview: false,
        autoUpload: false
    };
    CSVUploader.prototype.initOptions = function (options) {
        var properties = {};
        lib.extend(properties, CSVUploader.defaultProperties, options);
        Uploader.prototype.initOptions.call(this, properties);
    };
    CSVUploader.prototype.showUploadResult = function (options) {
        if (options.errors) {
            this.fire('fail', { errors: options.errors });
            this.notifyFail(this.errorText);
            this.showErrors(options.errors);
        }
        Uploader.prototype.showUploadResult.call(this, options);
    };
    CSVUploader.prototype.notifyFail = function (message) {
        if (!this.validityLabel) {
            buildValidityLabel(this);
        }
        var errorTable = this.getChild('errorTable');
        if (errorTable) {
            errorTable.hide();
        }
        Uploader.prototype.notifyFail.call(this, message);
    };
    function buildValidityLabel(uploader) {
        var errorLabel = lib.g(uploader.errorLabelContainer);
        if (errorLabel) {
            var options = {
                id: uploader.id + '-validity',
                skin: 'warn',
                viewContext: uploader.viewContext
            };
            var label = new ValidityLabel(options);
            label.appendTo(errorLabel);
            uploader.validityLabel = label.id;
        }
    }
    CSVUploader.prototype.showErrors = function (errors) {
        if (this.errorTableContainer) {
            var errorTableContainer = lib.g(this.errorTableContainer);
            var errorTable = this.getChild('errorTable');
            if (!errorTable) {
                errorTable = ui.create('Table', {
                    childName: 'errorTable',
                    fields: CSVUploader.errorTableFields,
                    select: false,
                    skin: 'error',
                    width: 785,
                    datasource: errors
                });
                errorTable.appendTo(errorTableContainer);
                this.addChild(errorTable);
            }
            errorTable.set('datasource', errors);
            errorTable.show();
        }
    };
    CSVUploader.prototype.dispose = function () {
        var errorTable = this.getChild('errorTable');
        if (errorTable) {
            errorTable.dispose();
        }
        Uploader.prototype.dispose.apply(this, arguments);
    };
    lib.inherits(CSVUploader, Uploader);
    require('esui').register(CSVUploader);
    return CSVUploader;
});
define('ui/util/color', ['require'], function (require) {
    function toHex(number) {
        var hex = (+number).toString(16);
        if (hex.length === 1) {
            hex = '0' + hex;
        }
        return hex;
    }
    function hueToRGB(p, q, t) {
        if (t < 0) {
            t += 1;
        }
        if (t > 1) {
            t -= 1;
        }
        if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
        }
        if (t < 1 / 2) {
            return q;
        }
        if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
        }
        return p;
    }
    var exports = {
        hslToRGB: function (hue, saturation, light) {
            if (typeof hue === 'object') {
                light = hue.light || hue.l;
                saturation = hue.saturation || hue.s;
                hue = hue.hue || hue.h;
            }
            hue /= 360;
            if (saturation > 1) {
                saturation = saturation / 100;
            }
            if (light > 1) {
                light = light / 100;
            }
            var rgb = {};
            if (saturation === 0) {
                rgb.red = light;
                rgb.green = light;
                rgb.blue = light;
            } else {
                var q = light < 0.5 ? light * (1 + saturation) : light + saturation - light * saturation;
                var p = 2 * light - q;
                rgb.red = hueToRGB(p, q, hue + 1 / 3) * 255;
                rgb.green = hueToRGB(p, q, hue) * 255;
                rgb.blue = hueToRGB(p, q, hue - 1 / 3) * 255;
            }
            rgb.red = Math.round(rgb.red);
            rgb.green = Math.round(rgb.green);
            rgb.blue = Math.round(rgb.blue);
            rgb.r = rgb.red;
            rgb.g = rgb.green;
            rgb.b = rgb.blue;
            return rgb;
        },
        rgbToHex: function (red, green, blue) {
            if (typeof red === 'object') {
                blue = red.blue || red.b;
                green = red.green || red.g;
                red = red.red || red.r;
            }
            var hex = [
                toHex(red),
                toHex(green),
                toHex(blue)
            ];
            return hex.join('');
        },
        hslToHex: function (hue, saturation, light) {
            var rgb = exports.hslToRGB(hue, saturation, light);
            var hex = exports.rgbToHex(rgb);
            return hex;
        },
        rgbToHSL: function (red, green, blue) {
            if (typeof red === 'object') {
                blue = red.blue || red.b;
                green = red.green || red.g;
                red = red.red || red.r;
            }
            red /= 255;
            green /= 255;
            blue /= 255;
            var max = Math.max(red, green, blue);
            var min = Math.min(red, green, blue);
            var hue = 0;
            var saturation = 0;
            var light = (max + min) / 2;
            if (max === min) {
                hue = 0;
                light = 0;
            } else {
                var diff = max - min;
                saturation = light > 0.5 ? diff / (2 - max - min) : diff / (max + min);
                switch (max) {
                case red:
                    hue = (green - blue) / diff + (green < blue ? 6 : 0);
                    break;
                case green:
                    hue = (blue - red) / diff + 2;
                    break;
                case blue:
                    hue = (red - green) / diff + 4;
                    break;
                }
                hue /= 6;
            }
            hue *= 360;
            var hsl = {
                hue: hue,
                saturation: saturation,
                light: light,
                h: hue,
                s: saturation,
                l: light
            };
            return hsl;
        },
        hexToRGB: function (hex) {
            if (hex.indexOf('#') === 0) {
                hex = hex.substring(1);
            }
            if (hex.length === 3) {
                hex = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2);
            }
            var rgb = {
                red: parseInt(hex.charAt(0) + hex.charAt(1), 16) || 0,
                green: parseInt(hex.charAt(2) + hex.charAt(3), 16) || 0,
                blue: parseInt(hex.charAt(4) + hex.charAt(5), 16) || 0
            };
            rgb.r = rgb.red;
            rgb.g = rgb.green;
            rgb.b = rgb.blue;
            return rgb;
        },
        hexToHSL: function (hex) {
            var rgb = exports.hexToRGB(hex);
            var hsl = exports.rgbToHSL(rgb);
            return hsl;
        },
        isValidRGB: function (input) {
            return /^#?[0-9a-fA-Z]{3}$/.test(input) || /^#?[0-9a-fA-Z]{6}$/.test(input);
        }
    };
    return exports;
});
define('ui/AdvancedColorPicker', [
    'require',
    'esui/lib',
    'esui/controlHelper',
    'esui/Control',
    'common/util',
    './util/color',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var Control = require('esui/Control');
    var u = require('common/util');
    var colorUtil = require('./util/color');
    var exports = {};
    exports.type = 'AdvancedColorPicker';
    exports.initOptions = function (options) {
        var properties = {
            hex: '0000ff',
            displayHex: '0000ff',
            noAlpha: false,
            alpha: 100,
            displayAlpha: 100
        };
        lib.extend(properties, options);
        if (properties.noAlpha === 'false') {
            properties.noAlpha = false;
        }
        this.setProperties(properties);
    };
    exports.initStructure = function () {
        var html = [
            getMainCanvasHTML.call(this),
            getHistoryCompareHTML.call(this),
            getColorInputHTML.call(this)
        ];
        this.main.innerHTML = html.join('');
        this.initChildren();
        if (this.noAlpha) {
            this.addState('noAlpha');
        }
    };
    function getMainCanvasHTML() {
        return [
            this.helper.getPartBeginTag('pallete', 'div'),
            this.helper.getPartBeginTag('hue', 'div'),
            this.helper.getPartBeginTag('hue-slider', 'div'),
            this.helper.getPartEndTag('hue-slider', 'div'),
            this.helper.getPartBeginTag('hue-pointer', 'div'),
            this.helper.getPartEndTag('hue-pointer', 'div'),
            this.helper.getPartEndTag('hue', 'div'),
            this.helper.getPartBeginTag('canvas', 'div'),
            this.helper.getPartBeginTag('canvas-mask', 'div'),
            this.helper.getPartEndTag('canvas-mask', 'div'),
            this.helper.getPartBeginTag('canvas-pointer', 'span'),
            this.helper.getPartEndTag('canvas-pointer', 'span'),
            this.helper.getPartEndTag('canvas', 'div'),
            this.helper.getPartBeginTag('alpha', 'div'),
            this.helper.getPartBeginTag('alpha-slider', 'div'),
            this.helper.getPartEndTag('alpha-slider', 'div'),
            this.helper.getPartBeginTag('alpha-pointer', 'div'),
            this.helper.getPartEndTag('alpha-pointer', 'div'),
            this.helper.getPartEndTag('alpha', 'div'),
            this.helper.getPartEndTag('pallete', 'div')
        ].join('');
    }
    function getHistoryCompareHTML() {
        return [
            this.helper.getPartBeginTag('compare', 'div'),
            this.helper.getPartBeginTag('compare-title', 'div'),
            '\u6539\u524D',
            this.helper.getPartEndTag('compare-title', 'div'),
            this.helper.getPartBeginTag('compare-color-old', 'div'),
            this.helper.getPartEndTag('compare-color-old', 'div'),
            this.helper.getPartBeginTag('compare-color-new', 'div'),
            this.helper.getPartEndTag('compare-color-new', 'div'),
            this.helper.getPartBeginTag('compare-title', 'div'),
            '\u6539\u540E',
            this.helper.getPartEndTag('compare-title', 'div'),
            this.helper.getPartEndTag('compare', 'div')
        ].join('');
    }
    function getColorInputHTML() {
        return [
            this.helper.getPartBeginTag('input', 'div'),
            getColorFieldHTML(this, 'hex', '\u8272\u503C'),
            getColorFieldHTML(this, 'alpha', '\u900F\u660E\u5EA6'),
            getColorFieldHTML(this, 'red', 'R'),
            getColorFieldHTML(this, 'green', 'G'),
            getColorFieldHTML(this, 'blue', 'B'),
            this.helper.getPartEndTag('input', 'div')
        ].join('');
    }
    function getColorFieldHTML(control, colorType, colorText) {
        var id = control.helper.getId(colorType + '-input');
        var childName = colorType + 'Input';
        var classes = [
            control.helper.getPartClassName('color-field'),
            control.helper.getPartClassName('color-field-' + colorType)
        ];
        var colorWidth = 30;
        if (colorType === 'alpha') {
            colorWidth = 42;
        } else if (colorType === 'hex') {
            colorWidth = 70;
        }
        var html = '' + '<div class="' + classes.join(' ') + '">' + '<div id="' + id + '" data-ui-type="TextBox" data-ui-width="' + colorWidth + '"' + 'data-ui-child-name="' + childName + '" ></div>' + '<label data-ui-type="Label" for="' + id + '">' + colorText + '</label>' + '</div>';
        return html;
    }
    exports.initEvents = function () {
        var canvas = this.helper.getPart('canvas');
        this.helper.addDOMEvent(canvas, 'click', synValueByCanvas);
        var hueSlider = this.helper.getPart('hue');
        this.helper.addDOMEvent(hueSlider, 'click', syncValueByHue);
        var colorTypes = [
            'red',
            'green',
            'blue'
        ];
        var control = this;
        u.each(colorTypes, function (colorType) {
            var colorInput = control.getChild(colorType + 'Input');
            colorInput.on('input', syncValueByRGB, control);
        });
        var hexInput = this.getChild('hexInput');
        hexInput.on('input', function () {
            var hex = this.getValue();
            control.displayHex = hex;
            syncValueByHex.call(control);
        });
        var alphaSlider = this.helper.getPart('alpha');
        this.helper.addDOMEvent(alphaSlider, 'click', syncValueByAlpha);
        var alphaInput = this.getChild('alphaInput');
        alphaInput.on('input', function () {
            var alpha = this.getValue();
            control.displayAlpha = alpha;
            updateAlphaPointerPosition.call(control);
            control.fire('change');
        });
    };
    function syncHBSToHex() {
        var hex = require('./util/color').hsbToHex(this.hue, this.saturation, this.bright);
        if (hex !== this.displayHex) {
            this.displayHex = hex;
            this.fire('change');
        }
    }
    function syncValueByRGB() {
        var redColor = this.getChild('redInput').getValue();
        var greenColor = this.getChild('greenInput').getValue();
        var blueColor = this.getChild('blueInput').getValue();
        var hex = colorUtil.rgbToHex(redColor, greenColor, blueColor);
        var hsb = colorUtil.rgbToHSB(redColor, greenColor, blueColor);
        this.displayHex = hex;
        this.hue = hsb.h;
        this.saturation = hsb.s;
        this.bright = hsb.b;
        updateHexInput.call(this);
        updateColorHistory.call(this, 'new', this.displayHex);
        updateHueSliderPointerPosition.call(this);
        updateCanvasColor.call(this);
        updateCanvasPointerPosition.call(this);
        this.fire('change');
    }
    function syncValueByHex() {
        var hsb = colorUtil.hexToHSB(this.displayHex);
        this.hue = hsb.h;
        this.saturation = hsb.s;
        this.bright = hsb.b;
        updateColorInput.call(this);
        updateColorHistory.call(this, 'new', this.displayHex);
        updateHueSliderPointerPosition.call(this);
        updateCanvasColor.call(this);
        updateCanvasPointerPosition.call(this);
        this.fire('change');
    }
    function synValueByCanvas(e) {
        if (lib.hasClass(e.target, this.helper.getPartClassName('canvas-pointer'))) {
            return;
        }
        var offsetY = e.offsetY;
        if (offsetY === undefined) {
            offsetY = e.layerY;
        }
        var offsetX = e.offsetX;
        if (offsetX === undefined) {
            offsetX = e.layerX;
        }
        this.bright = Math.min(1 - offsetY / e.target.offsetHeight, 1);
        this.saturation = offsetX / e.target.offsetWidth;
        syncHBSToHex.call(this);
        updateCanvasPointerPosition.call(this);
        updateColorInput.call(this);
        updateHexInput.call(this);
        updateColorHistory.call(this, 'new', this.displayHex);
    }
    function updateColorInput() {
        var color = this.displayHex;
        var control = this;
        var rgb = colorUtil.hexToRGB(color);
        var colorTypes = [
            'red',
            'green',
            'blue'
        ];
        u.each(colorTypes, function (colorType) {
            var colorInput = control.getChild(colorType + 'Input');
            colorInput.setValue(rgb[colorType]);
        });
    }
    function updateHexInput() {
        var hex = this.displayHex;
        var hexInput = this.getChild('hexInput');
        hexInput.setValue(hex);
    }
    function updateColorHistory(type, color) {
        color = new Array(6 - color.length + 1).join('0') + color;
        var colorBlock = this.helper.getPart('compare-color-' + type);
        colorBlock.style.background = '#' + color;
    }
    function updateAlphaInput() {
        var alpha = this.displayAlpha;
        var alphaInput = this.getChild('alphaInput');
        alphaInput.setValue(alpha);
    }
    function syncValueByAlpha(e) {
        if (lib.hasClass(e.target, this.helper.getPartClassName('alpha-pointer'))) {
            return;
        }
        var offsetY = e.offsetY;
        if (offsetY === undefined) {
            offsetY = e.layerY;
        }
        this.displayAlpha = 100 - Math.round(offsetY / e.target.offsetHeight * 100);
        updateAlphaPointerPosition.call(this);
        updateAlphaInput.call(this);
        this.fire('change');
    }
    function updateAlphaPointerPosition() {
        var alphaSlider = this.helper.getPart('alpha');
        var alphaPointer = this.helper.getPart('alpha-pointer');
        if (!this.alphaSliderSize) {
            this.alphaSliderSize = {
                sliderHeight: alphaSlider.offsetHeight,
                pointerHeight: alphaPointer.offsetHeight
            };
        }
        var alphaY = this.alphaSliderSize.sliderHeight * (1 - this.displayAlpha / 100);
        alphaY -= this.alphaSliderSize.pointerHeight / 2;
        alphaPointer.style.top = Math.round(alphaY) + 'px';
    }
    function syncValueByHue(e) {
        if (lib.hasClass(e.target, this.helper.getPartClassName('hue-pointer'))) {
            return;
        }
        var offsetY = e.offsetY;
        if (offsetY === undefined) {
            offsetY = e.layerY;
        }
        this.hue = offsetY / e.target.offsetHeight * 360;
        updateHueSliderPointerPosition.call(this);
        syncHBSToHex.call(this);
        updateCanvasColor.call(this);
        updateColorInput.call(this);
        updateHexInput.call(this);
        updateColorHistory.call(this, 'new', this.displayHex);
    }
    function updateCanvasColor() {
        var baseColor = require('./util/color').hsbToHex(this.hue, 1, 1);
        var canvas = this.helper.getPart('canvas');
        canvas.style.backgroundColor = '#' + baseColor;
    }
    function updateHueSliderPointerPosition() {
        var hueSlider = this.helper.getPart('hue');
        var huePointer = this.helper.getPart('hue-pointer');
        if (!this.hueSliderSize) {
            this.hueSliderSize = {
                pointerHeight: huePointer.offsetHeight,
                sliderHeight: hueSlider.offsetHeight
            };
        }
        var hueY = this.hue * this.hueSliderSize.sliderHeight / 360;
        hueY -= this.hueSliderSize.pointerHeight / 2;
        huePointer.style.top = Math.round(hueY) + 'px';
    }
    function updateCanvasPointerPosition() {
        var canvas = this.helper.getPart('canvas');
        var canvasPointer = lib.g(helper.getId(this, 'canvas-pointer'));
        if (!this.canvasSize) {
            this.canvasSize = {
                canvasWidth: canvas.offsetWidth,
                canvasHeight: canvas.offsetHeight,
                pointerHeight: canvasPointer.offsetHeight,
                pointerWidth: canvasPointer.offsetWidth
            };
        }
        var canvasX = this.canvasSize.canvasWidth * this.saturation;
        canvasX -= this.canvasSize.pointerWidth / 2;
        var canvasY = (1 - this.bright) * this.canvasSize.canvasHeight;
        canvasY -= this.canvasSize.pointerHeight / 2;
        canvasPointer.style.left = Math.round(canvasX) + 'px';
        canvasPointer.style.top = Math.round(canvasY) + 'px';
    }
    exports.repaint = helper.createRepaint(Control.prototype.repaint, {
        name: 'hex',
        paint: function (picker, hex) {
            if (hex == null) {
                return;
            }
            picker.displayHex = hex;
            updateHexInput.call(picker);
            syncValueByHex.call(picker);
            updateColorHistory.call(picker, 'old', picker.hex);
        }
    }, {
        name: 'alpha',
        paint: function (picker, alpha) {
            if (alpha == null) {
                return;
            }
            picker.displayAlpha = alpha;
            updateAlphaPointerPosition.call(picker);
            updateAlphaInput.call(picker);
        }
    });
    exports.updateHex = function (hex) {
        this.displayHex = hex;
        updateHexInput.call(this);
        syncValueByHex.call(this);
    };
    exports.updateAlpha = function (alpha) {
        this.displayAlpha = alpha;
        updateAlphaInput.call(this);
        updateAlphaPointerPosition.call(this);
    };
    exports.getDisplayHex = function () {
        return this.displayHex;
    };
    exports.getDisplayAlpha = function () {
        return this.displayAlpha;
    };
    var AdvancedColorPicker = require('eoo').create(Control, exports);
    require('esui').register(AdvancedColorPicker);
    return AdvancedColorPicker;
});
define('ui/AbstractBoxGroup', [
    'require',
    '../common/util',
    'esui/lib',
    'esui/InputControl',
    'esui/painters',
    'esui/main'
], function (require) {
    var u = require('../common/util');
    var lib = require('esui/lib');
    var InputControl = require('esui/InputControl');
    function AbstractBoxGroup() {
        InputControl.apply(this, arguments);
    }
    function getValue(element) {
        return getAttr(element, 'value');
    }
    function getAttr(element, attribute) {
        return element.getAttribute('data-ui-' + attribute);
    }
    function setAttr(element, attribute, value) {
        element.setAttribute('data-ui-' + attribute, value);
    }
    function getName(element) {
        return getAttr(element, 'name') || element.getAttribute('name');
    }
    function isChecked(box) {
        return getAttr(box, 'checked') === 'checked';
    }
    AbstractBoxGroup.prototype.type = 'AbstractBoxGroup';
    function extractDatasourceFromDOM(element, options) {
        var boxes = element.children;
        var datasource = [];
        var values = [];
        var boxType = options.boxType;
        for (var i = 0, length = boxes.length; i < length; i++) {
            var box = boxes[i];
            if (getAttr(box, 'box-type') === boxType) {
                datasource.push({
                    value: getValue(box),
                    text: box.innerHTML || getAttr(box, 'text')
                });
            }
            if (isChecked(box)) {
                values.push(box.value);
            }
        }
        options.datasource = datasource;
        if (!options.rawValue && !options.value) {
            options.rawValue = values;
        }
    }
    AbstractBoxGroup.prototype.initOptions = function (options) {
        var properties = {
            datasource: [],
            orientation: 'horizontal',
            boxType: 'radio'
        };
        u.extend(properties, options);
        if (!properties.datasource.length) {
            extractDatasourceFromDOM(this.main, properties);
        }
        if (!properties.rawValue && !properties.value) {
            properties.rawValue = [];
        }
        this.setProperties(properties);
    };
    function syncValue(e) {
        if (this.disabled || this.readOnly) {
            return;
        }
        var box = e.target;
        var rawValue = this.boxType === 'radio' ? [] : u.clone(this.rawValue);
        var value = getValue(box);
        if (u.contains(rawValue, value)) {
            rawValue = u.without(rawValue, value);
        } else {
            rawValue.push(value);
        }
        this.set('rawValue', rawValue);
    }
    var itemTemplate = [
        '<div class="${wrapperClass}">',
        '    <div id="${id}" class="${className}" ${checked} data-ui-name="${name}"',
        '       data-ui-value="${value}" data-ui-box-type="${boxType}">',
        '    ${text}</div>',
        '</div>'
    ];
    itemTemplate = itemTemplate.join('');
    function render(group, datasource, boxType) {
        group.helper.clearDOMEvents();
        var html = '';
        var classes = group.helper.getPartClasses('wrapper');
        var valueIndex = lib.toDictionary(group.rawValue);
        var keepHtml = getAttr(group.main, 'keep-html') || false;
        if (!keepHtml) {
            for (var i = 0; i < datasource.length; i++) {
                var item = datasource[i];
                var checked = valueIndex[item.value];
                var data = {
                    wrapperClass: classes.concat(group.helper.getPartClasses('wrapper-' + i)).concat(checked ? group.helper.getPartClasses('wrapper-checked') : '').join(' '),
                    id: group.helper.getId('box-' + i),
                    boxType: group.boxType,
                    name: group.name,
                    text: lib.trim(item.text),
                    value: item.value,
                    checked: checked ? ' data-ui-checked="checked"' : '',
                    className: group.helper.getPartClasses(boxType).join(' ')
                };
                html += lib.format(itemTemplate, data);
            }
            group.main.innerHTML = html;
        }
        u.each(group.getBoxElements(), function (box) {
            this.helper.addDOMEvent(box, 'click', syncValue);
        }, group);
    }
    AbstractBoxGroup.prototype.setProperties = function (properties) {
        if ((properties.datasource || properties.boxType) && (!properties.rawValue && !properties.value) && (!this.rawValue || !this.rawValue.length)) {
            properties.rawValue = [];
        }
        var changes = InputControl.prototype.setProperties.apply(this, arguments);
        if (changes.hasOwnProperty('rawValue')) {
            this.fire('change');
        }
    };
    AbstractBoxGroup.prototype.repaint = require('esui/painters').createRepaint(InputControl.prototype.repaint, {
        name: [
            'datasource',
            'boxType'
        ],
        paint: render
    }, {
        name: 'rawValue',
        paint: function (group, rawValue) {
            rawValue = rawValue || [];
            group.rawValue = rawValue;
            var map = {};
            u.each(rawValue, function (value) {
                map[value] = true;
            });
            u.each(group.getBoxElements(), function (box) {
                setAttr(box, 'checked', map[getValue(box)] ? 'checked' : '');
                var wrapperCheckedClass = group.helper.getPartClasses('wrapper-checked')[0];
                if (isChecked(box)) {
                    lib.addClass(box.parentNode, wrapperCheckedClass);
                } else {
                    lib.removeClass(box.parentNode, wrapperCheckedClass);
                }
            });
        }
    }, {
        name: 'orientation',
        paint: function (group, orientation) {
            group.removeState('vertical');
            group.removeState('horizontal');
            group.addState(orientation);
        }
    });
    AbstractBoxGroup.prototype.parseValue = function (value) {
        return value.toString().split(',');
    };
    AbstractBoxGroup.prototype.getBoxElements = function () {
        var boxType = this.boxType;
        var name = this.name;
        return u.filter(this.main.getElementsByTagName('div'), function (item) {
            return getAttr(item, 'box-type') === boxType && getName(item) === name;
        });
    };
    AbstractBoxGroup.prototype.isPropertyChanged = function (propertyName, newValue, oldValue) {
        if (propertyName === 'rawValue') {
            return '' + newValue !== '' + oldValue;
        }
        return newValue !== oldValue;
    };
    lib.inherits(AbstractBoxGroup, InputControl);
    require('esui/main').register(AbstractBoxGroup);
    return AbstractBoxGroup;
});
define('slot/util', [
    'require',
    'eoo',
    'ssp-slot/util'
], function (require) {
    var util = require('eoo').static(require('ssp-slot/util'));
    util.getObjectProperty = function (obj, key) {
        if (obj) {
            var keys = key.split('.');
            var cur = obj;
            var index = 0;
            var len = keys.length;
            for (; index < len;) {
                var data = cur[keys[index]];
                if (data !== null && typeof data !== 'undefined') {
                    cur = data;
                    index++;
                } else {
                    break;
                }
            }
            if (index === len && cur !== null && typeof cur !== 'undefined') {
                return cur;
            }
            return null;
        }
    };
    util.setObjectProperty = function (obj, value, key) {
        if (obj) {
            var keys = key.split('.');
            var cur = obj;
            var len = keys.length;
            for (var i = 0; i < len - 1; i++) {
                var data = cur[keys[i]];
                if (data === null || typeof data === 'undefined') {
                    data = cur[keys[i]] = {};
                }
                cur = data;
            }
            cur[keys[len - 1]] = value;
        }
    };
    util.setObjectNotExistProperty = function (obj, value, key) {
        if (util.getObjectProperty(obj, key) == null) {
            util.setObjectProperty(obj, value, key);
        }
    };
    util.pickAndTransfer = function (list, tables) {
        var result = {};
        util.map(util.pick(list, util.keys(tables)), function (value, key) {
            result[tables[key]] = value;
        });
        return result;
    };
    util.parseKVString = function (kv) {
        if (util.isString(kv) === false || !kv.length) {
            return {};
        }
        return util.chain(kv.split('|')).map(function (item) {
            return item.split('=');
        }).compact().object().value();
    };
    util.generateKVString = function (item) {
        if (util.isEmpty(item)) {
            return undefined;
        }
        return util.chain(item).pairs().map(function (pair) {
            return pair[0] + '=' + pair[1];
        }).value().join('|');
    };
    util.existy = function (x) {
        return x != null;
    };
    util.truthy = function (cond) {
        return cond !== false && exports.existy(cond);
    };
    return util;
});
define('slot/ui/Iframe', [
    'require',
    'esui/Control',
    'esui/painters',
    'esui',
    'eoo'
], function (require) {
    var Control = require('esui/Control');
    var prototype = {};
    prototype.initStructure = function () {
        this.$super(arguments);
        var iframe = this.helper.createPart('iframe', 'iframe');
        iframe.scrolling = 'no';
        iframe.frameBorder = '0';
        this.main.appendChild(iframe);
    };
    prototype.type = 'Iframe';
    var painters = require('esui/painters');
    prototype.repaint = painters.createRepaint(Control.prototype.repaint, {
        name: ['src'],
        paint: function (control, href) {
            control.helper.getPart('iframe').src = href;
        }
    }, painters.style('width'), painters.style('height'));
    var ui = require('esui');
    var Iframe = require('eoo').create(Control, prototype);
    ui.register(Iframe);
    return Iframe;
});
define('ssp-slot/enum', [
    'require',
    'er/Enum'
], function (require) {
    var Enum = require('er/Enum');
    var exports = {};
    exports.FlowType = new Enum({
        alias: 'PCDOMAIN',
        text: 'PC',
        value: 1
    }, {
        alias: 'MBLWAP',
        text: '\u79FB\u52A8\u7F51\u9875',
        value: 2
    }, {
        alias: 'MBLAPP',
        text: 'APP',
        value: 3
    }, {
        alias: 'F_VIDEO',
        text: '\u89C6\u9891',
        value: 4
    });
    exports.AnchoredType = new Enum({
        alias: 'QIANRU',
        text: '\u5D4C\u5165',
        value: 1
    }, {
        alias: 'XUANTING',
        text: '\u60AC\u505C',
        value: 2
    }, {
        alias: 'XUANFU',
        text: '\u60AC\u6D6E',
        value: 3
    }, {
        alias: 'GUANLIAN_SHIPIN',
        text: '\u89C6\u9891\u8D34\u7247',
        value: 4
    }, {
        alias: 'GUANLIAN_WENZI',
        text: '\u5185\u6587',
        value: 5
    }, {
        alias: 'GUANLIAN_TUPIAN',
        text: '\u56FE\u52A0',
        value: 6
    }, {
        alias: 'TANCHUANG',
        text: '\u5F39\u7A97',
        value: 7
    }, {
        alias: 'QUANPING',
        text: '\u5168\u5C4F',
        value: 8
    }, {
        alias: 'QIANRUANNIU',
        text: '\u5D4C\u5165\u6309\u94AE',
        value: 9
    }, {
        alias: 'XUANFUANNIU',
        text: '\u60AC\u6D6E\u6309\u94AE',
        value: 10
    }, {
        alias: 'YINCANG',
        text: '\u5185\u6587',
        value: 11
    });
    exports.SizeType = new Enum({
        alias: 'PIXEL',
        text: '\u50CF\u7D20',
        value: 1
    }, {
        alias: 'SCALE',
        text: '\u6BD4\u4F8B',
        value: 2
    }, {
        alias: 'AUTO_WIDTH',
        text: '\u81EA\u9002\u5E94\u5BBD\u5EA6',
        value: 3
    }, {
        alias: 'SCALE_CONTAINER',
        text: '\u6309\u7236\u5BB9\u5668\u5BBD\u5EA6',
        value: 5
    }, {
        alias: 'AUTO_CONTAINER_WIDTH_FIXED_PIXEL_HEIGHT',
        text: '\u6309\u7236\u5BB9\u5668\u5BBD\u5EA6',
        value: 6
    }, {
        alias: 'FIXED_PIXEL_WIDTH_AUTO_CONTAINER_HEIGHT',
        text: '\u6309\u7236\u5BB9\u5668\u9AD8\u5EA6',
        value: 7
    }, {
        alias: 'AUTO_CONTAINER_WIDTH_AUTO_CONTAINER_HEIGHT',
        text: '\u81EA\u9002\u5E94\u5BBD\u9AD8',
        value: 8
    });
    exports.ComplementType = new Enum({
        alias: 'URL',
        text: '\u81EA\u5B9A\u4E49\u94FE\u63A5',
        value: 1
    }, {
        alias: 'CAD',
        text: '\u767E\u5EA6\u516C\u76CA',
        value: 2
    }, {
        alias: 'BLOCK',
        text: '\u7A7A\u767D',
        value: 3
    }, {
        alias: 'TRD_CODE',
        text: '\u7B2C\u4E09\u65B9\u4EE3\u7801',
        value: 4
    }, {
        alias: 'BID',
        text: '\u516C\u5F00\u7ADE\u4EF7',
        value: 6
    }, {
        alias: 'CLOSE',
        text: '\u81EA\u52A8\u6536\u8D77',
        value: 7
    });
    exports.Location = new Enum({
        alias: 'MID',
        text: '\u4E2D',
        value: 1
    }, {
        alias: 'UP',
        text: '\u4E0A',
        value: 2
    }, {
        alias: 'DOWN',
        text: '\u4E0B',
        value: 3
    }, {
        alias: 'LEFT',
        text: '\u5DE6\u4E2D',
        value: 4
    }, {
        alias: 'RIGHT',
        text: '\u53F3\u4E2D',
        value: 5
    }, {
        alias: 'BOTH',
        text: '\u4E24\u4FA7\u5C45\u4E0A',
        value: 6
    }, {
        alias: 'UPLEFT',
        text: '\u5DE6\u4E0A',
        value: 7
    }, {
        alias: 'UPRIGHT',
        text: '\u53F3\u4E0A',
        value: 8
    }, {
        alias: 'DOWNLEFT',
        text: '\u5DE6\u4E0B',
        value: 9
    }, {
        alias: 'DOWNRIGHT',
        text: '\u53F3\u4E0B',
        value: 10
    });
    exports.Follow = new Enum({
        alias: 'ALWAYS',
        text: '\u4E0D\u8DDF\u968F(\u59CB\u7EC8\u60AC\u6D6E\u663E\u793A)',
        value: 1
    }, {
        alias: 'CONTENT',
        text: '\u8DDF\u968F(\u968F\u9875\u9762\u5185\u5BB9\u663E\u793A\u800C\u663E\u793A)',
        value: 2
    });
    exports.SellType = new Enum({
        alias: 'SSP_NORMAL',
        text: 'SSP',
        value: 1
    }, {
        alias: 'UN_NORMAL',
        text: '\u7F51\u76DF\u7ADE\u4EF7',
        value: 2
    }, {
        alias: 'ADM_DANBAODUAN',
        text: '\u9E3F\u5A92\u4F53\u5305\u6BB5',
        value: 3
    }, {
        alias: 'ADM_PASSDAN',
        text: '\u5E7F\u544A\u7BA1\u5BB6\u4F18\u8D28',
        value: 4
    }, {
        alias: 'UN_PASSDAN',
        text: '\u7F51\u76DF\u4F18\u8D28',
        value: 5
    });
    exports.BidLevel = new Enum({
        alias: 'ORDER',
        text: '\u76F4\u9500\u8BA2\u5355',
        value: 1
    }, {
        alias: 'PRIVATEAUCTION',
        text: '\u79C1\u6709\u7ADE\u4EF7',
        value: 2
    }, {
        alias: 'PUBLICAUCTION',
        text: '\u516C\u5F00\u7ADE\u4EF7',
        value: 3
    });
    exports.Occurrence = new Enum({
        alias: 'BEGIN',
        text: '\u5F00\u59CB',
        value: 1
    }, {
        alias: 'SUSPEND',
        text: '\u6682\u505C',
        value: 2
    }, {
        alias: 'END',
        text: '\u7ED3\u675F',
        value: 3
    }, {
        alias: 'IMGLOAD',
        text: '\u56FE\u7247\u52A0\u8F7D',
        value: 7
    }, {
        alias: 'HOVERWORD',
        text: '\u60AC\u6D6E\u6587\u5B57\u4E0A',
        value: 8
    }, {
        alias: 'PLAY',
        text: '\u64AD\u653E\u4E2D',
        value: 9
    });
    exports.CloseType = new Enum({
        alias: 'SELF',
        text: '\u4EC5\u5173\u95ED\u5F53\u524D\u9875',
        value: 1
    }, {
        alias: 'SESSION',
        text: '\u5173\u95ED\u8BE5session\u4E0B\u6240\u6709',
        value: 2
    }, {
        alias: 'COOKIE',
        text: '\u5173\u95ED\u8BE5cookie\u4E0B\u6240\u6709',
        value: 3
    }, {
        alias: 'NOT',
        text: '\u65E0\u5173\u95ED\u6309\u94AE',
        value: 4
    });
    exports.Animation = new Enum({
        alias: 'SHADOW',
        text: '\u6E10\u663E',
        value: 1
    }, {
        alias: 'JUMP',
        text: '\u4E0A\u8DF3',
        value: 2
    }, {
        alias: 'ROTATE',
        text: '\u7FFB\u724C',
        value: 3
    });
    exports.Shape = new Enum({
        alias: 'RECT',
        text: '\u77E9\u5F62',
        value: 1
    }, {
        alias: 'ROUND',
        text: '\u5706\u5F62',
        value: 2
    }, {
        alias: 'ARCH',
        text: ' \u534A\u5706',
        value: 3
    });
    exports.DockType = new Enum({
        alias: 'PAGE',
        text: '\u6839\u636E\u9875\u9762\u5BBD\u5EA6\u81EA\u52A8\u5B9A\u4F4D',
        value: 1
    }, {
        alias: 'BROWSER',
        text: '\u6839\u636E\u6D4F\u89C8\u5668\u59CB\u7EC8\u8D34\u8FB9\u5B9A\u4F4D',
        value: 2
    });
    exports.BlockType = new Enum({
        alias: 'SIDE',
        text: '\u4FA7\u680F',
        value: 1
    }, {
        alias: 'BUTTON',
        text: '\u6309\u94AE',
        value: 2
    }, {
        alias: 'WINDOW',
        text: '\u89C6\u7A97',
        value: 3
    });
    exports.Trigger = new Enum({
        alias: 'BEFORE_PAGELOAD',
        text: '\u9875\u9762\u52A0\u8F7D\u524D',
        value: 1
    }, {
        alias: 'AFTER_PAGELOAD',
        text: '\u9875\u9762\u52A0\u8F7D\u540E',
        value: 2
    }, {
        alias: 'PAGE_PERCENT',
        text: '\u9875\u9762\u767E\u5206\u6BD4',
        value: 3
    }, {
        alias: 'MOUSEHOVER',
        text: '\u9F20\u6807\u60AC\u505C',
        value: 4
    }, {
        alias: 'CLICK',
        text: '\u9F20\u6807\u70B9\u51FB',
        value: 5
    }, {
        alias: 'READY',
        text: '\u5E7F\u544A\u4F4D\u5E7F\u544A\u52A0\u8F7D\u5B8C\u6BD5',
        value: 6
    }, {
        alias: 'SLIP',
        text: 'App\u624B\u6307\u6ED1\u52A8\u5C4F\u5E55',
        value: 7
    }, {
        alias: 'OVER_SCREEN',
        text: '\u8D85\u51FA\u5C4F\u5E55',
        value: 8
    });
    exports.Direction = new Enum({
        alias: 'DIRECTION_NONE',
        text: '\u65E0\u6269\u5C55',
        value: 0
    }, {
        alias: 'SLIDE_UP',
        text: '\u5411\u4E0A',
        value: 1
    }, {
        alias: 'SLIDE_DOWN',
        text: '\u5411\u4E0B',
        value: 2
    }, {
        alias: 'SLIDE_LEFT',
        text: '\u5411\u5DE6',
        value: 3
    }, {
        alias: 'SLIDE_RIGHT',
        text: '\u5411\u53F3',
        value: 4
    }, {
        alias: 'SLIDE_FULLSCREEN',
        text: '\u5168\u5C4F\u6269\u5C55',
        value: 5
    });
    exports.Mode = new Enum({
        alias: 'COVER',
        text: '\u5426\uFF08\u6269\u5C55\u7269\u6599\u60AC\u6D6E\u5728\u7F51\u9875\u4E0A\u65B9\uFF09',
        value: 1
    }, {
        alias: 'SHOVE',
        text: '\u662F\uFF08\u6269\u5C55\u7269\u6599\u6324\u5360\u7F51\u9875\u5185\u5BB9\uFF09',
        value: 2
    });
    exports.NativeadField = new Enum({
        alias: 'NATIVE_TITLE',
        text: '\u6807\u9898',
        value: 1
    }, {
        alias: 'NATIVE_DESC',
        text: '\u63CF\u8FF0',
        value: 2
    }, {
        alias: 'NATIVE_IMAGE',
        text: '\u5927\u56FE',
        value: 4
    }, {
        alias: 'NATIVE_ICON',
        text: '\u56FE\u6807',
        value: 8
    }, {
        alias: 'NATIVE_APPSIZE',
        text: 'App\u5927\u5C0F',
        value: 16
    }, {
        alias: 'NATIVE_ACTIONTYPE',
        text: '\u8DF3\u8F6C\u52A8\u4F5C',
        value: 32
    });
    exports.AppAdpType = new Enum({
        alias: 'BANNER',
        text: '\u6A2A\u5E45',
        value: 32
    }, {
        alias: 'SPLASH',
        text: '\u5F00\u5C4F',
        value: 33
    }, {
        alias: 'INTERSTITIAL',
        text: '\u63D2\u5C4F',
        value: 34
    }, {
        alias: 'WALL',
        text: '\u79EF\u5206\u5899',
        value: 35
    }, {
        alias: 'INFO_FLOW',
        text: '\u4FE1\u606F\u6D41',
        value: 36
    }, {
        alias: 'PROMOTION_WALL',
        text: '\u63A8\u5E7F\u5899',
        value: 37
    }, {
        alias: 'APP_PROMOTION_WALL',
        text: '\u5E94\u7528\u63A8\u8350\u5899',
        value: 38
    }, {
        alias: 'ROTATION_PLATE',
        text: '\u8F6E\u76D8',
        value: 39
    }, {
        alias: 'VIDEO',
        text: '\u89C6\u9891\u8D34\u7247',
        value: 40
    });
    exports.Element = new Enum({
        alias: 'TEXT',
        text: '\u6587\u5B57',
        value: 0
    }, {
        alias: 'IMAGE',
        text: '\u56FE\u7247',
        value: 1
    }, {
        alias: 'FLASH',
        text: 'flash',
        value: 2
    }, {
        alias: 'WIDGET',
        text: '\u4EA4\u4E92\u63A7\u4EF6',
        value: 3
    }, {
        alias: 'TUWEN',
        text: '\u56FE\u6587',
        value: 4
    }, {
        alias: 'LINKUNIT_WORD',
        text: 'lu\u6587\u5B57',
        value: 5
    }, {
        alias: 'VIDEO',
        text: '\u89C6\u9891',
        value: 7
    }, {
        alias: 'SEARCH',
        text: '\u641C\u7D22\u6846',
        value: 8
    }, {
        alias: 'ELEMENT_ALL',
        text: '\u6240\u6709',
        value: 50
    });
    exports.CurrencyStorage = new Enum({
        alias: 'TRUSTEESHIP',
        text: '\u79EF\u5206\u6258\u7BA1',
        value: 0
    }, {
        alias: 'CALLBACK',
        text: '\u79EF\u5206\u56DE\u8C03',
        value: 1
    });
    exports.CurrencyDim = new Enum({
        alias: 'USER',
        text: '\u4EE5\u7528\u6237\u7EF4\u5EA6\u56DE\u8C03',
        value: 0
    }, {
        alias: 'DEVICE',
        text: '\u4EE5\u8BBE\u5907\u7EF4\u5EA6\u56DE\u8C03',
        value: 1
    });
    exports.Align = new Enum({
        alias: 'LEFT',
        text: '\u5DE6',
        value: 1
    }, {
        alias: 'CENTER',
        text: '\u4E2D',
        value: 2
    }, {
        alias: 'RIGHT',
        text: '\u53F3',
        value: 3
    });
    exports.TxtSkin = new Enum({
        alias: 'NONE',
        text: '\u9ED8\u8BA4',
        value: ''
    }, {
        alias: 'WHITE_RED',
        text: '\u7EA2\u4E0E\u767D',
        value: 1
    }, {
        alias: 'GRAY_BLACK',
        text: '\u7B80\u7EA6\u7070',
        value: 2
    }, {
        alias: 'WHITE_BLUE',
        text: '\u84DD\u8272\u5B57',
        value: 3
    }, {
        alias: 'BLACK_WHITE',
        text: '\u7B80\u7EA6\u9ED1',
        value: 4
    }, {
        alias: 'YELLOW_BLUE',
        text: '\u9EC4\u91D1\u84DD',
        value: 5
    }, {
        alias: 'GREEN_WHITE',
        text: '\u6F02\u65B0\u7EFF',
        value: 6
    }, {
        alias: 'BLUE_WHITE',
        text: '\u6F02\u9752\u84DD',
        value: 7
    }, {
        alias: 'WHITE_BLACK',
        text: '\u9ED1\u4E0E\u767D',
        value: 8
    });
    exports.Layout = new Enum({
        alias: 'SINGLE',
        text: '\u72EC\u5360',
        value: 1
    }, {
        alias: 'GRID',
        text: '\u591A\u5206\u683C',
        value: 2
    }, {
        alias: 'CLOUDGRID',
        text: '\u6807\u7B7E\u4E91',
        value: 3
    }, {
        alias: 'NAV',
        text: '\u6A71\u7A97',
        value: 4
    }, {
        alias: 'WALL',
        text: '\u5899\u7C7B\u5E03\u5C40',
        value: 5
    }, {
        alias: 'NATIVE',
        text: '\u81EA\u5B9A\u4E49\u5E03\u5C40',
        value: 6
    });
    exports.Flush = new Enum({
        alias: 'NONE',
        text: '\u4E0D\u95EA\u70C1',
        value: 0
    }, {
        alias: 'WHOLE',
        text: '\u6574\u4F53\u95EA\u70C1',
        value: 1
    }, {
        alias: 'TITLE',
        text: '\u6807\u9898\u95EA\u70C1',
        value: 2
    }, {
        alias: 'DESCRIPTION',
        text: '\u5185\u5BB9\u95EA\u70C1',
        value: 3
    });
    return exports;
});
define('slot/enum', [
    'require',
    'er/Enum',
    'ssp-slot/enum',
    'eoo'
], function (require) {
    var Enum = require('er/Enum');
    var slotEnum = require('ssp-slot/enum');
    var exports = require('eoo').static(slotEnum);
    exports.Switch = new Enum({
        alias: 'OFF',
        text: '\u5173',
        value: 0
    }, {
        alias: 'ON',
        text: '\u5F00',
        value: 1
    });
    exports.FillStyleType = new Enum({
        alias: 'DEFAULT',
        text: '\u9ED8\u8BA4\u914D\u7F6E',
        value: 0
    }, {
        alias: 'NORMAL',
        text: '\u666E\u901A\u6837\u5F0F\u914D\u7F6E',
        value: 1
    }, {
        alias: 'FEATURE',
        text: '\u7279\u8272\u6837\u5F0F\u914D\u7F6E',
        value: 2
    }, {
        alias: 'SMART',
        text: '\u667A\u80FD\u6837\u5F0F\u914D\u7F6E',
        value: 3
    });
    exports.SSPID = new Enum({
        alias: 'UNION',
        text: '\u7F51\u76DF',
        value: 1
    }, {
        alias: 'SSP',
        text: 'PC_SSP',
        value: 8
    });
    exports.DSPID = new Enum({
        alias: 'NOVA',
        text: 'nova',
        value: 11
    }, {
        alias: 'NOVA_PC',
        text: 'novaPC',
        value: 111
    }, {
        alias: 'NOVA_MOBILE',
        text: 'novaMobile',
        value: 112
    }, {
        alias: 'LU',
        text: 'lu',
        value: 6
    }, {
        alias: 'LU_PC',
        text: 'luPC',
        value: 61
    }, {
        alias: 'LU_MOBILE',
        text: 'luMobile',
        value: 62
    }, {
        alias: 'IMG',
        text: '\u56FE\u52A0',
        value: 13
    }, {
        alias: 'IMG_PC',
        text: '\u56FE\u52A0PC',
        value: 131
    }, {
        alias: 'IMG_MOBILE',
        text: '\u56FE\u52A0Mobile',
        value: 132
    }, {
        alias: 'PS',
        text: '\u5927\u641C',
        value: 14
    }, {
        alias: 'PS_PC',
        text: '\u5927\u641CPC',
        value: 141
    }, {
        alias: 'PS_MOBILE',
        text: '\u5927\u641CMobile',
        value: 142
    }, {
        alias: 'PS_NEW',
        text: '\u5927\u641C',
        value: 7
    });
    exports.StyleType = new Enum({
        alias: 'RTB',
        text: '\u6807\u51C6RTB',
        value: 1
    }, {
        alias: 'NON_CUSTOMIZATION',
        text: '\u975E\u5B9A\u5236\u6837\u5F0F',
        value: 2
    }, {
        alias: 'CUSTOMIZATION',
        text: '\u5B9A\u5236\u5316\u6837\u5F0F',
        value: 3
    });
    exports.ConBackEnv = new Enum({
        alias: 'CBE_BROWSER',
        text: '\u6D4F\u89C8\u5668',
        value: 1
    }, {
        alias: 'CBE_APP',
        text: '\u5E94\u7528',
        value: 2
    }, {
        alias: 'CBE_PLAYER',
        text: '\u64AD\u653E\u5668',
        value: 3
    });
    exports.RspFormat = new Enum({
        alias: 'RSPFORMAT_NONE',
        text: '\u65E0',
        value: 0
    }, {
        alias: 'HTML',
        text: 'html\u683C\u5F0F',
        value: 1
    }, {
        alias: 'JSON',
        text: 'json\u683C\u5F0F',
        value: 2
    }, {
        alias: 'JSONP',
        text: '\u89E6\u53D1jsonp',
        value: 3
    }, {
        alias: 'XML',
        text: 'xml\u683C\u5F0F',
        value: 4
    });
    exports.BlockType = new Enum({
        alias: 'SIDE',
        text: '\u4FA7\u680F',
        value: 1
    }, {
        alias: 'BUTTON',
        text: '\u6309\u94AE',
        value: 2
    }, {
        alias: 'WINDOW',
        text: '\u7A97\u53E3',
        value: 3
    });
    exports.AdType = new Enum({
        alias: '1-1',
        text: '\u5D4C\u5165',
        value: 101
    }, {
        alias: '1-3',
        text: '\u60AC\u6D6E',
        value: 102
    }, {
        alias: '1-2',
        text: '\u60AC\u505C',
        value: 103
    }, {
        alias: '1-6',
        text: '\u56FE\u52A0',
        value: 104
    }, {
        alias: '1-11',
        text: '\u5185\u6587',
        value: 105
    }, {
        alias: '4-4',
        text: '\u8D34\u7247',
        value: 106
    }, {
        alias: '2-1',
        text: '\u5D4C\u5165',
        value: 201
    }, {
        alias: '2-3',
        text: '\u60AC\u6D6E',
        value: 202
    }, {
        alias: '2-6',
        text: '\u56FE+',
        value: 203
    }, {
        alias: 'SEARCH_RECOM',
        text: '\u641C\u7D22\u63A8\u8350',
        value: 301
    }, {
        alias: 'SEARCH_RECOM_MOBILE',
        text: '\u641C\u7D22\u63A8\u8350',
        value: 302
    }, {
        alias: '1-12',
        text: '\u5D4C\u5165',
        value: 107
    }, {
        alias: '2-12',
        text: '\u5D4C\u5165',
        value: 204
    });
    exports.MediumType = new Enum({
        alias: 'SITE',
        text: '\u7F51\u7AD9',
        value: 1
    }, {
        alias: 'MAPP',
        text: '\u79FB\u52A8APP',
        value: 2
    }, {
        alias: 'IPTV',
        text: '\u6570\u5B57\u7535\u89C6',
        value: 3
    }, {
        alias: 'OFFLINEQRCODE',
        text: '\u79BB\u7EBF\u4E8C\u7EF4\u7801',
        value: 4
    }, {
        alias: 'BOARDSCREEN',
        text: '\u6570\u5B57\u663E\u793A\u6392',
        value: 5
    });
    exports.TemplateType = new Enum({
        alias: 'NORMAL_TEXT',
        text: '\u666E\u901A\u6587\u5B57',
        value: 1
    }, {
        alias: 'NORMAL_TUWEN',
        text: '\u56FE\u6587',
        value: 2
    }, {
        alias: 'NORMAL_IMAGE',
        text: '\u666E\u901A\u56FE\u7247',
        value: 3
    }, {
        alias: 'CLOUD',
        text: '\u6807\u7B7E\u4E91',
        value: 4
    }, {
        alias: 'LU',
        text: '\u6587\u5B57\u6392\u884C',
        value: 5
    }, {
        alias: 'LUIMG',
        text: '\u56FE\u7247\u6392\u884C',
        value: 6
    }, {
        alias: 'SEARCH',
        text: '\u641C\u7D22\u6846',
        value: 7
    }, {
        alias: 'VIDEO',
        text: '\u89C6\u9891',
        value: 8
    });
    exports.TxtColorExpand = new Enum({
        alias: 'COMMON',
        text: '\u666E\u901A\u914D\u8272',
        value: 1
    }, {
        alias: 'CUSTOM',
        text: '\u81EA\u5B9A\u4E49\u8BBE\u5B9A',
        value: 2
    });
    exports.TxtCloudExpand = new Enum({
        alias: 'COMMON',
        text: '\u9884\u8BBE\u6548\u679C',
        value: 1
    }, {
        alias: 'CUSTOM',
        text: '\u81EA\u5B9A\u4E49\u6548\u679C',
        value: 2
    });
    exports.AdSlotType = new Enum({
        alias: 'EMBEDDED',
        text: '\u5D4C\u5165',
        value: 0
    }, {
        alias: 'FLOAT',
        text: '\u60AC\u6D6E',
        value: 1
    }, {
        alias: 'PATCH',
        text: '\u8D34\u7247',
        value: 2
    }, {
        alias: 'CAPTCHA',
        text: '\u9A8C\u8BC1\u7801',
        value: 3
    }, {
        alias: 'VERTICAL_PAGE',
        text: '\u4E2D\u95F4\u9875',
        value: 4
    }, {
        alias: 'WINDOW',
        text: '\u89C6\u7A97',
        value: 5
    }, {
        alias: 'COUPLET',
        text: '\u5BF9\u8054',
        value: 6
    }, {
        alias: 'BLOCK',
        text: '\u8DEF\u969C',
        value: 7
    }, {
        alias: 'VIDEO_PRE_ROOL',
        text: '\u524D\u8D34',
        value: 21
    }, {
        alias: 'VIDEO_MID_ROOL',
        text: '\u4E2D\u8D34',
        value: 22
    }, {
        alias: 'VIDEO_POST_ROOL',
        text: '\u540E\u8D34',
        value: 23
    }, {
        alias: 'VIDEO_OVERLAY',
        text: '\u8986\u76D6\u5E7F\u544A',
        value: 24
    }, {
        alias: 'VIDEO_VIDEO_LINK',
        text: '\u89C6\u9891\u94FE\u63A5',
        value: 25
    }, {
        alias: 'VIDEO_PAUSE',
        text: '\u89C6\u9891\u6682\u505C\u5E7F\u544A',
        value: 26
    }, {
        alias: 'VIDEO_TOOL_BAR',
        text: '\u5DE5\u5177\u680F\u5E7F\u544A',
        value: 27
    }, {
        alias: 'IMAGE_ICON',
        text: '\u56FE+ICON\u6837\u5F0F',
        value: 8
    }, {
        alias: 'IMAGE_PATCH',
        text: '\u56FE+\u8D34\u7247\u6837\u5F0F',
        value: 9
    }, {
        alias: 'IMAGE_UNFOLD',
        text: '\u56FE+\u53F3\u4E0A\u5C55\u5F00\u6837\u5F0F',
        value: 10
    }, {
        alias: 'IMAGE_FLIP',
        text: '\u56FE+\u7FFB\u8F6C\u6837\u5F0F',
        value: 31
    }, {
        alias: 'IMAGE_YUETU',
        text: '\u56FE+\u60A6\u56FE\u6837\u5F0F',
        value: 32
    }, {
        alias: 'MOBILE_NATIVE',
        text: '\u539F\u751F\u5E7F\u544A',
        value: 13
    });
    exports.Replenishment = new Enum({
        alias: 'DENY',
        text: '\u4E0D\u5141\u8BB8',
        value: 0
    }, {
        alias: 'ALLOW',
        text: '\u5141\u8BB8',
        value: 1
    });
    exports.IgnoreStyleMode = new Enum({
        alias: 'DENY',
        text: '\u4E0D\u5141\u8BB8',
        value: 1
    }, {
        alias: 'ALLOW',
        text: '\u5141\u8BB8',
        value: 2
    });
    exports.SizeContainer = new Enum({
        alias: 'DEVICE',
        text: '\u6309\u5C4F\u5E55\u5BBD\u5EA6',
        value: 2
    }, {
        alias: 'AUTO_WIDTH',
        text: '\u6309\u5C4F\u5E55\u5BBD\u5EA6',
        value: 3
    }, {
        alias: 'CONTAINER',
        text: '\u6309\u7236\u5BB9\u5668\u5BBD\u5EA6',
        value: 5
    }, {
        alias: 'AUTO_CONTAINER_WIDTH_FIXED_PIXEL_HEIGHT',
        text: '\u6309\u7236\u5BB9\u5668\u5BBD\u5EA6',
        value: 6
    }, {
        alias: 'FIXED_PIXEL_WIDTH_AUTO_CONTAINER_HEIGHT',
        text: '\u6309\u7236\u5BB9\u5668\u5BBD\u5EA6',
        value: 7
    }, {
        alias: 'AUTO_CONTAINER_WIDTH_AUTO_CONTAINER_HEIGHT',
        text: '\u6309\u7236\u5BB9\u5668\u5BBD\u5EA6',
        value: 8
    });
    exports.AnchoredType = new Enum({
        alias: 'QIANRU',
        text: '\u5D4C\u5165',
        value: 1
    }, {
        alias: 'XUANTING',
        text: '\u60AC\u505C',
        value: 2
    }, {
        alias: 'XUANFU',
        text: '\u60AC\u6D6E',
        value: 3
    }, {
        alias: 'GUANLIAN_SHIPIN',
        text: '\u89C6\u9891\u8D34\u7247',
        value: 4
    }, {
        alias: 'GUANLIAN_WENZI',
        text: '\u5185\u6587',
        value: 5
    }, {
        alias: 'GUANLIAN_TUPIAN',
        text: '\u56FE\u52A0',
        value: 6
    }, {
        alias: 'TANCHUANG',
        text: '\u5F39\u7A97',
        value: 7
    }, {
        alias: 'QUANPING',
        text: '\u5168\u5C4F',
        value: 8
    }, {
        alias: 'QIANRUANNIU',
        text: '\u5D4C\u5165\u6309\u94AE',
        value: 9
    }, {
        alias: 'XUANFUANNIU',
        text: '\u60AC\u6D6E\u6309\u94AE',
        value: 10
    }, {
        alias: 'YINCANG',
        text: '\u5185\u6587',
        value: 11
    }, {
        alias: 'FEED',
        text: '\u4FE1\u606F\u6D41',
        value: 12
    });
    return exports;
});
define('slot/ui/DeliverySetting', [
    'require',
    'esui',
    'underscore',
    'esui/InputControl',
    'etpl',
    '../enum',
    'esui/painters',
    'eoo',
    'text!./tpl/DeliverySetting.tpl.html'
], function (require) {
    var ui = require('esui');
    var u = require('underscore');
    var InputControl = require('esui/InputControl');
    var Engine = require('etpl').Engine;
    var etpl = new Engine();
    var ComplementType = require('../enum').ComplementType;
    var PriceType = require('../enum').PriceType;
    var priceTypes = PriceType.toArray();
    priceTypes.unshift({
        text: '\u4E0D\u8BBE\u7F6E',
        value: -1
    });
    var DEFAULT_RAW_VALUE = {
        priceType: -1,
        rate: '',
        complement: null,
        complementUrl: '',
        discount: '0.00',
        protectSettingId: ''
    };
    var exports = {};
    exports.type = 'DeliverySetting';
    exports.initOptions = function (options) {
        options = u.defaults(options, this.$self);
        this.setProperties(options);
    };
    exports.setRawValue = function (rawValue) {
        rawValue = u.extend({}, DEFAULT_RAW_VALUE, rawValue || {});
        this.$super([rawValue]);
    };
    exports.getRawValue = function () {
        var priceType = +this.getChild('priceType').getValue();
        var complement = +this.getChild('complement').getValue();
        var complementUrl = this.getChild('complementUrl').getChild('input').getValue();
        var protectSettingId = this.getChild('protectSettingPanel').getChild('protectSetting').getValue();
        var rtbComplement = this.rawValue.rtbComplement === -1 ? -1 : +this.getChild('rtbComplement').getValue();
        if (priceType === -1) {
            return {
                complement: complement,
                rtbComplement: rtbComplement,
                complementUrl: complementUrl,
                protectSettingId: protectSettingId
            };
        }
        var rawValue = {
            priceType: priceType,
            discount: formatNumber(+this.getChild('discount').getValue(), 2),
            complement: complement,
            rtbComplement: rtbComplement,
            complementUrl: complementUrl,
            protectSettingId: protectSettingId
        };
        var rate = this.getChild('rate').getValue();
        if (rate) {
            rawValue.rate = formatNumber(+rate, 2);
        }
        return rawValue;
    };
    function formatNumber(number, decimal) {
        return (Math.round(number * 100) / 100).toFixed(decimal);
    }
    exports.validate = function () {
        var rateValid = true;
        var discountValid = true;
        var complementUrlValid = true;
        if (this.hasState('cpc') || this.hasState('cpm') || this.hasState('cpd')) {
            rateValid = this.getChild('rate').validate();
            discountValid = this.getChild('discount').validate();
        }
        if (+this.getChild('complement').getValue() === ComplementType.URL) {
            complementUrlValid = this.getChild('complementUrl').getChild('input').validate();
        }
        return rateValid && discountValid && complementUrlValid;
    };
    exports.hideValidity = function () {
        this.getChild('rate').hideValidity();
        this.getChild('discount').hideValidity();
        this.getChild('complementUrl').getChild('input').hideValidity();
    };
    exports.initChildren = function () {
        this.helper.initChildren();
        var protectPanel = this.getChild('protectSettingPanel');
        protectPanel[this.get('protectSettingList') ? 'show' : 'hide']();
        protectPanel.getChild('createProtect').on('click', onCreateProtect, this);
        this.getChild('priceType').on('change', changeState, this);
        this.getChild('complement').on('change', changeComplement, this);
        changeState.call(this);
        changeComplement.call(this);
    };
    exports.repaint = require('esui/painters').createRepaint(InputControl.prototype.repaint, {
        name: [
            'rawValue',
            'protectSettingList',
            'complementTypes',
            'mediaDomains'
        ],
        paint: function (control, rawValue, protectSettingList, complementTypes, mediaDomains) {
            var data = {
                priceType: {
                    value: rawValue.priceType != null ? rawValue.priceType : DEFAULT_RAW_VALUE.priceType,
                    datasource: priceTypes
                },
                rate: {
                    id: control.helper.getId('rate'),
                    cls: control.helper.getPartClassName('rate'),
                    value: rawValue.rate || DEFAULT_RAW_VALUE.rate
                },
                discount: {
                    id: control.helper.getId('discount'),
                    cls: control.helper.getPartClassName('discount'),
                    value: rawValue.discount || DEFAULT_RAW_VALUE.discount
                },
                complement: {
                    value: typeof rawValue.complement === 'number' ? rawValue.complement : DEFAULT_RAW_VALUE.complement,
                    datasource: complementTypes,
                    url: rawValue.complementUrl || DEFAULT_RAW_VALUE.complementUrl,
                    rtb: typeof rawValue.rtbComplement === 'number' ? rawValue.rtbComplement : -1,
                    mediaDomains: mediaDomains
                },
                protectSetting: {
                    value: rawValue.protectSettingId || DEFAULT_RAW_VALUE.protectSettingId,
                    datasource: protectSettingList
                }
            };
            control.helper.disposeChildren();
            control.main.innerHTML = control.$self.renderTemplate(data);
            control.initChildren();
            if (data.complement.rtb !== -1 && mediaDomains.length) {
                control.getChild('domains').set('datasource', mediaDomains);
            }
        }
    });
    var oo = require('eoo');
    var DeliverySetting = oo.create(require('esui/InputControl'), exports);
    DeliverySetting.renderTemplate = etpl.compile(require('text!./tpl/DeliverySetting.tpl.html'));
    function changeState() {
        var value = +this.getChild('priceType').getValue();
        this.removeState('cpc');
        this.removeState('cpd');
        this.removeState('cpm');
        if (value !== -1) {
            this.addState(PriceType.getAliasFromValue(value).toLowerCase());
        }
    }
    function changeComplement() {
        var value = +this.getChild('complement').getValue();
        var url = this.getChild('complementUrl');
        value === ComplementType.URL ? url.show() : url.hide();
    }
    function onCreateProtect(e) {
        e.preventDefault();
        this.fire('createprotect');
    }
    ui.register(DeliverySetting);
    return DeliverySetting;
});
define('text', ['require'], function (require) {
    return {
        load: function (resourceId, req, load) {
            var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
            xhr.open('GET', req.toUrl(resourceId), true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        load(xhr.responseText);
                    }
                    xhr.onreadystatechange = new Function();
                    xhr = null;
                }
            };
            xhr.send(null);
        }
    };
});
define('external/text', ['text'], function (target) {
    return target;
});
define('slot/ui/BasicSetting', [
    'require',
    'esui/InputControl',
    '../../common/util',
    'etpl',
    'text!./tpl/BasicSetting.tpl.html',
    'esui/painters',
    'eoo',
    'esui'
], function (require) {
    var InputControl = require('esui/InputControl');
    var u = require('../../common/util');
    var Engine = require('etpl').Engine;
    var etpl = new Engine();
    etpl.addFilter('pascalize', u.pascalize);
    etpl.compile(require('text!./tpl/BasicSetting.tpl.html'));
    var exports = {};
    exports.type = 'BasicSetting';
    exports.initOptions = function (options) {
        options = u.defaults(options, {
            datasource: [],
            rawValue: {}
        });
        options.valueGroups = {};
        this.setProperties(options);
    };
    exports.repaint = require('esui/painters').createRepaint(InputControl.prototype.repaint, {
        name: 'datasource',
        paint: function (control, datasource) {
            datasource = datasource || [];
            control.helper.disposeChildren();
            control.main.innerHTML = control.$self.renderTemplate({
                list: datasource,
                prefix: control.helper.getId()
            });
            control.helper.initChildren();
            control.setRawValue(u.defaults(control.rawValue, getDefaultValue(datasource)));
            updateValueControlGroups(control);
            bindEvents(control);
        }
    }, {
        name: 'rawValue',
        paint: function (control, rawValue) {
            var datasource = control.get('datasource');
            if (datasource.length) {
                var value = u.defaults(rawValue || {}, getDefaultValue(datasource));
                var activeIndex = getActiveIndex(datasource, value);
                control.getChild('anchoredTypeContainer').set('activeIndex', activeIndex.anchoredTypeIndex);
                control.getChildSafely(value.anchoredType + 'Shape').set('activeIndex', activeIndex.shapeIndex);
                var sizeName = getSizeChildName(value.anchoredType, value.shape);
                if (value.shape === 'custom') {
                    var size = value.size.split('*');
                    control.getChildSafely(sizeName + 'Width').setValue(size[0]);
                    control.getChildSafely(sizeName + 'Height').setValue(size[1]);
                } else {
                    control.getChildSafely(sizeName).setValue(value.size);
                }
            }
        }
    });
    exports.getRawValue = function () {
        var value = {};
        var datasource = this.get('datasource');
        if (datasource.length) {
            var anchoredTypeIndex = this.getChild('anchoredTypeContainer').get('activeIndex');
            var anchoredType = datasource[anchoredTypeIndex];
            value.anchoredType = anchoredType.value;
            var shapeIndex = this.getChild(anchoredType.value + 'Shape').get('activeIndex');
            var shape = anchoredType.list[shapeIndex];
            value.shape = shape.value;
            var sizeName = getSizeChildName(value.anchoredType, value.shape);
            if (value.shape === 'custom') {
                var width = this.getChild(sizeName + 'Width').getValue();
                value.size = width + '*' + this.getChild(sizeName + 'Height').getValue();
            } else {
                value.size = this.getChild(sizeName).getValue();
            }
        }
        value.size = value.size || undefined;
        return value;
    };
    exports.setRawValue = function (rawValue) {
        rawValue = rawValue || {};
        this.$super([rawValue]);
    };
    exports.stringifyValue = function (rawValue) {
        return JSON.stringify(rawValue);
    };
    exports.validate = function () {
        var rawValue = this.getRawValue();
        if (rawValue.shape === 'custom') {
            var sizeName = getSizeChildName(rawValue.anchoredType, rawValue.shape);
            return this.getChild(sizeName + 'Width').validate() && this.getChild(sizeName + 'Height').validate();
        }
        return true;
    };
    exports.hideValidity = function () {
        u.each(this.valueGroups.customGroup, function (customName) {
            this.getChild(customName).hideValidity();
        }, this);
    };
    exports.disable = function () {
        this.helper.disableChildren();
        this.$super(arguments);
    };
    function bindEvents(control) {
        var groups = control.valueGroups;
        u.each(groups.sizeGroup, function (sizeName) {
            control.getChild(sizeName).on('change', onChange, control);
        });
        u.each(groups.shapeGroup, function (shapeName) {
            control.getChild(shapeName).on('activate', onChange, control);
        });
        control.getChild('anchoredTypeContainer').on('activate', onChange, control);
    }
    function getActiveIndex(datasource, value) {
        var anchoredTypeIndex = -1;
        u.some(datasource, function (anchoredType, index) {
            if (anchoredType.value === value.anchoredType) {
                anchoredTypeIndex = index;
                return true;
            }
        });
        var shapeIndex = -1;
        if (anchoredTypeIndex !== -1) {
            u.some(datasource[anchoredTypeIndex].list, function (shape, index) {
                if (shape.value === value.shape) {
                    shapeIndex = index;
                    return true;
                }
            });
        }
        return {
            anchoredTypeIndex: anchoredTypeIndex,
            shapeIndex: shapeIndex
        };
    }
    function updateValueControlGroups(control) {
        var sizeGroup = [];
        var shapeGroup = [];
        var customGroup = [];
        u.each(control.get('datasource'), function (anchoredType) {
            shapeGroup.push(anchoredType.value + 'Shape');
            u.each(anchoredType.list, function (shape) {
                var sizeName = getSizeChildName(anchoredType.value, shape.value);
                if (shape.value === 'custom') {
                    var w = sizeName + 'Width';
                    var h = sizeName + 'Height';
                    sizeGroup.push(w, h);
                    customGroup.push(w, h);
                } else {
                    sizeGroup.push(sizeName);
                }
            });
        });
        control.valueGroups = {
            sizeGroup: sizeGroup,
            shapeGroup: shapeGroup,
            customGroup: customGroup
        };
    }
    function getDefaultValue(datasource) {
        var value = {};
        if (datasource && datasource.length) {
            value.anchoredType = datasource[0].value;
            value.shape = datasource[0].list[0].value;
            value.size = datasource[0].list[0].sizeList[0].value;
        }
        return value;
    }
    function getSizeChildName(anchoredType, shapeType) {
        shapeType = shapeType.charAt(0).toUpperCase() + shapeType.slice(1);
        return anchoredType + shapeType + 'Size';
    }
    function onChange() {
        this.fire('change');
    }
    var oo = require('eoo');
    var BasicSetting = oo.create(InputControl, exports);
    BasicSetting.renderTemplate = etpl.getRenderer('slotUIBasicSetting');
    require('esui').register(BasicSetting);
    return BasicSetting;
});
define('slot/SlotPermission', [
    'require',
    'common/util',
    'eoo'
], function (require) {
    var u = require('common/util');
    var exports = {};
    exports.canCreate = u.permission('SSP_ADPOSITION_NEW');
    exports.canModify = u.permission('SSP_ADPOSITION_MODIFY');
    exports.canBatchModify = u.permission('SSP_ADPOSITION_STATUS_MODIFY');
    exports.canViewReport = u.permission('SSP_REPORT_ADPOSITION');
    exports.canGetCode = u.permission('SSP_ADPOSITION_VIEW');
    exports.canCreateUnionComplement = u.permission('SSP_ADPOSITION_COMPLEMENT_UNION');
    exports.canCreateDeliveryInline = u.permission('SSP_DELIVERY_NEW');
    exports.canViewDelivery = u.permission('SSP_DELIVERY_VIEW');
    exports.canCreateProtect = u.permission('SSP_PROTECT_MANAGE');
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'systemPermission');
    return eoo.create(exports);
});
define('slot/SlotData', [
    'require',
    'common/util',
    'common/adapt/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager'
], function (require) {
    var u = require('common/util');
    var exports = {};
    exports.size = function () {
        return this.request('$entity/size', {}, {
            method: 'GET',
            url: '/$entity/size'
        });
    };
    exports.save = function (entity) {
        return this.request('$entity/save', entity, {
            method: 'POST',
            url: '/$entity!saveAdpos.action'
        });
    };
    exports.update = function (entity) {
        return this.request('$entity/update', entity, {
            method: 'POST',
            url: '/$entity!modifyAdpos.action'
        });
    };
    exports.findById = function (id) {
        return this.request('$entity/findById', { tuId: id }, {
            method: 'GET',
            url: '/$entity!edit.action'
        }).then(function (result) {
            return parseData(result.adpos);
        });
    };
    exports.getDomain = function () {
        return this.request('$entity/getDomain', null, {
            method: 'GET',
            url: '/client/cooperation/rescue/strategy!list.action'
        }).then(function (response) {
            return response.page.result[0];
        });
    };
    exports.updateDomainShield = function (query) {
        return this.request('$entity/updateDomainShield', query, {
            method: 'GET',
            url: '/client/cooperation/rescue/strategy!match.action'
        });
    };
    exports.getDomainShield = function (query) {
        return this.request('$entity/getDomainShield', query, {
            method: 'GET',
            url: '/client/cooperation/rescue/strategy!getRelation.action'
        });
    };
    exports.getChannelBindList = function () {
        return this.request('$entity/getChannelBindList', null, {
            method: 'GET',
            url: '/client/main/cooperation/cpro!channelBindList.action'
        });
    };
    exports.getDupDynamicPath = function (entity) {
        return this.request('$entity/getDupDynamicPath', entity, {
            method: 'GET',
            url: '/client/main/cooperation/cpro!getDupDynamicPath.action'
        });
    };
    function parseData(result) {
        var FILTER_ATTRIBUTE = [
            'basic',
            'container',
            'complement',
            'fillStyle',
            'context',
            'extra'
        ];
        var adpos = {};
        u.each(result, function (item, key) {
            adpos[key] = u.contains(FILTER_ATTRIBUTE, key) ? JSON.parse(item) : item;
        });
        return adpos;
    }
    var requests = {
        search: {
            name: 'slot/search',
            scope: 'instance',
            policy: 'auto'
        },
        list: {
            name: 'slot/list',
            scope: 'instance',
            policy: 'auto'
        },
        save: {
            name: 'slot/save',
            scope: 'instance',
            policy: 'auto'
        },
        update: {
            name: 'slot/update',
            scope: 'instance',
            policy: 'auto'
        },
        remove: {
            name: 'slot/remove',
            scope: 'instance',
            policy: 'auto'
        },
        restore: {
            name: 'slot/restore',
            scope: 'instance',
            policy: 'auto'
        },
        findById: {
            name: 'slot/findById',
            scope: 'instance',
            policy: 'auto'
        },
        tree: {
            name: 'slot/tree',
            scope: 'instance',
            policy: 'auto'
        },
        batch: {
            name: 'slot/batch',
            scope: 'instance',
            policy: 'auto'
        },
        size: {
            name: 'slot/size',
            scope: 'instance',
            policy: 'auto'
        },
        groupTree: {
            name: 'slot/groupTree',
            scope: 'instance',
            policy: 'auto'
        },
        getDomain: {
            name: 'slot/getDomain',
            scope: 'instance',
            policy: 'auto'
        },
        updateDomainShield: {
            name: 'slot/updateDomainShield',
            scope: 'instance',
            policy: 'auto'
        },
        getDomainShield: {
            name: 'slot/getDomainShield',
            scope: 'instance',
            policy: 'auto'
        },
        getChannelBindList: {
            name: 'slot/getChannelBindList',
            scope: 'instance',
            policy: 'auto'
        },
        getDupDynamicPath: {
            name: 'slot/getDupDynamicPath',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var BaseData = require('common/adapt/BaseData');
    var SlotData = require('eoo').create(BaseData, exports);
    var RequestManager = require('ub-ria/mvc/RequestManager');
    u.each(requests, function (config) {
        RequestManager.register(SlotData, config.name, config);
    });
    return SlotData;
});
define('report/softwareReports', [
    'require',
    'common/util'
], function (require) {
    var u = require('common/util');
    var exports = {};
    var COMMON_CONFIG = {
        generalFields: [
            'installs',
            'view',
            'click',
            'clickRatio',
            'ecpm',
            'income'
        ],
        basicFields: [
            'installs',
            'view',
            'click',
            'clickRatio',
            'ecpm',
            'income'
        ]
    };
    exports.software = u.extend({}, COMMON_CONFIG, {
        bizField: 'day',
        detailDimension: [
            'day',
            'c'
        ]
    });
    exports.c = u.extend({}, COMMON_CONFIG, {
        bizField: 'c',
        detailDimension: [
            'day',
            'searchChannel'
        ]
    });
    exports.searchChannel = u.extend({}, COMMON_CONFIG, {
        bizField: 'searchChannel',
        detailDimension: ['day']
    });
    return exports;
});
define('report/searchReports', [
    'require',
    'common/util'
], function (require) {
    var u = require('common/util');
    var exports = {};
    var COMMON_CONFIG = {
        generalFields: [
            'view',
            'click',
            'clickRatio',
            'ecpm',
            'income'
        ],
        basicFields: [
            'view',
            'click',
            'clickRatio',
            'ecpm',
            'income'
        ]
    };
    exports.search = u.extend({}, COMMON_CONFIG, {
        bizField: 'day',
        detailDimension: [
            'day',
            'c'
        ]
    });
    exports.c = u.extend({}, COMMON_CONFIG, {
        bizField: 'c',
        detailDimension: [
            'day',
            'searchChannel'
        ]
    });
    exports.searchChannel = u.extend({}, COMMON_CONFIG, {
        bizField: 'searchChannel',
        detailDimension: ['day']
    });
    return exports;
});
define('report/reports', [
    'require',
    'common/util'
], function (require) {
    var u = require('common/util');
    var exports = {};
    var CPRO_COMMON_CONFIG = {
        generalFields: [
            'adPositionView',
            'pageview',
            'click',
            'clickRatio',
            'ecpm',
            'income'
        ],
        basicFields: [
            'adPositionView',
            'pageview',
            'click',
            'clickRatio',
            'ecpm',
            'income'
        ]
    };
    exports.cpro = u.extend({}, CPRO_COMMON_CONFIG, {
        bizField: 'day',
        detailDimension: [
            'day',
            'c',
            'adPosition',
            'tm'
        ]
    });
    exports.c = u.extend({}, CPRO_COMMON_CONFIG, {
        bizField: 'c',
        detailDimension: [
            'day',
            'tm',
            'adPosition',
            'cproChannel'
        ]
    });
    exports.tm = u.extend({}, CPRO_COMMON_CONFIG, {
        bizField: 'tm',
        detailDimension: ['day']
    });
    exports.adPosition = {
        generalFields: [
            'view',
            'click',
            'clickRatio',
            'ecpm',
            'income'
        ],
        basicFields: [
            'view',
            'click',
            'clickRatio',
            'ecpm',
            'income'
        ],
        bizField: 'adPosition',
        detailDimension: ['day'],
        listFilters: [{
                name: 'adPosition',
                type: 'multi',
                text: '\u4EE3\u7801\u4F4D'
            }]
    };
    exports.cproChannel = u.extend({}, CPRO_COMMON_CONFIG, {
        bizField: 'cproChannel',
        detailDimension: ['day'],
        listFilters: [
            {
                name: 'cproChannelType',
                type: 'single',
                text: '\u6E20\u9053\u7C7B\u578B'
            },
            {
                name: 'cproChannel',
                type: 'multi',
                text: '\u6E20\u9053'
            }
        ],
        filterRelation: { cproChannel: ['cproChannelType'] }
    });
    exports.dan = {
        generalFields: [
            'view',
            'income'
        ],
        bizField: 'day',
        basicFields: [
            'view',
            'income'
        ],
        extraDimensions: ['danAdType'],
        listFilters: [{
                name: 'danAdType',
                type: 'single',
                text: '\u4EA7\u54C1'
            }]
    };
    exports.tuan = {
        generalFields: [
            'consume',
            'income'
        ],
        bizField: 'day',
        basicFields: [
            'consume',
            'income'
        ],
        listFilters: [{
                name: 'c',
                type: 'single',
                text: '\u8BA1\u8D39\u540D'
            }]
    };
    return exports;
});
define('report/reportURLMap', [
    'require',
    'common/util',
    './enum'
], function (require) {
    var u = require('common/util');
    var UnionBizType = require('./enum').UnionBizType;
    var mainReports = UnionBizType.toArray();
    var subReports = [
        {
            type: 'c',
            unionBizTypeId: UnionBizType.CPRO
        },
        {
            type: 'tm',
            unionBizTypeId: UnionBizType.CPRO
        },
        {
            type: 'adPosition',
            unionBizTypeId: UnionBizType.CPRO
        },
        {
            type: 'cproChannel',
            unionBizTypeId: UnionBizType.CPRO
        },
        {
            type: 'app',
            unionBizTypeId: UnionBizType.CPRO_APP
        },
        {
            type: 'c',
            unionBizTypeId: UnionBizType.SEARCH
        },
        {
            type: 'searchChannel',
            unionBizTypeId: UnionBizType.SEARCH
        },
        {
            type: 'c',
            unionBizTypeId: UnionBizType.REFLUX
        },
        {
            type: 'refluxAdPosition',
            unionBizTypeId: UnionBizType.REFLUX
        },
        {
            type: 'c',
            unionBizTypeId: UnionBizType.SOFTWARE
        },
        {
            type: 'searchChannel',
            unionBizTypeId: UnionBizType.SOFTWARE
        }
    ];
    var exports = {};
    u.each(mainReports, function (report) {
        var url = '/report/' + report.text;
        exports[report.text + report.value] = url;
        exports['outer' + report.value] = '/report/' + report.text + 'Report';
    });
    u.each(subReports, function (report) {
        var mainReport = UnionBizType.getTextFromValue(report.unionBizTypeId);
        var mainReportURL = exports[mainReport + report.unionBizTypeId];
        exports[report.type + report.unionBizTypeId] = mainReportURL + '/' + report.type;
    });
    return exports;
});
define('report/mvc/helper/TypeInfoHelper', [
    'require',
    'common/util',
    'er/URL',
    'eoo',
    'ssp-report/mvc/helper/TypeInfoHelper'
], function (require) {
    var u = require('common/util');
    var URL = require('er/URL');
    var prototype = {};
    prototype.buildRawTypeInfo = function (model) {
        var typeInfo = this.$super(arguments);
        typeInfo.cId = model.get('cId');
        typeInfo.cName = model.get('cName');
        typeInfo.unionBizTypeId = model.getUnionBizTypeId();
        return u.purify(typeInfo);
    };
    prototype.resolveURL = function (typeInfo) {
        if (typeof typeInfo === 'string') {
            typeInfo = this.parse(typeInfo);
        }
        var map = this.getURLMap() || {};
        var url = map[typeInfo.reportType + typeInfo.unionBizTypeId];
        var query = u.omit(typeInfo, 'reportType', 'unionBizTypeId');
        return URL.withQuery(url, query).toString();
    };
    prototype.resolveOuterURL = function (typeInfo) {
        if (typeof typeInfo === 'string') {
            typeInfo = this.parse(typeInfo);
        }
        var map = this.getURLMap() || {};
        return map['outer' + typeInfo.unionBizTypeId];
    };
    var TypeInfoHelper = require('eoo').create(require('ssp-report/mvc/helper/TypeInfoHelper'), prototype);
    return TypeInfoHelper;
});
define('report/mvc/fetcher/EnumFetcher', [
    'require',
    'eoo',
    'ssp-report/mvc/fetcher/EnumFetcher'
], function (require) {
    var prototype = {};
    prototype.buildData = function (enumObject) {
        var data = enumObject.toArray();
        data.unshift({
            text: '\u5168\u90E8',
            value: 'all'
        });
        return data;
    };
    return require('eoo').create(require('ssp-report/mvc/fetcher/EnumFetcher'), prototype);
});
define('report/mvc/fetcher/ChFetcher', [
    'require',
    'eoo',
    './SingleTypeFilterFetcher'
], function (require) {
    var prototype = {};
    prototype.buildData = function () {
        var data = this.$super(arguments);
        data.splice(1, 0, {
            text: '\u767E\u5EA6\u8054\u76DF',
            value: 0
        });
        return data;
    };
    return require('eoo').create(require('./SingleTypeFilterFetcher'), prototype);
});
define('report/mvc/fetcher/ListFetcher', [
    'require',
    'common/util',
    'ssp-report/util',
    'eoo'
], function (require) {
    var u = require('common/util');
    var reportUtil = require('ssp-report/util');
    var prototype = {};
    prototype.constructor = function (data) {
        this.data = data;
    };
    prototype.fetch = function (dimension, query) {
        var data = this.data;
        query = this.getQuery(dimension, query);
        var loading = data.getFilterList(query);
        return loading.then(u.bind(this.buildData, this));
    };
    prototype.getQuery = function (dimension, query) {
        query = this.buildQuery(dimension, query);
        return u.purify(this.serializeValue(query));
    };
    prototype.buildQuery = function (dimension, query) {
        var options = {
            fields: [
                dimension + 'Id',
                dimension + 'Name'
            ]
        };
        var filterFields = [];
        var filterValues = [];
        u.each(query, function (value, key) {
            if (value != null) {
                filterFields.push(key);
                if (!u.isArray(value)) {
                    value = [value];
                }
                filterValues.push(value);
            }
        });
        options.filterFields = filterFields;
        options.filterValues = filterValues;
        return options;
    };
    prototype.serializeValue = function (query) {
        query.fields = query.fields.join();
        if (query.filterFields.length) {
            query.filterFields = query.filterFields.join();
            query.filterValues = reportUtil.stringifyFilterValues(query.filterValues);
        }
        return query;
    };
    prototype.buildData = function (data) {
        return u.map(data.results, function (item) {
            var formattedItem = {};
            u.each(item, function (value, key) {
                if (key.endsWith('Id')) {
                    formattedItem.id = value;
                }
                if (key.endsWith('Name')) {
                    formattedItem.name = value;
                }
            });
            return formattedItem;
        });
    };
    return require('eoo').create(prototype);
});
define('report/mvc/fetcher/SingleTypeFilterFetcher', [
    'require',
    'common/util',
    'eoo',
    './ListFetcher'
], function (require) {
    var u = require('common/util');
    var prototype = {};
    prototype.buildData = function (data) {
        data = u.map(data.results, function (item) {
            var formattedItem = {};
            u.each(item, function (value, key) {
                if (key.endsWith('Id')) {
                    formattedItem.value = value;
                }
                if (key.endsWith('Name')) {
                    formattedItem.text = value;
                }
            });
            return formattedItem;
        });
        data.unshift({
            value: 'all',
            text: '\u5168\u90E8'
        });
        return data;
    };
    return require('eoo').create(require('./ListFetcher'), prototype);
});
define('report/mvc/fetcher/CFetcher', [
    'require',
    'eoo',
    './SingleTypeFilterFetcher'
], function (require) {
    var prototype = {};
    prototype.constructor = function (data, cTypeId) {
        this.$super(arguments);
        this.cTypeId = cTypeId;
    };
    prototype.buildQuery = function (dimension, query) {
        query = this.$super(arguments);
        query.filterFields = query.filterFields || [];
        query.filterValues = query.filterValues || [];
        query.filterFields.push('cTypeId');
        query.filterValues.push([this.cTypeId]);
        return query;
    };
    return require('eoo').create(require('./SingleTypeFilterFetcher'), prototype);
});
define('report/mvc/ReportListView', [
    'require',
    'ub-ria/util',
    'esui/Toast',
    'common/adapt/ListViewHelper',
    'ssp-report/mvc/ReportListView',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var Toast = require('esui/Toast');
    var prototype = {};
    prototype.template = 'unionReportList';
    prototype.entityDescription = '\u62A5\u544A';
    prototype.enterDocument = function () {
        this.$super(arguments);
        this.showSavedFilterValueDeletedTip();
        var filter = this.getSafely('filter');
        if (filter.isHidden()) {
            filter.show();
            this.getSafely('filter-switch').addState('expand');
        }
        var filterSelect = this.get('adPosition') || this.get('tm') || this.get('searchChannel') || this.get('cproChannel');
        if (filterSelect) {
            filterSelect.getChild('selector').on('submit', onFilterSelectChange, this);
        }
    };
    function onFilterSelectChange() {
        this.fire('search');
    }
    prototype.showSavedFilterValueDeletedTip = function () {
        if (this.model.get('hasDeletedFilterValue')) {
            var message = '\u6B64\u62A5\u544A\u6A21\u677F\u9009\u9879\u5DF2\u53D8\u66F4\uFF0C\u8BF7\u91CD\u65B0\u4FDD\u5B58\u62A5\u544A\u6A21\u677F\uFF01';
            Toast.alert(message, { duration: 5000 }).show();
        }
    };
    u.extend(prototype, require('common/adapt/ListViewHelper'));
    var BaseReportListView = require('ssp-report/mvc/ReportListView');
    var ReportListView = require('eoo').create(BaseReportListView, prototype);
    return ReportListView;
});
define('report/mvc/ReportListModel', [
    'require',
    'ub-ria/util',
    'ssp-report/mvc/ReportListModel',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var prototype = {};
    prototype.prepare = function () {
        this.$super(arguments);
        if (this.get('templateId')) {
            this.prepareFilterValuesChangeNotice();
        }
        prepareListGeneralData.call(this);
    };
    prototype.prepareFilterValuesChangeNotice = function () {
        var shouldCheckedSet = new Set([
            'app',
            'tm',
            'searchChannel',
            'cproChannel'
        ]);
        var filterConfigs = this.get('filterConfigs');
        var hasDeleted = u.some(filterConfigs, function (config) {
            var dimension = config.name;
            var ids = config.value;
            var datasource = u.indexBy(config.datasource, 'id');
            return shouldCheckedSet.has(dimension) && u.some(ids, function (id) {
                return !datasource[id];
            });
        });
        this.set('hasDeletedFilterValue', hasDeleted);
    };
    function prepareListGeneralData() {
        var dimensionSet = [
            'tm',
            'cproChannel',
            'adPosition'
        ];
        var hasResult = this.get('hasResult');
        var dimension = this.get('dimension');
        var filterFields = this.get('filterFields');
        var index = u.indexOf(dimensionSet, dimension);
        var cachList = this.data().getCacheList();
        var results = cachList.results;
        if (index !== -1 && hasResult && results.length > 1 && filterFields.indexOf(dimensionSet[index] + 'Id') !== -1) {
            var listGeneralFields = u.deepClone(this.get('listFields'));
            listGeneralFields.shift();
            listGeneralFields.unshift({
                field: 'label',
                title: '\u7B5B\u9009\u7ED3\u679C',
                width: 140,
                stable: true,
                content: 'label'
            });
            u.map(listGeneralFields, function (item) {
                item.sortable = false;
                return item;
            });
            this.set('listGeneralFields', listGeneralFields);
            var listGeneralData = [
                { label: '\u603B\u548C' },
                { label: '\u5E73\u5747\u503C' }
            ];
            var isContrast = this.get('isContrast');
            processGeneralData(listGeneralData, results);
            if (isContrast) {
                var contrastResults = cachList.contrastResults;
                processGeneralData(listGeneralData, contrastResults, 'Contrast');
            }
            this.set('listGeneralData', listGeneralData);
        }
    }
    function processGeneralData(generalData, results, suffix) {
        var dimension = [
            'adPositionView',
            'click',
            'pageview',
            'income'
        ];
        suffix = suffix || '';
        u.each(dimension, function (item) {
            var total = sum(results, item);
            generalData[0][item + suffix] = sum(results, item);
            generalData[1][item + suffix] = (total / results.length).toFixed(2);
        });
        var adPositionView = generalData[0]['adPositionView' + suffix];
        generalData[0]['clickRatio' + suffix] = generalData[1]['clickRatio' + suffix] = adPositionView === 0 ? '--' : (generalData[0]['click' + suffix] / generalData[0]['adPositionView' + suffix] * 100).toFixed(2);
        generalData[0]['ecpm' + suffix] = generalData[1]['ecpm' + suffix] = adPositionView === 0 ? '--' : (generalData[0]['income' + suffix] / generalData[0]['adPositionView' + suffix] * 1000).toFixed(2);
    }
    function sum(list, property) {
        var pluckArr = u.pluck(list, property);
        return u.reduce(pluckArr, function (memo, item) {
            return memo + (+item || 0);
        }, 0);
    }
    var BaseReportListModel = require('ssp-report/mvc/ReportListModel');
    var ReportListModel = require('eoo').create(BaseReportListModel, prototype);
    return ReportListModel;
});
define('report/mvc/ReportList', [
    'require',
    'ub-ria/util',
    'common/adapt/ListActionHelper',
    'ssp-report/mvc/ReportList',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var prototype = {};
    prototype.entityDescription = '\u62A5\u544A';
    u.extend(prototype, require('common/adapt/ListActionHelper'));
    var BaseReportList = require('ssp-report/mvc/ReportList');
    var ReportList = require('eoo').create(BaseReportList, prototype);
    return ReportList;
});
define('report/mvc/ReportGeneralModel', [
    'require',
    'common/util',
    'moment',
    'ssp-report/util',
    '../enum',
    'eoo',
    'ssp-report/mvc/ReportGeneralModel'
], function (require) {
    var u = require('common/util');
    var moment = require('moment');
    var reportUtil = require('ssp-report/util');
    var UnionBizType = require('../enum').UnionBizType;
    var prototype = {};
    prototype.buildDetailData = function () {
        var detailData = this.$super(arguments);
        var dataConfigMap = u.indexBy(this.get('dataConfig'), 'field');
        var generalConfig = this.getGeneralConfig();
        var bizType = UnionBizType.getTextFromValue(this.get('unionBizTypeId'));
        u.each(dataConfigMap, function (item, key) {
            var generalConfigItem = generalConfig[key];
            detailData[key + 'Text'] = generalConfigItem.text;
            detailData[key + 'AverageText'] = generalConfigItem.averageText;
            detailData[key + 'Tip'] = generalConfigItem.tip && (generalConfigItem.tip[bizType] || generalConfigItem.tip.common);
            var dayRange = getDayRange(item.begin, item.end);
            var average = getAverage(detailData[key + 'Raw'], generalConfigItem, dayRange);
            detailData[key + 'AverageData'] = reportUtil.format(average, item.format);
        }, this);
        return detailData;
    };
    function getDayRange(begin, end) {
        return Math.abs(moment(begin).diff(moment(end), 'days')) + 1;
    }
    function getAverage(value, config, dayRange) {
        var average = value;
        if (config.getAverage) {
            average = config.getAverage(average, dayRange);
        }
        return average;
    }
    var eoo = require('eoo');
    eoo.defineAccessor(prototype, 'generalConfig');
    var ReportGeneralModel = eoo.create(require('ssp-report/mvc/ReportGeneralModel'), prototype);
    return ReportGeneralModel;
});
define('ssp-report/mvc/ReportEmailFormModel', [
    'require',
    '../util',
    'ub-ria/mvc/rule',
    '../enum',
    'er/datasource',
    'eoo',
    'ub-ria/mvc/FormModel'
], function (require) {
    var u = require('../util');
    var rule = require('ub-ria/mvc/rule');
    var EmailFrequency = require('../enum').EmailFrequency;
    var ReportFileType = require('../enum').ReportFileType;
    var exports = {};
    var weekDatasource = generateSelectDatasource('week');
    var monthDatasource = generateSelectDatasource('month');
    function generateSelectDatasource(type) {
        var weekdays = '\u5468\u4E00,\u5468\u4E8C,\u5468\u4E09,\u5468\u56DB,\u5468\u4E94,\u5468\u516D,\u5468\u65E5'.split(',');
        var isWeek = type === 'week';
        var length = isWeek ? 7 : 31;
        var datasource = [];
        for (var i = 0; i < length; i++) {
            var item = {
                text: isWeek ? weekdays[i] : i + 1 + '\u53F7',
                value: i + 1
            };
            datasource.push(item);
        }
        return datasource;
    }
    var datasource = require('er/datasource');
    var EMAIL_FREQUENCIES = { emailFrequencies: datasource.constant(EmailFrequency.toArray()) };
    var EMAIL_DATE_DATASOURCE = {
        weekDatasource: datasource.constant(weekDatasource),
        monthDatasource: datasource.constant(monthDatasource)
    };
    var ATTACHMENT_TYPES = { attachmentTypes: datasource.constant(ReportFileType.toArray()) };
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(EMAIL_FREQUENCIES, 0);
        this.putDatasource(EMAIL_DATE_DATASOURCE, 0);
        this.putDatasource(ATTACHMENT_TYPES, 0);
        this.set('rule', rule);
    };
    exports.prepare = function () {
        this.$super(arguments);
        if (this.has('activeEntity') && !this.has('id')) {
            var entity = this.get('activeEntity');
            this.set('entity', entity);
            this.fill(entity);
        }
        if (this.get('emails')) {
            this.set('emails', this.get('emails').join(';'));
        }
    };
    exports.validateEntity = function (entity) {
        var results = this.$super(arguments);
        var emailPattern = this.get('rule').mail.pattern;
        if (u.isEmpty(entity.emails)) {
            results.push({
                field: 'emails',
                message: '\u8BF7\u8F93\u5165\u90AE\u7BB1\u5730\u5740'
            });
        } else {
            var emails = entity.emails;
            var result = u.every(emails, function (email) {
                return emailPattern.test(email);
            });
            if (!result) {
                results.push({
                    field: 'emails',
                    message: '\u8BF7\u8F93\u5165\u5408\u6CD5\u7684\u90AE\u7BB1\u5730\u5740'
                });
            } else if (emails.length > 10) {
                results.push({
                    field: 'emails',
                    message: '\u90AE\u7BB1\u6570\u76EE\u4E0D\u80FD\u8D85\u8FC710\u4E2A'
                });
            }
        }
        return results;
    };
    exports.fillEntity = function (entity) {
        entity = this.$super(arguments);
        var originEntity = this.get('entity');
        var defaultEntity = {
            name: '',
            emailFrequency: EmailFrequency.ONCE,
            emailDate: null,
            attachmentType: ReportFileType.CSV,
            emails: []
        };
        entity = u.defaults(entity, defaultEntity);
        var newEntity = u.extend({}, originEntity, entity);
        return newEntity;
    };
    var ReportEmailFormModel = require('eoo').create(require('ub-ria/mvc/FormModel'), exports);
    return ReportEmailFormModel;
});
define('report/mvc/ReportEmailFormModel', [
    'require',
    'ssp-report/mvc/ReportEmailFormModel',
    'eoo'
], function (require) {
    var prototype = {};
    prototype.prepare = function () {
        this.$super(arguments);
        var emailFrequencies = this.get('emailFrequencies').slice(1);
        this.set('emailFrequencies', emailFrequencies);
    };
    var BaseReportEmailFormModel = require('ssp-report/mvc/ReportEmailFormModel');
    var ReportEmailFormModel = require('eoo').create(BaseReportEmailFormModel, prototype);
    return ReportEmailFormModel;
});
define('report/mvc/ReportDiyListView', [
    'require',
    'ub-ria/util',
    'esui/Table',
    'er/URL',
    'common/adapt/ListViewHelper',
    'ssp-report/mvc/ReportDiyListView',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var Table = require('esui/Table');
    var URL = require('er/URL');
    var prototype = {};
    prototype.entityDescription = '\u62A5\u544A\u6A21\u677F';
    prototype.popOperationView = function (options) {
        return this.waitDrawerActionPanel(options);
    };
    prototype.waitDrawerActionPanel = function (options) {
        var panel = this.popDrawerAction(options);
        panel.on('action@cancel', cancel);
        panel.on('action@handlefinish', closeAndDispose);
        panel.show();
        var executor = function (resolve, reject) {
            panel.on('actionloaded', resolve);
            panel.on('actionloadfail', reject);
            panel.on('actionloadabort', reject);
        };
        return new Promise(executor);
    };
    function cancel(e) {
        e.target.dispose();
    }
    function closeAndDispose(e) {
        e.target.hide();
        e.target.dispose();
    }
    prototype.getOperationActionOptions = function (type, title) {
        var options = { url: this.model.get(type.toLowerCase() + 'ActionURL') };
        return options;
    };
    prototype.getTableFields = function () {
        var tableFields = this.$super(arguments);
        tableFields = tableFields.filter(function (item) {
            return item.field !== 'author';
        });
        var view = this;
        var canDownload = this.model.checkPermission('canDownload');
        var canRemove = this.model.checkPermission('canRemoveReportTemplate');
        var canEmail = this.model.checkPermission('canEmailReportTemplate');
        var operationsField = u.where(tableFields, { field: 'operations' })[0];
        operationsField.content = function (item) {
            var config = [
                {
                    text: '\u8BBE\u7F6E\u5B9A\u65F6\u53D1\u9001',
                    type: 'email',
                    command: 'email',
                    auth: canEmail,
                    args: item.id
                },
                {
                    text: '\u5220\u9664',
                    type: 'remove',
                    command: 'remove',
                    auth: canRemove,
                    args: item.id
                },
                {
                    text: '\u4E0B\u8F7D',
                    type: 'download',
                    command: 'download',
                    auth: canDownload,
                    args: item.id
                }
            ];
            var operationsHTML = Table.operations(config);
            var readHTML = view.getReadHTML(item, '\u67E5\u770B');
            return '' + '<span class="table-operation-trigger">\u64CD\u4F5C</span>' + '    <div class="table-operation-layer">' + readHTML + operationsHTML + '    </div>';
        };
        var nameField = u.where(tableFields, { field: 'name' })[0];
        nameField.content = function (item) {
            return view.getReadHTML(item);
        };
        return tableFields;
    };
    prototype.getReadHTML = function (item, name) {
        name = name || u.escape(item.name);
        var template = '<a target="_outerparent" href="${url}">${name}</a>';
        var data = {
            url: this.getOuterParentURL(item),
            name: name
        };
        return u.template(template, data);
    };
    prototype.getOuterParentURL = function (item) {
        var readURL = this.getReadURL(item);
        var outerURL = this.getTypeInfoHelper().resolveOuterURL(item.typeInfo);
        return '#' + URL.withQuery(outerURL, { innerURL: encodeURIComponent(readURL) });
    };
    u.extend(prototype, require('common/adapt/ListViewHelper'));
    var BaseReportDiyListView = require('ssp-report/mvc/ReportDiyListView');
    var ReportDiyListView = require('eoo').create(BaseReportDiyListView, prototype);
    return ReportDiyListView;
});
define('report/mvc/ReportDiyListModel', [
    'require',
    '../enum',
    'ssp-report/mvc/ReportDiyListModel',
    'eoo'
], function (require) {
    var UnionBizType = require('../enum').UnionBizType;
    var prototype = {};
    var PAGE_SIZE_DATASOURCE = {
        pageSize: function (model) {
            var globalData = model.data('global');
            var pageSize = model.get('pageSize');
            return pageSize ? pageSize : globalData.getUser().thenGetProperty('pageSize');
        }
    };
    var USER = {
        user: function (model) {
            return model.data('global').getUser();
        }
    };
    prototype.constructor = function () {
        this.$super(arguments);
        var datasource = this.getDatasource();
        datasource[0] && datasource[0].pageSize && delete datasource[0].pageSize;
        datasource.unshift(PAGE_SIZE_DATASOURCE);
        this.putDatasource(USER, 0);
    };
    prototype.getQuery = function () {
        var query = this.$super(arguments);
        query.pageSize = this.get('pageSize') || 20;
        return query;
    };
    prototype.search = function (query) {
        var data = this.data();
        var user = this.get('user');
        var appWhiteFlag = user.keepAppCustomer && user.bizStatus.cpro;
        if (!appWhiteFlag) {
            query.unionBizTypeIds = [
                UnionBizType.CPRO,
                UnionBizType.SEARCH,
                UnionBizType.DAN,
                UnionBizType.TUAN,
                UnionBizType.SOFTWARE,
                UnionBizType.REFLUX,
                UnionBizType.HAO123
            ].join();
        }
        return data.search(query || {});
    };
    var BaseReportDiyListModel = require('ssp-report/mvc/ReportDiyListModel');
    var ReportDiyListModel = require('eoo').create(BaseReportDiyListModel, prototype);
    return ReportDiyListModel;
});
define('report/mvc/ReportDiyList', [
    'require',
    'ub-ria/util',
    'common/adapt/ListActionHelper',
    'ssp-report/mvc/ReportDiyList',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var prototype = {};
    prototype.entityDescription = '\u62A5\u544A\u6A21\u677F';
    u.extend(prototype, require('common/adapt/ListActionHelper'));
    var BaseReportDiyList = require('ssp-report/mvc/ReportDiyList');
    var ReportDiyList = require('eoo').create(BaseReportDiyList, prototype);
    return ReportDiyList;
});
define('report/mvc/ReportView', [
    'require',
    'eoo',
    'esui/Toast',
    'ssp-report/util',
    'moment',
    'common/adapt/DrawerPanelHelper',
    '../enum',
    'ssp-report/mvc/ReportView'
], function (require) {
    var eoo = require('eoo');
    var Toast = require('esui/Toast');
    var reportUtil = require('ssp-report/util');
    var moment = require('moment');
    var helper = require('common/adapt/DrawerPanelHelper');
    var prototype = {};
    prototype.entityDescription = '\u62A5\u544A';
    prototype.getUIProperties = function () {
        var uiProperties = this.$super(arguments);
        var getYesterday = function (now) {
            return moment(now).subtract('day', 1).toDate();
        };
        var shortCutItems = [
            reportUtil.dateRangeShortcut.yesterday,
            reportUtil.dateRangeShortcut.lastSevenDays,
            reportUtil.dateRangeShortcut.lastWeek,
            {
                text: '\u672C\u6708',
                value: 4,
                alias: 'currentMonth',
                getValue: function (now) {
                    return {
                        begin: moment(now).startOf('month').toDate(),
                        end: getYesterday(now)
                    };
                }
            },
            reportUtil.dateRangeShortcut.lastMonth,
            reportUtil.dateRangeShortcut.lastQuarter
        ];
        var lastPayDate = this.model.get('lastPayDate');
        if (lastPayDate) {
            var shortcutItem = {
                text: '\u81EA\u4E0A\u6B21\u5206\u8D26',
                value: 10,
                getValue: function (now) {
                    return {
                        begin: moment(lastPayDate, 'YYYYMMDD').toDate(),
                        end: getYesterday(now)
                    };
                }
            };
            shortCutItems.push(shortcutItem);
        }
        uiProperties.range = { shortCutItems: shortCutItems };
        return uiProperties;
    };
    prototype.popOperationView = function (options) {
        return this.waitDrawerActionPanel(options);
    };
    prototype.waitDrawerActionPanel = function (options) {
        var panel = this.popDrawerAction(options);
        panel.show();
        var executor = function (resolve, reject) {
            panel.on('actionloaded', resolve);
            panel.on('actionloadfail', reject);
            panel.on('actionloadabort', reject);
        };
        return new Promise(executor);
    };
    prototype.popDrawerAction = function (options) {
        var panel = helper.popDrawerAction.call(this, options);
        panel.on('action@submitcancel', cancel);
        panel.on('action@cancel', cancel);
        panel.on('action@handlefinish', closeAndDispose);
        panel.on('close', closeDrawerActionPanel, this);
        return panel;
    };
    function cancel(e) {
        e.preventDefault();
        this.dispose();
    }
    function closeAndDispose(e) {
        e.target.hide();
        e.target.dispose();
    }
    function closeDrawerActionPanel(e) {
        this.fire('close');
    }
    prototype.getOperationActionOptions = function (type, title) {
        var options = {
            url: this.model.get(type.toLowerCase() + 'ActionURL'),
            actionOptions: this.model['get' + type + 'ActionOptions']()
        };
        return options;
    };
    prototype.enterDocument = function () {
        this.$super(arguments);
        if (this.model.get('cStatus')) {
            this.showBanToast();
        }
    };
    prototype.showBanToast = function () {
        var bizItem = require('../enum').UnionBizType.fromValue(this.model.getUnionBizTypeId());
        var message = '\u60A8\u6709\u88AB\u5C01\u7981\u7684' + bizItem.cnName + '\u4E1A\u52A1\u8BA1\u8D39\u540D\uFF01';
        Toast.alert(message, { duration: 5000 }).show();
    };
    var BaseReportView = require('ssp-report/mvc/ReportView');
    var ReportView = eoo.create(BaseReportView, prototype);
    return ReportView;
});
define('report/mvc/Hao123ReportView', [
    'exports',
    'module',
    'tpl!startup/template',
    './ReportView',
    'ssp-report/util'
], function (exports, module, _tplTplHao123ReportTplHtml, _ReportView2, _sspReportUtil) {
    var _ReportView3 = babelHelpers.interopRequireDefault(_ReportView2);
    var _reportUtil = babelHelpers.interopRequireDefault(_sspReportUtil);
    var Hao123ReportView = function (_ReportView) {
        babelHelpers.inherits(Hao123ReportView, _ReportView);
        babelHelpers.createClass(Hao123ReportView, [{
                key: 'template',
                get: function get() {
                    return 'unionStandardHao123Report';
                }
            }]);
        function Hao123ReportView() {
            babelHelpers.classCallCheck(this, Hao123ReportView);
            babelHelpers.get(Object.getPrototypeOf(Hao123ReportView.prototype), 'constructor', this).call(this);
            var uiEvents = {
                'hao123-report-type:change': 'notifyRefresh',
                'biz-type:change': 'notifyRefresh',
                'tname:change': 'notifyRefresh'
            };
            this.addUIEvents(uiEvents);
            var uiProperties = {
                'tname-selector': {
                    fields: [
                        {
                            field: 'name',
                            content: 'name',
                            width: 82,
                            title: '\u540D\u79F0',
                            searchScope: 'partial',
                            isDefaultSearchField: true,
                            caseSensitive: false
                        },
                        {
                            field: 'status',
                            title: '\u72B6\u6001',
                            width: 35,
                            content: function content(item) {
                                if (item.status === 2) {
                                    return '<span class="tname-banned">\u5DF2\u5C01\u7981</span>';
                                }
                                return '';
                            }
                        }
                    ]
                }
            };
            this.addUIProperties(uiProperties);
        }
        babelHelpers.createClass(Hao123ReportView, [{
                key: 'getSearchArgs',
                value: function getSearchArgs() {
                    var args = babelHelpers.get(Object.getPrototypeOf(Hao123ReportView.prototype), 'getSearchArgs', this).call(this);
                    var filterFields = args.filterFields.split(',');
                    var filterValues = _reportUtil['default'].parseFilterValues(args.filterValues);
                    var hao123ReportTypeIdIndex = filterFields.indexOf('hao123ReportTypeId');
                    if (hao123ReportTypeIdIndex >= 0) {
                        filterValues[hao123ReportTypeIdIndex] = [this.get('hao123-report-type').getValue()];
                    }
                    var hao123BizTypeIdIndex = filterFields.indexOf('hao123BizTypeId');
                    if (hao123BizTypeIdIndex >= 0) {
                        filterValues[hao123BizTypeIdIndex] = [this.get('biz-type').getValue()];
                    }
                    var tnameIndex = filterFields.indexOf('tnameId');
                    if (tnameIndex >= 0) {
                        filterValues[tnameIndex] = [this.get('tname').getValue()];
                    } else {
                        filterFields.push('tnameId');
                        filterValues.push([this.get('tname').getValue()]);
                    }
                    args.filterFields = filterFields.join(',');
                    args.filterValues = _reportUtil['default'].stringifyFilterValues(filterValues);
                    return args;
                }
            }]);
        return Hao123ReportView;
    }(_ReportView3['default']);
    module.exports = Hao123ReportView;
});
define('report/mvc/Hao123ReportModel', [
    'exports',
    'module',
    './DetailReportModel',
    'ssp-report/util',
    '../enum',
    'common/util'
], function (exports, module, _DetailReportModel2, _sspReportUtil, _enum, _commonUtil) {
    var _HAO123_BIZ_TYPE_MAP;
    var _DetailReportModel3 = babelHelpers.interopRequireDefault(_DetailReportModel2);
    var _reportUtil = babelHelpers.interopRequireDefault(_sspReportUtil);
    var _u = babelHelpers.interopRequireDefault(_commonUtil);
    var parseFilters = function parseFilters() {
        var filterFields = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
        var filterValues = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
        filterFields = filterFields.split(',');
        filterValues = _reportUtil['default'].parseFilterValues(filterValues);
        return {
            filterFields: filterFields,
            filterValues: filterValues
        };
    };
    var getHao123ReportTypeFromFilters = function getHao123ReportTypeFromFilters() {
        var filterFields = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
        var filterValues = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
        var _parseFilters = parseFilters(filterFields, filterValues);
        filterFields = _parseFilters.filterFields;
        filterValues = _parseFilters.filterValues;
        var index = filterFields.indexOf('hao123ReportTypeId');
        var hao123ReportType = filterValues[index] && filterValues[index][0];
        try {
            var definition = _enum.Hao123ReportType.fromValue(+hao123ReportType);
            return definition.value;
        } catch (e) {
            return _enum.Hao123ReportType.IP;
        }
    };
    var BIZ_CONFIG = {
        bizConfig: {
            retrieve: function retrieve(model) {
                var hao123ReportType = getHao123ReportTypeFromFilters(model.get('filterFields'), model.get('filterValues'));
                return model.getReports()[hao123ReportType];
            },
            dump: true
        }
    };
    var TNAME_LIST = {
        tnameList: function tnameList(model) {
            return model.data().getHao123Tnames();
        }
    };
    var HAO123_BIZ_TYPE_MAP = (_HAO123_BIZ_TYPE_MAP = {}, babelHelpers.defineProperty(_HAO123_BIZ_TYPE_MAP, _enum.Hao123ReportType.IP, _enum.Hao123BizType.toArray('SET_HOME_PAGE', 'REDIRECT', 'DESTTOP_SHORTCUT', 'BAIDU_BROWSER', 'THIRD_PART_BROWSER_BUILT_IN')), babelHelpers.defineProperty(_HAO123_BIZ_TYPE_MAP, _enum.Hao123ReportType.SEARCH, _enum.Hao123BizType.toArray('SET_HOME_PAGE', 'DESTTOP_SHORTCUT', 'BAIDU_BROWSER')), babelHelpers.defineProperty(_HAO123_BIZ_TYPE_MAP, _enum.Hao123ReportType.CPA, _enum.Hao123BizType.toArray('BAIDU_WEISHI', 'THIRD_PART_BROWSER_COOPERATION')), _HAO123_BIZ_TYPE_MAP);
    var Hao123ReportModel = function (_DetailReportModel) {
        babelHelpers.inherits(Hao123ReportModel, _DetailReportModel);
        function Hao123ReportModel() {
            babelHelpers.classCallCheck(this, Hao123ReportModel);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            babelHelpers.get(Object.getPrototypeOf(Hao123ReportModel.prototype), 'constructor', this).apply(this, args);
            this.set('hao123ReportTypes', _enum.Hao123ReportType.toArray());
            this.putDatasource(BIZ_CONFIG, 0);
            this.putDatasource(TNAME_LIST, 0);
        }
        babelHelpers.createClass(Hao123ReportModel, [
            {
                key: 'refreshSearch',
                value: function refreshSearch() {
                    this.prepareBizFilters();
                    babelHelpers.get(Object.getPrototypeOf(Hao123ReportModel.prototype), 'refreshSearch', this).call(this);
                }
            },
            {
                key: 'prepareBizFilters',
                value: function prepareBizFilters() {
                    var hao123ReportType = getHao123ReportTypeFromFilters(this.get('filterFields'), this.get('filterValues'));
                    this.set('hao123ReportType', hao123ReportType);
                    var _parseFilters2 = parseFilters(this.get('filterFields'), this.get('filterValues'));
                    var filterFields = _parseFilters2.filterFields;
                    var filterValues = _parseFilters2.filterValues;
                    var bizType = this.getFilterValue('hao123BizTypeId', filterFields, filterValues);
                    var isValidBiz = HAO123_BIZ_TYPE_MAP[hao123ReportType].some(function (_ref) {
                        var value = _ref.value;
                        return value === +bizType;
                    });
                    bizType = isValidBiz ? bizType : HAO123_BIZ_TYPE_MAP[hao123ReportType][0].value;
                    this.set('bizType', bizType);
                    this.set('bizTypes', HAO123_BIZ_TYPE_MAP[hao123ReportType]);
                    var tname = this.getFilterValue('tnameId', filterFields, filterValues);
                    var tnameMap = this.groupByTname(this.get('tnameList'));
                    var tnames = tnameMap[hao123ReportType] && tnameMap[hao123ReportType][bizType] || [];
                    tname = tnames.find(function (_ref2) {
                        var id = _ref2.id;
                        return id === tname;
                    });
                    var selectedTname = tname ? [tname] : null;
                    this.set('selectedTname', selectedTname);
                    this.set('tnames', [{
                            id: '',
                            name: '\u5168\u90E8'
                        }].concat(babelHelpers.toConsumableArray(tnames)));
                    var newFilterFields = [
                        'hao123ReportTypeId',
                        'hao123BizTypeId',
                        'tnameId'
                    ];
                    var newFilterValues = [
                        [hao123ReportType],
                        [bizType],
                        [tname && tname.id]
                    ];
                    filterFields.forEach(function (field, index) {
                        if (field !== 'hao123ReportTypeId' && field !== 'hao123BizTypeId' && field !== 'tnameId' && !_u['default'].isEmpty(filterValues[index])) {
                            newFilterFields.push(field);
                            newFilterValues.push(filterValues[index]);
                        }
                    });
                    var _purifyFilters = purifyFilters(newFilterFields, newFilterValues);
                    var _purifyFilters2 = babelHelpers.slicedToArray(_purifyFilters, 2);
                    newFilterFields = _purifyFilters2[0];
                    newFilterValues = _purifyFilters2[1];
                    this.set('filterFields', newFilterFields.join(','));
                    this.set('filterValues', _reportUtil['default'].stringifyFilterValues(newFilterValues));
                }
            },
            {
                key: 'getFilterValue',
                value: function getFilterValue(field, fields, vlaues) {
                    var index = fields.indexOf(field);
                    return vlaues[index] && vlaues[index][0];
                }
            },
            {
                key: 'groupByTname',
                value: function groupByTname(tnames) {
                    return _u['default'].chain(tnames.hao123Tns).map(function (item) {
                        return {
                            id: item.tname,
                            name: item.tname,
                            hao123ReportType: item.accountType === 4 ? _enum.Hao123ReportType.CPA : item.accountType,
                            hao123BizType: item.bizType,
                            status: item.status
                        };
                    }).groupBy('hao123ReportType').reduce(function (result, item, key) {
                        result[key] = _u['default'].groupBy(item, 'hao123BizType');
                        return result;
                    }, {}).value();
                }
            },
            {
                key: 'getGeneralActionOptions',
                value: function getGeneralActionOptions() {
                    var options = babelHelpers.get(Object.getPrototypeOf(Hao123ReportModel.prototype), 'getGeneralActionOptions', this).call(this);
                    options.filterFields = this.get('filterFields');
                    options.filterValues = this.get('filterValues');
                    return this.addUnionBizTypeFilter(options);
                }
            },
            {
                key: 'getChartActionOptions',
                value: function getChartActionOptions() {
                    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        args[_key2] = arguments[_key2];
                    }
                    var options = babelHelpers.get(Object.getPrototypeOf(Hao123ReportModel.prototype), 'getChartActionOptions', this).apply(this, args);
                    options.filterFields = this.get('filterFields');
                    options.filterValues = this.get('filterValues');
                    return this.addUnionBizTypeFilter(options);
                }
            }
        ]);
        return Hao123ReportModel;
    }(_DetailReportModel3['default']);
    module.exports = Hao123ReportModel;
    function purifyFilters(fields, values) {
        return values.reduce(function (filters, value, index) {
            if (value === undefined)
                value = [];
            value = value.filter(function (item) {
                return item != null && item !== '';
            });
            if (value.length) {
                filters[0].push(fields[index]);
                filters[1].push(value);
            }
            return filters;
        }, [
            [],
            []
        ]);
    }
});
define('report/mvc/Report', [
    'require',
    'ssp-report/mvc/Report'
], function (require) {
    return require('ssp-report/mvc/Report');
});
define('report/mvc/Hao123Report', [
    'exports',
    'module',
    './Report'
], function (exports, module, _Report) {
    var _ReportAction2 = babelHelpers.interopRequireDefault(_Report);
    var Hao123Report = function (_ReportAction) {
        babelHelpers.inherits(Hao123Report, _ReportAction);
        function Hao123Report() {
            babelHelpers.classCallCheck(this, Hao123Report);
            babelHelpers.get(Object.getPrototypeOf(Hao123Report.prototype), 'constructor', this).apply(this, arguments);
        }
        return Hao123Report;
    }(_ReportAction2['default']);
    module.exports = Hao123Report;
});
define('report/mvc/FilterDataFetcherProxy', [
    'require',
    'common/util',
    'eoo',
    'ssp-report/mvc/FilterDataFetcherProxy'
], function (require) {
    var u = require('common/util');
    var prototype = {};
    prototype.fetch = function (dimension, query) {
        var fetcher = this.getFetcherSet()[dimension];
        if (fetcher && u.isFunction(fetcher.fetch)) {
            return fetcher.fetch(dimension, query);
        }
        throw new Error('Missing data fetcher for dimension: ' + dimension + '!');
    };
    var eoo = require('eoo');
    var FilterDataFetcherProxy = eoo.create(require('ssp-report/mvc/FilterDataFetcherProxy'), prototype);
    return FilterDataFetcherProxy;
});
define('report/mvc/DetailReportModel', [
    'require',
    'eoo',
    './ReportModel'
], function (require) {
    var prototype = {};
    prototype.isGeneralReport = function () {
        return false;
    };
    prototype.getParentFilter = function () {
        return null;
    };
    var eoo = require('eoo');
    var DetailReportModel = eoo.create(require('./ReportModel'), prototype);
    return DetailReportModel;
});
define('report/enum', [
    'exports',
    'er/Enum'
], function (exports, _erEnum) {
    Object.defineProperty(exports, '__esModule', { value: true });
    var _Enum = babelHelpers.interopRequireDefault(_erEnum);
    var UnionBizType = new _Enum['default']({
        text: 'cpro',
        alias: 'CPRO',
        value: 1,
        cnName: '\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u7F51\u9875\u7248'
    }, {
        text: 'cproApp',
        alias: 'CPRO_APP',
        value: 2,
        cnName: '\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5CAPP\u7248'
    }, {
        text: 'search',
        alias: 'SEARCH',
        value: 3,
        cnName: '\u641C\u7D22'
    }, {
        text: 'dan',
        alias: 'DAN',
        value: 4,
        cnName: '\u9E3F\u5A92\u4F53'
    }, {
        text: 'tuan',
        alias: 'TUAN',
        value: 5,
        cnName: '\u56E2\u8D2D'
    }, {
        text: 'software',
        alias: 'SOFTWARE',
        value: 6,
        cnName: '\u5DE5\u5177\u680F'
    }, {
        text: 'reflux',
        alias: 'REFLUX',
        value: 7,
        cnName: '\u56DE\u6D41'
    }, {
        text: 'hao123',
        alias: 'HAO123',
        value: 8,
        cnName: 'Hao123'
    });
    exports.UnionBizType = UnionBizType;
    var CproChannelType = new _Enum['default']({
        text: '\u81EA\u5B9A\u4E49',
        alias: 'DIY',
        value: 0
    }, {
        text: '\u7F51\u5740',
        alias: 'URL',
        value: 1
    });
    exports.CproChannelType = CproChannelType;
    var CStatus = new _Enum['default']({
        text: '\u672A\u7981\u7528',
        alias: 'NOT_BAN',
        value: 0
    }, {
        text: '\u7981\u7528',
        alias: 'BANED',
        value: 1
    });
    exports.CStatus = CStatus;
    var Hao123ReportType = new _Enum['default']({
        text: '\u5343\u6B21IP\u5206\u6210\u5408\u4F5C',
        alias: 'IP',
        value: 1
    }, {
        text: '\u641C\u7D22\u5206\u6210\u5408\u4F5C',
        alias: 'SEARCH',
        value: 2
    }, {
        text: 'CPA\u5206\u6210\u5408\u4F5C',
        alias: 'CPA',
        value: 3
    });
    exports.Hao123ReportType = Hao123ReportType;
    var Hao123BizType = new _Enum['default']({
        text: '\u8BBEHao123\u4E3A\u9996\u9875',
        alias: 'SET_HOME_PAGE',
        value: 1
    }, {
        text: '\u7F51\u5740\u7AD9\u8DF3\u8F6C',
        alias: 'REDIRECT',
        value: 2
    }, {
        text: '\u684C\u9762\u5FEB\u6377\u65B9\u5F0F',
        alias: 'DESTTOP_SHORTCUT',
        value: 3
    }, {
        text: '\u767E\u5EA6\u6D4F\u89C8\u5668\u5408\u4F5C',
        alias: 'BAIDU_BROWSER',
        value: 4
    }, {
        text: '\u7B2C\u4E09\u65B9\u6D4F\u89C8\u5668\u5185\u7F6EHao123',
        alias: 'THIRD_PART_BROWSER_BUILT_IN',
        value: 5
    }, {
        text: '\u5E7F\u544A\u63A8\u5E7F',
        alias: 'AD',
        value: 6
    }, {
        text: '\u767E\u5EA6\u536B\u58EB',
        alias: 'BAIDU_WEISHI',
        value: 7
    }, {
        text: '\u7B2C\u4E09\u65B9\u6D4F\u89C8\u5668\u5408\u4F5C',
        alias: 'THIRD_PART_BROWSER_COOPERATION',
        value: 8
    });
    exports.Hao123BizType = Hao123BizType;
});
define('report/mvc/ReportModel', [
    'require',
    'common/util',
    'ssp-report/util',
    'ssp-report/enum',
    '../enum',
    'er/URL',
    'eoo',
    'ssp-report/mvc/ReportModel'
], function (require) {
    var u = require('common/util');
    var reportUtil = require('ssp-report/util');
    var AllDimension = require('ssp-report/enum').AllDimension;
    var UnionBizType = require('../enum').UnionBizType;
    var CStatus = require('../enum').CStatus;
    var prototype = {};
    var C_STATUS = {
        cStatus: function (model) {
            var unionBizTypeId = model.getUnionBizTypeId();
            if (unionBizTypeId === UnionBizType.CPRO_APP) {
                return false;
            }
            var query = {
                fields: 'cId',
                filterFields: 'cTypeId,cStatus',
                filterValues: unionBizTypeId + '|' + CStatus.BANED
            };
            return model.data().getFilterList(query).then(function (response) {
                return !!response.results.length;
            });
        },
        lastPayDate: function (model) {
            return model.data().getFilterList({ fields: 'lastPayDate' }).then(function (response) {
                var results = response.results;
                var lastPayDate = results[0] ? results[0].lastPayDate : null;
                return lastPayDate;
            });
        },
        user: function (model) {
            return model.data('global').getUser();
        }
    };
    prototype.constructor = function () {
        this.$super(arguments);
        this.putDatasource(C_STATUS, 0);
    };
    prototype.prepare = function () {
        this.$super(arguments);
        this.prepareLastPayDate();
        var unionBizType = UnionBizType.getTextFromValue(this.getUnionBizTypeId());
        this.set('unionBizType', unionBizType);
    };
    prototype.prepareLastPayDate = function () {
        var user = this.get('user');
        if (user.userStatus === 6) {
            this.set('lastPayDate', null);
        }
    };
    prototype.getReportURL = function (moduleName) {
        if (moduleName) {
            var urlMap = this.getURLMap();
            var unionBizTypeId = this.getUnionBizTypeId();
            return urlMap[moduleName + unionBizTypeId];
        }
        return this.get('url').getPath();
    };
    prototype.getCrumbContext = function (reportType) {
        var unionBizTypeId = this.getUnionBizTypeId();
        var unionBizType = UnionBizType.getTextFromValue(unionBizTypeId);
        var urlMap = this.getURLMap();
        var bizURL = urlMap[unionBizType + unionBizTypeId];
        var reportURL = urlMap[reportType + unionBizTypeId];
        var crumbContext = [];
        if (bizURL === reportURL) {
            crumbContext.push({ text: this.get('reportName') });
        } else {
            var bizReportName = reportUtil.getReportName(this.getConfiguration().getReportTypes(), unionBizType);
            crumbContext.push({
                text: bizReportName,
                url: bizURL
            });
            var allDimensionAffliation = this.getConfiguration().getDimensionAffliation();
            var dimensionAffliation = u.find(allDimensionAffliation, function (item) {
                return u.contains(item.slice(1), reportType);
            });
            u.each(dimensionAffliation, function (item) {
                var id = this.get(item + 'Id');
                var name = this.get(item + 'Name');
                var url = urlMap[item + unionBizTypeId];
                url = require('er/URL').withQuery(url, {
                    id: id,
                    name: name
                });
                if (id && name) {
                    crumbContext.push({
                        text: AllDimension.getTextFromValue(item) + ': ' + name,
                        url: url.toString()
                    });
                }
            }, this);
        }
        return crumbContext;
    };
    prototype.getGeneralActionOptions = function () {
        var options = this.$super(arguments);
        options.unionBizTypeId = this.getUnionBizTypeId();
        return this.addUnionBizTypeFilter(options);
    };
    prototype.getChartActionOptions = function () {
        var options = this.$super(arguments);
        return this.addUnionBizTypeFilter(options);
    };
    prototype.getListActionOptions = function () {
        var options = this.$super(arguments);
        options = this.addUnionBizTypeFilter(options);
        options.templateId = this.get('templateId');
        return options;
    };
    prototype.getActiveEntity = function () {
        var activeEntity = this.$super(arguments);
        var reportType = this.getReportType();
        var bizType = UnionBizType.getTextFromValue(this.getUnionBizTypeId());
        if (reportType !== bizType) {
            var reportName = reportUtil.getReportName(this.getConfiguration().getReportTypes(), bizType);
            activeEntity.name = reportName + '~' + activeEntity.name;
        }
        this.addParentTypeIdFilter(activeEntity, this.getParentFilter());
        return activeEntity;
    };
    prototype.addUnionBizTypeFilter = function (options) {
        var filterFields = options.filterFields;
        var filterValues = options.filterValues;
        if (!filterFields || !filterValues) {
            filterFields = [];
            filterValues = [];
        } else {
            filterFields = filterFields.split(',');
            filterValues = reportUtil.parseFilterValues(filterValues);
        }
        var index = u.indexOf(filterFields, 'unionBizTypeId');
        if (index >= 0) {
            filterValues[index] = [this.getUnionBizTypeId()];
        } else {
            filterFields.push('unionBizTypeId');
            filterValues.push([this.getUnionBizTypeId()]);
        }
        options.filterFields = filterFields.join(',');
        options.filterValues = reportUtil.stringifyFilterValues(filterValues);
        return options;
    };
    prototype.addParentTypeIdFilter = function (activeEntity, options) {
        if (options) {
            activeEntity.filterFields.push(options.field);
            activeEntity.filterValues.push([options.value]);
        }
        return activeEntity;
    };
    var eoo = require('eoo');
    eoo.defineAccessor(prototype, 'unionBizTypeId');
    eoo.defineAccessor(prototype, 'uRLMap');
    var ReportModel = eoo.create(require('ssp-report/mvc/ReportModel'), prototype);
    return ReportModel;
});
define('report/mvc/CReportModel', [
    'require',
    'common/util',
    'ssp-report/util',
    'eoo',
    './ReportModel'
], function (require) {
    var u = require('common/util');
    var reportUtil = require('ssp-report/util');
    var prototype = {};
    var RESOURCE_OF_C = {
        resources: function (model) {
            if (model.isGeneralReport()) {
                return null;
            }
            var options = model.getResourceOptions();
            if (!options) {
                return null;
            }
            return model.loadResources(options);
        }
    };
    var DETAIL_DIMENSIONS = {
        detailDimension: function (model) {
            return model.buildDetailDimension();
        }
    };
    prototype.constructor = function () {
        this.$super(arguments);
        this.putDatasource(RESOURCE_OF_C);
        this.putDatasource(DETAIL_DIMENSIONS);
    };
    prototype.getResourceOptions = function () {
        var detailDimensions = this.get('detailDimension') || [];
        if (u.isFunction(detailDimensions)) {
            detailDimensions = detailDimensions(this);
        }
        detailDimensions = u.reject(detailDimensions, reportUtil.isTimeDimension);
        var options = null;
        var cId = this.get('id');
        if (detailDimensions.length) {
            options = {};
            var fields = [];
            var filterFields = [];
            var filterValues = [];
            u.each(detailDimensions, function (dimension) {
                fields.push(dimension + 'Id');
                filterFields.push('cId');
                filterValues.push(cId);
            });
            options.fields = fields.join('|');
            options.filterFields = filterFields.join('|');
            options.filterValues = filterValues.join(';');
        }
        return options;
    };
    prototype.loadResources = function (options) {
        return this.data().getBatchFilterList(options).then(function (response) {
            return response.results;
        });
    };
    prototype.buildDetailDimension = function () {
        var detailDimension = this.get('detailDimension');
        var resources = this.get('resources');
        if (resources) {
            detailDimension = u.filter(detailDimension, function (dimension) {
                var resource = resources[dimension + 'Id'];
                return reportUtil.isTimeDimension(dimension) || resource && resource.length;
            });
        }
        return detailDimension;
    };
    var eoo = require('eoo');
    var CReportModel = eoo.create(require('./ReportModel'), prototype);
    return CReportModel;
});
define('report/generalConfig', [
    'exports',
    'module',
    'common/util'
], function (exports, module, _commonUtil) {
    var _u = babelHelpers.interopRequireDefault(_commonUtil);
    function getAverage(value, range) {
        var number = +value;
        if (_u['default'].isNaN(number)) {
            return value;
        }
        return number / range;
    }
    module.exports = {
        adPositionView: {
            text: '\u603B\u4EE3\u7801\u4F4D\u5C55\u73B0\u91CF',
            averageText: '\u5E73\u5747\u4EE3\u7801\u4F4D\u5C55\u73B0\u91CF',
            tip: { cpro: '\u6307\u5408\u4F5C\u7F51\u7AD9\u4E0A\u653E\u7F6E\u7684\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u4EE3\u7801\u4F4D\u88AB\u6D4F\u89C8\u7684\u6B21\u6570\u3002' },
            getAverage: getAverage
        },
        pageview: {
            text: '\u603B\u9875\u9762\u5C55\u73B0\u91CF',
            averageText: '\u5E73\u5747\u9875\u9762\u5C55\u73B0\u91CF',
            tip: { cpro: '\u6307\u5408\u4F5C\u7F51\u7AD9\u88AB\u6D4F\u89C8\u7684\u6B21\u6570\u3002' },
            getAverage: getAverage
        },
        view: {
            text: '\u603B\u5C55\u73B0\u91CF',
            averageText: '\u5E73\u5747\u5C55\u73B0\u91CF',
            tip: {
                cproApp: '\u6307\u5408\u4F5CAPP\u4E0A\u653E\u7F6E\u7684\u7F51\u76DF\u63A8\u5E7F\u5185\u5BB9\u88AB\u6D4F\u89C8\u7684\u6B21\u6570\u3002',
                search: '\u6307\u5408\u4F5C\u7F51\u7AD9\u8BBF\u5BA2\u901A\u8FC7\u7F51\u7AD9\u6216\u8F6F\u4EF6\u4F7F\u7528\u767E\u5EA6\u641C\u7D22\u6846\u7684\u6B21\u6570\u3002',
                dan: '\u6307\u5408\u4F5C\u7F51\u7AD9\u653E\u7F6E\u9E3F\u5A92\u4F53\u5408\u4F5C\u4EE3\u7801\u88AB\u5C55\u793A\u7684\u6B21\u6570\u3002',
                software: '\u6307\u5408\u4F5C\u7F51\u7AD9\u8BBF\u5BA2\u901A\u8FC7\u7F51\u7AD9\u6216\u8F6F\u4EF6\u4F7F\u7528\u767E\u5EA6\u641C\u7D22\u6846\u7684\u6B21\u6570\u3002'
            },
            getAverage: getAverage
        },
        click: {
            text: '\u603B\u70B9\u51FB\u91CF',
            averageText: '\u5E73\u5747\u70B9\u51FB\u91CF',
            tip: {
                cpro: '\u6307\u5408\u4F5C\u7F51\u7AD9\u8BBF\u5BA2\u70B9\u51FB\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u4EE3\u7801\u4F4D\u7684\u6B21\u6570\u3002',
                cproApp: '\u6307\u5408\u4F5CAPP\u7684\u7528\u6237\u8BBF\u5BA2\u70B9\u51FB\u7F51\u76DF\u63A8\u5E7F\u5185\u5BB9\u7684\u6B21\u6570\u3002',
                search: '\u6307\u7528\u6237\u5728\u60A8\u7684\u7F51\u7AD9\uFF08\u8F6F\u4EF6\uFF09\u4F7F\u7528\u767E\u5EA6\u641C\u7D22\u6846\u5E76\u70B9\u51FB\u4E86\u767E\u5EA6\u641C\u7D22\u7ED3\u679C\u9875\u9762\u5E26',
                software: '\u6307\u7528\u6237\u5728\u60A8\u7684\u7F51\u7AD9\uFF08\u8F6F\u4EF6\uFF09\u4F7F\u7528\u767E\u5EA6\u641C\u7D22\u6846\u5E76\u70B9\u51FB\u4E86\u767E\u5EA6\u641C\u7D22\u7ED3\u679C\u9875\u9762\u5E26[\u63A8\u5E7F]\u5B57\u6837\u94FE\u63A5\u7684\u6B21\u6570\u3002'
            },
            getAverage: getAverage
        },
        clickRatio: {
            text: '\u603B\u70B9\u51FB\u7387',
            averageText: '\u5E73\u5747\u70B9\u51FB\u7387',
            tip: {
                cpro: '\u6307\u70B9\u51FB\u6B21\u6570\u4E0E\u5C55\u73B0\u91CF\u7684\u767E\u5206\u6BD4\uFF0C\u662F\u8861\u91CF\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u6548\u679C\u597D\u574F\u7684\u91CD\u8981\u6807\u51C6\u3002',
                cproApp: '\u6307\u70B9\u51FB\u91CF\u4E0E\u5C55\u73B0\u91CF\u7684\u767E\u5206\u6BD4\uFF0C\u662F\u8861\u91CF\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u6548\u679C\u597D\u574F\u7684\u91CD\u8981\u6807\u51C6\u3002',
                search: '\u6307\u70B9\u51FB\u6B21\u6570\u5360\u68C0\u7D22\u91CF\u7684\u767E\u5206\u6BD4\uFF0C\u662F\u8861\u91CF\u767E\u5EA6\u641C\u7D22\u6846\u68C0\u7D22\u6548\u679C\u597D\u574F\u7684\u91CD\u8981\u6807\u51C6\u3002',
                software: '\u6307\u70B9\u51FB\u6B21\u6570\u5360\u68C0\u7D22\u91CF\u7684\u767E\u5206\u6BD4\uFF0C\u662F\u8861\u91CF\u767E\u5EA6\u641C\u7D22\u6846\u68C0\u7D22\u6548\u679C\u597D\u574F\u7684\u91CD\u8981\u6807\u51C6\u3002'
            }
        },
        ecpm: {
            text: 'eCPM',
            averageText: '\u5E73\u5747eCPM',
            tip: {
                cpro: '\u6307\u5408\u4F5C\u7F51\u7AD9\u4E0A\u653E\u7F6E\u7684\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u4EE3\u7801\u4F4D\u88AB\u5C55\u73B01000\u6B21\u65F6\u6240\u83B7\u5F97\u7684\u6536\u5165\u3002\u8BF7\u6CE8\u610F\uFF0C\u6B64\u6570\u636E\u4E3A\u53C2\u8003\u6570\u636E\uFF0C\u662F\u901A\u8FC7\u7EDF\u8BA1\u6570\u636E\u8BA1\u7B97\u800C\u5F97\u5230\u3002',
                search: '\u6307\u5408\u4F5C\u7F51\u7AD9\u8BBF\u5BA2\u5728\u7F51\u7AD9\u6216\u8F6F\u4EF6\u4F7F\u7528\u767E\u5EA6\u641C\u7D22\u68461000\u6B21\u60A8\u5206\u5F97\u7684\u6536\u5165\uFF0C\u8BF7\u6CE8\u610F\uFF0C\u6B64\u6570\u636E\u4E3A\u53C2\u8003\u6570\u636E\uFF0C\u662F\u901A\u8FC7\u7EDF\u8BA1\u6570\u636E\u8BA1\u7B97\u800C\u5F97\u5230\u3002',
                software: '\u6307\u5408\u4F5C\u7F51\u7AD9\u8BBF\u5BA2\u5728\u7F51\u7AD9\u6216\u8F6F\u4EF6\u4F7F\u7528\u767E\u5EA6\u641C\u7D22\u68461000\u6B21\u60A8\u5206\u5F97\u7684\u6536\u5165\uFF0C\u8BF7\u6CE8\u610F\uFF0C\u6B64\u6570\u636E\u4E3A\u53C2\u8003\u6570\u636E\uFF0C\u662F\u901A\u8FC7\u7EDF\u8BA1\u6570\u636E\u8BA1\u7B97\u800C\u5F97\u5230\u3002'
            }
        },
        pageClickRatio: {
            text: '\u603B\u9875\u9762\u70B9\u51FB\u7387',
            averageText: '\u5E73\u5747\u9875\u9762\u70B9\u51FB\u7387',
            tip: { cpro: '\u6307\u9875\u9762\u70B9\u51FB\u6B21\u6570\u4E0E\u5C55\u73B0\u91CF\u7684\u767E\u5206\u6BD4\uFF0C\u662F\u8861\u91CF\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u6548\u679C\u597D\u574F\u7684\u91CD\u8981\u6807\u51C6\u3002' }
        },
        pageEcpm: {
            text: '\u9875\u9762\u6BCF\u5343\u6B21\u5C55\u73B0\u6536\u5165',
            averageText: '\u9875\u9762\u5E73\u5747\u6BCF\u5343\u6B21\u5C55\u73B0\u6536\u5165',
            tip: { cpro: '\u6307\u5408\u4F5C\u7F51\u7AD9\u4E0A\u653E\u7F6E\u7684\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u9875\u9762\u88AB\u5C55\u73B01000\u6B21\u65F6\u6240\u83B7\u5F97\u7684\u6536\u5165\u3002\u8BF7\u6CE8\u610F\uFF0C\u6B64\u6570\u636E\u4E3A\u53C2\u8003\u6570\u636E\uFF0C\u662F\u901A\u8FC7\u7EDF\u8BA1\u6570\u636E\u8BA1\u7B97\u800C\u5F97\u5230\u3002' }
        },
        fillRatio: {
            text: '\u586B\u5145\u7387',
            averageText: '\u5E73\u5747\u586B\u5145\u7387',
            tip: { common: '\u6307\u4EE3\u7801\u4F4D\u6709\u5E7F\u544A\u8FD4\u56DE\u7684\u8BF7\u6C42\u91CF\u4E0E\u4EE3\u7801\u4F4D\u603B\u8BF7\u6C42\u91CF\u7684\u6BD4\u7387' }
        },
        adPositionFillRatio: {
            text: '\u4EE3\u7801\u4F4D\u586B\u5145\u7387',
            averageText: '\u5E73\u5747\u4EE3\u7801\u4F4D\u586B\u5145\u7387',
            tip: { common: '\u6307\u4EE3\u7801\u4F4D\u6709\u5E7F\u544A\u8FD4\u56DE\u7684\u8BF7\u6C42\u91CF\u4E0E\u4EE3\u7801\u4F4D\u603B\u8BF7\u6C42\u91CF\u7684\u6BD4\u7387' }
        },
        income: {
            text: '\u9884\u4F30\u603B\u6536\u5165',
            averageText: '\u9884\u4F30\u5E73\u5747\u6536\u5165',
            tip: { common: '\u6307\u60A8\u4ECE\u767E\u5EA6\u83B7\u5F97\u7684\u8BE5\u6570\u636E\u9879\u76EE\u7A0E\u524D\u9884\u4F30\u73B0\u91D1\u6536\u5165\u3002' },
            getAverage: getAverage
        },
        cpmIncome: {
            text: '\u5C55\u73B0\u6536\u5165',
            averageText: '\u5E73\u5747\u5C55\u73B0\u6536\u5165',
            tip: { cproApp: '\u6307\u5408\u4F5CAPP\u4E0A\u653E\u7F6E\u7684\u7F51\u76DF\u63A8\u5E7F\u5185\u5BB9\u6709\u5C55\u73B0\u540E\u6240\u83B7\u5F97\u7684\u6536\u5165\u3002' },
            getAverage: getAverage
        },
        cpcIncome: {
            text: '\u70B9\u51FB\u6536\u5165',
            averageText: '\u5E73\u5747\u70B9\u51FB\u6536\u5165',
            tip: { cproApp: '\u6307\u5408\u4F5CAPP\u4E0A\u653E\u7F6E\u7684\u7F51\u76DF\u63A8\u5E7F\u5185\u5BB9\u88AB\u70B9\u51FB\u540E\u6240\u83B7\u5F97\u7684\u6536\u5165\u3002' },
            getAverage: getAverage
        },
        consume: {
            text: '\u603B\u6D88\u8D39\u6B21\u6570',
            averageText: '\u5E73\u5747\u6D88\u8D39\u6B21\u6570',
            tip: { tuan: '\u56E2\u8D2D\u5546\u54C1\u6709\u6548\u6D88\u8D39\u6B21\u6570\u3002' },
            getAverage: getAverage
        },
        retrieval: {
            text: '\u603B\u68C0\u7D22\u91CF',
            averageText: '\u5E73\u5747\u68C0\u7D22\u91CF',
            tip: { common: '\u6307\u5408\u4F5C\u7F51\u7AD9\u653E\u7F6E\u56DE\u6D41\u4E1A\u52A1\u5408\u4F5C\u4EE3\u7801\u88AB\u68C0\u7D22\u7684\u6B21\u6570\u3002' },
            getAverage: getAverage
        },
        installs: {
            text: '\u603B\u5B89\u88C5\u91CF',
            averageText: '\u5E73\u5747\u5B89\u88C5\u91CF',
            tip: { software: '\u6307\u5DE5\u5177\u680F\u5408\u4F5C\u4E1A\u52A1\u641C\u9738\u7684\u5B89\u88C5\u6B21\u6570\u3002' },
            getAverage: getAverage
        },
        installsIncome: {
            text: '\u5B89\u88C5\u6536\u5165',
            averageText: '\u5E73\u5747\u5B89\u88C5\u6536\u5165',
            getAverage: getAverage
        },
        ip: {
            text: 'IP\u91CF',
            averageText: '\u5E73\u5747IP\u91CF',
            getAverage: getAverage
        },
        ipEcpm: {
            text: '\u5343\u6B21IP\u6536\u5165',
            getAverage: getAverage,
            averageText: '\u5E73\u5747\u5343\u6B21IP\u6536\u5165'
        },
        actives: {
            text: '\u6FC0\u6D3B\u91CF',
            averageText: '\u5E73\u5747\u6FC0\u6D3B\u91CF',
            getAverage: getAverage
        },
        activesIncome: {
            text: '\u6FC0\u6D3B\u6536\u5165',
            averageText: '\u5E73\u5747\u6FC0\u6D3B\u6536\u5165',
            getAverage: getAverage
        },
        activates: {
            text: '\u6D3B\u8DC3\u91CF',
            averageText: '\u5E73\u5747\u6D3B\u8DC3\u91CF',
            getAverage: getAverage
        },
        activatesIncome: {
            text: '\u6D3B\u8DC3\u6536\u5165',
            averageText: '\u5E73\u5747\u6D3B\u8DC3\u6536\u5165',
            getAverage: getAverage
        }
    };
});
define('report/ReportTemplateData', [
    'require',
    'common/util',
    'promise',
    'ssp-report/util',
    'common/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager'
], function (require) {
    var u = require('common/util');
    var Promise = require('promise');
    var reportUtil = require('ssp-report/util');
    var prototype = {};
    prototype.request = function (options) {
        var requesting = this.$super(arguments);
        var excutor = function (resolve, reject) {
            requesting.then(function (response) {
                if (response.status === -1 && response.data.fields) {
                    reject({ fields: response.data.fields });
                } else {
                    resolve(response.data);
                }
            });
        };
        return new Promise(excutor);
    };
    prototype.save = function (entity) {
        entity = this.formatEntity(entity);
        return this.request('$entity/save', entity, {
            method: 'POST',
            url: '/report/templates/save',
            urlPrefix: '/v2/client'
        });
    };
    prototype.update = function (entity) {
        entity = this.formatEntity(entity);
        return this.request('$entity/update', entity, {
            method: 'POST',
            url: '/report/templates/modify',
            urlPrefix: '/v2/client'
        });
    };
    prototype.formatEntity = function (entity) {
        var formattedEntity = {};
        u.each(entity, function (value, key) {
            if (key === 'filterValues') {
                value = reportUtil.stringifyFilterValues(value);
            } else if (u.isArray(value)) {
                value = value.join();
            }
            formattedEntity[key] = value;
        });
        return formattedEntity;
    };
    prototype.search = function (options) {
        return this.request('$entity/search', options, {
            method: 'GET',
            url: '/report/templates/page',
            urlPrefix: '/v2/client'
        });
    };
    prototype.updateStatus = function (status, ids) {
        return this.request('$entity/updateStatus', null, {
            method: 'DELETE',
            url: '/report/templates/delete?ids=' + ids.join(),
            urlPrefix: '/v2/client'
        });
    };
    prototype.findById = function (id) {
        return this.request('$entity/findById', { id: id }, {
            method: 'GET',
            url: '/report/templates',
            urlPrefix: '/v2/client'
        }).then(function (response) {
            return response.result;
        });
    };
    prototype.unescapeEntity = function (data) {
        data.name = u.unescape(data.name);
        data.emails = u.each(data.emails, u.unescape);
        return data;
    };
    var requests = {
        search: {
            name: 'reportTemplate/search',
            scope: 'instance',
            policy: 'auto'
        },
        save: {
            name: 'reportTemplate/save',
            scope: 'instance',
            policy: 'auto'
        },
        update: {
            name: 'reportTemplate/update',
            scope: 'instance',
            policy: 'auto'
        },
        findById: {
            name: 'reportTemplate/findById',
            scope: 'instance',
            policy: 'auto'
        },
        updateStatus: {
            name: 'reportTemplate/updateStatus',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var BaseData = require('common/BaseData');
    var ReportTemplateData = require('eoo').create(BaseData, prototype);
    var RequestManager = require('ub-ria/mvc/RequestManager');
    u.each(requests, function (config) {
        RequestManager.register(ReportTemplateData, config.name, config);
    });
    return ReportTemplateData;
});
define('report/ReportPermission', [
    'require',
    'eoo'
], function (require) {
    var prototype = {};
    prototype.canViewAdPositionReport = function () {
        return true;
    };
    prototype.canViewCReport = function () {
        return true;
    };
    prototype.canViewTnameReport = function () {
        return true;
    };
    prototype.canViewAppReport = function () {
        return true;
    };
    prototype.canViewTmReport = function () {
        return true;
    };
    prototype.canViewCproChannelReport = function () {
        return true;
    };
    prototype.canViewSearchChannelReport = function () {
        return true;
    };
    prototype.canViewRefluxAdPositionReport = function () {
        return true;
    };
    prototype.canViewDiyReport = function () {
        return false;
    };
    prototype.canDownload = function () {
        return true;
    };
    prototype.canEmailReportTemplate = function () {
        return true;
    };
    prototype.canListReportTemplate = function () {
        return true;
    };
    prototype.canCreateReportTemplate = function () {
        return true;
    };
    prototype.canModifyReportTemplate = function () {
        return true;
    };
    prototype.canRemoveReportTemplate = function () {
        return true;
    };
    var eoo = require('eoo');
    eoo.defineAccessor(prototype, 'systemPermission');
    var ReportPermission = eoo.create(prototype);
    return ReportPermission;
});
define('report/ReportData', [
    'require',
    'common/util',
    'ssp-report/ReportData',
    'eoo',
    'ub-ria/mvc/RequestManager'
], function (require) {
    var u = require('common/util');
    var prototype = {};
    prototype.request = function (options) {
        var promise = this.$super(arguments);
        return promise.then(function (response) {
            return response.data;
        });
    };
    prototype.list = function (options) {
        return this.request('report/list', options, {
            url: '/report/query',
            urlPrefix: '/v2/client',
            method: 'POST'
        });
    };
    prototype.batchSearch = function (options) {
        return this.request('report/search/batch', options, {
            url: '/report/query/batch',
            urlPrefix: '/v2/client',
            method: 'GET'
        });
    };
    prototype.getFilterList = function (options) {
        return this.request('report/filterList', options, {
            url: '/report/report-field',
            urlPrefix: '/v2/client',
            method: 'GET'
        });
    };
    prototype.getBatchFilterList = function (options) {
        return this.request('report/batchFilterList', options, {
            url: '/report/report-field/batch',
            urlPrefix: '/v2/client',
            method: 'GET'
        });
    };
    prototype.getHao123Tnames = function () {
        return this.request('report/hao123TnameList', null, {
            url: '/client/account/cn/cn!getHao123TnSimpleInfos.action',
            method: 'GET'
        });
    };
    var BaseData = require('ssp-report/ReportData');
    var ReportData = require('eoo').create(BaseData, prototype);
    var requests = {
        search: {
            name: 'report/list',
            scope: 'instance',
            policy: 'auto'
        },
        batchSearch: {
            name: 'report/search/batch',
            scope: 'instance',
            policy: 'auto'
        },
        regionInfo: {
            name: 'report/regionInfo',
            scope: 'instance',
            policy: 'auto'
        },
        filterList: {
            name: 'report/filterList',
            scope: 'instance',
            policy: 'auto'
        },
        batchFilterList: {
            name: 'report/batchFilterList',
            scope: 'instance',
            policy: 'auto'
        },
        hao123TnameList: {
            name: 'report/hao123TnameList',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var RequestManager = require('ub-ria/mvc/RequestManager');
    u.each(requests, function (config) {
        RequestManager.register(ReportData, config.name, config);
    });
    return ReportData;
});
define('ssp-report/ReportConfiguration', [
    'require',
    './util',
    './enum',
    'eoo'
], function (require) {
    var u = require('./util');
    var exports = {};
    var returnBlankArray = function () {
        return [];
    };
    exports.getReportTypes = returnBlankArray;
    exports.getSubReportTypes = returnBlankArray;
    exports.needContrast = function () {
        return true;
    };
    exports.getBackendTimeFormat = function () {
        return {
            hour: 'HH',
            day: 'YYYYMMDD',
            week: 'YYYYww',
            month: 'YYYYMM'
        };
    };
    exports.getBarSupportDimensions = returnBlankArray;
    exports.getDimensionAffliation = returnBlankArray;
    exports.getDimensions = returnBlankArray;
    exports.getDetailDimensions = returnBlankArray;
    exports.getGeneralMetrics = returnBlankArray;
    exports.getFullGeneralMetrics = function () {
        var generalMetrics = this.getGeneralMetrics();
        var AllMetric = require('./enum').AllMetric;
        return u.map(generalMetrics, function (generalMetric) {
            var element = AllMetric.fromValue(generalMetric);
            return {
                text: element.text,
                field: element.value,
                format: element.format
            };
        });
    };
    exports.getKeywordDimensions = returnBlankArray;
    exports.getFilterDimensions = returnBlankArray;
    exports.getShowIdDimensions = returnBlankArray;
    exports.getDiyDimensionConfig = function () {
        return {
            dimensionRelation: {
                mutexes: [[
                        'hour',
                        'day',
                        'week',
                        'month'
                    ]]
            },
            filterRelation: {},
            canFilterDimensions: []
        };
    };
    exports.getDefaultTimeRange = function () {
        return 'yesterday';
    };
    exports.getMetrics = returnBlankArray;
    exports.getMetricTableFields = function () {
        var AllMetric = require('./enum').AllMetric;
        var metrics = this.getMetrics();
        return u.map(metrics, function (metric) {
            var enumElement = AllMetric.fromValue(metric);
            return {
                field: metric,
                title: enumElement.text,
                sortable: true,
                resizable: false,
                width: 100,
                stable: true,
                content: function (item) {
                    var content = '<p class="base-item">' + u.format(item[metric], enumElement.format) + '</p>';
                    if (item[metric + 'Contrast'] !== undefined) {
                        content += '' + '<p class="contrast-item">' + u.format(item[metric + 'Contrast'], enumElement.format) + '</p>';
                    }
                    return content;
                }
            };
        });
    };
    exports.getDimensionTableFields = function () {
        var dimensions = this.getDimensions();
        var showIdDimensions = this.getShowIdDimensions();
        var AllDimension = require('./enum').AllDimension;
        var tableFields = u.map(dimensions, function (dimension) {
            var enumElement = AllDimension.fromValue(dimension);
            if (dimension !== 'time') {
                dimension = dimension + 'Name';
            }
            return {
                title: enumElement.text,
                field: dimension,
                sortable: true,
                width: 140,
                stable: true,
                content: function (item) {
                    return item[dimension];
                }
            };
        });
        u.each(showIdDimensions, function (dimension) {
            var enumElement = AllDimension.fromValue(dimension);
            var field = {
                title: enumElement.text + 'ID',
                field: dimension + 'Id',
                sortable: true,
                width: 80,
                stable: true,
                content: dimension + 'Id'
            };
            tableFields.push(field);
        });
        return tableFields;
    };
    var ReportConfiguration = require('eoo').create(exports);
    return ReportConfiguration;
});
define('report/ReportConfiguration', [
    'exports',
    'module',
    'ssp-report/ReportConfiguration'
], function (exports, module, _sspReportReportConfiguration) {
    var _BaseConfiguration2 = babelHelpers.interopRequireDefault(_sspReportReportConfiguration);
    var ReportConfiguration = function (_BaseConfiguration) {
        babelHelpers.inherits(ReportConfiguration, _BaseConfiguration);
        function ReportConfiguration() {
            babelHelpers.classCallCheck(this, ReportConfiguration);
            babelHelpers.get(Object.getPrototypeOf(ReportConfiguration.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(ReportConfiguration, [
            {
                key: 'getReportTypes',
                value: function getReportTypes() {
                    return [
                        {
                            text: '\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u7F51\u9875\u7248\u62A5\u544A',
                            value: 'cpro'
                        },
                        {
                            text: '\u641C\u7D22\u63A8\u5E7F\u62A5\u544A',
                            value: 'search'
                        },
                        {
                            text: '\u9E3F\u5A92\u4F53\u62A5\u544A',
                            value: 'dan'
                        },
                        {
                            text: '\u56E2\u8D2D\u62A5\u544A',
                            value: 'tuan'
                        },
                        {
                            text: '\u5DE5\u5177\u680F\u62A5\u544A',
                            value: 'software'
                        },
                        {
                            text: '\u56DE\u6D41\u4E1A\u52A1\u62A5\u544A',
                            value: 'reflux'
                        },
                        {
                            text: '\u641C\u7D22\u63A8\u5E7FHao123\u7248',
                            value: 'hao123'
                        },
                        {
                            text: '\u8BA1\u8D39\u540D',
                            value: 'c'
                        },
                        {
                            text: '\u5A92\u4F53',
                            value: 'tm'
                        },
                        {
                            text: '\u4EE3\u7801\u4F4D',
                            value: 'adPosition'
                        },
                        {
                            text: '\u6E20\u9053',
                            value: 'cproChannel'
                        },
                        {
                            text: '\u6E20\u9053',
                            value: 'searchChannel'
                        },
                        {
                            text: 'APP',
                            value: 'app'
                        }
                    ];
                }
            },
            {
                key: 'getBarSupportDimensions',
                value: function getBarSupportDimensions() {
                    return [
                        'c',
                        'adPosition',
                        'tm',
                        'cproChannel',
                        'searchChannel',
                        'refluxAdPosition',
                        'app',
                        'tname'
                    ];
                }
            },
            {
                key: 'getSubReportTypes',
                value: function getSubReportTypes() {
                    return [
                        {
                            text: '\u5206\u65E5',
                            value: 'day'
                        },
                        {
                            text: '\u5206\u8BA1\u8D39\u540D',
                            value: 'c'
                        },
                        {
                            text: '\u5206\u8BA1\u8D39\u540D',
                            value: 'tname'
                        },
                        {
                            text: '\u5206APP',
                            value: 'app'
                        },
                        {
                            text: '\u5206\u5A92\u4F53',
                            value: 'tm'
                        },
                        {
                            text: '\u5206\u6E20\u9053',
                            value: 'cproChannel'
                        },
                        {
                            text: '\u5206\u6E20\u9053',
                            value: 'searchChannel'
                        },
                        {
                            text: '\u5206\u4EE3\u7801\u4F4D',
                            value: 'adPosition'
                        },
                        {
                            text: '\u5206\u4EE3\u7801\u4F4D',
                            value: 'refluxAdPosition'
                        }
                    ];
                }
            },
            {
                key: 'getDimensionAffliation',
                value: function getDimensionAffliation() {
                    return [
                        [
                            'c',
                            'tm'
                        ],
                        [
                            'c',
                            'adPosition'
                        ],
                        [
                            'c',
                            'cproChannel'
                        ],
                        [
                            'c',
                            'searchChannel'
                        ]
                    ];
                }
            },
            {
                key: 'getDimensions',
                value: function getDimensions() {
                    return [
                        'time',
                        'adPosition',
                        'c',
                        'tm',
                        'cproChannel',
                        'searchChannel',
                        'app',
                        'danAdType',
                        'refluxAdPosition',
                        'tname'
                    ];
                }
            },
            {
                key: 'getDetailDimensions',
                value: function getDetailDimensions() {
                    return [
                        'c',
                        'tm',
                        'adPosition',
                        'app',
                        'cproChannel',
                        'searchChannel',
                        'refluxAdPosition'
                    ];
                }
            },
            {
                key: 'getMetrics',
                value: function getMetrics() {
                    return [
                        'request',
                        'view',
                        'click',
                        'ecpm',
                        'income',
                        'clickRatio',
                        'adPositionFillRatio',
                        'cpmIncome',
                        'cpcIncome',
                        'consume',
                        'retrieval',
                        'pageview',
                        'pageClickRatio',
                        'pageEcpm',
                        'adPositionView',
                        'unionAppFillRatio',
                        'installs',
                        'actives',
                        'activesIncome',
                        'installsIncome',
                        'activates',
                        'activatesIncome',
                        'ip',
                        'ipEcpm'
                    ];
                }
            },
            {
                key: 'getGeneralMetrics',
                value: function getGeneralMetrics() {
                    return [
                        'request',
                        'view',
                        'click',
                        'ecpm',
                        'income',
                        'clickRatio',
                        'adPositionFillRatio',
                        'cpmIncome',
                        'cpcIncome',
                        'consume',
                        'retrieval',
                        'pageClickRatio',
                        'pageEcpm',
                        'adPositionView',
                        'pageview',
                        'installs',
                        'actives',
                        'activesIncome',
                        'installsIncome',
                        'activates',
                        'activatesIncome',
                        'ip',
                        'ipEcpm'
                    ];
                }
            },
            {
                key: 'getFilterDimensions',
                value: function getFilterDimensions() {
                    return [
                        'tm',
                        'app',
                        'adPosition',
                        'cproChannel',
                        'searchChannel',
                        'refluxAdPosition'
                    ];
                }
            },
            {
                key: 'getDefaultTimeRange',
                value: function getDefaultTimeRange() {
                    return 'lastSevenDays';
                }
            }
        ]);
        return ReportConfiguration;
    }(_BaseConfiguration2['default']);
    module.exports = ReportConfiguration;
});
define('mediaProtectSet/mvc/MediaProtectSlotListView', [
    'require',
    'tpl!startup/template',
    'esui/Table',
    './MediaProtectSetListView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'unionMediaProtectSlotList';
    exports.getTableFields = function () {
        var fields = [
            {
                title: '\u4EE3\u7801\u4F4Did',
                field: 'tu',
                sortable: false,
                width: 100,
                stable: false,
                content: 'tu'
            },
            {
                title: '\u4EE3\u7801\u4F4D\u540D\u79F0',
                field: 'relationName',
                sortable: false,
                width: 200,
                stable: false,
                content: function (item) {
                    return item.name;
                }
            },
            {
                title: '\u8BA1\u8D39\u540D',
                field: 'cname',
                sortable: false,
                width: 200,
                stable: false,
                content: 'cname'
            },
            {
                title: '\u8FC7\u6EE4\u7B56\u7565',
                field: 'settingName',
                stable: false,
                width: 200,
                content: function (item) {
                    return item.settingName || '\u672A\u8BBE\u7F6E';
                }
            },
            {
                title: '\u64CD\u4F5C',
                field: 'operation',
                width: 60,
                stable: true,
                content: function (item) {
                    var config = [{
                            command: 'setProtect',
                            type: 'setProtect',
                            args: item.relationKey,
                            text: '\u8BBE\u7F6E\u8FC7\u6EE4\u7B56\u7565'
                        }];
                    var Table = require('esui/Table');
                    return Table.slideOperations(config);
                }
            }
        ];
        return fields;
    };
    exports.setProtect = function (relations) {
        var options = {
            id: 'setProtect',
            url: '/mediaProtectSet/slotForm',
            actionOptions: { relations: relations }
        };
        this.popDrawerAction(options).show();
    };
    var MediaProtectSetListView = require('./MediaProtectSetListView');
    var MediaProtectSlotListView = require('eoo').create(MediaProtectSetListView, exports);
    return MediaProtectSlotListView;
});
define('mediaProtectSet/mvc/MediaProtectSetListModel', [
    'require',
    'eoo',
    'ub-ria/util',
    'common/adapt/UnionListModel'
], function (require) {
    var eoo = require('eoo');
    var u = require('ub-ria/util');
    var exports = {};
    exports.search = function (query) {
        var data = this.data();
        var type = this.get('contentType');
        return data.search(query || {}, type);
    };
    exports.getItemById = function (id) {
        var list = this.getAllItems();
        return u.find(list, function (item) {
            return item.relationKey === id;
        });
    };
    exports.defaultArgs = {};
    exports.getQuery = function () {
        var query = {};
        var type = this.get('contentType');
        if (type === 'slot') {
            query = {
                status: '1,2,3,4',
                adType: '',
                keyword: this.get('keyword'),
                protectFilter: 0,
                orderBys: 'desc',
                pageNo: this.get('page') * 1 || 1,
                pageSize: this.get('pageSize') * 1
            };
        } else {
            query = {
                status: 1,
                orderBy: 'relationName',
                order: 'desc',
                pageNo: this.get('page') || 1,
                pageSize: this.get('pageSize')
            };
        }
        return query;
    };
    var ListModel = require('common/adapt/UnionListModel');
    var MediaProtectSetListModel = eoo.create(ListModel, exports);
    return MediaProtectSetListModel;
});
define('mediaProtectSet/mvc/MediaProtectSetList', [
    'require',
    'common/adapt/UnionListAction',
    'eoo'
], function (require) {
    var exports = {};
    exports.entityDescription = '\u8FC7\u6EE4\u5E94\u7528\u5217\u8868';
    var List = require('common/adapt/UnionListAction');
    var MediaProtectSetList = require('eoo').create(List, exports);
    return MediaProtectSetList;
});
define('mediaProtectSet/mvc/MediaProtectSetListView', [
    'require',
    'common/adapt/UnionListView',
    'eoo'
], function (require) {
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        var events = {
            'table:select': updateProtectSetStatus,
            'protect-batch-set:click': onProtectBatchSet
        };
        this.addUIEvents(events);
    };
    exports.commandHandler = function (e) {
        this.$super(arguments);
        console.log(this.model.getItemById(e.args));
        if (e.name === 'setProtect') {
            this.setProtect([this.model.getItemById(e.args)]);
        }
    };
    exports.setProtect = function (relations) {
        var options = {
            id: 'setProtect',
            url: '/mediaProtectSet/slotForm',
            actionOptions: { relations: relations }
        };
        this.popDrawerAction(options).show();
    };
    function onProtectBatchSet() {
        this.setProtect(this.getSelectedItems());
    }
    function updateProtectSetStatus() {
        var items = this.getSelectedItems();
        this.getSafely('protect-batch-set').set('disabled', !items || !items.length);
    }
    var ListView = require('common/adapt/UnionListView');
    var MediaProtectSetListView = require('eoo').create(ListView, exports);
    return MediaProtectSetListView;
});
define('mediaProtectSet/mvc/MediaProtectAppListView', [
    'require',
    'tpl!startup/template',
    'esui/Table',
    './MediaProtectSetListView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'unionMediaProtectAppList';
    exports.getTableFields = function () {
        var fields = [
            {
                title: 'AppId',
                field: 'relationKey',
                sortable: false,
                width: 100,
                stable: false,
                content: 'relationKey'
            },
            {
                title: 'App\u540D\u79F0',
                field: 'relationName',
                sortable: false,
                width: 200,
                stable: false,
                content: 'relationName'
            },
            {
                title: '\u8FC7\u6EE4\u7B56\u7565',
                field: 'settingName',
                stable: false,
                width: 200,
                content: function (item) {
                    return item.settingName || '\u672A\u8BBE\u7F6E';
                }
            },
            {
                title: '\u64CD\u4F5C',
                field: 'operation',
                width: 60,
                stable: true,
                content: function (item) {
                    var config = [{
                            command: 'setProtect',
                            type: 'setProtect',
                            args: item.relationKey,
                            text: '\u8BBE\u7F6E\u8FC7\u6EE4\u7B56\u7565'
                        }];
                    var Table = require('esui/Table');
                    return Table.slideOperations(config);
                }
            }
        ];
        return fields;
    };
    exports.setProtect = function (relations) {
        var options = {
            id: 'setProtect',
            url: '/mediaProtectSet/appForm',
            actionOptions: { relations: relations }
        };
        this.popDrawerAction(options).show();
    };
    var MediaProtectSetListView = require('./MediaProtectSetListView');
    var MediaProtectAppListView = require('eoo').create(MediaProtectSetListView, exports);
    return MediaProtectAppListView;
});
define('mediaProtectSet/MediaProtectSetPermission', [
    'require',
    'eoo'
], function (require) {
    var exports = {};
    exports.canBatchModify = function () {
        return true;
    };
    return require('eoo').create(exports);
});
define('mediaProtectSet/MediaProtectSetData', [
    'require',
    'ub-ria/util',
    'common/adapt/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager'
], function (require) {
    var u = require('ub-ria/util');
    var exports = {};
    exports.adPosListSearch = function (query) {
        return this.request('$entity/adPosListSearch', query, {
            method: 'POST',
            urlPrefix: '/v2/client/',
            url: 'adpos/adpos/query-page-list'
        }).then(function (response) {
            return {
                results: response.page.result,
                totalCount: response.page.totalCount
            };
        });
    };
    exports.appListSearch = function (query) {
        return this.request('$entity/appListsearch', query, {
            method: 'GET',
            url: '/$entity/relation!appList.action'
        }).then(u.partial(searchSourceList, query));
    };
    function searchSourceList(query, response) {
        var data = response.page;
        var pageNo = query.pageNo || 1;
        var pageSize = query.pageSize * 1 || 20;
        var start = pageSize * (pageNo - 1);
        return {
            results: data.result.slice(start, start + pageSize),
            totalCount: data.totalCount
        };
    }
    exports.search = function (query, type) {
        return type === 'slot' ? this.adPosListSearch(query) : this.appListSearch(query);
    };
    exports.update = function (entity) {
        entity = u.omit(entity, 'id');
        return this.request('$entity/update', entity, {
            method: 'POST',
            url: '/$entity/relation!match.action'
        });
    };
    var requests = {
        appListsearch: {
            name: 'mediaProtectSet/appListsearch',
            scope: 'instance',
            policy: 'auto'
        },
        adPosListSearch: {
            name: 'mediaProtectSet/adPosListSearch',
            scope: 'instance',
            policy: 'auto'
        },
        update: {
            name: 'mediaProtectSet/update',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var BaseData = require('common/adapt/BaseData');
    var MediaProtectSlotData = require('eoo').create(BaseData, exports);
    var RequestManager = require('ub-ria/mvc/RequestManager');
    u.each(requests, function (config) {
        RequestManager.register(MediaProtectSlotData, config.name, config);
    });
    return MediaProtectSlotData;
});
define('mediaProtect/mvc/MediaProtectListView', [
    'require',
    'tpl!startup/template',
    'ub-ria/util',
    'common/adapt/ListViewHelper',
    'ssp-media-protect/mvc/MediaProtectListView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var u = require('ub-ria/util');
    var exports = {};
    exports.template = 'unionMediaProtectList';
    u.extend(exports, require('common/adapt/ListViewHelper'));
    var SSPMediaProtectListView = require('ssp-media-protect/mvc/MediaProtectListView');
    var MediaProtectListView = require('eoo').create(SSPMediaProtectListView, exports);
    return MediaProtectListView;
});
define('mediaProtect/util', [
    'require',
    'ub-ria/util'
], function (require) {
    var u = require('ub-ria/util');
    var util = {};
    util.getValidIndustry = function (industry, tradList) {
        var industryIds = this.getIndustryIds(tradList);
        return u.intersection(industry, industryIds);
    };
    util.walkTree = function (parent, children, callback) {
        u.each(children, function (child, key) {
            callback(parent, child);
            this.walkTree(child, child.children, callback);
        }, this);
    };
    util.getIndustryIds = function (tradList) {
        var industryIds = [];
        util.walkTree(tradList, tradList.children, function (parent, child) {
            if (!child.children) {
                industryIds.push(child.id);
            }
        });
        return industryIds;
    };
    return util;
});
define('mediaProtect/enum', [
    'require',
    'er/Enum'
], function (require) {
    var Enum = require('er/Enum');
    var exports = {};
    exports.ProtectContentType = new Enum({
        alias: 'ADVERTISER',
        text: '\u5E7F\u544A\u4E3B',
        value: 'advertiser'
    }, {
        alias: 'INDUSTRY',
        text: '\u884C\u4E1A',
        value: 'industry'
    });
    return exports;
});
define('mediaProtect/mvc/MediaProtectListModel', [
    'require',
    'ub-ria/util',
    '../util',
    '../enum',
    'common/adapt/ListModelHelper',
    'ssp-media-protect/mvc/MediaProtectListModel',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var protectUtil = require('../util');
    var ProtectContentType = require('../enum').ProtectContentType;
    var exports = {};
    var INDUSTRY_DATASOURCE = {
        tradeList: function (model) {
            return model.data().tradeList().then(function (data) {
                return {
                    id: 0,
                    text: '\u6240\u6709\u884C\u4E1A',
                    children: data
                };
            });
        }
    };
    exports.initialize = function () {
        this.$super(arguments);
        this.putDatasource(INDUSTRY_DATASOURCE, 0);
    };
    exports.prepare = function () {
        this.$super(arguments);
        this.prepareProtects();
    };
    exports.prepareProtects = function () {
        var industryIds = protectUtil.getIndustryIds(this.get('tradeList'));
        var protectList = this.get('results');
        u.each(protectList, function (item) {
            if (!item.content) {
                var content = [];
                var validIndustrys = u.intersection(item.industry || [], industryIds);
                if (validIndustrys.length) {
                    content.push(ProtectContentType.fromValue('industry').text);
                }
                if (item.advertiser) {
                    content.push(ProtectContentType.fromValue('advertiser').text);
                }
                item.content = content.join('\u3001');
            }
            if (item.createTime) {
                item.createTime = item.createTime.time;
            }
        });
    };
    exports.remove = function (ids) {
        return this.data().remove(ids);
    };
    u.extend(exports, require('common/adapt/ListModelHelper'));
    var SSPMediaProtectListModel = require('ssp-media-protect/mvc/MediaProtectListModel');
    var MediaProtectListModel = require('eoo').create(SSPMediaProtectListModel, exports);
    return MediaProtectListModel;
});
define('mediaProtect/mvc/MediaProtectList', [
    'require',
    'ub-ria/util',
    'common/adapt/ListActionHelper',
    'ssp-media-protect/mvc/MediaProtectList',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var exports = {};
    exports.entityDescription = '\u8FC7\u6EE4\u7B56\u7565';
    u.extend(exports, require('common/adapt/ListActionHelper'));
    var SSPMediaProtectList = require('ssp-media-protect/mvc/MediaProtectList');
    var MediaProtectList = require('eoo').create(SSPMediaProtectList, exports);
    return MediaProtectList;
});
define('mediaProtect/MediaProtectPermission', [
    'require',
    'eoo'
], function (require) {
    var returnFalse = function () {
        return false;
    };
    var returnTrue = function () {
        return true;
    };
    var exports = {};
    exports.canCreate = returnTrue;
    exports.canModify = returnTrue;
    exports.canList = returnTrue;
    exports.canDelete = returnTrue;
    exports.canSetBeauty = returnFalse;
    exports.canSetAction = returnFalse;
    exports.canBatchModify = returnFalse;
    exports.canSetDSP = returnFalse;
    exports.canSetBaseIndustry = returnTrue;
    exports.canSetAllIndustry = returnTrue;
    exports.canSetAdvertiser = returnTrue;
    exports.canSetPackageName = returnFalse;
    exports.canSetCreative = returnFalse;
    exports.canSetCreativeType = returnFalse;
    exports.canSetVulgar = returnFalse;
    exports.canSetAction = returnFalse;
    exports.canSetPrice = returnFalse;
    exports.canSetKeyword = returnFalse;
    var oo = require('eoo');
    var MediaProtectPermission = oo.create(exports);
    return MediaProtectPermission;
});
define('mediaProtect/MediaProtectData', [
    'require',
    'ub-ria/util',
    'common/util',
    'common/adapt/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager'
], function (require) {
    var u = require('ub-ria/util');
    var commonUtil = require('common/util');
    var exports = {};
    exports.tradeList = function () {
        return this.request('$entity/industrys', null, {
            method: 'GET',
            url: '/$entity/industry!baseList.action'
        }).then(function (response) {
            return response.data;
        });
    };
    exports.list = function () {
        return this.request('$entity/list', {
            pageNo: 1,
            pageSize: 999999
        }, {
            method: 'GET',
            url: '/$entity/setting!list.action'
        }).then(function (response) {
            return response.page.result;
        });
    };
    exports.search = function (query) {
        return this.request('$entity/search', query, {
            method: 'GET',
            url: '/$entity/setting!list.action'
        }).then(function (response) {
            return {
                results: response.page.result,
                totalCount: response.page.totalCount
            };
        });
    };
    exports.remove = function (ids) {
        return this.request('$entity/remove', { 'setting.id': ids.join(',') }, {
            method: 'POST',
            url: '/$entity/setting!delete.action'
        });
    };
    exports.update = function (entity) {
        return this.request('$entity/update', commonUtil.prefixObjectKey('setting.', entity), {
            method: 'POST',
            url: '/$entity/setting!edit.action'
        });
    };
    exports.save = function (entity) {
        return this.request('$entity/save', commonUtil.prefixObjectKey('setting.', entity), {
            method: 'POST',
            url: '/$entity/setting!save.action'
        });
    };
    exports.findById = function (id) {
        return this.request('$entity/findById', { 'setting.id': id }, {
            method: 'GET',
            url: '/$entity/setting!get.action'
        }).then(function (response) {
            return response.setting;
        });
    };
    var requests = {
        list: {
            name: 'mediaProtect/list',
            scope: 'instance',
            policy: 'auto'
        },
        search: {
            name: 'mediaProtect/search',
            scope: 'instance',
            policy: 'auto'
        },
        save: {
            name: 'mediaProtect/save',
            scope: 'instance',
            policy: 'auto'
        },
        update: {
            name: 'mediaProtect/update',
            scope: 'instance',
            policy: 'auto'
        },
        remove: {
            name: 'mediaProtect/remove',
            scope: 'instance',
            policy: 'auto'
        },
        trade: {
            name: 'mediaProtect/industrys',
            scope: 'instance',
            policy: 'auto'
        },
        findById: {
            name: 'mediaProtect/findById',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var BaseData = require('common/adapt/BaseData');
    var MediaProtectData = require('eoo').create(BaseData, exports);
    var RequestManager = require('ub-ria/mvc/RequestManager');
    u.each(requests, function (config) {
        RequestManager.register(MediaProtectData, config.name, config);
    });
    return MediaProtectData;
});
define('media/mvc/MediaSoftwareInfoView', [
    'require',
    'tpl!startup/template',
    'common/adapt',
    'esui/lib',
    'esui/Toast',
    'ub-ria/mvc/FormView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var adapt = require('common/adapt');
    var lib = require('esui/lib');
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = { 'modify-software-info:click': modifySoftwareInfo };
        this.addUIEvents(uiEvents);
    };
    function modifySoftwareInfo() {
        this.fire('modifySoftware');
    }
    exports.handleAfterRelatedEntitySaved = function (entity, targetId) {
        if (targetId === 'modifySoftware') {
            require('esui/Toast').success('\u8F6F\u4EF6\u4FE1\u606F\u4FEE\u6539\u5DF2\u63D0\u4EA4!').show();
            this.fire('reload');
        }
    };
    exports.template = 'unionMediaSoftwareInfo';
    exports.popDrawerAction = function () {
        var drawerActionPanel = this.$super(arguments);
        drawerActionPanel.on('panelHide', onDrawActionPanelClose);
        drawerActionPanel.on('panelShow', onDrawActionPanelShow);
        return drawerActionPanel;
    };
    function onDrawActionPanelClose() {
        lib.removeClass(document.getElementById('page-container'), 'page-container-hide');
        adapt.resize();
    }
    function onDrawActionPanelShow() {
        document.body.style.overflowY = '';
        lib.addClass(document.getElementById('page-container'), 'page-container-hide');
    }
    var FormView = require('ub-ria/mvc/FormView');
    var MediaSoftwareInfoView = require('eoo').create(FormView, exports);
    return MediaSoftwareInfoView;
});
define('media/mvc/MediaSoftwareInfoModel', [
    'require',
    'ssp-media/enum',
    'ub-ria/mvc/BaseModel',
    'eoo'
], function (require) {
    var Level = require('ssp-media/enum').PVLevel;
    var SoftwareState = require('ssp-media/enum').SiteStatus;
    var exports = {};
    var SOFTWARE = {
        software: function (model) {
            return model.data().getSoftwareInfo();
        }
    };
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(SOFTWARE);
    };
    exports.prepare = function () {
        this.$super(arguments);
        var software = this.get('software');
        software.downloadSumText = Level.getTextFromValue(software.downloadLevel);
        software.userSumText = Level.getTextFromValue(software.userLevel);
        software.sobarPluginText = +software.sobarBinded ? '\u662F' : '\u5426';
        this.set('SoftwareState', SoftwareState);
        software.softwareDes = software.description.replace(/\n/g, '<br>');
        this.set('software', software);
    };
    var Model = require('ub-ria/mvc/BaseModel');
    var MediaSoftwareInfoModel = require('eoo').create(Model, exports);
    return MediaSoftwareInfoModel;
});
define('media/mvc/MediaSoftwareInfo', [
    'require',
    'ub-ria/mvc/BaseAction',
    'eoo'
], function (require) {
    var exports = {};
    exports.entityDescription = '\u8F6F\u4EF6\u4FE1\u606F';
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('modifySoftware', onModifySoftware, this);
        this.view.on('reload', onReload, this);
    };
    function onModifySoftware() {
        var software = this.model.get('software');
        this.view.popDrawerAction({
            url: '/mediaSoftware/update',
            actionOptions: {
                id: software.id,
                entity: software
            }
        }, 'modifySoftware').show();
    }
    function onReload() {
        this.reload();
    }
    var BaseAction = require('ub-ria/mvc/BaseAction');
    return require('eoo').create(BaseAction, exports);
});
define('media/mvc/MediaSiteListView', [
    'require',
    'tpl!startup/template',
    'ub-ria/util',
    'eoo',
    'moment',
    'esui/Table',
    '../enum',
    'er/URL',
    'common/adapt/ListViewHelper',
    'ssp-media/mvc/MediaSiteListView'
], function (require) {
    require('tpl!startup/template');
    var u = require('ub-ria/util');
    var eoo = require('eoo');
    var m = require('moment');
    var Table = require('esui/Table');
    var MediaEnum = require('../enum');
    var WebQuality = MediaEnum.WebQuality;
    var CproState = MediaEnum.CproState;
    var exports = {};
    exports.template = 'unionMediaSiteList';
    exports.commandHandler = function (e) {
        this.$super(arguments);
        if (e.triggerType === 'click' && e.name === 'cropApply') {
            var args = JSON.parse(e.args);
            if (args.verified) {
                this.fire('cropApply', { id: args.id });
            } else {
                var updateURL = require('er/URL').withQuery('/mediaSite/update', { id: args.id });
                this.popDrawerAction({ url: updateURL }).show();
            }
        }
    };
    exports.getTableFields = function () {
        var templateEngine = this.getTemplateEngine();
        var fraudulentDetail = templateEngine.getRenderer('unionFraudulentDetail');
        var statusDetailRender = templateEngine.getRenderer('unionMediaSiteStatusFieldWithDetail');
        var cproApplyButton = templateEngine.getRenderer('unionCproApplyCommand');
        var qualityTip = templateEngine.getRenderer('unionQualityTip')();
        var fields = [
            {
                title: '\u7F51\u7AD9\u57DF\u540D',
                field: 'domain',
                width: 200,
                stable: false,
                content: function (item) {
                    return item.domain + (item.verified ? '' : '<span class="rejected">(\u672A\u9A8C\u8BC1)</span>');
                }
            },
            {
                title: '\u7F51\u7AD9\u540D\u79F0',
                field: 'name',
                stable: false,
                width: 200,
                content: 'name'
            },
            {
                title: '\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C',
                field: 'state',
                stable: false,
                width: 150,
                content: function (item) {
                    var cproApply = '';
                    var state = item.state;
                    if (!item.isCpro) {
                        var config = {
                            command: 'cropApply',
                            args: JSON.stringify({
                                verified: item.verified,
                                id: item.id
                            }),
                            className: 'link-like table-detail',
                            text: '\u7533\u8BF7'
                        };
                        if (state === 0) {
                            state = CproState.UNDREDGED;
                            cproApply = cproApplyButton({ content: Table.command(config) });
                        }
                    }
                    var statusDetail = '';
                    var data = { statusName: u.dasherize(CproState.getAliasFromValue(item.state)) };
                    if (item.state === CproState.AUDITTING) {
                        statusDetail = statusDetailRender(data);
                    }
                    if (item.state === CproState.REJECTED && item.refuseReason) {
                        data.refuseReason = item.refuseReason;
                        statusDetail = statusDetailRender(data);
                    }
                    return CproState.getTextFromValue(state) + statusDetail + cproApply;
                }
            },
            {
                title: '\u5907\u6CE8' + qualityTip,
                field: 'quality',
                width: 150,
                stable: true,
                content: function (item) {
                    return WebQuality.getTextFromValue(item.quality);
                }
            },
            {
                title: '\u64CD\u4F5C',
                field: 'operation',
                width: 80,
                stable: true,
                content: function (item) {
                    if (item.state !== CproState.AUDITTING) {
                        var config = [
                            {
                                command: 'modify',
                                type: 'modify',
                                args: item.id,
                                text: '\u4FEE\u6539'
                            },
                            '|',
                            {
                                command: 'remove',
                                type: 'remove',
                                args: item.id,
                                text: '\u5220\u9664'
                            }
                        ];
                        var Table = require('esui/Table');
                        return Table.slideOperations(config);
                    }
                    return '';
                }
            }
        ];
        return fields;
    };
    exports.enterDocument = function () {
        this.$super(arguments);
        this.get('table').initChildren();
    };
    eoo.defineAccessor(exports, 'templateEngine');
    u.extend(exports, require('common/adapt/ListViewHelper'));
    var SSPMediaSiteListView = require('ssp-media/mvc/MediaSiteListView');
    var MediaSiteListView = eoo.create(SSPMediaSiteListView, exports);
    return MediaSiteListView;
});
define('media/mvc/MediaSiteListModel', [
    'require',
    'ub-ria/util',
    'common/adapt/ListModelHelper',
    'ssp-media/mvc/MediaSiteListModel',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var exports = {};
    exports.defaultArgs = {};
    exports.prepare = function () {
        this.$super(arguments);
        var sites = this.get('results');
        u.each(sites, function (item) {
            if (item.bizStatus) {
                var cpro = u.findWhere(item.bizStatus, 'cpro');
                item.isCpro = !!cpro;
            }
        });
    };
    exports.remove = function (ids) {
        return this.data().remove(ids);
    };
    exports.applyCpro = function (id) {
        return this.data().applyCpro(id);
    };
    u.extend(exports, require('common/adapt/ListModelHelper'));
    var SSPMediaSiteListModel = require('ssp-media/mvc/MediaSiteListModel');
    var MediaSiteListModel = require('eoo').create(SSPMediaSiteListModel, exports);
    return MediaSiteListModel;
});
define('media/mvc/MediaSiteList', [
    'require',
    'ub-ria/util',
    'esui/Toast',
    'common/adapt/UnionListAction',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var exports = {};
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('cropApply', onCropApply, this);
    };
    function applyCproSuccess(response) {
        require('esui/Toast').success('\u7533\u8BF7\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u6210\u529F\uFF0C\u8BF7\u7B49\u5F85\u5BA1\u6838!').show();
        this.reload();
    }
    function onCropApply(e) {
        this.view.waitConfirm({
            title: '\u7533\u8BF7\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C',
            content: '\u60A8\u786E\u5B9A\u7533\u8BF7\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u5417'
        }).thenBind(this.model.applyCpro, this.model, e.id).thenBind(applyCproSuccess, this).fail(u.bind(this.cproApplyFail, this));
    }
    exports.cproApplyFail = function (response) {
        if (response && response.message) {
            this.view.alert(response.message);
        }
    };
    exports.entityDescription = '\u7F51\u7AD9';
    var UnionListAction = require('common/adapt/UnionListAction');
    var MediaSiteList = require('eoo').create(UnionListAction, exports);
    return MediaSiteList;
});
define('media/appEnum', [
    'require',
    'er/Enum'
], function (require) {
    var Enum = require('er/Enum');
    var exports = {};
    exports.System = new Enum({
        alias: 'IOS',
        text: 'ios'
    }, {
        alias: 'ANDROID',
        text: 'android'
    });
    exports.Terminal = new Enum({
        alias: 'ALL',
        text: '\u5168\u90E8'
    }, {
        alias: 'MOBILE',
        text: '\u624B\u673A'
    }, {
        alias: 'PAD',
        text: 'Pad'
    });
    return exports;
});
define('media/mvc/MediaAppListView', [
    'require',
    'tpl!startup/template',
    'eoo',
    'moment',
    'ssp-media/enum',
    '../appEnum',
    'common/adapt/UnionListView'
], function (require) {
    require('tpl!startup/template');
    var eoo = require('eoo');
    var m = require('moment');
    var AppStatus = require('ssp-media/enum').SiteStatus;
    var System = require('../appEnum').System;
    var Terminal = require('../appEnum').Terminal;
    var exports = {};
    exports.template = 'unionMediaAppList';
    exports.getTableFields = function () {
        var fields = [
            {
                title: '\u5E73\u53F0',
                field: 'platfrom',
                width: 50,
                stable: true,
                content: function (item) {
                    var content = '' + '<span class="app-system-ico app-system-' + System.getTextFromValue(item.platform) + '"></span>';
                    return content;
                }
            },
            {
                title: 'App\u540D\u79F0',
                field: 'name',
                stable: false,
                width: 200,
                content: 'name'
            },
            {
                title: 'App ID',
                field: 'appsid',
                stable: true,
                width: 150,
                content: 'appsid'
            },
            {
                title: '\u72B6\u6001',
                field: 'state',
                width: 150,
                stable: false,
                content: function (item) {
                    var content = AppStatus.getTextFromValue(item.state);
                    return content;
                }
            },
            {
                title: '\u9002\u7528\u7EC8\u7AEF',
                field: 'terminal',
                width: 200,
                stable: false,
                content: function (item) {
                    var mobile = '<span class="app-terminal-logo app-terminal-phone">\u624B\u673A</span>';
                    var pad = '<span class="app-terminal-logo app-terminal-pad">Pad</span>';
                    switch (item.terminal) {
                    case Terminal.MOBILE:
                        return mobile;
                    case Terminal.PAD:
                        return pad;
                    }
                    return mobile + pad;
                }
            },
            {
                title: '\u521B\u5EFA\u65F6\u95F4',
                field: 'createTime',
                width: 150,
                stable: true,
                content: function (item) {
                    return m(item.createTime).format('YYYY-MM-DD HH:mm:ss');
                }
            }
        ];
        return fields;
    };
    var ListView = require('common/adapt/UnionListView');
    var MediaAppListView = eoo.create(ListView, exports);
    return MediaAppListView;
});
define('media/mvc/MediaAppListModel', [
    'require',
    'common/adapt/UnionListModel',
    'eoo'
], function (require) {
    var exports = {};
    exports.defaultArgs = {};
    exports.search = function (query) {
        return this.data().appList(query || {});
    };
    var ListModel = require('common/adapt/UnionListModel');
    var AppListModel = require('eoo').create(ListModel, exports);
    return AppListModel;
});
define('media/mvc/MediaAppList', [
    'require',
    'common/adapt/UnionListAction',
    'eoo'
], function (require) {
    var exports = {};
    exports.entityDescription = 'App';
    exports.getEntityName = function () {
        return 'mediaApp';
    };
    var ListAction = require('common/adapt/UnionListAction');
    var MediaAppList = require('eoo').create(ListAction, exports);
    return MediaAppList;
});
define('media/enum', [
    'require',
    'er/Enum'
], function (require) {
    var Enum = require('er/Enum');
    var exports = {};
    exports.VerifiedStatus = new Enum({
        alias: 'BASE',
        text: '\u672A\u9A8C\u8BC1'
    }, {
        alias: 'VERIFIED',
        text: '\u5DF2\u9A8C\u8BC1'
    });
    exports.WebQuality = new Enum({
        alias: 'UNKOWN',
        text: '',
        value: 0
    }, {
        alias: 'BASE',
        text: '\u57FA\u7840',
        value: 1
    }, {
        alias: 'COMMON',
        text: '\u901A\u7528',
        value: 2
    });
    exports.CproState = new Enum({
        alias: 'DREDGED',
        text: '\u5DF2\u5F00\u901A'
    }, {
        alias: 'AUDITTING',
        text: '\u5BA1\u6838\u4E2D'
    }, {
        alias: 'REJECTED',
        text: '\u672A\u901A\u8FC7'
    }, {
        alias: 'UNDREDGED',
        text: '\u672A\u5F00\u901A'
    });
    return exports;
});
define('media/MediaPermission', [
    'require',
    'eoo'
], function (require) {
    var returnTrue = function () {
        return true;
    };
    var exports = {};
    exports.canCreate = returnTrue;
    exports.canModify = returnTrue;
    exports.canBatchModify = function () {
        return false;
    };
    exports.canDelete = returnTrue;
    exports.canViewReport = function () {
        return true;
    };
    var oo = require('eoo');
    oo.defineAccessor(exports, 'systemPermission');
    var MediaProtectPermission = oo.create(exports);
    return MediaProtectPermission;
});
define('media/MediaData', [
    'require',
    'ub-ria/util',
    'promise',
    'common/adapt/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager'
], function (require) {
    var u = require('ub-ria/util');
    var Promise = require('promise');
    var exports = {};
    exports.getMediaType = function (type) {
        return this.request('$entity/siteType', { type: type }, {
            method: 'GET',
            url: '/account/media/types.action'
        }).then(function (data) {
            return data.siteType;
        });
    };
    exports.validateSite = function (website) {
        return this.request('$entity/validateSite', { website: website }, {
            method: 'GET',
            url: '/account/media/website!validates.action'
        });
    };
    exports.verifyBlackList = function (domain) {
        return this.request('$entity/verifyBlackList', { domain: domain }, {
            method: 'GET',
            url: '/unanti/domainUnlockOld!isFraudUrl.action'
        });
    };
    exports.verifySite = function (verifyInfo) {
        return this.request('$entity/verifySite', verifyInfo, {
            method: 'GET',
            url: '/client/account/media/website!verify.action'
        });
    };
    exports.search = function (query) {
        return this.request('$entity/search', query, {
            method: 'GET',
            url: '/account/media/website!page.action'
        }).then(function (response) {
            return {
                results: response.results,
                totalCount: response.totalCount
            };
        });
    };
    exports.findById = function (id) {
        return this.request('$entity/findById', { id: id }, {
            method: 'GET',
            url: '/account/media/website!get.action'
        }).then(function (response) {
            var entity = response.results;
            if (entity.subType && entity.subType === -1) {
                entity.subType = null;
            }
            return entity;
        });
    };
    exports.remove = function (ids) {
        return this.request('$entity/remove', { id: ids.join(',') }, {
            method: 'POST',
            url: '/account/media/website!delete.action'
        });
    };
    exports.getSiteCount = function () {
        return Promise.resolve(9999);
    };
    exports.update = function (entity) {
        return this.request('$entity/update', entity, {
            method: 'POST',
            url: '/account/media/website!modify.action'
        });
    };
    exports.save = function (entity) {
        return this.request('$entity/save', entity, {
            method: 'POST',
            url: '/account/media/website!create.action'
        });
    };
    exports.applyCpro = function (id) {
        return this.request('$entity/applyCpro', { id: id }, {
            method: 'POST',
            url: '/account/media/website!apply.action'
        });
    };
    exports.appList = function (query) {
        return this.request('$entity/appList', query, {
            method: 'GET',
            url: '/account/media/app!page.action'
        }).then(function (response) {
            return {
                results: response.results,
                totalCount: response.totalCount
            };
        });
    };
    exports.getSoftwareInfo = function (query) {
        return this.request('$entity/getSoftwareInfo', query, {
            method: 'GET',
            url: '/account/media/software!get.action'
        }).then(function (data) {
            return data.results;
        });
    };
    exports.saveSoftware = function (entity) {
        return this.request('$entity/saveSoftware', entity, {
            method: 'POST',
            url: '/account/media/software!modify.action'
        });
    };
    exports.forceCreate = function (entity) {
        entity.force = true;
        return this.request('$entity/save', entity, {
            method: 'POST',
            url: '/account/media/website!create.action'
        });
    };
    var requests = {
        list: {
            name: 'mediaSite/list',
            scope: 'instance',
            policy: 'auto'
        },
        remove: {
            name: 'mediaSite/remove',
            scope: 'instance',
            policy: 'auto'
        },
        findById: {
            name: 'mediaSite/findById',
            scope: 'instance',
            policy: 'auto'
        },
        save: {
            name: 'mediaSite/save',
            scope: 'instance',
            policy: 'auto'
        },
        update: {
            name: 'mediaSite/update',
            scope: 'instance',
            policy: 'auto'
        },
        siteType: {
            name: 'mediaSite/siteType',
            scope: 'instance',
            policy: 'auto'
        },
        validateSite: {
            name: 'mediaSite/validateSite',
            scope: 'instance',
            policy: 'auto'
        },
        verifySite: {
            name: 'mediaSite/verifySite',
            scope: 'instance',
            policy: 'auto'
        },
        forceCreate: {
            name: 'mediaSite/forceCreate',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var UnionBaseData = require('common/adapt/BaseData');
    var MediaData = require('eoo').create(UnionBaseData, exports);
    var RequestManager = require('ub-ria/mvc/RequestManager');
    u.each(requests, function (config) {
        RequestManager.register(MediaData, config.name, config);
    });
    return MediaData;
});
define('finance/vatInvoiceSchema', [
    'exports',
    'module'
], function (exports, module) {
    module.exports = {
        erpInvoiceId: [
            'number',
            '\u53D1\u7968\u96C6ID',
            { required: true }
        ],
        taxNumber: [
            'string',
            '\u53D1\u7968\u53F7',
            {
                required: true,
                maxLength: 400
            }
        ],
        noTaxAmount: [
            'number',
            '\u4E0D\u542B\u7A0E\u91D1\u989D',
            { required: true }
        ],
        taxAmount: [
            'number',
            '\u7A0E\u989D',
            { required: true }
        ]
    };
});
define('finance/saleInvoiceSchema', [
    'exports',
    'module'
], function (exports, module) {
    module.exports = {
        erpInvoiceId: [
            'number',
            '\u53D1\u7968\u96C6ID',
            { required: true }
        ],
        taxNumber: [
            'string',
            '\u53D1\u7968\u53F7',
            {
                required: true,
                maxLength: 400
            }
        ]
    };
});
define('finance/mvc/FinancePaymentListView', [
    'exports',
    'module',
    'tpl!startup/template',
    'common/adapt/decorator',
    'ssp-finance/mvc/FinancePaymentListView'
], function (exports, module, _tplTplFinancePaymentListTplHtml, _commonAdaptDecorator, _sspFinanceMvcFinancePaymentListView) {
    var _SSPFinancePaymentListView2 = babelHelpers.interopRequireDefault(_sspFinanceMvcFinancePaymentListView);
    var FinancePaymentListView = function (_SSPFinancePaymentListView) {
        babelHelpers.inherits(FinancePaymentListView, _SSPFinancePaymentListView);
        function FinancePaymentListView() {
            babelHelpers.classCallCheck(this, _FinancePaymentListView);
            babelHelpers.get(Object.getPrototypeOf(_FinancePaymentListView.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(FinancePaymentListView, [
            {
                key: 'getTableFields',
                value: function getTableFields() {
                    var fields = babelHelpers.get(Object.getPrototypeOf(_FinancePaymentListView.prototype), 'getTableFields', this).call(this);
                    fields.forEach(function (item) {
                        if (item.field === 'havePay') {
                            item.width = 150;
                        } else if (item.field === 'date') {
                            item.width = 65;
                        }
                    });
                    return fields;
                }
            },
            {
                key: 'template',
                get: function get() {
                    return 'unionFinancePaymentList';
                }
            }
        ]);
        var _FinancePaymentListView = FinancePaymentListView;
        FinancePaymentListView = (0, _commonAdaptDecorator.DrawActionPanelHelper)(FinancePaymentListView) || FinancePaymentListView;
        return FinancePaymentListView;
    }(_SSPFinancePaymentListView2['default']);
    module.exports = FinancePaymentListView;
});
define('finance/mvc/FinancePaymentListModel', [
    'exports',
    'module',
    'common/adapt/decorator',
    'ssp-finance/mvc/FinancePaymentListModel'
], function (exports, module, _commonAdaptDecorator, _sspFinanceMvcFinancePaymentListModel) {
    var _SSPFinancePaymentListModel2 = babelHelpers.interopRequireDefault(_sspFinanceMvcFinancePaymentListModel);
    var FinancePaymentListModel = function (_SSPFinancePaymentListModel) {
        babelHelpers.inherits(FinancePaymentListModel, _SSPFinancePaymentListModel);
        function FinancePaymentListModel() {
            babelHelpers.classCallCheck(this, _FinancePaymentListModel);
            babelHelpers.get(Object.getPrototypeOf(_FinancePaymentListModel.prototype), 'constructor', this).apply(this, arguments);
        }
        var _FinancePaymentListModel = FinancePaymentListModel;
        FinancePaymentListModel = (0, _commonAdaptDecorator.ListModelHelper)(FinancePaymentListModel) || FinancePaymentListModel;
        return FinancePaymentListModel;
    }(_SSPFinancePaymentListModel2['default']);
    module.exports = FinancePaymentListModel;
});
define('finance/mvc/FinancePaymentList', [
    'exports',
    'module',
    'common/util',
    'common/adapt/decorator',
    'ssp-finance/mvc/FinancePaymentList'
], function (exports, module, _commonUtil, _commonAdaptDecorator, _sspFinanceMvcFinancePaymentList) {
    var _u = babelHelpers.interopRequireDefault(_commonUtil);
    var _SSPFinancePaymentList2 = babelHelpers.interopRequireDefault(_sspFinanceMvcFinancePaymentList);
    var FinancePaymentList = function (_SSPFinancePaymentList) {
        babelHelpers.inherits(FinancePaymentList, _SSPFinancePaymentList);
        function FinancePaymentList() {
            babelHelpers.classCallCheck(this, _FinancePaymentList);
            babelHelpers.get(Object.getPrototypeOf(_FinancePaymentList.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(FinancePaymentList, [{
                key: 'applyRepay',
                value: function applyRepay(date) {
                    return regeneratorRuntime.async(function applyRepay$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                context$2$0.prev = 0;
                                context$2$0.next = 3;
                                return regeneratorRuntime.awrap(babelHelpers.get(Object.getPrototypeOf(_FinancePaymentList.prototype), 'applyRepay', this).call(this, date));
                            case 3:
                                context$2$0.next = 8;
                                break;
                            case 5:
                                context$2$0.prev = 5;
                                context$2$0.t0 = context$2$0['catch'](0);
                                this.view.alert({ content: context$2$0.t0.message || '\u7533\u8BF7\u8865\u4ED8\u5931\u8D25' });
                            case 8:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this, [[
                            0,
                            5
                        ]]);
                }
            }]);
        var _FinancePaymentList = FinancePaymentList;
        FinancePaymentList = (0, _commonAdaptDecorator.ListActionHelper)(FinancePaymentList) || FinancePaymentList;
        return FinancePaymentList;
    }(_SSPFinancePaymentList2['default']);
    module.exports = FinancePaymentList;
});
define('finance/mvc/FinanceInfoView', [
    'exports',
    'module',
    'tpl!startup/template',
    'ssp-finance/mvc/FinanceInfoView',
    'common/adapt/decorator'
], function (exports, module, _tplTplFinanceInfoTplHtml, _sspFinanceMvcFinanceInfoView, _commonAdaptDecorator) {
    var _SSPFinanceInfoView2 = babelHelpers.interopRequireDefault(_sspFinanceMvcFinanceInfoView);
    var FinanceInfoView = function (_SSPFinanceInfoView) {
        babelHelpers.inherits(FinanceInfoView, _SSPFinanceInfoView);
        function FinanceInfoView() {
            babelHelpers.classCallCheck(this, _FinanceInfoView);
            babelHelpers.get(Object.getPrototypeOf(_FinanceInfoView.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(FinanceInfoView, [{
                key: 'template',
                get: function get() {
                    return 'unionFinanceInfo';
                }
            }]);
        var _FinanceInfoView = FinanceInfoView;
        FinanceInfoView = (0, _commonAdaptDecorator.DrawActionPanelHelper)(FinanceInfoView) || FinanceInfoView;
        return FinanceInfoView;
    }(_SSPFinanceInfoView2['default']);
    module.exports = FinanceInfoView;
});
define('finance/mvc/FinanceInfoModel', [
    'exports',
    'module',
    'ub-ria/util',
    'ssp-account/enum',
    'ssp-finance/enum',
    'ssp-finance/mvc/FinanceInfoModel'
], function (exports, module, _ubRiaUtil, _sspAccountEnum, _sspFinanceEnum, _sspFinanceMvcFinanceInfoModel) {
    var _u = babelHelpers.interopRequireDefault(_ubRiaUtil);
    var _Certification = babelHelpers.interopRequireDefault(_sspAccountEnum);
    var _SSPFinanceInfoModel2 = babelHelpers.interopRequireDefault(_sspFinanceMvcFinanceInfoModel);
    var FinanceInfoModel = function (_SSPFinanceInfoModel) {
        babelHelpers.inherits(FinanceInfoModel, _SSPFinanceInfoModel);
        function FinanceInfoModel() {
            babelHelpers.classCallCheck(this, FinanceInfoModel);
            babelHelpers.get(Object.getPrototypeOf(FinanceInfoModel.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(FinanceInfoModel, [
            {
                key: 'prepareMemberInfo',
                value: function prepareMemberInfo() {
                    var member = _u['default'].deepClone(this.get('member'));
                    var hasMemberInfo = !_u['default'].isEmpty(member);
                    this.set('canModify', !hasMemberInfo || member.certification !== _Certification['default'].AUDITING);
                    if (hasMemberInfo) {
                        member.requireCerfication = member.certification === _Certification['default'].INVALID || member.certification === _Certification['default'].FAILED;
                        this.set('member', member);
                    }
                    this.set('FinanceStatus', _sspFinanceEnum.FinanceStatus);
                    var userAccountType = this.get('userAccountType');
                    var identityVerified = userAccountType === _sspFinanceEnum.UserAccountType.INDIVIDUAL && member.identityStatus === 1;
                    this.set('identityVerified', identityVerified);
                    prepareCertificationURL.call(this, member);
                    var accAddress = [];
                    if (this.get('accProvinceText')) {
                        accAddress.push(this.get('accProvinceText'));
                    }
                    if (this.get('accTown')) {
                        accAddress.push(this.get('accTown'));
                    }
                    this.set('accAddress', accAddress.join(','));
                }
            },
            {
                key: 'getMemberInfo',
                value: function getMemberInfo() {
                    if (this.checkPermission('canViewMemberInfo')) {
                        var globalData = this.data('global');
                        return globalData.getUser().then(function (data) {
                            var member = _u['default'].deepClone(data);
                            member.certification = member.realNameAuthStatus;
                            return member;
                        });
                    }
                    return Promise.resolve({});
                }
            }
        ]);
        return FinanceInfoModel;
    }(_SSPFinanceInfoModel2['default']);
    module.exports = FinanceInfoModel;
    function prepareCertificationURL(member) {
        var template = 'http://defensor.baidu.com/dftools/commtask?appid=3&userid=${member}';
        var url = template.replace('${member}', member.ucid);
        this.set('certificationURL', url);
    }
});
define('finance/FinancePermission', [
    'exports',
    'module'
], function (exports, module) {
    var FinancePermission = function () {
        function FinancePermission() {
            babelHelpers.classCallCheck(this, FinancePermission);
        }
        babelHelpers.createClass(FinancePermission, [
            {
                key: 'canViewFinanceInfo',
                value: function canViewFinanceInfo() {
                    return true;
                }
            },
            {
                key: 'canCreateFinanceInfo',
                value: function canCreateFinanceInfo() {
                    return true;
                }
            },
            {
                key: 'canModifyFinanceInfo',
                value: function canModifyFinanceInfo() {
                    return true;
                }
            },
            {
                key: 'canViewPayment',
                value: function canViewPayment() {
                    return true;
                }
            },
            {
                key: 'canModifyKeepMoney',
                value: function canModifyKeepMoney() {
                    return true;
                }
            },
            {
                key: 'canViewBalance',
                value: function canViewBalance() {
                    return true;
                }
            },
            {
                key: 'canViewERPInvoice',
                value: function canViewERPInvoice() {
                    return true;
                }
            },
            {
                key: 'canCreateInvoice',
                value: function canCreateInvoice() {
                    return true;
                }
            },
            {
                key: 'canModifyInvoice',
                value: function canModifyInvoice() {
                    return true;
                }
            },
            {
                key: 'canRemoveInvoice',
                value: function canRemoveInvoice() {
                    return true;
                }
            },
            {
                key: 'canViewMemberInfo',
                value: function canViewMemberInfo() {
                    return true;
                }
            },
            {
                key: 'canViewContactInfo',
                value: function canViewContactInfo() {
                    return true;
                }
            },
            {
                key: 'canModifyContactInfo',
                value: function canModifyContactInfo() {
                    return true;
                }
            },
            {
                key: 'canHaveIndividualFinanceInfo',
                value: function canHaveIndividualFinanceInfo() {
                    return true;
                }
            },
            {
                key: 'canVerifyMemberPhone',
                value: function canVerifyMemberPhone() {
                    return false;
                }
            }
        ]);
        return FinancePermission;
    }();
    module.exports = FinancePermission;
});
define('finance/FinanceInvoiceData', [
    'exports',
    'module',
    'common/adapt/BaseData',
    'ub-ria/mvc/RequestManager'
], function (exports, module, _commonAdaptBaseData, _ubRiaMvcRequestManager) {
    var _BaseData2 = babelHelpers.interopRequireDefault(_commonAdaptBaseData);
    var FinanceInvoiceData = function (_BaseData) {
        babelHelpers.inherits(FinanceInvoiceData, _BaseData);
        function FinanceInvoiceData() {
            babelHelpers.classCallCheck(this, FinanceInvoiceData);
            babelHelpers.get(Object.getPrototypeOf(FinanceInvoiceData.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(FinanceInvoiceData, [
            {
                key: 'save',
                value: function save(entity) {
                    return this.request('finance/invoice/save', entity, {
                        method: 'POST',
                        url: '/account/finance/payment!updateTaxInvoice.action'
                    });
                }
            },
            {
                key: 'update',
                value: function update(entity) {
                    return this.request('finance/invoice/save', entity, {
                        method: 'POST',
                        url: '/account/finance/payment!updateTaxInvoice.action'
                    });
                }
            },
            {
                key: 'updateStatus',
                value: function updateStatus(status, ids) {
                    return this.request('finance/invoice/updateStatus', { id: ids.join(',') }, {
                        method: 'POST',
                        url: '/account/finance/payment!delTaxInvoice.action'
                    });
                }
            },
            {
                key: 'findById',
                value: function findById(id) {
                    console.log(id);
                    return this.request('finance/invoice/findById', { id: id }, {
                        method: 'GET',
                        url: '/account/finance/payment!queryTaxInvoice.action'
                    });
                }
            }
        ]);
        return FinanceInvoiceData;
    }(_BaseData2['default']);
    module.exports = FinanceInvoiceData;
    var requests = [
        {
            name: 'finance/invoice/updateStatus',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/invoice/save',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/invoice/update',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/invoice/findById',
            scope: 'instance',
            policy: 'auto'
        }
    ];
    requests.forEach(function (config) {
        return (0, _ubRiaMvcRequestManager.register)(FinanceInvoiceData, config.name, config);
    });
});
define('finance/FinanceData', [
    'exports',
    'module',
    'common/adapt/BaseData',
    'ub-ria/mvc/RequestManager',
    'common/util',
    'er/URL'
], function (exports, module, _commonAdaptBaseData, _ubRiaMvcRequestManager, _commonUtil) {
    var _BaseData2 = babelHelpers.interopRequireDefault(_commonAdaptBaseData);
    var _u = babelHelpers.interopRequireDefault(_commonUtil);
    var FinanceData = function (_BaseData) {
        babelHelpers.inherits(FinanceData, _BaseData);
        function FinanceData() {
            babelHelpers.classCallCheck(this, FinanceData);
            babelHelpers.get(Object.getPrototypeOf(FinanceData.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(FinanceData, [
            {
                key: 'getFinanceInfo',
                value: function getFinanceInfo() {
                    return this.request('$entity/info', null, {
                        method: 'GET',
                        url: '/account/finance/information!queryInformation.action'
                    });
                }
            },
            {
                key: 'getKeepMoney',
                value: function getKeepMoney() {
                    return this.request('$entity/payment/keepMoney', null, {
                        method: 'GET',
                        url: '/account/finance/information!queryKeepMoney.action'
                    });
                }
            },
            {
                key: 'updateKeepMoney',
                value: function updateKeepMoney(entity) {
                    return this.request('$entity/payment/keepMoney/update', entity, {
                        method: 'POST',
                        url: '/account/finance/information!updateKeepMoney.action'
                    });
                }
            },
            {
                key: 'update',
                value: function update(entity) {
                    return this.request('$entity/info/update', entity, {
                        url: '/account/finance/information!updateInformation.action',
                        method: 'POST'
                    });
                }
            },
            {
                key: 'getBalance',
                value: function getBalance() {
                    return this.request('$entity/balance', null, {
                        url: '/account/finance/information!queryBalance.action',
                        method: 'GET'
                    });
                }
            },
            {
                key: 'searchPayments',
                value: function searchPayments(query) {
                    return this.request('$entity/payment/search', query, {
                        url: '/account/finance/payment!queryPayments.action',
                        method: 'GET'
                    });
                }
            },
            {
                key: 'invoiceSetList',
                value: function invoiceSetList(date) {
                    return this.request('$entity/invoiceSetList', { businessPeriod: date }, {
                        url: '/account/finance/payment!queryErpInvoices.action',
                        method: 'GET'
                    });
                }
            },
            {
                key: 'getRegionInfo',
                value: function getRegionInfo() {
                    return this.request('finance/regionInfo', null, {
                        url: '/account/finance/tools!queryFinanceRegionInfo.action',
                        method: 'GET'
                    }).then(function (response) {
                        return { results: response };
                    });
                }
            },
            {
                key: 'getSubBankList',
                value: function getSubBankList(param) {
                    var url = 'http://www.baifubao.com/callback';
                    param.cmd = 1070;
                    return jsonp(url, param).then(function (response) {
                        if (response.meta && response.meta.result == 0) {
                            return response.data;
                        }
                        return [];
                    });
                }
            },
            {
                key: 'getAddress',
                value: function getAddress() {
                    return this.request('finance/getAddress', null, {
                        url: '/account/customer-info/init',
                        method: 'GET',
                        urlPrefix: '/v2/client'
                    }).then(function (response) {
                        var customerInfo = response.customerInfo;
                        return {
                            cellphone: customerInfo.cellphone || customerInfo.telephone,
                            realName: customerInfo.realName,
                            address: customerInfo.address,
                            postcode: customerInfo.postcode
                        };
                    });
                }
            },
            {
                key: 'applyRepay',
                value: function applyRepay(month) {
                    return this.request('$entity/finance/repay', { month: month }, {
                        url: '/account/finance/payment!repay.action',
                        method: 'POST'
                    });
                }
            },
            {
                key: 'getInvoicesByErpInvoiceId',
                value: function getInvoicesByErpInvoiceId(erpInvoiceId) {
                    return regeneratorRuntime.async(function getInvoicesByErpInvoiceId$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                return context$2$0.abrupt('return', this.request('finance/invoice/list', null, {
                                    method: 'GET',
                                    url: '/finance/invoice-info/list/' + erpInvoiceId,
                                    urlPrefix: '/v2/client'
                                }));
                            case 1:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'saveInvoice',
                value: function saveInvoice(data) {
                    return regeneratorRuntime.async(function saveInvoice$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                return context$2$0.abrupt('return', this.request('finance/invoice/save', data, {
                                    url: '/finance/invoice-info',
                                    urlPrefix: '/v2/client',
                                    method: 'POST',
                                    contentType: 'application/json'
                                }));
                            case 1:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'removeInvoice',
                value: function removeInvoice(invoiceId) {
                    return regeneratorRuntime.async(function removeInvoice$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                return context$2$0.abrupt('return', this.request('finance/invoice/remove', null, {
                                    url: '/finance/invoice-info/' + invoiceId,
                                    urlPrefix: '/v2/client',
                                    method: 'DELETE'
                                }));
                            case 1:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'updateInvoice',
                value: function updateInvoice(data) {
                    return regeneratorRuntime.async(function updateInvoice$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                return context$2$0.abrupt('return', this.request('finance/invoice/update', data, {
                                    url: '/finance/invoice-info/' + data.invoiceId,
                                    urlPrefix: '/v2/client',
                                    method: 'PUT',
                                    contentType: 'application/json'
                                }));
                            case 1:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'submitInvoiceAudit',
                value: function submitInvoiceAudit(erpInvoiceId) {
                    return regeneratorRuntime.async(function submitInvoiceAudit$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                return context$2$0.abrupt('return', this.request('finance/invoice/audit', null, {
                                    method: 'POST',
                                    url: '/finance/invoice-info/affirm/' + erpInvoiceId,
                                    urlPrefix: '/v2/client',
                                    contentType: 'application/json'
                                }));
                            case 1:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'refreshInvoice',
                value: function refreshInvoice(id) {
                    return regeneratorRuntime.async(function refreshInvoice$(context$2$0) {
                        var _this = this;
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                return context$2$0.abrupt('return', new Promise(function (resolve, reject) {
                                    _this.request('$entity/finance/refreshInvoice', { id: id }, {
                                        url: '/finance/payment/update-erp-invoice',
                                        method: 'GET',
                                        urlPrefix: '/v2/client'
                                    }).then(function (response) {
                                        return resolve(response);
                                    }, function (response) {
                                        return reject(response.message);
                                    });
                                }));
                            case 1:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'getPayChannel',
                value: function getPayChannel() {
                    return this.request('finance/getPayChannel', null, {
                        url: '/finance/finance-info/get-pay-channel',
                        method: 'GET',
                        urlPrefix: '/v2/client'
                    }).then(function (response) {
                        return response;
                    });
                }
            }
        ]);
        return FinanceData;
    }(_BaseData2['default']);
    module.exports = FinanceData;
    function jsonp(url, param) {
        var script = document.createElement('script');
        var callback = _u['default'].uniqueId('jsonpCallback');
        var executor = function executor(resovle) {
            window[callback] = function (response) {
                resovle(response);
                window[callback] = null;
                script.parentNode.removeChild(script);
            };
        };
        param.callback = callback;
        script.src = require('er/URL').withQuery(url, param, { querySeparator: '?' });
        document.body.appendChild(script);
        return new Promise(executor);
    }
    var requests = [
        {
            name: 'finance/info',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/payment/keepMoney/update',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/info/update',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/balance',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/payment/search',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/invoiceSetList',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/regionInfo',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/refreshInvoice',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'finance/getPayChannel',
            scope: 'instance',
            policy: 'auto'
        }
    ];
    requests.forEach(function (config) {
        return (0, _ubRiaMvcRequestManager.register)(FinanceData, config.name, config);
    });
});
define('expert/ExpertData', [
    'exports',
    'module',
    'common/adapt/BaseData',
    'ub-ria/mvc/RequestManager'
], function (exports, module, _commonAdaptBaseData, _ubRiaMvcRequestManager) {
    var _BaseData2 = babelHelpers.interopRequireDefault(_commonAdaptBaseData);
    var _RequestManager = babelHelpers.interopRequireDefault(_ubRiaMvcRequestManager);
    var ExpertData = function (_BaseData) {
        babelHelpers.inherits(ExpertData, _BaseData);
        function ExpertData() {
            babelHelpers.classCallCheck(this, ExpertData);
            babelHelpers.get(Object.getPrototypeOf(ExpertData.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(ExpertData, [
            {
                key: 'listImprovementReport',
                value: function listImprovementReport(query) {
                    return this.request('/expert/reports', query, {
                        method: 'GET',
                        url: '/optimize/expert-report/query',
                        urlPrefix: '/v2/client'
                    });
                }
            },
            {
                key: 'search',
                value: function search(query) {
                    return this.request('$entity/search', query, {
                        method: 'GET',
                        url: '/optimize/experiment/list-by-page',
                        urlPrefix: '/v2/client'
                    });
                }
            },
            {
                key: 'findById',
                value: function findById(id) {
                    return this.request('$entity/findById', null, {
                        method: 'GET',
                        url: '/optimize/experiment/query-by-id?id=' + id,
                        urlPrefix: '/v2/client'
                    });
                }
            },
            {
                key: 'updateStatus',
                value: function updateStatus(status, ids) {
                    return this.request('$entity/updateStatus', {
                        ids: ids,
                        status: status
                    }, {
                        method: 'GET',
                        url: '/optimize/experiment/update-status',
                        urlPrefix: '/v2/client'
                    });
                }
            }
        ]);
        return ExpertData;
    }(_BaseData2['default']);
    module.exports = ExpertData;
    var requests = [
        {
            name: 'expert/search',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'expert/list',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'expert/reports',
            scope: 'instance',
            policy: 'auto'
        }
    ];
    requests.forEach(function (config) {
        return _RequestManager['default'].register(ExpertData, config.name, config);
    });
});
define('ssp-slot/util', [
    'require',
    'eoo',
    'ub-ria/util'
], function (require) {
    var exports = require('eoo').static(require('ub-ria/util'));
    exports.setProperty = function (result, key, value) {
        var keys = key.split('.');
        for (var i = 0, end = keys.length - 1; i < end; ++i) {
            key = keys[i];
            if (!this.has(result, key)) {
                result[key] = {};
            }
            result = result[key];
        }
        result[keys[end]] = value;
    };
    exports.toEnumArray = function (enumObject, values) {
        values = values || [];
        return values.map(function (value) {
            if (!enumObject.hasOwnProperty(value)) {
                var error = new Error('No Such Enum Value: ' + value);
                error.enumObject = enumObject;
                error.expectedValue = value;
            }
            return {
                text: enumObject.getTextFromValue(value),
                value: value
            };
        });
    };
    exports.pickAndMap = function (list, tables) {
        return list.map(function (item) {
            var result = {};
            exports.each(tables, function (to, from) {
                result[to] = item[from];
            });
            return result;
        });
    };
    exports.pickList = function (list, keys) {
        keys = this.flatten([].slice.call(arguments, 1));
        return this.map(list, function (item) {
            return exports.pick(item, keys);
        });
    };
    exports.stringifyValue = function (v) {
        return v && v.value != null ? '' + v.value : '';
    };
    exports.purify = function purify(object, defaults, deep) {
        defaults = defaults || {};
        var purifiedObject = {};
        exports.each(object, function (value, key) {
            var isDefaultNull = value == null || value === '';
            var isInDefaults = defaults.hasOwnProperty(key) && defaults[key] === value;
            if (!isDefaultNull && !isInDefaults) {
                if (deep && typeof value === 'object' && !(value instanceof Array)) {
                    purifiedObject[key] = purify(value, defaults[key], deep);
                } else {
                    purifiedObject[key] = value;
                }
            }
        });
        return purifiedObject;
    };
    exports.toKeyValueList = function (list) {
        return exports.map(list, function (value) {
            if (typeof value === 'object') {
                return {
                    value: value.value,
                    text: 'text' in value ? value.text : value
                };
            }
            return {
                value: value,
                text: value
            };
        });
    };
    exports.toKeyValueListWithUnit = function (list, unit) {
        return exports.map(list, function (value) {
            var result = null;
            if (typeof value === 'object') {
                result = {
                    value: value.value,
                    text: 'text' in value ? value.text : value
                };
            } else {
                result = {
                    value: value,
                    text: value
                };
            }
            result.text += unit;
            return result;
        });
    };
    exports.andReducer = function (values) {
        return values.reduce(function (prev, current) {
            return prev && current;
        });
    };
    exports.toValueArray = function (enumObject) {
        return exports.pluck(enumObject.toArray(), 'value');
    };
    exports.prefix = function (prefix) {
        return function (shortcut) {
            return prefix + shortcut;
        };
    };
    exports.suffix = function (sufix) {
        return function (shortcut) {
            return shortcut + sufix;
        };
    };
    exports.hyphenize = function (str) {
        if (typeof str !== 'string') {
            throw new Error('Argument error');
        }
        return str.replace(/[\._]/g, '-').replace(/([A-Z])/g, '-$1').toLowerCase();
    };
    exports.getFirstValue = function (arr) {
        var value = (arr || [])[0];
        return typeof value === 'object' ? value.value : value;
    };
    return exports;
});
define('experiment/util', [
    'require',
    'eoo',
    'ssp-slot/util'
], function (require) {
    var util = require('eoo').static(require('ssp-slot/util'));
    util.getObjectProperty = function (obj, key) {
        if (obj) {
            var keys = key.split('.');
            var cur = obj;
            var index = 0;
            var len = keys.length;
            for (; index < len;) {
                var data = cur[keys[index]];
                if (data !== null && typeof data !== 'undefined') {
                    cur = data;
                    index++;
                } else {
                    break;
                }
            }
            if (index === len && cur !== null && typeof cur !== 'undefined') {
                return cur;
            }
            return null;
        }
    };
    util.setObjectProperty = function (obj, value, key) {
        if (obj) {
            var keys = key.split('.');
            var cur = obj;
            var len = keys.length;
            for (var i = 0; i < len - 1; i++) {
                var data = cur[keys[i]];
                if (data === null || typeof data === 'undefined') {
                    data = cur[keys[i]] = {};
                }
                cur = data;
            }
            cur[keys[len - 1]] = value;
        }
    };
    util.setObjectNotExistProperty = function (obj, value, key) {
        if (util.getObjectProperty(obj, key) == null) {
            util.setObjectProperty(obj, value, key);
        }
    };
    util.pickAndTransfer = function (list, tables) {
        var result = {};
        util.map(util.pick(list, util.keys(tables)), function (value, key) {
            result[tables[key]] = value;
        });
        return result;
    };
    util.parseKVString = function (kv) {
        if (util.isString(kv) === false || !kv.length) {
            return {};
        }
        return util.chain(kv.split('|')).map(function (item) {
            return item.split('=');
        }).compact().object().value();
    };
    util.generateKVString = function (item) {
        if (util.isEmpty(item)) {
            return undefined;
        }
        return util.chain(item).pairs().map(function (pair) {
            return pair[0] + '=' + pair[1];
        }).value().join('|');
    };
    util.existy = function (x) {
        return x != null;
    };
    util.truthy = function (cond) {
        return cond !== false && exports.existy(cond);
    };
    util.autoFix = function (f, adInfo, setting) {
        setting = f.omitBy(function (item, key) {
            return key.indexOf('_') === 0;
        })(setting);
        return [
            adInfo,
            setting
        ];
    };
    return util;
});
define('experiment/ExperimentData', [
    'require',
    'ub-ria/util',
    'common/util',
    'common/adapt/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager'
], function (require) {
    var u = require('ub-ria/util');
    var commonUtil = require('common/util');
    var exports = {};
    exports.fetchSizeConfig = function () {
        return this.request('$entity/sizeConfig', null, {
            method: 'GET',
            url: '/un-web-lib/sizeConfig.js'
        });
    };
    exports.fetchTemplateConfig = function () {
        return this.request('$entity/templateConfig', null, {
            method: 'GET',
            url: '/un-web-lib/templateConfig.js'
        });
    };
    exports.save = function (entity) {
        return this.request('$entity/save', entity, {
            method: 'POST',
            url: '/$entity!saveAdpos.action'
        });
    };
    exports.update = function (entity) {
        return this.request('$entity/update', entity, {
            method: 'POST',
            url: '/$entity!modifyAdpos.action'
        });
    };
    exports.findById = function (id) {
        return this.request('$entity/findById', { tuId: id }, {
            method: 'GET',
            url: '/$entity!edit.action'
        }).then(function (result) {
            return parseData(result.adpos);
        });
    };
    exports.getDomain = function () {
        return this.request('$entity/getDomain', null, {
            method: 'GET',
            url: '/client/cooperation/rescue/strategy!list.action'
        }).then(function (response) {
            return response.page.result[0];
        });
    };
    exports.updateDomainShield = function (query) {
        return this.request('$entity/updateDomainShield', query, {
            method: 'GET',
            url: '/client/cooperation/rescue/strategy!match.action'
        });
    };
    exports.getDomainShield = function (query) {
        return this.request('$entity/getDomainShield', query, {
            method: 'GET',
            url: '/client/cooperation/rescue/strategy!getRelation.action'
        });
    };
    exports.getDupDynamicPath = function (entity) {
        return this.request('$entity/getDupDynamicPath', entity, {
            method: 'GET',
            url: '/client/main/cooperation/cpro!getDupDynamicPath.action'
        });
    };
    function parseData(result) {
        var OBJECT_ATTRIBUTE = [
            'basic',
            'container',
            'complement',
            'fillStyle',
            'context',
            'extra'
        ];
        var FILTER = [
            'tuStr',
            'createTime',
            'modifyTime',
            'prodType'
        ];
        var adInfo = {};
        u.each(result, function (item, key) {
            adInfo[key] = u.contains(OBJECT_ATTRIBUTE, key) ? JSON.parse(item) : item;
        });
        adInfo.tuId = adInfo.tuStr;
        return { adInfo: u.omit(adInfo, FILTER) };
    }
    var requests = {
        search: {
            name: 'experiment/search',
            scope: 'instance',
            policy: 'auto'
        },
        list: {
            name: 'experiment/list',
            scope: 'instance',
            policy: 'auto'
        },
        save: {
            name: 'experiment/save',
            scope: 'instance',
            policy: 'auto'
        },
        update: {
            name: 'experiment/update',
            scope: 'instance',
            policy: 'auto'
        },
        remove: {
            name: 'experiment/remove',
            scope: 'instance',
            policy: 'auto'
        },
        restore: {
            name: 'experiment/restore',
            scope: 'instance',
            policy: 'auto'
        },
        findById: {
            name: 'experiment/findById',
            scope: 'instance',
            policy: 'auto'
        },
        tree: {
            name: 'experiment/tree',
            scope: 'instance',
            policy: 'auto'
        },
        batch: {
            name: 'experiment/batch',
            scope: 'instance',
            policy: 'auto'
        },
        size: {
            name: 'experiment/size',
            scope: 'instance',
            policy: 'auto'
        },
        groupTree: {
            name: 'experiment/groupTree',
            scope: 'instance',
            policy: 'auto'
        },
        getDomain: {
            name: 'experiment/getDomain',
            scope: 'instance',
            policy: 'auto'
        },
        updateDomainShield: {
            name: 'experiment/updateDomainShield',
            scope: 'instance',
            policy: 'auto'
        },
        getDomainShield: {
            name: 'experiment/getDomainShield',
            scope: 'instance',
            policy: 'auto'
        },
        fetchShapeAndSizeConfig: {
            name: 'experiment/sizeConfig',
            scope: 'instance',
            policy: 'auto'
        },
        fetchTemplateConfig: {
            name: 'experiment/templateConfig',
            scope: 'instance',
            policy: 'auto'
        },
        getDupDynamicPath: {
            name: 'slot/getDupDynamicPath',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var BaseData = require('common/adapt/BaseData');
    var ExperimentData = require('eoo').create(BaseData, exports);
    var RequestManager = require('ub-ria/mvc/RequestManager');
    u.each(requests, function (config) {
        RequestManager.register(ExperimentData, config.name, config);
    });
    return ExperimentData;
});
define('domainUnlock/DomainUnlockData', [
    'exports',
    'module',
    'common/adapt/BaseData'
], function (exports, module, _commonAdaptBaseData) {
    var _BaseData2 = babelHelpers.interopRequireDefault(_commonAdaptBaseData);
    var getPrefix = function getPrefix() {
        var old = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
        return '/unanti/' + (old ? 'domainUnlockOld' : 'domainUnlock');
    };
    var DomainUnlockData = function (_BaseData) {
        babelHelpers.inherits(DomainUnlockData, _BaseData);
        function DomainUnlockData() {
            babelHelpers.classCallCheck(this, DomainUnlockData);
            babelHelpers.get(Object.getPrototypeOf(DomainUnlockData.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(DomainUnlockData, [
            {
                key: 'verifyDomain',
                value: function verifyDomain(domain) {
                    var old = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
                    return this.request('/domainUnlock/verifyDomain', { domain: domain }, {
                        method: 'GET',
                        url: getPrefix(old) + '!verifyDomain.action'
                    });
                }
            },
            {
                key: 'isFraudUrl',
                value: function isFraudUrl(domain) {
                    var old = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
                    return this.request('/domainUnlock/isFraudUrl', { domain: domain }, {
                        method: 'GET',
                        url: getPrefix(old) + '!isFraudUrl.action'
                    });
                }
            },
            {
                key: 'sendEmailValidCode',
                value: function sendEmailValidCode(email) {
                    var old = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
                    return this.request('/domainUnlock/sendEmailValidCode', { email: email }, {
                        method: 'POST',
                        url: getPrefix(old) + '!sendEmailValidCode.action'
                    });
                }
            },
            {
                key: 'verifyEmailValidCode',
                value: function verifyEmailValidCode(email, emailValidCode) {
                    var old = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
                    return this.request('/domainUnlock/verifyEmailValidCode', {
                        email: email,
                        emailValidCode: emailValidCode
                    }, {
                        method: 'POST',
                        url: getPrefix(old) + '!verifyEmailValidCode.action'
                    });
                }
            },
            {
                key: 'applyUnlockDomain',
                value: function applyUnlockDomain(entity) {
                    var old = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
                    return this.request('/domainUnlock/applyUnlockDomain', entity, {
                        method: 'POST',
                        url: getPrefix(old) + '!applyUnlockDomain.action'
                    });
                }
            }
        ]);
        return DomainUnlockData;
    }(_BaseData2['default']);
    module.exports = DomainUnlockData;
});
define('domainShield/mvc/DomainShieldListView', [
    'require',
    'tpl!startup/template',
    '../enum',
    'common/util',
    'esui/Dialog',
    'esui',
    'esui/Table',
    'common/adapt/UnionListView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var DomainShieldStatusType = require('../enum').DomainShieldStatusType;
    var u = require('common/util');
    var Dialog = require('esui/Dialog');
    var esui = require('esui');
    var mask = u.mask('\u672A\u586B\u5199');
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        var showDomainShieldDetailBind = showDomainShieldDetail.bind(this);
        var uiEvents = { 'disallow-create:click': preventDefault };
        this.addUIEvents(uiEvents);
    };
    function preventDefault(e) {
        e.preventDefault();
    }
    exports.template = 'unionDomainShieldList';
    exports.getTableFields = function () {
        var fields = [
            {
                title: '\u57DF\u540D',
                field: 'domain',
                sortable: false,
                width: 200,
                stable: false,
                content: function (item) {
                    return '\u811A\u672C\u57DF\u540D ' + mask(item.jsUrl) + '<br/>' + '\u68C0\u7D22\u57DF\u540D ' + mask(item.posUrl) + '<br/>';
                }
            },
            {
                title: '\u6620\u5C04\u57DF\u540D',
                field: 'mapDomain',
                sortable: false,
                width: 200,
                stable: false,
                content: function (item) {
                    return mask(item.yunJsUrl) + '<br/>' + mask(item.yunPosUrl);
                }
            },
            {
                title: '\u72B6\u6001',
                field: 'status',
                sortable: false,
                width: 100,
                stable: false,
                content: function (item) {
                    var REASON_MAP = {
                        'Zone Violation': '\u8FDD\u89C4',
                        'Zone No ICP': '\u672A\u5907\u6848',
                        'Zone Not Active': '\u5F02\u5E38',
                        'Zone TXT Record Illegal': '\u672A\u6FC0\u6D3B',
                        'Zone DELETED': '\u4E3B\u57DF\u5220\u9664',
                        'No Such Zone': '\u5F02\u5E38'
                    };
                    if (item.status === DomainShieldStatusType.PARTIAL) {
                        return REASON_MAP[item.reason] || '\u5F02\u5E38';
                    }
                    if (item.status === DomainShieldStatusType.ILLEGAL && item.reason === 'Cname Not Configed') {
                        return '\u672A\u6307\u5411';
                    }
                    return DomainShieldStatusType.getTextFromValue(item.status);
                }
            },
            {
                title: '\u64CD\u4F5C',
                field: 'operation',
                width: 60,
                stable: true,
                content: function (item) {
                    var config = [{
                            command: 'modify',
                            type: 'modify',
                            args: item.id,
                            text: '\u4FEE\u6539'
                        }];
                    var Table = require('esui/Table');
                    return Table.slideOperations(config);
                }
            }
        ];
        return fields;
    };
    exports.showTipDetail = function () {
        var tipDetailPanel = this.get('domain-shield-detail');
        tipDetailPanel.toggle();
    };
    function showDomainShieldDetail(e) {
        e.preventDefault();
        this.fire('showTipDetail');
    }
    var ListView = require('common/adapt/UnionListView');
    var DomainShieldListView = require('eoo').create(ListView, exports);
    return DomainShieldListView;
});
define('domainShield/enum', [
    'require',
    'er/Enum'
], function (require) {
    var Enum = require('er/Enum');
    var exports = {};
    exports.DomainShieldStatusType = new Enum({
        alias: 'INVALID',
        text: '\u672A\u751F\u6548',
        value: 0
    }, {
        alias: 'VALID',
        text: '\u751F\u6548',
        value: 1
    }, {
        alias: 'ILLEGAL',
        text: '\u975E\u6CD5',
        value: 2
    }, {
        alias: 'PARTIAL',
        text: '\u8BF7\u68C0\u67E5\u68C0\u7D22\u57DF\u540D',
        value: 3
    });
    return exports;
});
define('domainShield/mvc/DomainShieldListModel', [
    'require',
    'eoo',
    '../enum',
    'common/adapt/UnionListModel'
], function (require) {
    var eoo = require('eoo');
    var DomainShieldStatusType = require('../enum').DomainShieldStatusType;
    var exports = {};
    exports.defaultArgs = { order: 'desc' };
    exports.prepare = function () {
        this.$super(arguments);
        var results = this.get('results');
        var status = (results[0] || {}).status;
        var reason = (results[0] || {}).reason;
        this.set('status', status);
        var REASON_MAP = {
            'Cname Not Configed': '\u8BF7\u8BBE\u7F6E\u53CD\u5C4F\u853D\u57DF\u540DCNAME\u6307\u5411',
            'Zone Violation': '\u53CD\u5C4F\u853D\u57DF\u540D\u5B58\u5728\u8FDD\u89C4\u5185\u5BB9\uFF0C\u65E0\u6CD5\u4F7F\u7528',
            'Zone No ICP': '\u53CD\u5C4F\u853D\u57DF\u540D\u672A\u5907\u6848\uFF0C\u65E0\u6CD5\u4F7F\u7528',
            'Zone Not Active': '\u8BF7\u8054\u7CFB\u5BA2\u670D\u89E3\u51B3',
            'Zone TXT Record Illegal': '\u8BF7\u5728\u767E\u5EA6\u4E91\u52A0\u901F\u83B7\u53D6txt\u8BB0\u5F55\uFF0C\u5B8C\u6210\u53CD\u5C4F\u853D\u57DF\u540D\u6FC0\u6D3B',
            'Zone DELETED': '\u57DF\u540D\u5728\u767E\u5EA6\u4E91\u52A0\u901F\u88AB\u5220\u9664\uFF0C\u8BF7\u5728union\u91CD\u65B0\u6DFB\u52A0',
            'No Such Zone': '\u8BF7\u8054\u7CFB\u5BA2\u670D\u89E3\u51B3'
        };
        if (status === DomainShieldStatusType.PARTIAL) {
            this.set('reason', REASON_MAP[reason] || '\u8BF7\u8054\u7CFB\u5BA2\u670D\u89E3\u51B3');
        }
        if (status === DomainShieldStatusType.ILLEGAL) {
            this.set('reason', REASON_MAP[reason] || '\u60A8\u5F53\u524D\u7684\u53CD\u5C4F\u853D\u8BBE\u7F6E\u5DF2\u5931\u6548\uFF0C\u4E3A\u4E86\u5B9E\u73B0\u53CD\u5C4F\u853D\u6548\u679C\uFF0C\u51CF\u5C11\u6536\u5165\u7684\u635F\u5931\uFF0C\u8BF7\u91CD\u65B0\u8FDB\u884C\u57DF\u540D\u914D\u7F6E');
        }
    };
    var ListModel = require('common/adapt/UnionListModel');
    var DomainShieldListModel = eoo.create(ListModel, exports);
    return DomainShieldListModel;
});
define('domainShield/mvc/DomainShieldList', [
    'require',
    'common/adapt/UnionListAction',
    'eoo'
], function (require) {
    var exports = {};
    exports.entityDescription = '\u57DF\u540D\u5C4F\u853D\u8BBE\u7F6E\u5217\u8868';
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('showTipDetail', showTipDetail.bind(this));
    };
    function showTipDetail() {
        this.view.showTipDetail();
    }
    var List = require('common/adapt/UnionListAction');
    var DomainShieldList = require('eoo').create(List, exports);
    return DomainShieldList;
});
define('domainShield/DomainShieldPermission', [
    'require',
    'eoo'
], function (require) {
    var exports = {};
    exports.canBatchModify = function () {
        return false;
    };
    return require('eoo').create(exports);
});
define('domainShield/DomainShieldData', [
    'require',
    'common/util',
    'common/adapt/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager'
], function (require) {
    var u = require('common/util');
    var exports = {};
    exports.search = function (query) {
        return this.request('$entity/search', query, {
            method: 'GET',
            url: '/$entity/strategy!list.action'
        }).then(function (response) {
            return {
                results: response.page.result,
                totalCount: response.page.totalCount
            };
        });
    };
    exports.update = function (entity) {
        return this.request('$entity/update', u.prefixObjectKey('rescueStrategy.', entity), {
            method: 'POST',
            url: '/$entity/strategy!edit.action'
        });
    };
    exports.save = function (entity) {
        return this.request('$entity/save', u.prefixObjectKey('rescueStrategy.', entity), {
            method: 'POST',
            url: '/$entity/strategy!save.action'
        });
    };
    exports.findById = function (id) {
        return this.request('$entity/findById', { id: id }, {
            method: 'GET',
            url: '/$entity/strategy!get.action'
        }).then(function (response) {
            return response.rescueStrategy;
        });
    };
    var requests = {
        search: {
            name: 'domainShield/search',
            scope: 'instance',
            policy: 'auto'
        },
        save: {
            name: 'domainShield/save',
            scope: 'instance',
            policy: 'auto'
        },
        update: {
            name: 'domainShield/update',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var BaseData = require('common/adapt/BaseData');
    var DomainShieldData = require('eoo').create(BaseData, exports);
    var RequestManager = require('ub-ria/mvc/RequestManager');
    u.each(requests, function (config) {
        RequestManager.register(DomainShieldData, config.name, config);
    });
    return DomainShieldData;
});
define('creditMall/mvc/CreditMallView', [
    'require',
    'common/adapt/ListViewHelper',
    'ssp-credit-paradise/mvc/CreditMallView',
    'eoo'
], function (require) {
    var exports = require('common/adapt/ListViewHelper');
    var SSPCreditMallView = require('ssp-credit-paradise/mvc/CreditMallView');
    var CreditMallView = require('eoo').create(SSPCreditMallView, exports);
    return CreditMallView;
});
define('creditMall/mvc/CreditMallModel', [
    'require',
    'common/adapt/ListModelHelper',
    'ssp-credit-paradise/mvc/CreditMallModel',
    'eoo'
], function (require) {
    var exports = require('common/adapt/ListModelHelper');
    var SSPCreditMallModel = require('ssp-credit-paradise/mvc/CreditMallModel');
    var CreditMallModel = require('eoo').create(SSPCreditMallModel, exports);
    return CreditMallModel;
});
define('creditMall/mvc/CreditMall', [
    'require',
    'common/adapt/ListActionHelper',
    'ssp-credit-paradise/mvc/CreditMall',
    'eoo'
], function (require) {
    var exports = require('common/adapt/ListActionHelper');
    var SSPCreditMall = require('ssp-credit-paradise/mvc/CreditMall');
    var CreditMall = require('eoo').create(SSPCreditMall, exports);
    return CreditMall;
});
define('creditMall/CreditMallPermission', [
    'require',
    'common/util',
    'eoo'
], function (require) {
    var u = require('common/util');
    var returnFalse = function () {
        return false;
    };
    var returnTrue = function () {
        return true;
    };
    var exports = {};
    exports.canView = returnTrue;
    exports.canBatchModify = returnFalse;
    exports.canExchange = returnTrue;
    var eoo = require('eoo');
    return eoo.create(exports);
});
define('creditMall/CreditMallData', [
    'require',
    'common/adapt/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager',
    'common/util'
], function (require) {
    var exports = {};
    exports.fetchAwardCatgories = function () {
        return this.request('$entity/fetchAwardCatgories', null, {
            url: '/cent/exchange/show-kind-list',
            method: 'GET',
            urlPrefix: '/v2/client'
        }).then(function (response) {
            return { results: response };
        });
    };
    exports.search = function (query) {
        return this.request('$entity/search', query, {
            method: 'GET',
            url: '/cent/exchange/show-list',
            urlPrefix: '/v2/client'
        }).then(function (response) {
            return {
                results: response.result,
                totalCount: response.totalCount
            };
        });
    };
    exports.findById = function (id) {
        return this.request('$entity/findById', { awardId: id }, {
            method: 'GET',
            url: '/cent/exchange/show-detail',
            urlPrefix: '/v2/client'
        });
    };
    var BaseData = require('common/adapt/BaseData');
    var CreditMallData = require('eoo').create(BaseData, exports);
    var requests = {
        search: {
            name: 'creditMall/search',
            scope: 'instance',
            policy: 'auto'
        },
        fetchAwardCatgories: {
            name: 'creditMall/fetchAwardCatgories',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var RequestManager = require('ub-ria/mvc/RequestManager');
    require('common/util').each(requests, function (config) {
        RequestManager.register(CreditMallData, config.name, config);
    });
    return CreditMallData;
});
define('creditExchange/mvc/CreditExchangeListView', [
    'require',
    'tpl!startup/template',
    'ub-ria/util',
    'ssp-credit-paradise/enum',
    'common/adapt/ListViewHelper',
    'ssp-credit-paradise/mvc/CreditExchangeListView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var u = require('ub-ria/util');
    var AwardCategory = require('ssp-credit-paradise/enum').AwardCategory;
    var exports = u.extend({}, require('common/adapt/ListViewHelper'));
    exports.getTableFields = function () {
        var fields = this.$super(arguments);
        u.each(fields, function (value) {
            if (value.field === 'command') {
                value.width = 160;
            }
            if (value.field === 'awardName') {
                value.content = function (item) {
                    var awardName = u.escape(item.awardName);
                    return awardName;
                };
            }
        });
        return fields;
    };
    exports.showDetail = function (data) {
        if (data.config.categoryId === AwardCategory.NUOMI_VIRTUAL_CARD) {
            this.showNuomiECardsDetail(data);
        } else if (data.exchangeType === 1) {
            this.showDonateDetail(data);
        } else {
            this.showRealGiftDetail(data);
        }
    };
    var SSPCreditExchangeListView = require('ssp-credit-paradise/mvc/CreditExchangeListView');
    var CreditExchangeListView = require('eoo').create(SSPCreditExchangeListView, exports);
    return CreditExchangeListView;
});
define('creditExchange/mvc/CreditExchangeListModel', [
    'require',
    'promise',
    'ub-ria/util',
    'common/adapt/ListModelHelper',
    'ssp-credit-paradise/mvc/CreditExchangeListModel',
    'eoo'
], function (require) {
    var Promise = require('promise');
    var u = require('ub-ria/util');
    var exports = u.extend({}, require('common/adapt/ListModelHelper'));
    exports.fetchRealDetail = function (config) {
        var order = u.findWhere(this.get('results'), { id: config.id });
        order.config = config;
        if (order.exchangeType) {
            order.receiver = order.cardNo || order.receiver;
        }
        return Promise.resolve(order);
    };
    var SSPCreditExchangeListModel = require('ssp-credit-paradise/mvc/CreditExchangeListModel');
    var CreditExchangeListModel = require('eoo').create(SSPCreditExchangeListModel, exports);
    return CreditExchangeListModel;
});
define('creditExchange/mvc/CreditExchangeList', [
    'require',
    'ub-ria/util',
    'common/adapt/ListActionHelper',
    'ssp-credit-paradise/mvc/CreditExchangeList',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var exports = u.extend({}, require('common/adapt/ListActionHelper'));
    exports.cancelExchange = function (id) {
        var emitter = function () {
            this.fire('cancelled');
        };
        this.model.cancelExchange(id).then(u.bind(emitter, this));
    };
    var SSPCreditExchangeList = require('ssp-credit-paradise/mvc/CreditExchangeList');
    var CreditExchangeList = require('eoo').create(SSPCreditExchangeList, exports);
    return CreditExchangeList;
});
define('creditExchange/CreditExchangePermission', [
    'require',
    'eoo'
], function (require) {
    var returnFalse = function () {
        return false;
    };
    var returnTrue = function () {
        return true;
    };
    var exports = {};
    exports.canView = returnTrue;
    exports.canBatchModify = returnFalse;
    exports.canExchange = returnTrue;
    var eoo = require('eoo');
    return eoo.create(exports);
});
define('creditExchange/CreditExchangeData', [
    'require',
    'ub-ria/util',
    'common/adapt/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager',
    'common/util'
], function (require) {
    var u = require('ub-ria/util');
    var exports = {};
    exports.searchNuomiECardsDetail = function (query) {
        return this.request('$entity/searchNuomiECardsDetail', query, {
            url: '/$entity/viewCent!nuomiCardDetail.action',
            method: 'GET'
        });
    };
    exports.cancelExchange = function (id) {
        return this.request('$entity/cancelExchange', { exchangeId: id }, {
            url: '/cent/view-cent/cancel-exchange',
            method: 'POST',
            urlPrefix: '/v2/client'
        });
    };
    exports.receiveCard = function (id) {
        return this.request('$entity/receiveCard', { exchangeId: id }, {
            url: '/$entity/viewCent!activateNuomiCard.action',
            method: 'POST'
        });
    };
    exports.search = function (query) {
        return this.request('$entity/search', query, {
            method: 'GET',
            url: '/cent/view-cent/list-exchange',
            urlPrefix: '/v2/client'
        }).then(function (response) {
            return {
                results: response.result,
                totalCount: response.totalCount
            };
        });
    };
    exports.save = function (query) {
        return this.request('$entity/save', query, {
            method: 'POST',
            url: '/cent/exchange/do-exchange',
            urlPrefix: '/v2/client'
        });
    };
    exports.getAddressList = function () {
        return this.request('$entity/getAddressList', null, {
            url: '/cent/exchange/address-list',
            method: 'GET',
            urlPrefix: '/v2/client'
        });
    };
    exports.deleteAddress = function (id) {
        return this.request('$entity/deleteAdress', { id: id }, {
            url: '/cent/exchange/address-delete',
            method: 'GET',
            urlPrefix: '/v2/client'
        });
    };
    exports.saveAddress = function (entity) {
        return this.request('$entity/saveAdress', entity, {
            url: '/cent/exchange/address-save',
            method: 'POST',
            urlPrefix: '/v2/client'
        });
    };
    exports.getRegionData = function (id, type) {
        var param = { type: type };
        if (id) {
            param.id = id;
        }
        return this.request('$entity/getRegionData', param, {
            url: '/cent/exchange/area',
            method: 'GET',
            urlPrefix: '/v2/client'
        }).then(function (response) {
            var area = [];
            u.each(response, function (item) {
                area.push({
                    text: item.text,
                    value: item.id,
                    type: item.type,
                    hasChildren: item.hasChildren
                });
            });
            return area;
        });
    };
    var BaseData = require('common/adapt/BaseData');
    var CreditExchangeData = require('eoo').create(BaseData, exports);
    var requests = {
        search: {
            name: 'creditExchange/search',
            scope: 'instance',
            policy: 'auto'
        },
        save: {
            name: 'creditExchange/save',
            scope: 'instance',
            policy: 'auto'
        },
        searchNuomiECardsDetail: {
            name: 'creditExchange/searchNuomiECardsDetail',
            scope: 'instance',
            policy: 'auto'
        },
        cancelExchange: {
            name: 'creditExchange/cancelExchange',
            scope: 'instance',
            policy: 'auto'
        },
        getAddressList: {
            name: 'creditExchange/getAddressList',
            scope: 'instance',
            policy: 'auto'
        },
        deleteAddress: {
            name: 'creditExchange/deleteAddress',
            scope: 'instance',
            policy: 'auto'
        },
        saveAddress: {
            name: 'creditExchange/saveAddress',
            scope: 'instance',
            policy: 'auto'
        },
        getRegionData: {
            name: 'creditExchange/getRegionData',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var RequestManager = require('ub-ria/mvc/RequestManager');
    require('common/util').each(requests, function (config) {
        RequestManager.register(CreditExchangeData, config.name, config);
    });
    return CreditExchangeData;
});
define('credit/mvc/CreditListView', [
    'require',
    'common/adapt/ListViewHelper',
    'ssp-credit-paradise/mvc/CreditListView',
    'eoo'
], function (require) {
    var exports = require('common/adapt/ListViewHelper');
    var SSPCreditListView = require('ssp-credit-paradise/mvc/CreditListView');
    var CreditListView = require('eoo').create(SSPCreditListView, exports);
    return CreditListView;
});
define('credit/mvc/CreditDelayListView', [
    'require',
    'common/adapt/ListViewHelper',
    'ssp-credit-paradise/mvc/CreditDelayListView',
    'eoo'
], function (require) {
    var exports = require('common/adapt/ListViewHelper');
    var SSPCreditDelayListView = require('ssp-credit-paradise/mvc/CreditDelayListView');
    var CreditDelayListView = require('eoo').create(SSPCreditDelayListView, exports);
    return CreditDelayListView;
});
define('credit/mvc/CreditDelayListModel', [
    'require',
    'common/adapt/ListModelHelper',
    'ssp-credit-paradise/mvc/CreditDelayListModel',
    'eoo'
], function (require) {
    var exports = require('common/adapt/ListModelHelper');
    var SSPCreditDelayListModel = require('ssp-credit-paradise/mvc/CreditDelayListModel');
    var CreditDelayListModel = require('eoo').create(SSPCreditDelayListModel, exports);
    return CreditDelayListModel;
});
define('credit/mvc/CreditBaseListModel', [
    'require',
    'common/adapt/ListModelHelper',
    'ssp-credit-paradise/mvc/CreditBaseListModel',
    'eoo'
], function (require) {
    var exports = require('common/adapt/ListModelHelper');
    var SSPCreditBaseListModel = require('ssp-credit-paradise/mvc/CreditBaseListModel');
    var CreditBaseListModel = require('eoo').create(SSPCreditBaseListModel, exports);
    return CreditBaseListModel;
});
define('credit/mvc/CreditBaseList', [
    'require',
    'common/adapt/ListActionHelper',
    'ssp-credit-paradise/mvc/CreditBaseList',
    'eoo'
], function (require) {
    var exports = require('common/adapt/ListActionHelper');
    var SSPCreditBaseList = require('ssp-credit-paradise/mvc/CreditBaseList');
    var CreditBaseList = require('eoo').create(SSPCreditBaseList, exports);
    return CreditBaseList;
});
define('credit/CreditPermission', [
    'require',
    'eoo'
], function (require) {
    var returnFalse = function () {
        return false;
    };
    var returnTrue = function () {
        return true;
    };
    var exports = {};
    exports.canView = returnTrue;
    exports.canBatchModify = returnFalse;
    exports.canExchange = returnTrue;
    return require('eoo').create(exports);
});
define('credit/CreditData', [
    'require',
    'common/adapt/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager',
    'common/util'
], function (require) {
    var exports = {};
    exports.summary = function () {
        return this.request('$entity/summary', null, {
            url: '/cent/view-cent/init',
            method: 'GET',
            urlPrefix: '/v2/client'
        }).then(function (response) {
            return response;
        });
    };
    exports.searchDelayCents = function (query) {
        return this.request('$entity/searchDelayCents', query, {
            url: '/cent/view-cent/list-delay-cent',
            method: 'GET',
            urlPrefix: '/v2/client'
        }).then(function (response) {
            return {
                results: response.result,
                totalCount: response.totalCount
            };
        });
    };
    exports.search = function (query) {
        return this.request('$entity/search', query, {
            url: '/cent/view-cent/list-cent',
            method: 'GET',
            urlPrefix: '/v2/client'
        }).then(function (response) {
            return {
                results: response.result,
                totalCount: response.totalCount
            };
        });
    };
    var BaseData = require('common/adapt/BaseData');
    var CreditData = require('eoo').create(BaseData, exports);
    var requests = {
        summary: {
            name: 'credit/summary',
            scope: 'instance',
            policy: 'auto'
        },
        search: {
            name: 'credit/search',
            scope: 'instance',
            policy: 'auto'
        },
        searchDelayCents: {
            name: 'credit/searchDelayCents',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var RequestManager = require('ub-ria/mvc/RequestManager');
    require('common/util').each(requests, function (config) {
        RequestManager.register(CreditData, config.name, config);
    });
    return CreditData;
});
define('cproMediaProtect/CproMediaProtectData', [
    'exports',
    'module',
    'common/adapt/BaseData',
    'ub-ria/mvc/RequestManager',
    'ub-ria/util'
], function (exports, module, _commonAdaptBaseData, _ubRiaMvcRequestManager, _ubRiaUtil) {
    var _BaseData2 = babelHelpers.interopRequireDefault(_commonAdaptBaseData);
    var _RequestManager = babelHelpers.interopRequireDefault(_ubRiaMvcRequestManager);
    var _u = babelHelpers.interopRequireDefault(_ubRiaUtil);
    var CproMediaProtectData = function (_BaseData) {
        babelHelpers.inherits(CproMediaProtectData, _BaseData);
        function CproMediaProtectData() {
            babelHelpers.classCallCheck(this, CproMediaProtectData);
            babelHelpers.get(Object.getPrototypeOf(CproMediaProtectData.prototype), 'constructor', this).apply(this, arguments);
            this.update = function (entity) {
                entity = _u['default'].omit(entity, 'id');
                return this.request('$entity/update', entity, {
                    method: 'POST',
                    url: '/$entity/relation!match.action'
                });
            };
            this.findById = function (id) {
                return this.request('main/cooperation/cpro/findById', { tuId: id }, {
                    method: 'GET',
                    url: '/main/cooperation/cpro!edit.action'
                }).then(function (result) {
                    return result.adpos;
                });
            };
            this.parseData = function (result) {
                var FILTER_ATTRIBUTE = [
                    'basic',
                    'container',
                    'complement',
                    'fillStyle',
                    'context',
                    'extra'
                ];
                var adpos = {};
                _u['default'].each(result, function (item, key) {
                    adpos[key] = _u['default'].contains(FILTER_ATTRIBUTE, key) ? JSON.parse(item) : item;
                });
                return adpos;
            };
        }
        return CproMediaProtectData;
    }(_BaseData2['default']);
    module.exports = CproMediaProtectData;
    var requests = [];
    requests.forEach(function (config) {
        return _RequestManager['default'].register(CproMediaProtectData, config.name, config);
    });
});
define('common/uiDefaults', ['require'], function (require) {
    return {
        Table: {
            sortable: true,
            columnResizable: true,
            select: 'multi',
            followHead: true,
            breakLine: true,
            encode: true
        },
        Form: { autoValidate: true },
        Pager: {
            pageSizes: [
                20,
                50,
                100
            ],
            pageSize: 50
        }
    };
});
// console.log(define);
define('common/tpl', [
    'require',
    'ub-ria/tpl',
    'etpl',
    'ssp-slot/filter'
], function (require) {
    var tpl = require('ub-ria/tpl');
    var etpl = require('etpl');
    tpl.registerControl('ssp-report/ui/BaseChart');
    tpl.registerControl('ssp-report/ui/LineChart');
    tpl.registerControl('ssp-report/ui/BarChart');
    tpl.registerControl('ssp-report/ui/RegionChart');
    tpl.registerControl('ssp-report/ui/ChartSerieSelector');
    tpl.registerControl('ssp-report/ui/DimensionSelector');
    tpl.registerControl('ssp-report/ui/RangeCalendarWithContrast');
    tpl.registerControl('ssp-report/ui/CommandCrumb');
    tpl.registerControl('ssp-report/ui/ToggleSubmitableTableRichSelector');
    tpl.registerControl('ssp-finance/ui/FilePreview');
    tpl.registerControl('ssp-finance/ui/FinanceUploader');
    tpl.registerExtension('ssp-finance/ui/extension/AutoComplete');
    tpl.registerExtension('ssp-finance/ui/extension/FinanceInvalidIndicator');
    tpl.registerExtension('ui/extension/RemoveBlank');
    tpl.registerControl('ssp-account/ui/CustomTreeRichSelector');
    var slotFilter = require('ssp-slot/filter');
    etpl.addFilter('formatHexColor', slotFilter.formatHexColor);
    etpl.addFilter('hide', slotFilter.hide);
    etpl.addFilter('show', slotFilter.show);
    etpl.addFilter('disable', slotFilter.disable);
    etpl.addFilter('enable', slotFilter.enable);
    tpl.registerExtension('ssp-slot/ui/extension/ConvertToNumber');
    tpl.registerExtension('ssp-slot/ui/extension/ConvertToColorString');
    tpl.registerExtension('ssp-slot/ui/extension/FlatBoxGroupValue');
    tpl.registerExtension('ui/extension/ValidationCleaner');
    tpl.registerExtension('ui/extension/EncodeFilter');
    tpl.registerExtension('ui/extension/EventBinder');
    tpl.registerControl('slot/ui/Iframe');
    return tpl;
});
define('common/rule', ['require'], function (require) {
    return {
        maxLength: 100,
        mail: {
            maxLength: 64,
            pattern: /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/
        },
        description: { maxLength: 4000 },
        phone: { pattern: /^((0\d{2,3})-)(\d{7,8})(-(\d{3,}))?$/ },
        mobile: { pattern: /^(1(3|4|5|8)\d{9})?$/ },
        url: {
            maxLength: 1000,
            pattern: /^(?:https?|ftp|wap):\/\/.+$|^(?!(?:https?|ftp|wap):\/\/).+$/
        },
        positiveInteger: { pattern: /^\d+$/ },
        money: { pattern: /^\d+(\.\d{1,2})?$/ }
    };
});
define('common/handler/ToastSubmitHandler', [
    'require',
    'ub-ria/util',
    'ub-ria/mvc/handler/ToastSubmitHandler',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var exports = {};
    exports.getToastMessage = function (entity, action) {
        var template = this.getTemplate();
        if (template == null) {
            return '';
        }
        if (template) {
            return u.template(template, entity || {});
        }
        var actionType = action.context.formType === 'update' ? '\u4FEE\u6539' : '\u521B\u5EFA';
        return '\u60A8' + actionType + '\u7684' + action.getEntityDescription() + (entity && entity.name ? '[<strong>' + u.escape(entity.name) + '</strong>]' : '') + '\u5DF2\u7ECF\u6210\u529F\u4FDD\u5B58';
    };
    var ToastSubmitHandler = require('ub-ria/mvc/handler/ToastSubmitHandler');
    return require('eoo').create(ToastSubmitHandler, exports);
});
define('common/handler/ReloadSubmitHandler', [
    'require',
    'er/controller',
    'ub-ria/mvc/handler/SubmitHandler',
    'eoo'
], function (require) {
    var exports = {};
    exports.handle = function (entity, action) {
        var controller = require('er/controller');
        var url = controller.currentURL.toString();
        action.redirect(url, {
            global: true,
            force: true
        });
        this.next(entity, action);
    };
    var SubmitHandler = require('ub-ria/mvc/handler/SubmitHandler');
    var ReloadSubmitHandler = require('eoo').create(SubmitHandler, exports);
    return ReloadSubmitHandler;
});
define('common/handler/RedirectSubmitHandler', [
    'require',
    'ub-ria/mvc/handler/RedirectSubmitHandler',
    'eoo'
], function (require) {
    var exports = {};
    exports.handle = function (entity, action) {
        var isChildForm = action.isChildForm();
        var childFormSubmitRedirect = this.getRedirectOptions().childFormSubmitRedirect || false;
        if (isChildForm && !childFormSubmitRedirect) {
            this.next(entity, action);
        } else {
            this.$super(arguments);
        }
    };
    var ParentRedirectSubmitHandler = require('ub-ria/mvc/handler/RedirectSubmitHandler');
    var RedirectSubmitHandler = require('eoo').create(ParentRedirectSubmitHandler, exports);
    return RedirectSubmitHandler;
});
define('account/config', [
    'require',
    'common/IoCActionFactory',
    'er/controller',
    'common/ioc'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var NO_CERTIFICATION_TIP = '\u60A8\u7684\u5206\u8D26\u6743\u9650\u672A\u6253\u5F00\uFF0C\u6682\u65F6\u4E0D\u80FD\u8FDB\u884C\u5B9E\u540D\u5236\u8BA4\u8BC1\u3002';
    var actions = [
        {
            path: '/account/info',
            type: new ActionFactory('accountInfo'),
            title: '\u4E2A\u4EBA\u4FE1\u606F',
            args: {
                modifyMailURL: '/account/modifyMail~returnURL',
                modifyPasswordURL: '/account/modifyPassword~returnURL',
                modifyPhoneURL: '/account/modifyPhone~returnURL',
                modifyVerifyCodeURL: '/account/checkVerifyCode',
                financeModifyURL: '#/account/financeInfo',
                certifyGradeDetailURL: '#/account/certify',
                noCertificationTip: NO_CERTIFICATION_TIP
            }
        },
        {
            path: '/account/modifyMemberInfo',
            type: new ActionFactory('accountMemberForm'),
            args: { formType: 'update' },
            title: '\u4FEE\u6539\u57FA\u672C\u4FE1\u606F'
        },
        {
            path: '/account/modifyMail',
            type: new ActionFactory('accountMailForm'),
            title: '\u4FEE\u6539\u90AE\u7BB1'
        },
        {
            path: '/account/modifyPassword',
            type: new ActionFactory('accountPasswordForm'),
            title: '\u4FEE\u6539\u5BC6\u7801'
        },
        {
            path: '/account/modifyPhone',
            type: new ActionFactory('accountPhoneForm'),
            title: '\u4FEE\u6539\u624B\u673A\u53F7'
        },
        {
            path: '/account/checkVerifyCode',
            type: new ActionFactory('accountVerifyCodeForm'),
            title: '\u6821\u9A8C\u9A8C\u8BC1\u7801'
        },
        {
            path: '/account/certifyDetail',
            type: new ActionFactory('accountCertifyDetail'),
            title: '\u4F1A\u5458\u8BA4\u8BC1'
        },
        {
            path: '/account/security',
            type: new ActionFactory('accountSecurityList'),
            title: '\u767B\u5F55\u65E5\u5FD7'
        }
    ];
    require('er/controller').registerAction(actions);
    var ioc = require('common/ioc');
    ioc.registerComponents('account', {
        remoteModule: 'ssp-account',
        backendEntityName: 'account',
        group: 'account',
        actions: [
            {
                name: 'AccountInfo',
                extend: {
                    action: { module: 'account/mvc/AccountInfo' },
                    model: { module: 'account/mvc/AccountInfoModel' },
                    view: { module: 'account/mvc/AccountInfoView' }
                }
            },
            {
                name: 'AccountMemberForm',
                needValidator: true,
                extend: {
                    action: { module: 'account/mvc/AccountMemberForm' },
                    view: { module: 'account/mvc/AccountMemberFormView' },
                    model: { module: 'account/mvc/AccountMemberFormModel' },
                    schema: { module: 'account/memberSchema' }
                }
            },
            {
                name: 'AccountMailForm',
                needValidator: true,
                extend: {
                    action: {
                        module: 'account/mvc/AccountMailForm',
                        properties: { submitHandler: { $ref: 'accountSubmitHandler' } }
                    },
                    view: { module: 'account/mvc/AccountMailFormView' },
                    model: { properties: { validator: { $ref: 'accountMailValidator' } } }
                }
            },
            {
                name: 'AccountPasswordForm',
                needValidator: true,
                extend: {
                    action: {
                        module: 'account/mvc/AccountPasswordForm',
                        properties: { submitHandler: { $ref: 'accountSubmitHandler' } }
                    },
                    view: { module: 'account/mvc/AccountPasswordFormView' },
                    model: { properties: { validator: { $ref: 'accountPasswordValidator' } } }
                }
            },
            {
                name: 'AccountPhoneForm',
                needValidator: true,
                extend: {
                    action: {
                        module: 'account/mvc/AccountPhoneForm',
                        properties: { submitHandler: { $ref: 'accountSubmitHandler' } }
                    },
                    view: { module: 'account/mvc/AccountPhoneFormView' },
                    model: {
                        module: 'account/mvc/AccountPhoneFormModel',
                        properties: { validator: { $ref: 'accountPhoneValidator' } }
                    }
                }
            },
            {
                name: 'AccountVerifyCodeForm',
                needValidator: true,
                extend: {
                    action: {
                        module: 'account/mvc/AccountVerifyCodeForm',
                        properties: { submitHandler: null }
                    },
                    view: { module: 'account/mvc/AccountVerifyCodeFormView' },
                    model: {
                        module: 'account/mvc/AccountVerifyCodeFormModel',
                        properties: { validator: { $ref: 'accountVerifyCodeValidator' } }
                    }
                }
            },
            {
                name: 'AccountCertifyDetail',
                extend: { view: { module: 'account/mvc/AccountCertifyDetailView' } }
            },
            {
                name: 'AccountSecurityList',
                extend: {
                    view: { module: 'account/mvc/AccountSecurityListView' },
                    model: { module: 'account/mvc/AccountSecurityListModel' },
                    action: { module: 'account/mvc/AccountSecurityList' }
                }
            }
        ]
    }, {
        accountMailSchema: {
            module: 'ssp-account/mailSchema',
            scope: 'static'
        },
        accountMailValidator: {
            module: 'ub-ria/mvc/EntityValidator',
            scope: 'singleton',
            properties: { schema: { $ref: 'accountMailSchema' } }
        },
        accountPasswordSchema: {
            module: 'ssp-account/passwordSchema',
            scope: 'static'
        },
        accountPasswordValidator: {
            module: 'ub-ria/mvc/EntityValidator',
            scope: 'singleton',
            properties: { schema: { $ref: 'accountPasswordSchema' } }
        },
        accountPhoneSchema: {
            module: 'ssp-account/phoneSchema',
            scope: 'static'
        },
        accountPhoneValidator: {
            module: 'ub-ria/mvc/EntityValidator',
            scope: 'singleton',
            properties: { schema: { $ref: 'accountPhoneSchema' } }
        },
        accountVerifyCodeValidator: {
            module: 'ub-ria/mvc/EntityValidator',
            scope: 'singleton'
        },
        accountSubmitHandler: { module: 'account/handler/SuccessRedirectSubmitHandler' }
    });
});
define('media/config', [
    'require',
    'common/IoCActionFactory',
    'er/controller',
    'common/ioc'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var actions = [
        {
            path: '/mediaSite/list',
            type: new ActionFactory('mediaSiteList'),
            title: '\u5A92\u4F53\u7BA1\u7406 - \u7F51\u7AD9\u5217\u8868',
            args: { createURL: '/mediaSite/create' }
        },
        {
            path: '/mediaSite/create',
            type: new ActionFactory('mediaSiteForm'),
            args: { formType: 'create' },
            title: '\u65B0\u5EFA\u7F51\u7AD9'
        },
        {
            path: '/mediaSite/update',
            type: new ActionFactory('mediaSiteForm'),
            args: { formType: 'update' },
            title: '\u4FEE\u6539\u7F51\u7AD9'
        },
        {
            path: '/mediaApp/list',
            type: new ActionFactory('mediaAppList'),
            args: {
                msspLink: 'https://cas.baidu.com/?action=check&appid=274&u=http%3a%2f%2fmssp.baidu.com%2fapp%2fapi%2ftool%2fuser%2flogin#/app/list',
                sdkLink: 'https://cas.baidu.com/?action=check&appid=274&u=http%3a%2f%2fmssp.baidu.com%2fapp%2fapi%2ftool%2fuser%2flogin#/sdk'
            },
            title: '\u5A92\u4F53\u7BA1\u7406 - App\u5217\u8868'
        },
        {
            path: '/mediaSoftware/info',
            type: new ActionFactory('mediaSoftwareInfo'),
            title: '\u5A92\u4F53\u7BA1\u7406 - \u8F6F\u4EF6\u4FE1\u606F'
        },
        {
            path: '/mediaSoftware/update',
            type: new ActionFactory('mediaSoftwareForm'),
            args: { formType: 'update' },
            title: '\u5A92\u4F53\u7BA1\u7406 - \u8F6F\u4EF6\u4FE1\u606F\u4FEE\u6539'
        }
    ];
    require('er/controller').registerAction(actions);
    require('common/ioc').registerComponents('media', {
        remoteModule: 'ssp-media',
        backendEntityName: 'media',
        actions: [
            {
                name: 'MediaSiteList',
                extend: {
                    model: { module: 'media/mvc/MediaSiteListModel' },
                    view: { module: 'media/mvc/MediaSiteListView' },
                    action: { module: 'media/mvc/MediaSiteList' }
                }
            },
            {
                name: 'MediaSiteForm',
                needValidator: true,
                extend: {
                    action: { module: 'media/mvc/MediaSiteForm' },
                    view: { module: 'media/mvc/MediaSiteFormView' },
                    model: {
                        module: 'media/mvc/MediaSiteFormModel',
                        properties: {
                            validator: { $ref: 'mediaSiteValidator' },
                            downloadURL: '/client/account/media/website!verifyFile.action'
                        }
                    }
                }
            },
            {
                name: 'MediaAppList',
                extend: {
                    model: { module: 'media/mvc/MediaAppListModel' },
                    view: { module: 'media/mvc/MediaAppListView' },
                    action: { module: 'media/mvc/MediaAppList' }
                }
            },
            {
                name: 'MediaSoftwareInfo',
                extend: {
                    model: { module: 'media/mvc/MediaSoftwareInfoModel' },
                    view: { module: 'media/mvc/MediaSoftwareInfoView' },
                    action: { module: 'media/mvc/MediaSoftwareInfo' }
                }
            },
            {
                name: 'mediaSoftwareForm',
                needValidator: true,
                extend: {
                    action: { module: 'media/mvc/MediaSoftwareForm' },
                    view: { module: 'media/mvc/MediaSoftwareFormView' },
                    model: { module: 'media/mvc/MediaSoftwareFormModel' },
                    schema: { module: 'media/softwareSchema' }
                }
            }
        ],
        group: 'media'
    }, {
        mediaSiteValidator: {
            module: 'ub-ria/mvc/EntityValidator',
            scope: 'singleton',
            properties: { schema: { $ref: 'mediaSiteSchema' } }
        },
        mediaSiteSchema: {
            module: 'ssp-media/siteSchema',
            scope: 'static'
        }
    });
});
define('mediaProtect/config', [
    'require',
    'common/IoCActionFactory',
    'common/ioc',
    'er/controller'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var ioc = require('common/ioc');
    var actions = [
        {
            path: '/mediaProtect/list',
            type: new ActionFactory('mediaProtectList'),
            title: '\u8FC7\u6EE4\u7B56\u7565 - \u5217\u8868'
        },
        {
            path: '/mediaProtect/create',
            type: new ActionFactory('mediaProtectForm'),
            args: { formType: 'create' },
            title: '\u65B0\u5EFA\u8FC7\u6EE4\u7B56\u7565'
        },
        {
            path: '/mediaProtect/update',
            type: new ActionFactory('mediaProtectForm'),
            args: { formType: 'update' },
            title: '\u4FEE\u6539\u8FC7\u6EE4\u7B56\u7565'
        }
    ];
    require('er/controller').registerAction(actions);
    ioc.registerComponents('mediaProtect', {
        remoteModule: 'ssp-media-protect',
        backendEntityName: 'cooperation/protect',
        actions: [
            {
                name: 'MediaProtectList',
                extend: {
                    action: { module: 'mediaProtect/mvc/MediaProtectList' },
                    view: { module: 'mediaProtect/mvc/MediaProtectListView' },
                    model: {
                        module: 'mediaProtect/mvc/MediaProtectListModel',
                        properties: { excludeColumn: ['creatorId'] }
                    }
                }
            },
            {
                name: 'MediaProtectForm',
                extend: {
                    action: { module: 'mediaProtect/mvc/MediaProtectForm' },
                    view: { module: 'mediaProtect/mvc/MediaProtectFormView' },
                    model: { module: 'mediaProtect/mvc/MediaProtectFormModel' }
                },
                needValidator: true
            }
        ],
        group: 'mediaProtect'
    });
});
define('mediaProtectSet/config', [
    'require',
    'common/IoCActionFactory',
    'common/ioc',
    'er/controller'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var ioc = require('common/ioc');
    var actions = [
        {
            path: '/mediaProtectSet/slotList',
            type: new ActionFactory('mediaProtectSlotList'),
            args: { contentType: 'slot' },
            title: '\u8FC7\u6EE4\u5E94\u7528 - \u4EE3\u7801\u4F4D\u5217\u8868'
        },
        {
            path: '/mediaProtectSet/slotForm',
            type: new ActionFactory('mediaProtectSlotForm'),
            args: {
                contentType: 'slot',
                formType: 'update'
            },
            title: '\u8FC7\u6EE4\u5E94\u7528 - \u4EE3\u7801\u4F4D\u8BBE\u7F6E'
        },
        {
            path: '/mediaProtectSet/appList',
            type: new ActionFactory('mediaProtectAppList'),
            args: { contentType: 'app' },
            title: '\u8FC7\u6EE4\u5E94\u7528 - App\u5217\u8868'
        },
        {
            path: '/mediaProtectSet/appForm',
            type: new ActionFactory('mediaProtectAppForm'),
            args: {
                contentType: 'app',
                formType: 'update'
            },
            title: '\u8FC7\u6EE4\u5E94\u7528 - App\u8BBE\u7F6E'
        }
    ];
    require('er/controller').registerAction(actions);
    ioc.registerComponents('mediaProtectSet', {
        backendEntityName: 'cooperation/protect',
        actions: [
            {
                name: 'MediaProtectSlotList',
                extend: {
                    action: {
                        module: 'mediaProtectSet/mvc/MediaProtectSetList',
                        properties: { entityDescription: '\u4EE3\u7801\u4F4D\u8FC7\u6EE4\u8BBE\u7F6E\u5217\u8868' }
                    },
                    model: { module: 'mediaProtectSet/mvc/MediaProtectSetListModel' }
                }
            },
            {
                name: 'MediaProtectSlotForm',
                extend: {
                    action: {
                        module: 'mediaProtectSet/mvc/MediaProtectSetForm',
                        properties: {
                            submitHandler: { $ref: 'protectSubmitHandler' },
                            entityDescription: '\u4EE3\u7801\u4F4D\u8FC7\u6EE4\u8BBE\u7F6E'
                        }
                    },
                    model: { module: 'mediaProtectSet/mvc/MediaProtectSetFormModel' }
                },
                needValidator: true
            },
            {
                name: 'MediaProtectAppList',
                extend: {
                    action: {
                        module: 'mediaProtectSet/mvc/MediaProtectSetList',
                        properties: { entityDescription: 'App\u8FC7\u6EE4\u8BBE\u7F6E\u5217\u8868' }
                    },
                    model: { module: 'mediaProtectSet/mvc/MediaProtectSetListModel' }
                }
            },
            {
                name: 'MediaProtectAppForm',
                extend: {
                    action: {
                        module: 'mediaProtectSet/mvc/MediaProtectSetForm',
                        properties: {
                            submitHandler: { $ref: 'protectSubmitHandler' },
                            entityDescription: 'APP\u8FC7\u6EE4\u8BBE\u7F6E'
                        }
                    },
                    model: { module: 'mediaProtectSet/mvc/MediaProtectSetFormModel' }
                },
                needValidator: true
            }
        ],
        group: 'mediaProtect'
    }, {
        protectSubmitHandler: {
            module: 'common/handler/ToastSubmitHandler',
            properties: { nextSubmitHandler: { $ref: 'reloadSubmitHandler' } }
        }
    });
});
define('slot/config', [
    'require',
    'common/IoCActionFactory',
    'er/controller',
    'common/ioc'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var actions = [
        {
            path: '/slot/create',
            type: new ActionFactory('slotForm'),
            title: '\u65B0\u5EFA\u4EE3\u7801\u4F4D',
            args: { formType: 'create' }
        },
        {
            path: '/slot/update',
            type: new ActionFactory('slotForm'),
            title: '\u4FEE\u6539\u4EE3\u7801\u4F4D',
            args: { formType: 'update' }
        },
        {
            path: '/slot/select',
            type: new ActionFactory('slotSelector'),
            title: '\u9009\u62E9\u4EE3\u7801\u4F4D'
        },
        {
            path: '/slot/singleSelect',
            type: new ActionFactory('slotSelector'),
            args: { selectMode: 'single' },
            title: '\u9009\u62E9\u5E7F\u544A\u4F4D'
        },
        {
            path: '/slot/generateCode',
            type: new ActionFactory('slotGetCode'),
            args: { ignoreReset: true },
            title: '\u83B7\u53D6\u4EE3\u7801'
        }
    ];
    require('er/controller').registerAction(actions);
    var ioc = require('common/ioc');
    ioc.registerComponents('slot', {
        backendEntityName: 'main/cooperation/cpro',
        requestStrategy: 'unionRequestStrategy',
        group: 'resource',
        actions: [
            {
                name: 'SlotForm',
                needValidator: true,
                extend: {
                    action: {
                        properties: {
                            submitHandler: { $ref: 'slotSubmitHandler' },
                            packageName: 'ssp-slot'
                        }
                    }
                }
            },
            { name: 'SlotGetCode' }
        ]
    }, {
        slotSubmitHandler: { module: 'slot/handler/SlotCodeGenerateHandler' },
        slotConfiguration: {
            module: 'slot/configuration/main',
            scope: 'static'
        },
        slotEnum: {
            module: 'slot/enum',
            scope: 'static'
        },
        slotFloatedEffectManager: { module: 'ssp-slot/FloatedEffectManager' },
        slotSlideEffectManager: { module: 'ssp-slot/SlideEffectManager' },
        slotTemplateManager: { module: 'slot/TemplateManager' },
        slotFeatureTemplateConfiguration: {
            module: 'slot/configuration/featureTemplate',
            scope: 'static'
        },
        slotTransformManager: { module: 'slot/TransformManager' },
        slotPreviewManager: { module: 'slot/preview/PreviewManager' }
    });
});
define('experiment/config', [
    'require',
    'common/IoCActionFactory',
    'common/ioc',
    'er/controller'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var ioc = require('common/ioc');
    var actions = [
        {
            path: '/experiment/create',
            type: new ActionFactory('experimentForm'),
            args: {
                ignoreReset: true,
                formType: 'create',
                previewUrl: '/un-web-lib/'
            },
            title: '\u65B0\u5EFA\u521B\u65B0\u6837\u5F0F'
        },
        {
            path: '/experiment/update',
            type: new ActionFactory('experimentForm'),
            args: {
                ignoreReset: true,
                formType: 'update',
                previewUrl: '/un-web-lib/'
            },
            title: '\u4FEE\u6539\u521B\u65B0\u6837\u5F0F'
        },
        {
            path: '/experiment/generateCode',
            type: new ActionFactory('experimentCodeGenerator'),
            args: { ignoreReset: true },
            title: '\u83B7\u53D6\u4EE3\u7801\u4F4D'
        }
    ];
    require('er/controller').registerAction(actions);
    ioc.registerComponents('experiment', {
        backendEntityName: 'main/cooperation/experiment',
        requestStrategy: 'unionRequestStrategy',
        actions: [
            {
                name: 'ExperimentForm',
                needValidator: true,
                extend: { action: { properties: { submitHandler: { $ref: 'experimentSubmitHandler' } } } }
            },
            { name: 'ExperimentCodeGenerator' }
        ],
        group: 'cooperation'
    }, {
        experimentSubmitHandler: { module: 'experiment/handler/ExperimentCodeGenerator' },
        generator: {
            module: 'experiment/Generator',
            scope: 'static',
            auto: true
        },
        parser: {
            module: 'experiment/Parser',
            scope: 'static',
            auto: true
        },
        listener: {
            module: 'experiment/Listener',
            scope: 'static',
            auto: true
        },
        actionBinder: {
            module: 'experiment/ActionBinder',
            scope: 'static',
            auto: true
        },
        templateManager: {
            module: 'experiment/TemplateManager',
            scope: 'static',
            auto: true
        },
        sizeManager: {
            module: 'experiment/SizeManager',
            scope: 'static'
        },
        transformManager: {
            module: 'experiment/TransformManager',
            scope: 'static',
            auto: true
        },
        previewManager: {
            module: 'experiment/Preview',
            scope: 'static',
            auto: true
        }
    });
});
define('credit/config', [
    'require',
    'common/IoCActionFactory',
    'er/controller',
    'common/ioc'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var actions = [
        {
            path: '/credit/overview',
            type: new ActionFactory('creditOverview'),
            title: '\u6211\u7684\u79EF\u5206',
            args: {
                creditExchangeListRedirectURL: '/credit/overview~tabIndex=2',
                creditListURL: '/credit/list',
                creditDelayListURL: '/credit/delayList',
                creditExchangeListURL: '/credit/exchangeList'
            }
        },
        {
            path: '/credit/list',
            type: new ActionFactory('creditList'),
            title: '\u79EF\u5206\u67E5\u8BE2\u5217\u8868'
        },
        {
            path: '/credit/delayList',
            type: new ActionFactory('creditDelayList'),
            title: '\u5373\u5C06\u53EF\u7528\u79EF\u5206\u5217\u8868'
        }
    ];
    require('er/controller').registerAction(actions);
    require('common/ioc').registerComponents('credit', {
        remoteModule: 'ssp-credit-paradise',
        backendEntityName: 'cent',
        group: 'credit',
        actions: [
            { name: 'CreditOverview' },
            {
                name: 'CreditList',
                extend: {
                    action: { module: 'credit/mvc/CreditBaseList' },
                    model: { module: 'credit/mvc/CreditBaseListModel' },
                    view: { module: 'credit/mvc/CreditListView' }
                }
            },
            {
                name: 'CreditDelayList',
                extend: {
                    action: { module: 'credit/mvc/CreditBaseList' },
                    model: { module: 'credit/mvc/CreditDelayListModel' },
                    view: { module: 'credit/mvc/CreditDelayListView' }
                }
            }
        ]
    });
});
define('creditExchange/config', [
    'require',
    'common/IoCActionFactory',
    'er/controller',
    'common/ioc'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var actions = [
        {
            path: '/credit/exchangeList',
            type: new ActionFactory('creditExchangeList'),
            args: {
                creditAwardURL: '/credit/award',
                nuomiECardsDownloadURL: '/client/cent/viewCent!downloadNuomiCards.action'
            },
            title: '\u5151\u6362\u8BB0\u5F55\u5217\u8868'
        },
        {
            path: '/credit/exchange',
            type: new ActionFactory('creditExchange'),
            args: { formType: 'create' },
            title: '\u5956\u54C1\u5151\u6362'
        },
        {
            path: '/creditExchange/exchange/success',
            type: new ActionFactory('creditExchangeSuccess'),
            args: { exchangeResultsURL: '#/cent/centMg~tabIndex=2' },
            title: '\u5956\u54C1\u5151\u6362'
        },
        {
            path: '/creditAdress/create',
            type: new ActionFactory('creditAddress'),
            args: { formType: 'create' },
            title: '\u65B0\u5EFA\u5151\u6362\u5730\u5740'
        },
        {
            path: '/creditAdress/update',
            type: new ActionFactory('creditAddress'),
            args: { formType: 'update' },
            title: '\u4FEE\u6539\u5151\u6362\u5730\u5740'
        }
    ];
    require('er/controller').registerAction(actions);
    require('common/ioc').registerComponents('creditExchange', {
        remoteModule: 'ssp-credit-paradise',
        backendEntityName: 'cent',
        group: 'credit',
        actions: [
            {
                name: 'CreditExchangeList',
                extend: {
                    action: { module: 'creditExchange/mvc/CreditExchangeList' },
                    model: { module: 'creditExchange/mvc/CreditExchangeListModel' },
                    view: { module: 'creditExchange/mvc/CreditExchangeListView' }
                }
            },
            {
                name: 'CreditExchange',
                needValidator: true,
                extend: {
                    action: {
                        module: 'creditExchange/mvc/CreditExchange',
                        properties: { submitHandler: { $ref: 'creditExchangeSubmitHandler' } }
                    },
                    view: { module: 'creditExchange/mvc/CreditExchangeView' }
                }
            },
            {
                name: 'CreditAddress',
                needValidator: true,
                extend: {
                    action: { module: 'creditExchange/mvc/CreditAddress' },
                    view: { module: 'creditExchange/mvc/CreditAddressView' },
                    schema: { module: 'ssp-credit-paradise/addressSchema' }
                }
            },
            {
                name: 'CreditExchangeSuccess',
                extend: {
                    action: { module: 'ub-ria/mvc/ReadAction' },
                    view: { module: 'creditExchange/mvc/CreditExchangeSuccessView' },
                    model: { module: 'ub-ria/mvc/BaseModel' }
                }
            }
        ]
    }, { creditExchangeSubmitHandler: { module: 'creditExchange/handler/SuccessRedirectSubmitHandler' } });
});
define('creditMall/config', [
    'require',
    'common/IoCActionFactory',
    'er/controller',
    'common/ioc'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var actions = [
        {
            path: '/credit/mall',
            type: new ActionFactory('creditMall'),
            args: {
                creditAwardURL: '/credit/award',
                creditExchangeURL: '/credit/exchange'
            },
            title: '\u79EF\u5206\u5546\u57CE'
        },
        {
            path: '/credit/award',
            type: new ActionFactory('creditAward'),
            args: { exchangeAwardURL: '/credit/exchange' },
            title: '\u5956\u54C1\u8BE6\u60C5'
        }
    ];
    require('er/controller').registerAction(actions);
    require('common/ioc').registerComponents('creditMall', {
        remoteModule: 'ssp-credit-paradise',
        backendEntityName: 'cent',
        group: 'credit',
        actions: [
            {
                name: 'CreditMall',
                extend: {
                    action: { module: 'creditMall/mvc/CreditMall' },
                    view: { module: 'creditMall/mvc/CreditMallView' },
                    model: { module: 'creditMall/mvc/CreditMallModel' }
                }
            },
            {
                name: 'CreditAward',
                extend: {
                    action: { module: 'ssp-credit-paradise/mvc/CreditAward' },
                    model: { module: 'creditMall/mvc/CreditAwardModel' }
                }
            }
        ]
    });
});
define('ssp-report/config', [
    'require',
    'tpl!startup/template',
    'tpl!startup/template',
    'tpl!startup/template'
], function (require) {
    require('tpl!startup/template');
    require('tpl!startup/template');
    require('tpl!startup/template');
});
define('report/filter', ['require'], function (require) {
    var exports = {
        ellipsis: function (source, maxLength) {
            if (source && source.length > maxLength) {
                return source.slice(0, maxLength) + '...';
            }
            return source;
        }
    };
    return exports;
});
define('report/config', [
    'require',
    'ssp-report/config',
    'tpl!startup/template',
    'tpl!startup/template',
    'tpl!startup/template',
    'tpl!startup/template',
    'tpl!startup/template',
    'common/util',
    'common/ioc',
    'etpl',
    './filter',
    'common/IoCActionFactory',
    './enum',
    'er/controller'
], function (require) {
    require('ssp-report/config');
    require('tpl!startup/template');
    require('tpl!startup/template');
    require('tpl!startup/template');
    require('tpl!startup/template');
    require('tpl!startup/template');
    var u = require('common/util');
    var ioc = require('common/ioc');
    var etpl = require('etpl');
    var filter = require('./filter');
    var ActionFactory = require('common/IoCActionFactory');
    var UnionBizType = require('./enum').UnionBizType;
    etpl.addFilter('ellipsis', filter.ellipsis);
    var GENERAL_ACTION_URL = '/report/general';
    var CHART_ACTION_URL = '/report/chart';
    var LIST_ACTION_URL = '/report/list';
    var DOWNLOAD_ACTION_URL = '/report/download';
    var EMAIL_ACTION_URL = '/report/email';
    var SAVE_ACTION_URL = '/report/save';
    var DIY_LIST_ACTION_URL = '/report/template';
    var reportActionArgs = {
        generalActionURL: GENERAL_ACTION_URL,
        chartActionURL: CHART_ACTION_URL,
        listActionURL: LIST_ACTION_URL,
        downloadActionURL: DOWNLOAD_ACTION_URL,
        saveActionURL: SAVE_ACTION_URL,
        emailActionURL: EMAIL_ACTION_URL
    };
    var actions = [
        {
            path: '/report/hao123',
            type: new ActionFactory('reportHao123'),
            title: '\u62A5\u544A - Hao123',
            args: reportActionArgs
        },
        {
            path: '/report/cpro',
            type: new ActionFactory('reportCpro'),
            title: '\u62A5\u544A - \u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u7F51\u9875\u7248',
            args: reportActionArgs
        },
        {
            path: '/report/cpro/c',
            type: new ActionFactory('reportCproC'),
            title: '\u62A5\u544A - \u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u7F51\u9875\u7248 - \u8BA1\u8D39\u540D',
            args: reportActionArgs
        },
        {
            path: '/report/cpro/tm',
            type: new ActionFactory('reportCproTm'),
            title: '\u62A5\u544A - \u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u7F51\u9875\u7248 - \u5A92\u4F53',
            args: reportActionArgs
        },
        {
            path: '/report/cpro/adPosition',
            type: new ActionFactory('reportCproAdPosition'),
            title: '\u62A5\u544A - \u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u7F51\u9875\u7248 - \u4EE3\u7801\u4F4D',
            args: reportActionArgs
        },
        {
            path: '/report/cpro/cproChannel',
            type: new ActionFactory('reportCproCproChannel'),
            title: '\u62A5\u544A - \u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C\u7F51\u9875\u7248 - \u6E20\u9053',
            args: reportActionArgs
        },
        {
            path: '/report/search',
            type: new ActionFactory('reportSearch'),
            title: '\u62A5\u544A - \u641C\u7D22\u63A8\u5E7F\u62A5\u544A',
            args: reportActionArgs
        },
        {
            path: '/report/search/c',
            type: new ActionFactory('reportSearchC'),
            title: '\u62A5\u544A - \u641C\u7D22\u63A8\u5E7F\u62A5\u544A',
            args: reportActionArgs
        },
        {
            path: '/report/search/searchChannel',
            type: new ActionFactory('reportSearchSearchChannel'),
            title: '\u62A5\u544A - \u641C\u7D22\u63A8\u5E7F\u62A5\u544A',
            args: reportActionArgs
        },
        {
            path: '/report/dan',
            type: new ActionFactory('reportDan'),
            title: '\u62A5\u544A - \u9E3F\u5A92\u4F53\u62A5\u544A',
            args: u.extend({}, reportActionArgs, { listActionURL: '/report/danList' })
        },
        {
            path: '/report/tuan',
            type: new ActionFactory('reportTuan'),
            title: '\u62A5\u544A - \u56E2\u8D2D\u62A5\u544A',
            args: reportActionArgs
        },
        {
            path: '/report/software',
            type: new ActionFactory('reportSoftware'),
            title: '\u62A5\u544A - \u5DE5\u5177\u680F\u62A5\u544A',
            args: reportActionArgs
        },
        {
            path: '/report/software/c',
            type: new ActionFactory('reportSoftwareC'),
            title: '\u62A5\u544A - \u5DE5\u5177\u680F\u62A5\u544A - \u8BA1\u8D39\u540D',
            args: reportActionArgs
        },
        {
            path: '/report/software/searchChannel',
            type: new ActionFactory('reportSoftwareSearchChannel'),
            title: '\u62A5\u544A - \u5DE5\u5177\u680F\u62A5\u544A - \u6E20\u9053',
            args: reportActionArgs
        },
        {
            path: '/report/reflux',
            type: new ActionFactory('reportReflux'),
            title: '\u62A5\u544A - \u56DE\u6D41\u4E1A\u52A1\u62A5\u544A',
            args: reportActionArgs
        },
        {
            path: '/report/reflux/c',
            type: new ActionFactory('reportRefluxC'),
            title: '\u62A5\u544A - \u56DE\u6D41\u4E1A\u52A1\u62A5\u544A - \u8BA1\u8D39\u540D',
            args: reportActionArgs
        },
        {
            path: '/report/reflux/refluxAdPosition',
            type: new ActionFactory('reportRefluxRefluxAdPosition'),
            title: '\u62A5\u544A - \u56DE\u6D41\u4E1A\u52A1\u62A5\u544A',
            args: reportActionArgs
        },
        {
            path: '/report/general',
            type: new ActionFactory('reportGeneral'),
            title: '\u62A5\u544A - \u6982\u8981\u5C55\u793A'
        },
        {
            path: LIST_ACTION_URL,
            type: new ActionFactory('reportList'),
            title: '\u62A5\u544A - \u5217\u8868'
        },
        {
            path: '/report/danList',
            type: new ActionFactory('danReportList'),
            title: '\u62A5\u544A - \u5217\u8868'
        },
        {
            path: CHART_ACTION_URL,
            type: new ActionFactory('reportChart'),
            title: '\u62A5\u544A - \u56FE\u8868'
        },
        {
            path: SAVE_ACTION_URL,
            type: new ActionFactory('reportSave'),
            title: '\u62A5\u544A - \u4FDD\u5B58\u6A21\u677F'
        },
        {
            path: DIY_LIST_ACTION_URL,
            type: new ActionFactory('reportDiyList'),
            title: '\u62A5\u544A - \u81EA\u5B9A\u4E49\u62A5\u544A\u7BA1\u7406',
            args: {
                downloadActionURL: DOWNLOAD_ACTION_URL,
                emailActionURL: EMAIL_ACTION_URL
            }
        },
        {
            path: EMAIL_ACTION_URL,
            type: new ActionFactory('reportEmailForm'),
            title: '\u62A5\u544A - \u5B9A\u65F6\u53D1\u9001'
        },
        {
            path: DOWNLOAD_ACTION_URL,
            type: new ActionFactory('reportDownload'),
            title: '\u62A5\u544A - \u4E0B\u8F7D',
            args: { downloadURL: '/client/report-service/query!download.action' }
        }
    ];
    var remoteModule = 'ssp-report';
    var module = 'report';
    var additionalConfig = {
        reportEnum: {
            module: module + '/enum',
            scope: 'static'
        },
        reportConfiguration: { module: module + '/ReportConfiguration' },
        reports: {
            module: module + '/reports',
            scope: 'static'
        },
        searchReports: {
            module: module + '/searchReports',
            scope: 'static'
        },
        softwareReports: {
            module: module + '/softwareReports',
            scope: 'static'
        },
        refluxReports: {
            module: module + '/refluxReports',
            scope: 'static'
        },
        hao123Reports: {
            module: module + '/hao123Reports',
            scope: 'static'
        },
        reportTemplateData: {
            module: module + '/ReportTemplateData',
            auto: true,
            properties: {
                requestStrategy: {
                    $import: 'commonRequestStrategy',
                    scope: 'single',
                    args: [
                        'reportTemplate',
                        'template'
                    ]
                }
            }
        },
        reportTemplateSubmitHandler: {
            module: 'ub-ria/mvc/handler/ToastSubmitHandler',
            properties: { nextSubmitHandler: null }
        },
        reportTypeInfoHelper: {
            module: module + '/mvc/helper/TypeInfoHelper',
            properties: { uRLMap: { $ref: 'reportURLMap' } }
        },
        reportURLMap: {
            module: module + '/reportURLMap',
            scope: 'static'
        },
        reportGeneralConfig: {
            module: module + '/generalConfig',
            scope: 'static'
        }
    };
    additionalConfig = u.extend(additionalConfig, getReportFetcherConfig(), getDanReportFetcherConfig());
    function getSingleTypeFilterFetchers(dimensions) {
        var fetchers = {};
        u.each(dimensions, function (item) {
            var fetcherModule = module + '/mvc/fetcher/SingleTypeFilterFetcher';
            var args = [{ $ref: 'reportData' }];
            if (item === 'C') {
                fetcherModule = module + '/mvc/fetcher/CFetcher';
                args.push(UnionBizType.TUAN);
            }
            if (item === 'Ch') {
                fetcherModule = module + '/mvc/fetcher/ChFetcher';
            }
            fetchers['report' + item + 'Fetcher'] = {
                module: fetcherModule,
                args: args
            };
        });
        return fetchers;
    }
    function getMultiTypeFilterFetchers(multiTypeFilters) {
        var args = [{ $ref: 'reportData' }];
        var fetcherModule = module + '/mvc/fetcher/ListFetcher';
        var fetchers = {};
        u.each(multiTypeFilters, function (item) {
            fetchers['report' + item + 'Fetcher'] = {
                module: fetcherModule,
                args: args
            };
        });
        return fetchers;
    }
    function getReportFetcherConfig() {
        var singleTypeFilters = [
            'AppStyle',
            'DanAdType',
            'Ch',
            'C'
        ];
        var singleTypeFilterFetchers = getSingleTypeFilterFetchers(singleTypeFilters);
        var multiTypeFilters = [
            'Tm',
            'AdPosition',
            'RefluxAdPosition',
            'CproChannel',
            'SearchChannel',
            'App'
        ];
        var multiTypeFilterFetchers = getMultiTypeFilterFetchers(multiTypeFilters);
        var cproChannelTypeFetcher = {
            module: module + '/mvc/fetcher/EnumFetcher',
            args: [
                { $ref: 'reportEnum' },
                'CproChannelType'
            ]
        };
        var config = u.extend(singleTypeFilterFetchers, multiTypeFilterFetchers, { reportCproChannelTypeFetcher: cproChannelTypeFetcher });
        var filters = singleTypeFilters.concat(multiTypeFilters);
        filters.push('CproChannelType');
        var fetcherMap = {};
        u.each(filters, function (filter) {
            fetcherMap[lowerCaseFirst(filter)] = { $ref: 'report' + filter + 'Fetcher' };
        });
        config.reportFilterDataFetcherProxy = {
            module: module + '/mvc/FilterDataFetcherProxy',
            properties: { fetcherSet: { $map: fetcherMap } }
        };
        return config;
    }
    function getDanReportFetcherConfig() {
        var fetcherMap = {
            danAdType: { $ref: 'reportDanAdTypeFetcher' },
            c: { $ref: 'danReportCFetcher' }
        };
        var config = {
            danReportCFetcher: {
                module: module + '/mvc/fetcher/CFetcher',
                args: [
                    { $ref: 'reportData' },
                    UnionBizType.DAN
                ]
            },
            danReportFilterDataFetcherProxy: {
                module: module + '/mvc/FilterDataFetcherProxy',
                properties: { fetcherSet: { $map: fetcherMap } }
            }
        };
        return config;
    }
    function getActions() {
        var reportActions = getReportActions();
        var childActions = getChildActions();
        var reportTemplateActions = getReportTemplateActions();
        return reportActions.concat(childActions, reportTemplateActions);
    }
    function getReportActions() {
        var actions = [
            'Cpro',
            'Cpro-C',
            'Cpro-Tm',
            'Cpro-AdPosition',
            'Cpro-CproChannel',
            'CproApp',
            'CproApp-App',
            'Search',
            'Search-C',
            'Search-SearchChannel',
            'Dan',
            'Tuan',
            'Reflux',
            'Software',
            'Software-C',
            'Software-SearchChannel',
            'Reflux-C',
            'Reflux-RefluxAdPosition',
            'Hao123'
        ];
        var actionModule = module + '/mvc/Report';
        var viewModule = module + '/mvc/ReportView';
        return u.map(actions, function (action) {
            var reportType = action;
            var actionName = action;
            var bizType = action;
            if (action.indexOf('-') >= 0) {
                var actionParts = action.split('-');
                bizType = actionParts[0];
                reportType = actionParts[1];
                actionName = actionParts.join('');
            }
            actionName = 'Report' + actionName;
            var modelModule = module + '/mvc/ReportModel';
            if (u.contains([
                    'Cpro',
                    'Search',
                    'CproApp',
                    'Reflux',
                    'Software'
                ], action)) {
                modelModule = module + '/mvc/DetailReportModel';
            }
            if (reportType === 'C') {
                modelModule = module + '/mvc/CReportModel';
            }
            if (reportType === 'Hao123') {
                actionModule = 'report/mvc/Hao123Report';
                modelModule = actionModule + 'Model';
                viewModule = actionModule + 'View';
            }
            var config = {
                name: actionName,
                extend: {
                    action: { module: actionModule },
                    model: {
                        module: modelModule,
                        properties: {
                            reportType: lowerCaseFirst(reportType),
                            session: { $ref: 'session' },
                            configuration: { $ref: 'reportConfiguration' },
                            uRLMap: { $ref: 'reportURLMap' },
                            typeInfoHelper: { $ref: 'reportTypeInfoHelper' },
                            unionBizTypeId: UnionBizType.getValueFromText(lowerCaseFirst(bizType)),
                            templateData: { $ref: 'reportTemplateData' }
                        }
                    },
                    view: {
                        module: viewModule,
                        properties: { template: 'unionStandardReport' }
                    }
                }
            };
            if (u.contains([
                    'Search',
                    'Reflux',
                    'Software',
                    'Hao123'
                ], bizType)) {
                config.extend.model.properties.reports = { $ref: lowerCaseFirst(bizType) + 'Reports' };
            }
            return config;
        });
    }
    function lowerCaseFirst(string) {
        return string.charAt(0).toLowerCase() + string.substr(1);
    }
    function getChildActions() {
        return [
            {
                name: 'ReportList',
                module: 'report',
                extend: {
                    model: {
                        properties: {
                            fetcher: { $ref: 'reportFilterDataFetcherProxy' },
                            configuration: { $ref: 'reportConfiguration' }
                        }
                    }
                }
            },
            {
                name: 'DanReportList',
                extend: {
                    action: { module: module + '/mvc/ReportList' },
                    model: {
                        module: remoteModule + '/mvc/ReportListModel',
                        properties: {
                            fetcher: { $ref: 'danReportFilterDataFetcherProxy' },
                            configuration: { $ref: 'reportConfiguration' }
                        }
                    },
                    view: { module: module + '/mvc/ReportListView' }
                }
            },
            {
                name: 'ReportChart',
                extend: {
                    model: { properties: { configuration: { $ref: 'reportConfiguration' } } },
                    view: { properties: { template: 'unionReportChart' } }
                }
            },
            {
                name: 'ReportGeneral',
                extend: {
                    model: {
                        module: 'report/mvc/ReportGeneralModel',
                        properties: {
                            configuration: { $ref: 'reportConfiguration' },
                            generalConfig: { $ref: 'reportGeneralConfig' }
                        }
                    },
                    view: { properties: { template: 'unionReportGeneral' } }
                }
            }
        ];
    }
    function getReportTemplateActions() {
        return u.map([
            'ReportDownload',
            'ReportEmailForm',
            'ReportSave',
            'ReportDiyList'
        ], function (action) {
            var item = {};
            item.name = action;
            item.extend = { model: { properties: { data: { $ref: 'reportTemplateData' } } } };
            if (action === 'ReportEmailForm' || action === 'ReportSave') {
                item.needValidator = true;
                item.extend.action = { properties: { submitHandler: { $ref: 'reportTemplateSubmitHandler' } } };
            }
            if (action === 'ReportEmailForm') {
                item.extend.model.module = module + '/mvc/ReportEmailFormModel';
            }
            if (action === 'ReportDiyList') {
                item.extend.action = { module: module + '/mvc/ReportDiyList' };
                item.extend.model.module = module + '/mvc/ReportDiyListModel';
                item.extend.view = {
                    module: module + '/mvc/ReportDiyListView',
                    properties: { typeInfoHelper: { $ref: 'reportTypeInfoHelper' } }
                };
            }
            return item;
        });
    }
    ioc.registerComponents('report', {
        group: 'report',
        backendEntityName: 'report',
        remoteModule: 'ssp-report',
        actions: getActions()
    }, additionalConfig);
    require('er/controller').registerAction(actions);
});
define('finance/config', [
    'exports',
    'common/ioc',
    'common/IoCActionFactory',
    'er/controller'
], function (exports, _commonIoc, _commonIoCActionFactory, _erController) {
    var _ioc = babelHelpers.interopRequireDefault(_commonIoc);
    var _ActionFactory = babelHelpers.interopRequireDefault(_commonIoCActionFactory);
    var _controller = babelHelpers.interopRequireDefault(_erController);
    var actions = [
        {
            path: '/finance/info',
            type: new _ActionFactory['default']('financeInfo'),
            title: '\u8D22\u52A1\u4FE1\u606F',
            args: { updateURL: '/finance/info/update' }
        },
        {
            path: '/finance/info/update',
            type: new _ActionFactory['default']('financeInfoForm'),
            title: '\u8D22\u52A1\u4FE1\u606F - \u4FEE\u6539',
            args: {
                formType: 'update',
                uploadURL: '/client/account/finance/tools!upload.action',
                unionRegisterAgreement: 'http://union.baidu.com/regAgreement.html',
                financeHelpLink: 'http://yingxiao.baidu.com/union/node_13522.html',
                proofURL1: 'http://yingxiao.baidu.com/new/home/help/details/id/5259?ly=helpcd',
                proofURL2: 'http://yingxiao.baidu.com/new/home/help/details/id/13865'
            }
        },
        {
            path: '/finance/payment/list',
            type: new _ActionFactory['default']('financePaymentList'),
            args: {
                invoiceSetListURL: '/finance/invoiceSet/list',
                paymentHelpURL: 'http://yingxiao.baidu.com/new/home/help/details/id/5380?ly=helpcd',
                payStatusURL: 'http://yingxiao.baidu.com/new/home/help/details/id/8063?ly=helpcd',
                payRuleURL: 'http://yingxiao.baidu.com/new/home/help/details/id/13582?ly=helpcd',
                enterpriseCheckURL: 'http://yingxiao.baidu.com/new/home/help/details/id/16244?ly=helpcd',
                enterpriseNoteURL: 'http://yingxiao.baidu.com/new/home/help/details/id/11189?ly=helpcd'
            },
            title: '\u4ED8\u6B3E\u8BB0\u5F55'
        },
        {
            path: '/finance/invoiceSet/list',
            type: new _ActionFactory['default']('financeInvoiceSetList'),
            args: {
                contactInfoModifyURL: '/account/customer',
                invoiceSetReadURL: '/finance/invoiceSet/read',
                vatInvoiceSetReadURL: '/finance/vatInvoiceSet/read'
            },
            title: '\u4ED8\u6B3E\u8BB0\u5F55 - \u53D1\u7968\u96C6 - \u5217\u8868'
        },
        {
            path: '/finance/invoiceSet/read',
            type: new _ActionFactory['default']('financeInvoiceSetRead'),
            args: {
                saleInvoiceCreateURL: '/finance/invoice/sale/create',
                vatInvoiceCreateURL: '/finance/invoice/vat/create',
                saleInvoiceUpdateURL: '/finance/invoice/sale/update',
                vatInvoiceUpdateURL: '/finance/invoice/vat/update',
                saleInvoiceReadURL: '/finance/invoice/sale/read',
                vatInvoiceReadURL: '/finance/invoice/vat/read'
            },
            title: '\u4ED8\u6B3E\u8BB0\u5F55 - \u53D1\u7968\u96C6 - \u67E5\u770B'
        },
        {
            path: '/finance/vatInvoiceSet/read',
            type: new _ActionFactory['default']('financeVatInvoiceSetRead'),
            title: '\u4ED8\u6B3E\u8BB0\u5F55 - \u589E\u503C\u7A0E\u4E13\u7528\u53D1\u7968\u96C6 - \u67E5\u770B',
            args: { uploadURL: '/v2/client/finance/invoice-image' }
        },
        {
            path: '/finance/invoice/sale/create',
            type: new _ActionFactory['default']('financeSaleInvoiceForm'),
            args: {
                invoiceType: 'sale',
                formType: 'create',
                readActionURL: '/finance/invoice/sale/read'
            },
            title: '\u4ED8\u6B3E\u8BB0\u5F55 - \u8425\u4E1A\u7A0E\u53D1\u7968 - \u65B0\u589E'
        },
        {
            path: '/finance/invoice/sale/update',
            type: new _ActionFactory['default']('financeSaleInvoiceForm'),
            args: {
                invoiceType: 'sale',
                formType: 'update',
                readActionURL: '/finance/invoice/sale/read'
            },
            title: '\u4ED8\u6B3E\u8BB0\u5F55 - \u8425\u4E1A\u7A0E\u53D1\u7968 - \u4FEE\u6539'
        },
        {
            path: '/finance/invoice/sale/read',
            type: new _ActionFactory['default']('financeSaleInvoiceRead'),
            args: {
                invoiceType: 'sale',
                updateActionURL: '/finance/invoice/sale/update'
            },
            title: '\u4ED8\u6B3E\u8BB0\u5F55 - \u8425\u4E1A\u7A0E\u53D1\u7968 - \u67E5\u770B'
        },
        {
            path: '/finance/invoice/vat/create',
            type: new _ActionFactory['default']('financeVatInvoiceForm'),
            args: {
                invoiceType: 'VAT',
                formType: 'create',
                readActionURL: '/finance/invoice/vat/read'
            },
            title: '\u4ED8\u6B3E\u8BB0\u5F55 - \u589E\u503C\u7A0E\u4E13\u7528\u53D1\u7968 - \u65B0\u589E'
        },
        {
            path: '/finance/invoice/vat/update',
            type: new _ActionFactory['default']('financeVatInvoiceForm'),
            args: {
                invoiceType: 'VAT',
                formType: 'update',
                readActionURL: '/finance/invoice/vat/read'
            },
            title: '\u4ED8\u6B3E\u8BB0\u5F55 - \u589E\u503C\u7A0E\u4E13\u7528\u53D1\u7968 - \u4FEE\u6539'
        },
        {
            path: '/finance/invoice/vat/read',
            type: new _ActionFactory['default']('financeVatInvoiceRead'),
            args: {
                invoiceType: 'VAT',
                updateActionURL: '/finance/invoice/vat/update'
            },
            title: '\u4ED8\u6B3E\u8BB0\u5F55 - \u589E\u503C\u7A0E\u4E13\u7528\u53D1\u7968 - \u67E5\u770B'
        }
    ];
    var financeAdditionalComponents = {
        financeInfoCreateSubmitHandler: {
            module: 'ub-ria/mvc/handler/ToastSubmitHandler',
            properties: {
                template: '\u8D22\u52A1\u4FE1\u606F\u4FDD\u5B58\u6210\u529F',
                nextSubmitHandler: { $ref: 'financeInfoUpdatePopDialogHandler' }
            }
        },
        financeInfoCreateRedirectSubmitHandler: {
            module: 'ub-ria/mvc/handler/RedirectSubmitHandler',
            properties: {
                template: '/finance/info',
                redirectOptions: {
                    force: true,
                    global: true
                }
            }
        },
        financeInfoUpdatePopDialogHandler: {
            module: 'ssp-finance/handler/PopDialogHandler',
            properties: { nextSubmitHandler: { $ref: 'financeInfoCreateRedirectSubmitHandler' } }
        }
    };
    _ioc['default'].registerComponents('finance', {
        remoteModule: 'ssp-finance',
        backendEntityName: 'finance',
        group: 'finance',
        actions: [
            {
                name: 'FinanceInfo',
                extend: {
                    view: { module: 'finance/mvc/FinanceInfoView' },
                    model: { module: 'finance/mvc/FinanceInfoModel' }
                }
            },
            {
                name: 'FinanceInfoForm',
                needValidator: true,
                extend: {
                    view: { module: 'finance/mvc/FinanceInfoFormView' },
                    model: { module: 'finance/mvc/FinanceInfoFormModel' },
                    action: {
                        module: 'finance/mvc/FinanceInfoForm',
                        properties: { submitHandler: { $ref: 'financeInfoCreateSubmitHandler' } }
                    }
                }
            },
            {
                name: 'FinancePaymentList',
                extend: {
                    view: { module: 'finance/mvc/FinancePaymentListView' },
                    action: { module: 'finance/mvc/FinancePaymentList' },
                    model: { module: 'finance/mvc/FinancePaymentListModel' }
                }
            },
            {
                name: 'FinanceInvoiceSetList',
                extend: {
                    model: { module: 'finance/mvc/FinanceInvoiceSetListModel' },
                    view: { module: 'finance/mvc/FinanceInvoiceSetListView' }
                }
            },
            { name: 'FinanceInvoiceSetRead' },
            {
                name: 'FinanceVatInvoiceSetRead',
                extend: { view: { module: 'finance/mvc/FinanceVatInvoiceSetReadView' } }
            }
        ]
    }, financeAdditionalComponents);
    var invoiceExtend = {
        data: { module: 'finance/FinanceInvoiceData' },
        permission: { module: 'finance/FinancePermission' }
    };
    var saleInvoiceFormActionExtend = {
        view: { module: 'finance/mvc/FinanceSaleInvoiceFormView' },
        action: { properties: { submitHandler: { $ref: 'financeInvoiceSubmitHandler' } } },
        schema: { module: 'finance/saleInvoiceSchema' }
    };
    var vatInvoiceFormActionExtend = {
        view: { module: 'finance/mvc/FinanceVatInvoiceFormView' },
        action: { properties: { submitHandler: { $ref: 'financeInvoiceSubmitHandler' } } },
        schema: { module: 'finance/vatInvoiceSchema' }
    };
    var invoiceAdditionalComponents = { financeInvoiceSubmitHandler: { module: 'ssp-finance/mvc/FinanceInvoiceRedirectSubmitHandler' } };
    _ioc['default'].registerComponents('financeSaleInvoice', {
        remoteModule: 'ssp-finance/saleInvoice',
        backendEntityName: 'taxInvoice',
        group: 'finance',
        actions: [
            {
                name: 'FinanceSaleInvoiceForm',
                needValidator: true,
                extend: saleInvoiceFormActionExtend
            },
            { name: 'FinanceSaleInvoiceRead' }
        ],
        extend: invoiceExtend
    }, invoiceAdditionalComponents);
    _ioc['default'].registerComponents('financeVatInvoice', {
        remoteModule: 'ssp-finance/vatInvoice',
        backendEntityName: 'taxInvoice',
        group: 'finance',
        actions: [
            {
                name: 'FinanceVatInvoiceForm',
                needValidator: true,
                extend: vatInvoiceFormActionExtend
            },
            { name: 'FinanceVatInvoiceRead' }
        ],
        extend: invoiceExtend
    });
    _controller['default'].registerAction(actions);
});
define('domainShield/config', [
    'require',
    'common/IoCActionFactory',
    'common/ioc',
    'er/controller'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var ioc = require('common/ioc');
    var actions = [
        {
            path: '/domainShield/list',
            type: new ActionFactory('domainShieldList'),
            title: '\u57DF\u540D\u5C4F\u853D\u8BBE\u7F6E - \u5217\u8868',
            args: { createURL: '/domainShield/create' }
        },
        {
            path: '/domainShield/create',
            type: new ActionFactory('domainShieldForm'),
            args: { formType: 'create' },
            title: '\u65B0\u5EFA\u57DF\u540D\u5C4F\u853D'
        },
        {
            path: '/domainShield/update',
            type: new ActionFactory('domainShieldForm'),
            args: { formType: 'update' },
            title: '\u4FEE\u6539\u57DF\u540D\u5C4F\u853D'
        }
    ];
    require('er/controller').registerAction(actions);
    ioc.registerComponents('domainShield', {
        backendEntityName: 'cooperation/rescue',
        actions: [
            { name: 'DomainShieldList' },
            {
                name: 'DomainShieldForm',
                needValidator: true
            }
        ],
        group: 'domainShield'
    });
});
define('ssp-optimize-expert/enum', [
    'exports',
    'er/Enum'
], function (exports, _erEnum) {
    Object.defineProperty(exports, '__esModule', { value: true });
    var _Enum = babelHelpers.interopRequireDefault(_erEnum);
    var OptimizeStatus = new _Enum['default']({
        alias: 'TO_OPTIMIZE',
        text: '\u5F85\u4F18\u5316',
        value: 1
    }, {
        alias: 'OPTIMIZING',
        text: '\u5B9E\u9A8C\u4E2D',
        value: 2
    }, {
        alias: 'OPTIMIZED',
        text: '\u5DF2\u5168\u91CF',
        value: 3
    }, {
        alias: 'DISCARD',
        text: '\u5E9F\u5F03',
        value: 4
    });
    exports.OptimizeStatus = OptimizeStatus;
});
define('ssp-optimize-expert/helper', [
    'exports',
    'moment',
    './enum'
], function (exports, _moment, _enum) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.mergeCompareData = mergeCompareData;
    exports.transformDefaultData = transformDefaultData;
    exports.getLatestWeek = getLatestWeek;
    exports.getDateRangeDescription = getDateRangeDescription;
    exports.getDateDescription = getDateDescription;
    exports.getPercentHTML = getPercentHTML;
    exports.getPercent = getPercent;
    exports.getCompareHTML = getCompareHTML;
    exports.getStatusHTML = getStatusHTML;
    exports.getMetricName = getMetricName;
    var _moment2 = babelHelpers.interopRequireDefault(_moment);
    function mergeCompareData(originData, optimizedData) {
        return {
            id: originData.improvementId,
            createdTime: originData.improvementTime,
            adPositionId: originData.adPositionId,
            adPositionName: originData.adPositionName,
            status: originData.status,
            time: +originData.time,
            income: [
                originData.income,
                optimizedData.income
            ],
            incomeIncrement: +optimizedData.income - +originData.income,
            ecpm: [
                originData.ecpm,
                optimizedData.ecpm
            ],
            ecpmIncrement: +optimizedData.ecpm - +originData.ecpm,
            cpc: [
                originData.cpc,
                optimizedData.cpc
            ],
            cpcIncrement: +optimizedData.cpc - +originData.cpc,
            click: [
                originData.click,
                optimizedData.click
            ],
            clickIncrement: optimizedData.click - originData.click
        };
    }
    function transformDefaultData(reportItem) {
        return babelHelpers._extends({}, reportItem, {
            ecpm: reportItem.ecpm || '0.00',
            cpc: reportItem.cpc || '0.00'
        });
    }
    function getLatestWeek() {
        var end = (0, _moment2['default'])().subtract(1, 'days');
        var begin = (0, _moment2['default'])(end).subtract(7, 'days');
        return {
            begin: begin,
            end: end
        };
    }
    var DAY_MAP = [
        '\u65E5',
        '\u4E00',
        '\u4E8C',
        '\u4E09',
        '\u56DB',
        '\u4E94',
        '\u516D'
    ];
    function getDateRangeDescription(begin, end) {
        return getDateDescription(begin) + ' ~ ' + getDateDescription(end);
    }
    function getDateDescription(date) {
        date = (0, _moment2['default'])(date);
        return date.format('YYYY-MM-DD \u5468') + DAY_MAP[date.weekday()];
    }
    function getPercentHTML(increment, origin) {
        var text = +origin === 0 ? '--' : (increment / origin * 100).toFixed(2) + '%';
        var cls = increment > 0 ? 'up-increment' : 'down-increment';
        if (!increment) {
            cls = '';
        }
        return '<p class="increment ' + cls + '">\u63D0\u5347\u7387\uFF1A' + text + '</p>';
    }
    function getPercent(increment, origin) {
        return +origin === 0 ? '--' : (increment / origin * 100).toFixed(2);
    }
    function getCompareHTML(_ref) {
        var _ref2 = babelHelpers.slicedToArray(_ref, 2);
        var origin = _ref2[0];
        var optimized = _ref2[1];
        return '\n        <p class="first-line"><span class="tip-label">\u4F18\u5316\u524D\uFF1A</span>' + origin + '</p>\n        <p><span class="tip-label">\u4F18\u5316\u540E\uFF1A</span>' + optimized + '</p>\n    ';
    }
    function getStatusHTML(status) {
        var alias = _enum.OptimizeStatus.getAliasFromValue(status).toLowerCase();
        var text = _enum.OptimizeStatus.getTextFromValue(status);
        return '<span class="status-' + alias + '">' + text + '</span>';
    }
    var METRICS = [
        {
            text: 'eCPM',
            value: 'ecpm'
        },
        {
            text: '\u6536\u5165',
            value: 'income'
        },
        {
            text: 'CPC',
            value: 'cpc'
        },
        {
            text: '\u70B9\u51FB\u91CF',
            value: 'click'
        }
    ];
    exports.METRICS = METRICS;
    function getMetricName(metric) {
        return METRICS.find(function (v) {
            return v.value === metric;
        }).text;
    }
});
define('ssp-optimize-expert/mvc/ExpertListView', [
    'exports',
    'module',
    'ub-ria/mvc/ListView',
    'esui/Table',
    'ssp-optimize-expert/enum',
    '../helper',
    'tpl!startup/template'
], function (exports, module, _ubRiaMvcListView, _esuiTable, _sspOptimizeExpertEnum, _helper, _tplTplExpertListTplHtml) {
    var _ListView2 = babelHelpers.interopRequireDefault(_ubRiaMvcListView);
    var _Table = babelHelpers.interopRequireDefault(_esuiTable);
    var ExportListView = function (_ListView) {
        babelHelpers.inherits(ExportListView, _ListView);
        function ExportListView() {
            babelHelpers.classCallCheck(this, ExportListView);
            babelHelpers.get(Object.getPrototypeOf(ExportListView.prototype), 'constructor', this).apply(this, arguments);
            this.template = 'sspExpertList';
        }
        babelHelpers.createClass(ExportListView, [
            {
                key: 'getRelationURL',
                value: function getRelationURL(_ref2) {
                    var id = _ref2.id;
                    var adInfo = _ref2.adInfo;
                    return {
                        slot: 'javascript:top.location.hash=\'#/cooperation/cpro/create~tuId=' + adInfo.id + '\'',
                        report: 'javascript:top.location.hash=\'#/expert/report~id=' + id + '\''
                    };
                }
            },
            {
                key: 'enterDocument',
                value: function enterDocument() {
                    babelHelpers.get(Object.getPrototypeOf(ExportListView.prototype), 'enterDocument', this).call(this);
                    var selected = this.model.get('id');
                    if (selected) {
                        this.get('table').setRowSelected([this.model.indexOf(selected)], true);
                    }
                }
            },
            {
                key: 'updateItems',
                value: function updateItems(items) {
                    babelHelpers.get(Object.getPrototypeOf(ExportListView.prototype), 'updateItems', this).call(this, items);
                    this.updateBatchButtonStatus();
                }
            },
            {
                key: 'getTableFields',
                value: function getTableFields() {
                    var _this = this;
                    return [
                        {
                            title: '\u4F18\u5316\u521B\u5EFA\u65F6\u95F4',
                            field: 'createdTime',
                            width: 100,
                            sortable: true,
                            content: function content(_ref3) {
                                var createdTime = _ref3.createdTime;
                                return (0, _helper.getDateDescription)(createdTime);
                            }
                        },
                        {
                            title: '\u5B9E\u9A8C\u7EC4id',
                            field: 'id',
                            width: 40,
                            content: 'id'
                        },
                        {
                            title: '\u4EE3\u7801\u4F4DID',
                            field: 'adInfo.id',
                            width: 100,
                            sortable: true,
                            content: function content(_ref4) {
                                var tu = _ref4.adInfo.tu;
                                return tu;
                            }
                        },
                        {
                            title: '\u4EE3\u7801\u4F4D\u540D\u79F0',
                            field: 'adInfo.name',
                            width: 200,
                            content: function content(_ref5) {
                                var name = _ref5.adInfo.name;
                                return name;
                            }
                        },
                        {
                            title: '\u4F18\u5316\u72B6\u6001',
                            sortable: true,
                            field: 'status',
                            width: 100,
                            stable: true,
                            content: function content(_ref6) {
                                var status = _ref6.status;
                                return (0, _helper.getStatusHTML)(status);
                            }
                        },
                        babelHelpers.defineProperty({
                            title: '\u64CD\u4F5C',
                            field: 'operation',
                            width: 170
                        }, 'content', function content(entity) {
                            var id = entity.id;
                            var status = entity.status;
                            var reportConfig = {
                                url: _this.getRelationURL(entity).report,
                                text: '\u67E5\u770B\u62A5\u544A'
                            };
                            switch (status) {
                            case _sspOptimizeExpertEnum.OptimizeStatus.TO_OPTIMIZE:
                                return _Table['default'].operations([{
                                        command: 'optimize',
                                        args: '' + id,
                                        text: '\u7ACB\u5373\u4F18\u5316',
                                        type: 'optimize'
                                    }]);
                            case _sspOptimizeExpertEnum.OptimizeStatus.OPTIMIZING:
                                return _Table['default'].operations([
                                    {
                                        command: 'unoptimize',
                                        args: '' + id,
                                        text: '\u53D6\u6D88\u4F18\u5316',
                                        type: 'un-optimize'
                                    },
                                    '|',
                                    reportConfig,
                                    '|',
                                    {
                                        command: 'optimized',
                                        args: '' + id,
                                        text: '\u5207\u6362\u5168\u91CF',
                                        type: 'optimized'
                                    }
                                ]);
                            case _sspOptimizeExpertEnum.OptimizeStatus.OPTIMIZED:
                                return _Table['default'].operations([reportConfig]);
                            default:
                                return _Table['default'].operations([{
                                        command: '--',
                                        args: '' + id,
                                        text: '--',
                                        type: '--'
                                    }]);
                            }
                        })
                    ];
                }
            }
        ]);
        return ExportListView;
    }(_ListView2['default']);
    module.exports = ExportListView;
});
define('ssp-optimize-expert/mvc/ExpertListModel', [
    'exports',
    'module',
    'ub-ria/mvc/ListModel',
    '../enum'
], function (exports, module, _ubRiaMvcListModel, _enum) {
    var _ListModel2 = babelHelpers.interopRequireDefault(_ubRiaMvcListModel);
    var ExpertListModel = function (_ListModel) {
        babelHelpers.inherits(ExpertListModel, _ListModel);
        function ExpertListModel(context) {
            babelHelpers.classCallCheck(this, ExpertListModel);
            babelHelpers.get(Object.getPrototypeOf(ExpertListModel.prototype), 'constructor', this).call(this, context);
            this.statusTransitions = [
                {
                    status: 1,
                    statusName: 'unoptimize',
                    reload: false,
                    command: '\u53D6\u6D88\u4F18\u5316'
                },
                {
                    status: 2,
                    statusName: 'optimize',
                    reload: false,
                    command: '\u4F18\u5316'
                },
                {
                    status: 3,
                    statusName: 'optimized',
                    reload: false,
                    command: '\u5207\u6362\u5168\u91CF'
                }
            ];
            this.fill({
                statuses: [{
                        text: '\u5168\u90E8',
                        value: ''
                    }].concat(babelHelpers.toConsumableArray(_enum.OptimizeStatus.toArray()))
            });
        }
        babelHelpers.createClass(ExpertListModel, [
            {
                key: 'search',
                value: function search(query) {
                    return this.data().search(query).then(function (res) {
                        return {
                            totalCount: res.totalCount,
                            results: res.result
                        };
                    });
                }
            },
            {
                key: 'canUpdateToStatus',
                value: function canUpdateToStatus(items, status) {
                    if (status === _enum.OptimizeStatus.OPTIMIZING) {
                        return items.some(function (item) {
                            return item.status === _enum.OptimizeStatus.TO_OPTIMIZE;
                        });
                    }
                    return babelHelpers.get(Object.getPrototypeOf(ExpertListModel.prototype), 'canUpdateToStatus', this).call(this, items, status);
                }
            },
            {
                key: 'getDefaultStatusValue',
                value: function getDefaultStatusValue() {
                    return '';
                }
            },
            {
                key: 'optimize',
                value: function optimize(ids) {
                    return this.updateStatus(_enum.OptimizeStatus.OPTIMIZING, ids);
                }
            },
            {
                key: 'unoptimize',
                value: function unoptimize(ids) {
                    return this.updateStatus(_enum.OptimizeStatus.TO_OPTIMIZE, ids);
                }
            },
            {
                key: 'optimized',
                value: function optimized(ids) {
                    return this.updateStatus(_enum.OptimizeStatus.OPTIMIZED, ids);
                }
            }
        ]);
        return ExpertListModel;
    }(_ListModel2['default']);
    module.exports = ExpertListModel;
});
define('ssp-optimize-expert/mvc/ExpertList', [
    'exports',
    'module',
    'ub-ria/mvc/ListAction',
    '../enum'
], function (exports, module, _ubRiaMvcListAction, _enum) {
    var _ListAction2 = babelHelpers.interopRequireDefault(_ubRiaMvcListAction);
    var ExpertList = function (_ListAction) {
        babelHelpers.inherits(ExpertList, _ListAction);
        function ExpertList() {
            babelHelpers.classCallCheck(this, ExpertList);
            babelHelpers.get(Object.getPrototypeOf(ExpertList.prototype), 'constructor', this).apply(this, arguments);
            this.entityDescription = '\u5F85\u4F18\u5316\u4EE3\u7801\u4F4D';
        }
        babelHelpers.createClass(ExpertList, [{
                key: 'modifyStatus',
                value: function modifyStatus(items, status) {
                    items = status === _enum.OptimizeStatus.OPTIMIZING ? items.filter(function (item) {
                        return item.status === _enum.OptimizeStatus.TO_OPTIMIZE;
                    }) : items;
                    return babelHelpers.get(Object.getPrototypeOf(ExpertList.prototype), 'modifyStatus', this).call(this, items, status);
                }
            }]);
        return ExpertList;
    }(_ListAction2['default']);
    module.exports = ExpertList;
});
define('ssp-optimize-expert/mvc/ExpertReportView', [
    'exports',
    'module',
    'ub-ria/mvc/BaseView',
    '../helper',
    'moment',
    '../enum',
    'tpl!startup/template',
    'ssp-report/ui/LineChart'
], function (exports, module, _ubRiaMvcBaseView, _helper, _moment, _enum, _tplTplExpertReportTplHtml, _sspReportUiLineChart) {
    var _BaseView2 = babelHelpers.interopRequireDefault(_ubRiaMvcBaseView);
    var _moment2 = babelHelpers.interopRequireDefault(_moment);
    var ExpertReportView = function (_BaseView) {
        babelHelpers.inherits(ExpertReportView, _BaseView);
        function ExpertReportView() {
            var _this = this;
            babelHelpers.classCallCheck(this, ExpertReportView);
            babelHelpers.get(Object.getPrototypeOf(ExpertReportView.prototype), 'constructor', this).apply(this, arguments);
            this.template = 'sspExpertReport';
            this.uiEvents = {
                'date-picker:change': function datePickerChange(e) {
                    return _this.fire('datechange', { value: e.target.getRawValue() });
                },
                'metrics:change': function metricsChange(e) {
                    return _this.get('chart').setProperties(_this.model.getChartData(e.target.getRawValue()));
                },
                pager: {
                    pagesizechange: 'updateTable',
                    pagechange: 'updateTable'
                },
                table: { sort: 'updateTable' },
                'switch-full:click': function switchFullClick(e) {
                    return _this.fire('switchtofull');
                }
            };
        }
        babelHelpers.createClass(ExpertReportView, [
            {
                key: 'getTableFields',
                value: function getTableFields() {
                    return [
                        {
                            title: '\u65F6\u95F4',
                            field: 'time',
                            sortable: true,
                            content: function content(_ref) {
                                var time = _ref.time;
                                time = time.toString();
                                time = time.substr(0, 4) + '-' + time.substr(4, 2) + '-' + time.substr(6, 2);
                                return (0, _moment2['default'])(time).format('YYYY-MM-DD ddd');
                            }
                        },
                        {
                            title: '\u6536\u5165',
                            content: function content(_ref2) {
                                var income = _ref2.income;
                                var incomeIncrement = _ref2.incomeIncrement;
                                return (0, _helper.getCompareHTML)(income) + (0, _helper.getPercentHTML)(incomeIncrement, income[0]);
                            }
                        },
                        {
                            title: 'eCPM',
                            content: function content(_ref3) {
                                var ecpm = _ref3.ecpm;
                                var ecpmIncrement = _ref3.ecpmIncrement;
                                return (0, _helper.getCompareHTML)(ecpm) + (0, _helper.getPercentHTML)(ecpmIncrement, ecpm[0]);
                            }
                        },
                        {
                            title: 'CPC',
                            content: function content(_ref4) {
                                var cpc = _ref4.cpc;
                                var cpcIncrement = _ref4.cpcIncrement;
                                return (0, _helper.getCompareHTML)(cpc) + (0, _helper.getPercentHTML)(cpcIncrement, cpc[0]);
                            }
                        },
                        {
                            title: '\u70B9\u51FB\u91CF',
                            content: function content(_ref5) {
                                var click = _ref5.click;
                                var clickIncrement = _ref5.clickIncrement;
                                return (0, _helper.getCompareHTML)(click) + (0, _helper.getPercentHTML)(clickIncrement, click[0]);
                            }
                        }
                    ];
                }
            },
            {
                key: 'getUIProperties',
                value: function getUIProperties() {
                    return babelHelpers._extends({}, babelHelpers.get(Object.getPrototypeOf(ExpertReportView.prototype), 'getUIProperties', this).call(this), {
                        table: { fields: this.getTableFields() },
                        chart: {
                            getTipTitleHtml: function getTipTitleHtml(options) {
                                if (options.isContrast) {
                                    return '';
                                }
                                return this.$self.prototype.getTipTitleHtml.call(this, options) + '<br>';
                            }
                        }
                    });
                }
            },
            {
                key: 'enterDocument',
                value: function enterDocument() {
                    babelHelpers.get(Object.getPrototypeOf(ExpertReportView.prototype), 'enterDocument', this).call(this);
                    this.refreshOperation();
                }
            },
            {
                key: 'updateTable',
                value: function updateTable() {
                    var pager = this.get('pager');
                    var table = this.get('table');
                    var data = this.model.searchListResults({
                        pageSize: pager.get('pageSize'),
                        page: pager.get('page'),
                        order: table.get('order'),
                        orderBy: table.get('orderBy')
                    });
                    table.set('datasource', data);
                }
            },
            {
                key: 'refreshOperation',
                value: function refreshOperation() {
                    if (this.model.get('status') === _enum.OptimizeStatus.OPTIMIZED) {
                        this.getGroup('switch-full').hide();
                        this.get('optimized').show();
                    } else {
                        this.getGroup('switch-full').show();
                        this.get('optimized').hide();
                    }
                }
            }
        ]);
        return ExpertReportView;
    }(_BaseView2['default']);
    module.exports = ExpertReportView;
});
define('ssp-optimize-expert/mvc/ExpertReportModel', [
    'exports',
    'module',
    'ub-ria/mvc/BaseModel',
    '../enum',
    'moment',
    '../helper'
], function (exports, module, _ubRiaMvcBaseModel, _enum, _moment, _helper) {
    var _BaseModel2 = babelHelpers.interopRequireDefault(_ubRiaMvcBaseModel);
    var _moment2 = babelHelpers.interopRequireDefault(_moment);
    var DATE_FORMAT = 'YYYYMMDD';
    var ENTITY = {
        retrieve: function retrieve(model) {
            var entity, status, end, begin, rangeEnd;
            return regeneratorRuntime.async(function retrieve$(context$1$0) {
                while (1)
                    switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.next = 2;
                        return regeneratorRuntime.awrap(model.data().findById(model.get('id')));
                    case 2:
                        entity = context$1$0.sent;
                        status = entity.status;
                        end = model.get('end');
                        begin = model.get('begin');
                        if (begin && end) {
                            begin = (0, _moment2['default'])(begin, DATE_FORMAT);
                            end = (0, _moment2['default'])(end, DATE_FORMAT);
                        } else {
                            end = status === _enum.OptimizeStatus.OPTIMIZING ? (0, _moment2['default'])().subtract(1, 'days') : (0, _moment2['default'])(entity.modifyToFullTime).subtract(1, 'days');
                            end = (0, _moment2['default'])(end);
                            if (end.isBefore(entity.exptStartTime)) {
                                end = (0, _moment2['default'])(entity.exptStartTime);
                            }
                            begin = (0, _moment2['default'])(end).subtract(7, 'days').isBefore((0, _moment2['default'])(entity.exptStartTime)) ? (0, _moment2['default'])(entity.exptStartTime) : (0, _moment2['default'])(end).subtract(7, 'days');
                        }
                        rangeEnd = status === _enum.OptimizeStatus.OPTIMIZING ? (0, _moment2['default'])().subtract(1, 'days') : (0, _moment2['default'])(entity.modifyToFullTime).subtract(1, 'days');
                        rangeEnd = (0, _moment2['default'])(rangeEnd);
                        if (rangeEnd.isBefore(end)) {
                            rangeEnd = end;
                        }
                        return context$1$0.abrupt('return', {
                            adPositionId: entity.adInfo.id,
                            name: entity.adInfo.name,
                            begin: begin.format(DATE_FORMAT),
                            end: end.format(DATE_FORMAT),
                            status: status,
                            date: {
                                begin: begin.toDate(),
                                end: end.toDate()
                            },
                            dateRange: {
                                begin: (0, _moment2['default'])((0, _moment2['default'])(entity.exptStartTime).format('YYYY-MM-DD')).toDate(),
                                end: rangeEnd.toDate()
                            },
                            dateDescription: (0, _helper.getDateRangeDescription)(begin, end),
                            expDate: status === _enum.OptimizeStatus.OPTIMIZING ? (0, _moment2['default'])(new Date()).diff((0, _moment2['default'])(entity.exptStartTime), 'days') : (0, _moment2['default'])(entity.modifyToFullTime).diff((0, _moment2['default'])(entity.exptStartTime), 'days')
                        });
                    case 11:
                    case 'end':
                        return context$1$0.stop();
                    }
            }, null, this);
        },
        dump: true
    };
    var RESULTS = {
        results: function results(model) {
            var status = model.get('status');
            if (!status) {
                return [];
            }
            return model.data().listImprovementReport(model.getQuery()).then(function (res) {
                return res.map(function (_ref) {
                    var _ref2 = babelHelpers.slicedToArray(_ref, 2);
                    var origin = _ref2[0];
                    var optimized = _ref2[1];
                    return [
                        (0, _helper.transformDefaultData)(origin),
                        (0, _helper.transformDefaultData)(optimized)
                    ];
                });
            });
        }
    };
    var OVERVIEW = {
        overview: function overview(model) {
            var status, NO_DATA, result;
            return regeneratorRuntime.async(function overview$(context$1$0) {
                while (1)
                    switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        status = model.get('status');
                        NO_DATA = {
                            ecpmIncrement: '--',
                            incomeIncrement: '--'
                        };
                        if (status) {
                            context$1$0.next = 4;
                            break;
                        }
                        return context$1$0.abrupt('return', NO_DATA);
                    case 4:
                        context$1$0.next = 6;
                        return regeneratorRuntime.awrap(model.data().listImprovementReport(model.getSumQuery()).then(function (res) {
                            return res.map(function (_ref3) {
                                var _ref32 = babelHelpers.slicedToArray(_ref3, 2);
                                var origin = _ref32[0];
                                var optimized = _ref32[1];
                                return [
                                    (0, _helper.transformDefaultData)(origin),
                                    (0, _helper.transformDefaultData)(optimized)
                                ];
                            });
                        }));
                    case 6:
                        result = context$1$0.sent;
                        if (result.length) {
                            context$1$0.next = 9;
                            break;
                        }
                        return context$1$0.abrupt('return', NO_DATA);
                    case 9:
                        return context$1$0.abrupt('return', {
                            ecpmIncrement: (0, _helper.getPercent)(result[0][1].ecpm - result[0][0].ecpm, result[0][0].ecpm),
                            incomeIncrement: (0, _helper.getPercent)(result[0][1].income - result[0][0].income, result[0][0].income)
                        });
                    case 10:
                    case 'end':
                        return context$1$0.stop();
                    }
            }, null, this);
        }
    };
    var ExpertReportModel = function (_BaseModel) {
        babelHelpers.inherits(ExpertReportModel, _BaseModel);
        function ExpertReportModel(context) {
            babelHelpers.classCallCheck(this, ExpertReportModel);
            babelHelpers.get(Object.getPrototypeOf(ExpertReportModel.prototype), 'constructor', this).call(this, context);
            this.fill({ metrics: _helper.METRICS });
            this.putDatasource(ENTITY, 0);
            this.putDatasource(RESULTS, 1);
            this.putDatasource(OVERVIEW, 1);
        }
        babelHelpers.createClass(ExpertReportModel, [
            {
                key: 'prepare',
                value: function prepare() {
                    babelHelpers.get(Object.getPrototypeOf(ExpertReportModel.prototype), 'prepare', this).call(this);
                    this.prepareProcessedResults();
                    this.prepareList();
                    this.set('chartData', this.getChartData('ecpm'));
                }
            },
            {
                key: 'getQuery',
                value: function getQuery() {
                    return {
                        timeGranularity: 'day',
                        metrics: 'click,ecpm,cpc,income',
                        filterFields: 'improvementId',
                        filterValues: this.get('id'),
                        start: this.get('begin'),
                        end: this.get('end'),
                        orderBy: this.get('orderBy') || 'time',
                        order: this.get('order') || 'desc'
                    };
                }
            },
            {
                key: 'getSumQuery',
                value: function getSumQuery() {
                    return {
                        timeGranularity: 'sum',
                        metrics: 'ecpm,income',
                        filterFields: 'improvementId',
                        filterValues: this.get('id'),
                        start: (0, _moment2['default'])(this.get('dateRange').begin).format(DATE_FORMAT),
                        end: (0, _moment2['default'])(this.get('dateRange').end).format(DATE_FORMAT)
                    };
                }
            },
            {
                key: 'getChartData',
                value: function getChartData(metric) {
                    var date = this.get('date');
                    var _get = this.get('processedResults');
                    var originData = _get.originData;
                    var optimizedData = _get.optimizedData;
                    return {
                        xSeries: getDateRange(date.begin, date.end, 'YYYY-MM-DD'),
                        ySeries: [
                            {
                                color: '#ff985d',
                                data: pickMetrics(originData, metric),
                                label: '\u539F\u6709\u914D\u7F6E' + (0, _helper.getMetricName)(metric)
                            },
                            {
                                color: '#6cb0fb',
                                data: pickMetrics(optimizedData, metric),
                                label: '\u667A\u80FD\u4F18\u5316\u914D\u7F6E' + (0, _helper.getMetricName)(metric)
                            }
                        ]
                    };
                }
            },
            {
                key: 'searchListResults',
                value: function searchListResults(_ref4) {
                    var page = _ref4.page;
                    var pageSize = _ref4.pageSize;
                    var order = _ref4.order;
                    var orderBy = _ref4.orderBy;
                    var data = this.get('mergedData').sort(function (a, b) {
                        return order === 'asc' ? a[orderBy] - b[orderBy] : b[orderBy] - a[orderBy];
                    });
                    return data.slice((page - 1) * pageSize, page * pageSize);
                }
            },
            {
                key: 'prepareProcessedResults',
                value: function prepareProcessedResults() {
                    var date = this.get('date');
                    var results = this.get('results');
                    var range = getDateRange(date.begin, date.end);
                    var _results$reduce = results.reduce(function (result, _ref5) {
                        var _ref52 = babelHelpers.slicedToArray(_ref5, 2);
                        var origin = _ref52[0];
                        var optimized = _ref52[1];
                        var index = range.indexOf(origin.time);
                        if (index > -1) {
                            result.originData[index] = origin;
                            result.optimizedData[index] = optimized;
                        }
                        result.mergedData.push((0, _helper.mergeCompareData)(origin, optimized));
                        return result;
                    }, {
                        originData: new Array(range.length),
                        optimizedData: new Array(range.length),
                        mergedData: []
                    });
                    var originData = _results$reduce.originData;
                    var optimizedData = _results$reduce.optimizedData;
                    var mergedData = _results$reduce.mergedData;
                    this.fill({
                        processedResults: {
                            originData: originData,
                            optimizedData: optimizedData
                        },
                        mergedData: mergedData
                    });
                }
            },
            {
                key: 'prepareList',
                value: function prepareList() {
                    var query = {
                        page: 1,
                        order: 'desc',
                        orderBy: 'time',
                        pageSize: this.get('pageSize') || 20
                    };
                    this.fill(babelHelpers._extends({
                        listResults: this.searchListResults(query),
                        totalCount: this.get('results').length
                    }, query));
                }
            },
            {
                key: 'switchToFull',
                value: function switchToFull() {
                    var _this = this;
                    return this.data().updateStatus(_enum.OptimizeStatus.OPTIMIZED, [this.get('id')]).then(function () {
                        return _this.set('status', _enum.OptimizeStatus.OPTIMIZED);
                    });
                }
            }
        ]);
        return ExpertReportModel;
    }(_BaseModel2['default']);
    module.exports = ExpertReportModel;
    function getDateRange(begin, end) {
        var format = arguments.length <= 2 || arguments[2] === undefined ? 'YYYYMMDD' : arguments[2];
        var range = [];
        begin = (0, _moment2['default'])(begin);
        end = (0, _moment2['default'])(end);
        while (begin.isBefore(end)) {
            range.push(begin.clone());
            begin.add('d', 1);
        }
        range.push(end.clone());
        return range.map(function (v) {
            return v.format(format);
        });
    }
    function pickMetrics(data, metric) {
        return data.reduce(function (results, current, index) {
            results[index] = current[metric];
            return results;
        }, new Array(data.length).fill(0));
    }
});
define('ssp-optimize-expert/mvc/ExpertReport', [
    'exports',
    'module',
    'ub-ria/mvc/BaseAction',
    'moment',
    'er/URL'
], function (exports, module, _ubRiaMvcBaseAction, _moment, _erURL) {
    var _BaseAction2 = babelHelpers.interopRequireDefault(_ubRiaMvcBaseAction);
    var _moment2 = babelHelpers.interopRequireDefault(_moment);
    var _URL = babelHelpers.interopRequireDefault(_erURL);
    var ExpertReport = function (_BaseAction) {
        babelHelpers.inherits(ExpertReport, _BaseAction);
        function ExpertReport() {
            babelHelpers.classCallCheck(this, ExpertReport);
            babelHelpers.get(Object.getPrototypeOf(ExpertReport.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(ExpertReport, [{
                key: 'initBehavior',
                value: function initBehavior() {
                    var _this = this;
                    babelHelpers.get(Object.getPrototypeOf(ExpertReport.prototype), 'initBehavior', this).call(this);
                    this.view.on('datechange', function (e) {
                        var url = _this.model.get('url');
                        var query = url.getQuery();
                        query.begin = (0, _moment2['default'])(e.value.begin).format('YYYYMMDD');
                        query.end = (0, _moment2['default'])(e.value.end).format('YYYYMMDD');
                        url = _URL['default'].withQuery(url.getPath(), query);
                        _this.redirect(url, { force: true });
                    });
                    this.view.on('switchtofull', function (e) {
                        var _context;
                        return _this.model.switchToFull().then((_context = _this.view).refreshOperation.bind(_context));
                    });
                }
            }]);
        return ExpertReport;
    }(_BaseAction2['default']);
    module.exports = ExpertReport;
});
define('expert/config', [
    'exports',
    'common/IoCActionFactory',
    'common/ioc',
    'er/controller',
    'ssp-optimize-expert/mvc/ExpertListView',
    'ssp-optimize-expert/mvc/ExpertListModel',
    'ssp-optimize-expert/mvc/ExpertList',
    'ssp-optimize-expert/mvc/ExpertReportView',
    'ssp-optimize-expert/mvc/ExpertReportModel',
    'ssp-optimize-expert/mvc/ExpertReport'
], function (exports, _commonIoCActionFactory, _commonIoc, _erController, _sspOptimizeExpertMvcExpertListView, _sspOptimizeExpertMvcExpertListModel, _sspOptimizeExpertMvcExpertList, _sspOptimizeExpertMvcExpertReportView, _sspOptimizeExpertMvcExpertReportModel, _sspOptimizeExpertMvcExpertReport) {
    var _ActionFactory = babelHelpers.interopRequireDefault(_commonIoCActionFactory);
    var _ioc = babelHelpers.interopRequireDefault(_commonIoc);
    var _controller = babelHelpers.interopRequireDefault(_erController);
    var actions = [
        {
            path: '/expert/list',
            type: new _ActionFactory['default']('expertList'),
            title: '\u4F18\u5316\u4E13\u5BB6 - \u5F85\u4F18\u5316\u5217\u8868'
        },
        {
            path: '/expert/report/total',
            type: new _ActionFactory['default']('expertTotalReport'),
            title: '\u4F18\u5316\u4E13\u5BB6 - \u6574\u4F53\u4F18\u5316\u62A5\u544A'
        },
        {
            path: '/expert/report',
            type: new _ActionFactory['default']('expertReport'),
            title: '\u4F18\u5316\u4E13\u5BB6 - \u4EE3\u7801\u4F4D\u4F18\u5316\u62A5\u544A'
        }
    ];
    _ioc['default'].addComponent({
        expertList: {
            module: 'expert/mvc/ExpertList',
            properties: {
                model: { $ref: 'expertListModel' },
                view: { $ref: 'expertListView' },
                layoutChangeNotifier: { $ref: 'layoutChangeNotifier' }
            }
        },
        expertListModel: {
            module: 'expert/mvc/ExpertListModel',
            auto: true,
            properties: {
                data: { $ref: 'expertData' },
                permission: { $ref: 'expertPermission' }
            }
        },
        expertListView: { module: 'ssp-optimize-expert/mvc/ExpertListView' },
        expertReport: {
            module: 'ssp-optimize-expert/mvc/ExpertReport',
            properties: {
                model: { $ref: 'expertReportModel' },
                view: { $ref: 'expertReportView' },
                layoutChangeNotifier: { $ref: 'layoutChangeNotifier' }
            }
        },
        expertReportModel: {
            module: 'ssp-optimize-expert/mvc/ExpertReportModel',
            auto: true,
            properties: {
                data: { $ref: 'expertData' },
                permission: { $ref: 'expertPermission' }
            }
        },
        expertReportView: { module: 'ssp-optimize-expert/mvc/ExpertReportView' },
        expertData: {
            module: 'expert/ExpertData',
            properties: {
                requestStrategy: {
                    $import: 'commonRequestStrategy',
                    args: [
                        'expert/improvements',
                        'expert/improvements'
                    ]
                }
            }
        },
        expertPermission: {
            module: 'expert/ExpertPermission',
            singleton: true
        }
    });
    _controller['default'].registerAction(actions);
});
define('domainUnlock/config', [
    'exports',
    'common/ioc',
    'common/IoCActionFactory',
    'er/controller'
], function (exports, _commonIoc, _commonIoCActionFactory, _erController) {
    var _ioc = babelHelpers.interopRequireDefault(_commonIoc);
    var _ActionFactory = babelHelpers.interopRequireDefault(_commonIoCActionFactory);
    var _controller = babelHelpers.interopRequireDefault(_erController);
    var actions = [{
            path: '/unlock/domain',
            type: new _ActionFactory['default']('domainUnlockForm'),
            title: '\u7533\u8BF7\u89E3\u5C01',
            args: { uploadURL: '/client/unanti/domainPhoto!upload.action' }
        }];
    _controller['default'].registerAction(actions);
    _ioc['default'].registerComponents('domainUnlock', {
        actions: [{ name: 'DomainUnlockForm' }],
        group: 'domainUnlock'
    });
});
define('channel/config', [
    'require',
    'common/IoCActionFactory',
    'common/ioc',
    'er/controller'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var ioc = require('common/ioc');
    var actions = [
        {
            path: '/channel/list',
            type: new ActionFactory('channelList'),
            title: '\u6E20\u9053\u5217\u8868',
            args: {
                createURL: '/channel/create',
                updateURL: '/channel/update'
            }
        },
        {
            path: '/channel/create',
            type: new ActionFactory('channelForm'),
            args: { formType: 'create' },
            title: '\u65B0\u5EFA\u6E20\u9053'
        },
        {
            path: '/channel/update',
            type: new ActionFactory('channelForm'),
            args: { formType: 'update' },
            title: ' \u4FEE\u6539\u6E20\u9053'
        }
    ];
    require('er/controller').registerAction(actions);
    ioc.registerComponents('channel', {
        backendEntityName: 'channel',
        actions: [
            { name: 'ChannelList' },
            {
                name: 'ChannelForm',
                needValidator: true,
                extend: { action: { properties: { submitHandler: { $ref: 'channelSubmitHandler' } } } }
            }
        ],
        group: 'channel'
    }, { channelSubmitHandler: { module: 'channel/handler/ChannelHandler' } });
});
define('batchCopyAd/config', [
    'require',
    'common/IoCActionFactory',
    'common/ioc',
    'er/controller'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var ioc = require('common/ioc');
    var actions = [{
            path: '/cooperation/cpro/copy/slotforms',
            type: new ActionFactory('copyAdSlotForm'),
            args: { formType: 'copy' },
            title: '\u6279\u91CF\u590D\u5236'
        }];
    require('er/controller').registerAction(actions);
    ioc.registerComponents('batchCopyAd', {
        backendEntityName: 'batchCopyAd',
        actions: [{
                name: 'CopyAdSlotForm',
                needValidator: true,
                extend: { action: { properties: { submitHandler: { $ref: 'CopyAdSlotSubmitHandler' } } } }
            }],
        group: 'batchCopyAd'
    }, { CopyAdSlotSubmitHandler: { module: 'batchCopyAd/handler/CopyAdSlotHandler' } });
});
define('cproMediaProtect/config', [
    'require',
    'common/IoCActionFactory',
    'common/ioc',
    'er/controller'
], function (require) {
    var ActionFactory = require('common/IoCActionFactory');
    var ioc = require('common/ioc');
    var actions = [{
            path: '/cooperation/cpro/set/Protect',
            type: new ActionFactory('cproMediaProtectSlotForm'),
            args: { formType: 'update' },
            title: '\u4EE3\u7801\u4F4D\u5A92\u4F53\u4FDD\u62A4'
        }];
    require('er/controller').registerAction(actions);
    ioc.registerComponents('cproMediaProtect', {
        backendEntityName: 'cooperation/protect',
        actions: [{
                name: 'CproMediaProtectSlotForm',
                needValidator: true,
                extend: { action: { properties: { submitHandler: { $ref: 'CproMediaProtectSubmitHandler' } } } }
            }],
        group: 'mediaProtect'
    }, { CproMediaProtectSubmitHandler: { module: 'cproMediaProtect/handler/CproMediaProtectHandler' } });
});
define('common/config', [
    'exports',
    'tpl!startup/template',
    'tpl!startup/template',
    'tpl!startup/template',
    'tpl!startup/template',
    'tpl!startup/template',
    'tpl!startup/template',
    'account/config',
    'media/config',
    'mediaProtect/config',
    'mediaProtectSet/config',
    'slot/config',
    'experiment/config',
    'credit/config',
    'creditExchange/config',
    'creditMall/config',
    'report/config',
    'finance/config',
    'domainShield/config',
    'expert/config',
    'domainUnlock/config',
    'channel/config',
    'batchCopyAd/config',
    'cproMediaProtect/config',
    'er-track',
    './adapt',
    'er/events',
    'er/controller'
], function (exports, _tplCommonTplCommonTplHtml, _tplCommonTplDetailTplHtml, _tplCommonTplListTplHtml, _tplCommonTplFormTplHtml, _tplCommonTplReadTplHtml, _tplCommonTplStaticListTplHtml, _accountConfig, _mediaConfig, _mediaProtectConfig, _mediaProtectSetConfig, _slotConfig, _experimentConfig, _creditConfig, _creditExchangeConfig, _creditMallConfig, _reportConfig, _financeConfig, _domainShieldConfig, _expertConfig, _domainUnlockConfig, _channelConfig, _batchCopyAdConfig, _cproMediaProtectConfig, _erTrack, _adapt, _erEvents) {
    var _trackFactory = babelHelpers.interopRequireDefault(_erTrack);
    var _adapt2 = babelHelpers.interopRequireDefault(_adapt);
    var _events = babelHelpers.interopRequireDefault(_erEvents);
    var track = _trackFactory['default'].create();
    track.includeAll();
    if (window.DEBUG) {
        track.use('console');
    }
    track.start();
    _events['default'].on('actionfail', function (e) {
        if (!e.isChildAction) {
            var controller = require('er/controller');
            controller.renderAction('/400');
        }
    });
    _events['default'].on('enteractionfail', function (e) {
        if (!e.isChildAction) {
            var controller = require('er/controller');
            var currentURL = controller.currentURL.toString();
            var failURL = e.url.toString();
            currentURL === failURL && controller.renderAction('/400');
        }
    });
    function resetOuterPage() {
        _adapt2['default'].resize();
        if (!_adapt2['default'].preventScrolltoTop) {
            _adapt2['default'].scrollTo({
                xpos: 0,
                ypos: 0
            });
        }
    }
    _events['default'].on('enteractioncomplete', resetOuterPage);
});
define('common/adapt/decorator', [
    'exports',
    'common/adapt',
    'esui/lib',
    '../util'
], function (exports, _commonAdapt, _esuiLib, _util) {
    Object.defineProperty(exports, '__esModule', { value: true });
    exports.FormViewHelper = FormViewHelper;
    exports.FormActionHelper = FormActionHelper;
    exports.ListActionHelper = ListActionHelper;
    exports.ListModelHelper = ListModelHelper;
    exports.DrawActionPanelHelper = DrawActionPanelHelper;
    exports.BaseViewHelper = BaseViewHelper;
    exports.ListViewHelper = ListViewHelper;
    var _adapt = babelHelpers.interopRequireDefault(_commonAdapt);
    var _lib = babelHelpers.interopRequireDefault(_esuiLib);
    var _u = babelHelpers.interopRequireDefault(_util);
    function FormViewHelper(target) {
        function onDrawActionPanelClose(target) {
            var currentPanel = this.main;
            var actionPanels = document.getElementsByTagName('esui-drawer-action-panel');
            for (var i = actionPanels.length - 1; i >= 0; i--) {
                if (actionPanels[i] !== currentPanel) {
                    actionPanels[i].style.display = '';
                }
            }
        }
        function onDrawActionPanelShow(target) {
            var currentPanel = this.main;
            var actionPanels = document.getElementsByTagName('esui-drawer-action-panel');
            for (var i = actionPanels.length - 1; i >= 0; i--) {
                if (actionPanels[i] !== currentPanel) {
                    actionPanels[i].style.display = 'none';
                }
            }
        }
        return function (_target) {
            babelHelpers.inherits(_class, _target);
            function _class() {
                babelHelpers.classCallCheck(this, _class);
                babelHelpers.get(Object.getPrototypeOf(_class.prototype), 'constructor', this).apply(this, arguments);
            }
            babelHelpers.createClass(_class, [
                {
                    key: 'notifyGlobalError',
                    value: function notifyGlobalError(error) {
                        babelHelpers.get(Object.getPrototypeOf(_class.prototype), 'notifyGlobalError', this).apply(this, arguments);
                        if (!this.get('global-error') && error) {
                            this.alert({
                                title: '\u63D0\u793A\u4FE1\u606F',
                                content: error
                            });
                        }
                    }
                },
                {
                    key: 'popDrawerAction',
                    value: function popDrawerAction(options, targetId) {
                        var drawerActionPanel = babelHelpers.get(Object.getPrototypeOf(_class.prototype), 'popDrawerAction', this).apply(this, arguments);
                        drawerActionPanel.on('panelHide', onDrawActionPanelClose, drawerActionPanel);
                        drawerActionPanel.on('panelShow', onDrawActionPanelShow, drawerActionPanel);
                        return drawerActionPanel;
                    }
                }
            ]);
            return _class;
        }(target);
    }
    ;
    function FormActionHelper(target) {
        return function (_target2) {
            babelHelpers.inherits(_class2, _target2);
            function _class2() {
                babelHelpers.classCallCheck(this, _class2);
                babelHelpers.get(Object.getPrototypeOf(_class2.prototype), 'constructor', this).apply(this, arguments);
            }
            babelHelpers.createClass(_class2, [{
                    key: 'handleSubmitError',
                    value: function handleSubmitError() {
                        var errors = babelHelpers.get(Object.getPrototypeOf(_class2.prototype), 'handleSubmitError', this).apply(this, arguments);
                        _adapt['default'].resize();
                        return errors;
                    }
                }]);
            return _class2;
        }(target);
    }
    function ListActionHelper(target) {
        return function (_target3) {
            babelHelpers.inherits(_class3, _target3);
            function _class3() {
                babelHelpers.classCallCheck(this, _class3);
                babelHelpers.get(Object.getPrototypeOf(_class3.prototype), 'constructor', this).apply(this, arguments);
            }
            babelHelpers.createClass(_class3, [{
                    key: 'notifyModifyFail',
                    value: function notifyModifyFail(context, errors) {
                        if (errors && errors.message) {
                            this.view.alert(errors.message);
                            return;
                        }
                        babelHelpers.get(Object.getPrototypeOf(_class3.prototype), 'notifyModifyFail', this).apply(this, arguments);
                    }
                }]);
            return _class3;
        }(target);
    }
    function ListModelHelper(target) {
        var PAGE_SIZE_DATASOURCE = {
            pageSize: function pageSize(model) {
                var globalData = model.data('global');
                var pageSize = model.get('pageSize');
                return pageSize ? pageSize : globalData.getUser().thenGetProperty('pageSize');
            }
        };
        return function (_target4) {
            babelHelpers.inherits(_class4, _target4);
            function _class4() {
                babelHelpers.classCallCheck(this, _class4);
                babelHelpers.get(Object.getPrototypeOf(_class4.prototype), 'constructor', this).apply(this, arguments);
                var datasource = this.getDatasource();
                datasource[0] && datasource[0].pageSize && delete datasource[0].pageSize;
                datasource.unshift(PAGE_SIZE_DATASOURCE);
            }
            babelHelpers.createClass(_class4, [{
                    key: 'getQuery',
                    value: function getQuery() {
                        var query = babelHelpers.get(Object.getPrototypeOf(_class4.prototype), 'getQuery', this).apply(this, arguments);
                        query.pageSize = this.get('pageSize') || 20;
                        return query;
                    }
                }]);
            return _class4;
        }(target);
    }
    function DrawActionPanelHelper(target) {
        function onDrawActionPanelClose() {
            _lib['default'].removeClass(document.getElementById('page-container'), 'page-container-hide');
            _adapt['default'].resize();
        }
        function onDrawActionPanelShow() {
            document.body.style.overflowY = '';
            _lib['default'].addClass(document.getElementById('page-container'), 'page-container-hide');
        }
        return function (_target5) {
            babelHelpers.inherits(_class5, _target5);
            function _class5() {
                babelHelpers.classCallCheck(this, _class5);
                babelHelpers.get(Object.getPrototypeOf(_class5.prototype), 'constructor', this).apply(this, arguments);
            }
            babelHelpers.createClass(_class5, [{
                    key: 'popDrawerAction',
                    value: function popDrawerAction() {
                        var drawerActionPanel = babelHelpers.get(Object.getPrototypeOf(_class5.prototype), 'popDrawerAction', this).apply(this, arguments);
                        drawerActionPanel.on('panelHide', onDrawActionPanelClose);
                        drawerActionPanel.on('panelShow', onDrawActionPanelShow);
                        return drawerActionPanel;
                    }
                }]);
            return _class5;
        }(target);
    }
    function BaseViewHelper(target) {
        return function (_target6) {
            babelHelpers.inherits(_class6, _target6);
            function _class6() {
                babelHelpers.classCallCheck(this, _class6);
                babelHelpers.get(Object.getPrototypeOf(_class6.prototype), 'constructor', this).apply(this, arguments);
            }
            babelHelpers.createClass(_class6, [
                {
                    key: 'waitConfirm',
                    value: function waitConfirm(options) {
                        return _adapt['default'].confirm(options);
                    }
                },
                {
                    key: 'alert',
                    value: function alert(content, title) {
                        var options = typeof content === 'string' ? {
                            title: title || document.title,
                            content: content
                        } : _u['default'].clone(content);
                        return _adapt['default'].alert(options);
                    }
                }
            ]);
            return _class6;
        }(target);
    }
    function ListViewHelper(target) {
        var BaseView = function (_target7) {
            babelHelpers.inherits(BaseView, _target7);
            function BaseView() {
                babelHelpers.classCallCheck(this, _BaseView);
                babelHelpers.get(Object.getPrototypeOf(_BaseView.prototype), 'constructor', this).apply(this, arguments);
            }
            var _BaseView = BaseView;
            BaseView = DrawActionPanelHelper(BaseView) || BaseView;
            return BaseView;
        }(target);
        return function (_BaseView2) {
            babelHelpers.inherits(_class7, _BaseView2);
            function _class7() {
                babelHelpers.classCallCheck(this, _class7);
                babelHelpers.get(Object.getPrototypeOf(_class7.prototype), 'constructor', this).apply(this, arguments);
            }
            babelHelpers.createClass(_class7, [
                {
                    key: 'waitConfirm',
                    value: function waitConfirm(options) {
                        return _adapt['default'].confirm(options);
                    }
                },
                {
                    key: 'alert',
                    value: function alert(content, title) {
                        var options = typeof content === 'string' ? {
                            title: title || document.title,
                            content: content
                        } : _u['default'].clone(content);
                        return _adapt['default'].alert(options);
                    }
                }
            ]);
            return _class7;
        }(BaseView);
    }
});
define('common/adapt/UnionRequestStrategy', [
    'require',
    'common/util',
    'eoo',
    'common/RequestStrategy'
], function (require) {
    var u = require('common/util');
    var DEFAULT_URL_PREFIX = '/client';
    var proto = {};
    proto.formatURL = function (url, options) {
        url = url.replace(/\$entity/g, this.getBackendEntityName());
        var urlPrefix = options.urlPrefix || DEFAULT_URL_PREFIX;
        if (url.indexOf(urlPrefix) !== 0) {
            url = urlPrefix + url;
        }
        return url;
    };
    proto.formatOptions = function (options) {
        if (!options.dataType) {
            options.dataType = 'json';
        }
        if (options.method.toUpperCase() === 'POST' && !options.contentType) {
            options.contentType = 'application/x-www-form-urlencoded';
            if (options.data) {
                u.postParamArrayProcess(options.data);
            }
        }
        return options;
    };
    return require('eoo').create(require('common/RequestStrategy'), proto);
});
define('common/adapt/UnionListView', [
    'require',
    'ub-ria/mvc/ListView',
    'eoo',
    './ListViewHelper'
], function (require) {
    var ListView = require('ub-ria/mvc/ListView');
    return require('eoo').create(ListView, require('./ListViewHelper'));
});
define('common/adapt/UnionListModel', [
    'require',
    'ub-ria/mvc/ListModel',
    'eoo',
    './ListModelHelper'
], function (require) {
    var ListModel = require('ub-ria/mvc/ListModel');
    return require('eoo').create(ListModel, require('./ListModelHelper'));
});
define('common/adapt/UnionListAction', [
    'require',
    './ListActionHelper',
    'eoo',
    'ub-ria/mvc/ListAction'
], function (require) {
    var ListActionHelper = require('./ListActionHelper');
    return require('eoo').create(require('ub-ria/mvc/ListAction'), ListActionHelper);
});
define('common/adapt/UnionFormView', [
    'require',
    'ub-ria/mvc/FormView',
    'eoo',
    './FormViewHelper'
], function (require) {
    var FormView = require('ub-ria/mvc/FormView');
    return require('eoo').create(FormView, require('./FormViewHelper'));
});
define('common/adapt/UnionFormAction', [
    'require',
    'ub-ria/mvc/FormAction',
    '../util',
    'eoo',
    './FormActionHelper'
], function (require) {
    var FormAction = require('ub-ria/mvc/FormAction');
    var u = require('../util');
    var exports = {};
    exports.cleanFormValidState = function () {
        this.view.clearGlobalError();
        var form = this.view.get('form');
        var inputs = form.getInputControls();
        u.map(inputs, function (input) {
            clean.bind(input)();
        });
        function clean() {
            if (this.validity) {
                this.removeState('validity-' + this.validity.getValidState());
                var label = this.getValidityLabel(true);
                label.set('validity', null);
                this.validity = null;
            }
        }
    };
    var BaseFormAction = require('eoo').create(FormAction, require('./FormActionHelper'));
    return require('eoo').create(BaseFormAction, exports);
});
define('common/adapt/UnionBaseView', [
    'require',
    'ub-ria/mvc/BaseView',
    'eoo',
    './BaseViewHelper'
], function (require) {
    var BaseView = require('ub-ria/mvc/BaseView');
    return require('eoo').create(BaseView, require('./BaseViewHelper'));
});
define('common/adapt/UnionBaseAction', [
    'require',
    'ub-ria/mvc/BaseAction',
    'eoo',
    './BaseActionHelper'
], function (require) {
    var BaseAction = require('ub-ria/mvc/BaseAction');
    return require('eoo').create(BaseAction, require('./BaseActionHelper'));
});
define('common/adapt/ListViewHelper', [
    'require',
    'common/adapt',
    'ub-ria/util',
    './BaseViewHelper',
    './DrawerPanelHelper'
], function (require) {
    var adapt = require('common/adapt');
    var u = require('ub-ria/util');
    var exports = require('ub-ria/util').extend({}, require('./BaseViewHelper'));
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = {
            'filter-switch:click': resizeFrame,
            'filter-cancel:click': resizeFrame,
            'filter-modify:click': resizeFrame
        };
        this.addUIEvents(uiEvents);
    };
    function resizeFrame() {
        adapt.resize();
    }
    exports.getSearchArgs = function () {
        var args = this.$super(arguments);
        args.pageSize = this.getSafely('pager').get('pageSize');
        return args;
    };
    u.extend(exports, require('./DrawerPanelHelper'));
    return exports;
});
define('common/adapt/ListModelHelper', ['require'], function (require) {
    var exports = {};
    var PAGE_SIZE_DATASOURCE = {
        pageSize: function (model) {
            var globalData = model.data('global');
            var pageSize = model.get('pageSize');
            return pageSize ? pageSize : globalData.getUser().thenGetProperty('pageSize');
        }
    };
    exports.constructor = function () {
        this.$super(arguments);
        var datasource = this.getDatasource();
        datasource[0] && datasource[0].pageSize && delete datasource[0].pageSize;
        datasource.unshift(PAGE_SIZE_DATASOURCE);
    };
    exports.getQuery = function () {
        var query = this.$super(arguments);
        query.pageSize = this.get('pageSize') || 20;
        return query;
    };
    return exports;
});
define('common/adapt/ListActionHelper', ['require'], function (require) {
    var exports = {};
    exports.notifyModifyFail = function (context, errors) {
        if (errors && errors.message) {
            this.view.alert(errors.message);
            return;
        }
        this.$super(arguments);
    };
    return exports;
});
define('common/adapt/FormViewHelper', [
    'require',
    'ub-ria/util',
    './BaseViewHelper'
], function (require) {
    var exports = require('ub-ria/util').extend({}, require('./BaseViewHelper'));
    exports.notifyGlobalError = function (error) {
        this.$super(arguments);
        if (!this.get('global-error') && error) {
            this.alert({
                title: '\u63D0\u793A\u4FE1\u606F',
                content: error
            });
        }
    };
    exports.popDrawerAction = function (options, targetId) {
        var drawerActionPanel = this.$super(arguments);
        drawerActionPanel.on('panelHide', onDrawActionPanelClose, drawerActionPanel);
        drawerActionPanel.on('panelShow', onDrawActionPanelShow, drawerActionPanel);
        return drawerActionPanel;
    };
    function onDrawActionPanelClose(target) {
        var currentPanel = this.main;
        var actionPanels = document.getElementsByTagName('esui-drawer-action-panel');
        for (var i = actionPanels.length - 1; i >= 0; i--) {
            if (actionPanels[i] !== currentPanel) {
                actionPanels[i].style.display = '';
            }
        }
    }
    function onDrawActionPanelShow(target) {
        var currentPanel = this.main;
        var actionPanels = document.getElementsByTagName('esui-drawer-action-panel');
        for (var i = actionPanels.length - 1; i >= 0; i--) {
            if (actionPanels[i] !== currentPanel) {
                actionPanels[i].style.display = 'none';
            }
        }
    }
    return exports;
});
define('common/adapt/FormActionHelper', [
    'require',
    'common/adapt'
], function (require) {
    var adapt = require('common/adapt');
    var exports = {};
    exports.handleSubmitError = function () {
        var errors = this.$super(arguments);
        adapt.resize();
        return errors;
    };
    exports.postCustomMessage = adapt.postCustomMessage;
    return exports;
});
define('common/adapt/DrawerPanelHelper', [
    'require',
    'esui/lib',
    'common/adapt'
], function (require) {
    var lib = require('esui/lib');
    var adapt = require('common/adapt');
    var exports = {};
    exports.popDrawerAction = function () {
        var drawerActionPanel = this.$super(arguments);
        drawerActionPanel.on('panelHide', onDrawActionPanelClose);
        drawerActionPanel.on('panelShow', onDrawActionPanelShow);
        return drawerActionPanel;
    };
    function onDrawActionPanelClose() {
        lib.removeClass(document.getElementById('page-container'), 'page-container-hide');
        adapt.resize();
    }
    function onDrawActionPanelShow() {
        document.body.style.overflowY = '';
        lib.addClass(document.getElementById('page-container'), 'page-container-hide');
    }
    return exports;
});
define('common/adapt/BaseViewHelper', [
    'require',
    'common/adapt',
    'ub-ria/util'
], function (require) {
    var adapt = require('common/adapt');
    var u = require('ub-ria/util');
    var exports = {};
    exports.waitConfirm = function (options) {
        return adapt.confirm(options);
    };
    exports.alert = function (content, title) {
        var options = typeof content === 'string' ? {
            title: title || document.title,
            content: content
        } : u.clone(content);
        return adapt.alert(options);
    };
    return exports;
});
define('common/adapt/BaseActionHelper', [
    'require',
    'common/adapt'
], function (require) {
    var adapt = require('common/adapt');
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        this.on('entercomplete', this.resetOuterPage);
        this.on('leave', this.resetOuterPage);
    };
    exports.resetOuterPage = function () {
        var ignore = this.model.get('ignoreReset');
        adapt.resize();
        !ignore && adapt.scrollTo({
            xpos: 0,
            ypos: 0
        });
    };
    exports.postCustomMessage = adapt.postCustomMessage;
    exports.registerMessageOperation = adapt.registerMessageOperation;
    return exports;
});
define('common/Session', [
    'require',
    'eoo'
], function (require) {
    var exports = {};
    exports.constructor = function () {
        this.session = {};
    };
    exports.get = function (key) {
        var result = this.session[key];
        if (!result) {
            return undefined;
        }
        if (result.once) {
            this.remove(key);
        }
        return result.value;
    };
    exports.set = function (key, value) {
        this.session[key] = { value: value };
    };
    exports.once = function (key, value) {
        this.session[key] = {
            value: value,
            once: true
        };
    };
    exports.remove = function (key) {
        var result = this.session[key];
        this.session[key] = null;
        return !!result;
    };
    var Session = require('eoo').create(exports);
    return Session;
});
define('common/RequestStrategy', [
    'require',
    'common/util',
    'eoo',
    'ub-ria/mvc/RequestStrategy'
], function (require) {
    var DEFAULT_URL_PREFIX = '/client';
    var u = require('common/util');
    var proto = {};
    proto.constructor = function (entityName, backendEntityName) {
        this.setEntityName(entityName);
        this.setBackendEntityName(backendEntityName);
    };
    proto.getEntityName = function () {
        return this.entityName || '';
    };
    proto.setEntityName = function (entityName) {
        this.entityName = entityName;
    };
    proto.getBackendEntityName = function () {
        return this.backendEntityName || this.getEntityName();
    };
    proto.setBackendEntityName = function (backendEntityName) {
        this.backendEntityName = backendEntityName;
    };
    proto.formatName = function (name) {
        return name.replace(/\$entity/g, this.getEntityName());
    };
    proto.formatURL = function (url, options) {
        url = url.replace(/\$entity/g, u.pluralize(this.getBackendEntityName()));
        var urlPrefix = options.urlPrefix || DEFAULT_URL_PREFIX;
        if (url.indexOf(urlPrefix) !== 0) {
            url = urlPrefix + url;
        }
        return url;
    };
    proto.formatOptions = function (options) {
        if (!options.dataType) {
            options.dataType = 'json';
        }
        if (options.method.toUpperCase() !== 'GET' && !options.contentType) {
            options.contentType = 'json';
        }
        return options;
    };
    var RequestStrategy = require('eoo').create(require('ub-ria/mvc/RequestStrategy'), proto);
    return RequestStrategy;
});
define('common/Main', [
    'require',
    './util',
    './ioc',
    'promise',
    'common/adapt',
    'eoo'
], function (require) {
    var u = require('./util');
    var exports = {};
    exports.initializeApplication = function () {
        var startSystem = function (config, ria, extension) {
            config.indexURL = this.getIndexURL();
            ria.start();
        };
        var startupModules = [
            'erConfig',
            'ria',
            'systemConfig'
        ];
        require('./ioc').getComponent(startupModules, u.bind(startSystem, this));
    };
    exports.getIndexURL = function () {
        return '/';
    };
    exports.enableIndicator = function () {
        this.getIndicator().enable();
        return require('promise').resolve();
    };
    exports.overrideControlDefaults = function () {
        var modules = [
            'esui',
            'ub-ria/ui/extension/OverrideDefaults'
        ];
        var registerGlobalExtension = function (modules) {
            var ui = modules[0];
            var defaults = this.getControlDefaults();
            ui.attachExtension('OverrideDefaults', { overrides: defaults });
        };
        return require('promise').require(modules).thenBind(registerGlobalExtension, this);
    };
    exports.enableCustomValidator = function () {
        var validators = [
            'ui/validator/OrientUrlRule',
            'ui/validator/CompareRule',
            'ui/validator/PasswordRule'
        ];
        return require('promise').require(validators);
    };
    exports.start = function () {
        this.enableIndicator().thenBind(this.enableCustomValidator, this).thenBind(this.overrideControlDefaults, this).thenBind(this.initializeApplication, this).then(addLinkListener);
    };
    function addLinkListener() {
        var doc = document.body;
        if (doc.addEventListener) {
            doc.addEventListener('click', linkHack, false);
        } else {
            doc.attachEvent('onclick', linkHack);
        }
    }
    function linkHack(e) {
        var adapt = require('common/adapt');
        e = e || window.event;
        var target = e.target || e.srcElement;
        if (target.nodeName.toLowerCase() !== 'a') {
            return;
        }
        var linkTarget = target.getAttribute('target');
        if (linkTarget && linkTarget === '_outerparent') {
            var href = target.getAttribute('href', 2) || '';
            adapt.open(href, '_self');
            e.preventDefault();
        }
    }
    var oo = require('eoo');
    oo.defineAccessor(exports, 'globalData');
    oo.defineAccessor(exports, 'ajax');
    oo.defineAccessor(exports, 'indicator');
    oo.defineAccessor(exports, 'controlDefaults');
    var Register = oo.create(exports);
    return Register;
});
define('common/LayoutChangeNotifier', [
    'require',
    'common/util',
    'mini-event/EventTarget',
    'eoo'
], function (require) {
    var u = require('common/util');
    var exports = {};
    exports.addComponentListener = function (component) {
        component.on('layoutchanged', u.bind(this.fire, this));
    };
    exports.removeComponentListener = function (component) {
        component.un('layoutchanged', u.bind(this.fire, this));
    };
    var EventTarget = require('mini-event/EventTarget');
    var LayoutChangeNotifier = require('eoo').create(EventTarget, exports);
    return LayoutChangeNotifier;
});
define('common/IoCActionFactory', [
    'exports',
    'module',
    'common/ioc',
    'ub-ria/mvc/IoCActionFactory'
], function (exports, module, _commonIoc, _ubRiaMvcIoCActionFactory) {
    var _ioc = babelHelpers.interopRequireDefault(_commonIoc);
    var _RIAIoCActionFactory2 = babelHelpers.interopRequireDefault(_ubRiaMvcIoCActionFactory);
    var IoCActionFactory = function (_RIAIoCActionFactory) {
        babelHelpers.inherits(IoCActionFactory, _RIAIoCActionFactory);
        function IoCActionFactory(actionComponents, options) {
            babelHelpers.classCallCheck(this, IoCActionFactory);
            babelHelpers.get(Object.getPrototypeOf(IoCActionFactory.prototype), 'constructor', this).call(this, actionComponents, options);
            this.setIocContainer(_ioc['default']);
        }
        return IoCActionFactory;
    }(_RIAIoCActionFactory2['default']);
    module.exports = IoCActionFactory;
});
define('common/Indicator', [
    'exports',
    'module',
    'eoo',
    'common/adapt'
], function (exports, module, _eoo, _commonAdapt) {
    var _oo = babelHelpers.interopRequireDefault(_eoo);
    var _adapt = babelHelpers.interopRequireDefault(_commonAdapt);
    var SHOW = Symbol('show');
    var HIDE = Symbol('hide');
    var Indicator = function () {
        function Indicator() {
            babelHelpers.classCallCheck(this, Indicator);
        }
        babelHelpers.createClass(Indicator, [
            {
                key: 'enable',
                value: function enable() {
                    var _this = this;
                    var events = this.getEventBus();
                    events.on('forwardaction', function (e) {
                        !e.isChildAction && _this[SHOW]();
                    });
                    events.on('enteractioncomplete', function (e) {
                        !e.isChildAction && _this[HIDE]();
                    });
                    events.on('enteractionfail', function (e) {
                        !e.isChildAction && _this[HIDE]();
                    });
                }
            },
            {
                key: SHOW,
                value: function value() {
                    _adapt['default'].loading();
                }
            },
            {
                key: HIDE,
                value: function value() {
                    _adapt['default'].hideLoading();
                }
            }
        ]);
        return Indicator;
    }();
    module.exports = Indicator;
    _oo['default'].defineAccessor(Indicator.prototype, 'eventBus');
    _oo['default'].defineAccessor(Indicator.prototype, 'layerElement');
});
define('common/Lazy', [
    'exports',
    'module',
    'promise'
], function (exports, module, _promise) {
    var _Promise = babelHelpers.interopRequireDefault(_promise);
    var FETCH_RESULT = Symbol('fetchResult');
    var FETCH = Symbol('fetch');
    var Lazy = function () {
        function Lazy(fetch) {
            babelHelpers.classCallCheck(this, Lazy);
            this[FETCH] = fetch;
        }
        babelHelpers.createClass(Lazy, [
            {
                key: 'value',
                value: function value() {
                    if (this[FETCH_RESULT]) {
                        return _Promise['default'].resolve(this[FETCH_RESULT]);
                    }
                    this[FETCH_RESULT] = this[FETCH]().thenBind(this.cacheResult, this);
                    return this[FETCH_RESULT];
                }
            },
            {
                key: 'expire',
                value: function expire() {
                    this[FETCH_RESULT] = null;
                }
            },
            {
                key: 'reload',
                value: function reload() {
                    this.expire();
                    return this.value();
                }
            },
            {
                key: 'cacheResult',
                value: function cacheResult(result) {
                    this[FETCH_RESULT] = result;
                    return this[FETCH_RESULT];
                }
            }
        ]);
        return Lazy;
    }();
    module.exports = Lazy;
});
define('common/GlobalData', [
    'require',
    './util',
    './Lazy',
    'er/permission',
    'ub-ria/mvc/RequestManager',
    'eoo'
], function (require) {
    var u = require('./util');
    var Lazy = require('./Lazy');
    var store = window.localStorage;
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        this.user = new Lazy(u.bind(this.loadUser, this));
    };
    function setProperty(propertyName, propertyValue, target) {
        target[propertyName] = propertyValue;
        return propertyValue;
    }
    function initPermission(data) {
        var user = data.data.customerInfo;
        var permission = require('er/permission');
        u.each(user.authorities, function (permissionName) {
            var item = {};
            item[permissionName] = true;
            permission.add(item);
        });
        try {
            var pageSize = store.getItem('union.pageSize');
            user.pageSize = pageSize || 20;
        } catch (erro) {
            user.pageSize = 20;
        }
        return user;
    }
    exports.loadUser = function () {
        var loading = this.request('global/user', null, {
            method: 'GET',
            url: '/account/overview/initAccount.action',
            urlPrefix: '/client'
        });
        return loading.then(initPermission);
    };
    exports.cnList = function () {
        var loading = this.request('global/cnList', null, {
            url: '/main/cooperation/cpro!cnList.action',
            urlPrefix: '/client',
            method: 'GET'
        });
        return loading.then(function (result) {
            return result.data.cnList;
        });
    };
    exports.updatePageSize = function (pageSize) {
        try {
            store.setItem('union.pageSize', pageSize);
        } catch (erro) {
        }
        return this.setUserProperty('pageSize', pageSize);
    };
    exports.getUser = function () {
        return this.user.value();
    };
    exports.getMember = function () {
        return this.user.value();
    };
    exports.getUserProperty = function (propertyName) {
        return this.getUser().thenGetProperty(propertyName);
    };
    exports.setUserProperty = function (propertyName, value) {
        return this.getUser().then(u.partial(setProperty, propertyName, value));
    };
    exports.getPageSize = function () {
        return this.getUserProperty('pageSize').then(function (pageSize) {
            return pageSize || 20;
        });
    };
    exports.dispose = function () {
    };
    var RequestManager = require('ub-ria/mvc/RequestManager');
    var GlobalData = require('eoo').create(RequestManager, exports);
    var requests = {
        loadUser: {
            name: 'global/user',
            scope: 'global',
            policy: 'abort'
        },
        cnList: {
            name: 'global/cnList',
            scope: 'global',
            policy: 'auto'
        }
    };
    u.each(requests, function (config) {
        var RequestManager = require('ub-ria/mvc/RequestManager');
        RequestManager.register(GlobalData, config.name, config);
    });
    return GlobalData;
});
define('common/ioc', [
    'require',
    'common/util',
    'uioc'
], function (require) {
    var u = require('common/util');
    var IoC = require('uioc');
    var ioc = new IoC();
    var globalComponents = {
        ajax: {
            module: 'common/Ajax',
            scope: 'singleton'
        },
        globalData: {
            module: 'common/GlobalData',
            scope: 'singleton',
            properties: {
                requestStrategy: { $ref: 'commonRequestStrategy' },
                ajax: { $ref: 'ajax' }
            }
        },
        templateEngine: {
            module: 'etpl',
            scope: 'static'
        },
        session: {
            module: 'common/Session',
            scope: 'singleton'
        },
        eventBus: {
            module: 'er/events',
            scope: 'static'
        },
        redirectSubmitHanlder: {
            module: 'common/handler/RedirectSubmitHandler',
            properties: {
                redirectOptions: {
                    global: true,
                    force: true,
                    childFormSubmitRedirect: false
                }
            }
        },
        submitHandler: {
            module: 'common/handler/ToastSubmitHandler',
            properties: { nextSubmitHandler: { $ref: 'redirectSubmitHanlder' } }
        },
        reloadSubmitHandler: {
            module: 'common/handler/ReloadSubmitHandler',
            properties: {
                redirectOptions: {
                    global: true,
                    force: true,
                    childFormSubmitRedirect: false
                }
            }
        },
        requestManager: {
            module: 'ub-ria/mvc/RequestManager',
            auto: true
        },
        systemPermission: {
            module: 'er/permission',
            scope: 'static'
        },
        baseModel: {
            module: 'ub-ria/mvc/BaseModel',
            properties: { data: { $ref: 'requestManager' } },
            auto: true
        },
        baseView: { module: 'ub-ria/mvc/BaseView' },
        commonRequestStrategy: { module: 'common/adapt/UnionRequestStrategy' },
        commonRule: {
            module: 'common/rule',
            scope: 'static'
        },
        controlDefaults: {
            module: 'common/uiDefaults',
            scope: 'static'
        },
        indicator: {
            module: 'common/Indicator',
            scope: 'singleton',
            auto: true,
            properties: { layerElement: document.getElementById('global-indicator') }
        },
        layoutChangeNotifier: {
            module: 'common/LayoutChangeNotifier',
            auto: true,
            scope: 'singleton'
        },
        main: {
            module: 'common/Main',
            auto: true,
            scope: 'singleton'
        },
        erConfig: {
            module: 'er/config',
            scope: 'static'
        },
        globalPermission: {
            module: 'er/permission',
            scope: 'static'
        },
        ria: {
            module: 'ub-ria',
            scope: 'static'
        },
        systemConfig: {
            module: 'common/config',
            scope: 'static'
        }
    };
    ioc.addComponent(globalComponents);
    ioc.registerComponents = function (module, config, additionalConfig) {
        config.module = module;
        config.entityName = u.camelize(module);
        var baseComponents = getBaseComponents(config);
        var actionComponents = getActionComponents(config);
        u.extend(baseComponents, actionComponents, additionalConfig);
        ioc.addComponent(baseComponents);
    };
    function mergeExtends(rawConfig) {
        u.each([].slice.call(arguments, 1), function (extension) {
            if (!extension) {
                return;
            }
            if (extension.properties) {
                rawConfig.properties = rawConfig.properties || {};
                u.extend(rawConfig.properties, extension.properties);
                extension = u.omit(extension, 'properties');
            }
            u.extend(rawConfig, extension);
        });
    }
    function getBaseComponents(config) {
        var components = {};
        var module = config.module;
        var entityName = config.entityName;
        var entityPrefix = entityName.charAt(0).toUpperCase() + entityName.slice(1);
        var extend = config.extend || {};
        var data = entityName + 'Data';
        var dataModule = module + '/' + entityPrefix + 'Data';
        components[data] = {
            module: dataModule,
            auto: true,
            properties: {
                requestStrategy: {
                    $import: 'commonRequestStrategy',
                    scope: 'singleton',
                    args: [
                        entityName,
                        config.backendEntityName
                    ]
                }
            }
        };
        mergeExtends(components[data], extend.data);
        var permission = entityName + 'Permission';
        var permissionModule = module + '/' + entityPrefix + 'Permission';
        components[permission] = {
            module: permissionModule,
            scope: 'singleton',
            auto: true
        };
        mergeExtends(components[permission], extend.permission);
        return components;
    }
    function getActionComponents(config) {
        var components = {};
        var module = config.module;
        var remoteModule = config.remoteModule;
        var entityName = config.entityName;
        var extend = config.extend || {};
        u.each(config.actions, function (actionConfig) {
            var modulePrefix = actionConfig.module || remoteModule || module;
            var actionLevelExtend = actionConfig.extend || {};
            var modelProperties = {
                data: { $ref: entityName + 'Data' },
                permission: { $ref: entityName + 'Permission' }
            };
            var actionName = actionConfig.name;
            var action = actionName.charAt(0).toLowerCase() + actionName.slice(1);
            if (actionConfig.needValidator) {
                var schema = action + 'Schema';
                var schemaModule = modulePrefix + '/schema';
                components[schema] = {
                    module: schemaModule,
                    scope: 'static'
                };
                mergeExtends(components[schema], extend.schema, actionLevelExtend.schema);
                var validator = action + 'EntityValidator';
                components[validator] = {
                    module: 'ub-ria/mvc/EntityValidator',
                    scope: 'singleton',
                    properties: {
                        schema: { $ref: schema },
                        rule: { $ref: 'commonRule' }
                    }
                };
                mergeExtends(components[validator], extend.validator, actionLevelExtend.validator);
                modelProperties.validator = { $ref: validator };
            }
            var actionModule = modulePrefix + '/mvc/' + actionName;
            var model = action + 'Model';
            var modelModule = actionModule + 'Model';
            components[model] = {
                module: modelModule,
                properties: modelProperties,
                auto: true
            };
            mergeExtends(components[model], extend.model, actionLevelExtend.model);
            var view = action + 'View';
            var viewModule = actionModule + 'View';
            components[view] = {
                module: viewModule,
                properties: { rule: { $ref: 'commonRule' } },
                auto: true
            };
            mergeExtends(components[view], extend.view, actionLevelExtend.view);
            var actionProperties = {
                model: { $ref: model },
                view: { $ref: view },
                group: actionConfig.group || config.group
            };
            if (remoteModule) {
                actionProperties.packageName = remoteModule;
            }
            components[action] = {
                module: actionModule,
                args: [entityName],
                properties: actionProperties,
                auto: true
            };
            mergeExtends(components[action], extend.action, actionLevelExtend.action);
        });
        return components;
    }
    ioc.addComponentsByEntityName = function (entityName, backendEntityName, overrides, omits) {
        var base = getBaseComponentConfig(entityName, backendEntityName);
        var components = getActionComponentConfig(entityName);
        u.extend(components, base, overrides || {});
        u.each(omits, function (key) {
            delete components[key];
        });
        ioc.addComponent(components);
    };
    function getBaseComponentConfig(entityName, backendEntityName) {
        var components = {};
        var data = entityName + 'Data';
        var strategy = entityName + 'RequestStrategy';
        var schema = entityName + 'Schema';
        var validator = entityName + 'EntityValidator';
        components[data] = {
            module: entityName + '/Data',
            auto: true,
            properties: { requestStrategy: { $ref: entityName + 'RequestStrategy' } }
        };
        components[strategy] = {
            module: 'common/RequestStrategy',
            args: [
                entityName,
                backendEntityName
            ]
        };
        components[schema] = {
            module: entityName + '/schema',
            scope: 'static'
        };
        components[validator] = {
            module: 'ub-ria/mvc/EntityValidator',
            properties: { schema: { $ref: schema } }
        };
        return components;
    }
    function getActionComponentConfig(entityName) {
        var components = {};
        u.each([
            'List',
            'Form',
            'Success',
            'Read',
            'Detail'
        ], function (type) {
            var action = entityName + type;
            var model = action + 'Model';
            var view = action + 'View';
            components[action] = {
                module: entityName + '/' + type,
                args: [entityName],
                auto: true,
                properties: {
                    model: { $ref: model },
                    view: { $ref: view }
                }
            };
            var modelPropperties = { data: { $ref: entityName + 'Data' } };
            if (type === 'Form') {
                modelPropperties.validator = { $ref: entityName + 'EntityValidator' };
            }
            components[model] = {
                module: entityName + '/' + type + 'Model',
                auto: true,
                properties: modelPropperties
            };
            components[view] = {
                module: entityName + '/' + type + 'View',
                auto: true
            };
        });
        return components;
    }
    return ioc;
});
define('common/Ajax', [
    'exports',
    'module',
    'er/ajax',
    'eoo',
    'common/ioc',
    'common/adapt'
], function (exports, module, _erAjax, _eoo, _commonIoc, _commonAdapt) {
    var _oo = babelHelpers.interopRequireDefault(_eoo);
    var _ioc = babelHelpers.interopRequireDefault(_commonIoc);
    var _adapt = babelHelpers.interopRequireDefault(_commonAdapt);
    var CONTENT_TYPE_ALIAS = { json: 'application/json' };
    var GLOBAL_ERROR_CODES = {
        0: {
            name: 'system-error',
            title: '\u7CFB\u7EDF\u9519\u8BEF',
            message: '\u670D\u52A1\u5668\u8FD4\u56DE\u6570\u636E\u9519\u8BEF\u6216\u767B\u5F55\u8D85\u65F6\uFF0C\u8BF7\u91CD\u65B0\u767B\u5F55\u540E\u518D\u8BD5\u3002',
            handler: function handler() {
                var baseURL = window.DEBUG ? '/customerLogin.action' : '/customerLogin.html';
                var href = baseURL + location.hash;
                this.open('openLink', {
                    url: href,
                    target: '_self'
                });
            }
        },
        401: {
            name: 'login-timeout',
            title: '\u767B\u5F55\u8D85\u65F6',
            message: '\u7CFB\u7EDF\u767B\u5F55\u8D85\u65F6\uFF0C\u8BF7\u91CD\u65B0\u767B\u5F55\u518D\u8BD5\u3002',
            handler: function handler() {
                var baseURL = window.DEBUG ? 'index-debug.html' : '/home/webmaster.html';
                location.href = baseURL + location.hash;
            }
        },
        403: {
            name: 'not-authorized',
            title: '\u6743\u9650\u4E0D\u8DB3',
            message: '\u62B1\u6B49\uFF0C\u60A8\u6CA1\u6709\u8BBF\u95EE\u7684\u6743\u9650\u3002\u5982\u9700\u4F7F\u7528\uFF0C\u8BF7\u8054\u7CFB\u60A8\u7684\u4E3B\u8D26\u53F7\u7BA1\u7406\u5458\u5F00\u901A\u76F8\u5173\u6743\u9650\u3002'
        },
        500: {
            name: 'server-error',
            title: '\u7CFB\u7EDF\u9519\u8BEF',
            message: '\u7CFB\u7EDF\u53D1\u751F\u9519\u8BEF\uFF0C\u8BF7\u7A0D\u540E\u518D\u8BD5\u3002'
        }
    };
    var SET_DEFAULT_CONFIG = Symbol('setDefaultConfig');
    var ENABLE_JSON_REQUEST = Symbol('enableJSONRequest');
    var ENABLE_CONTENT_TYPE_SHORTCUT = Symbol('enableContentTypeShortcut');
    var ENABLE_TIME_UPDATE = Symbol('enableTimeUpdate');
    var HANDLE_GLOBAL_ERROR = Symbol('handleGlobalError');
    var ENABLE_CSRF = Symbol('enableCSRF');
    var isInAlert = false;
    function quitAlert() {
        isInAlert = false;
    }
    var Ajax = function (_BaseAjax) {
        babelHelpers.inherits(Ajax, _BaseAjax);
        function Ajax() {
            babelHelpers.classCallCheck(this, Ajax);
            babelHelpers.get(Object.getPrototypeOf(Ajax.prototype), 'constructor', this).call(this);
            this[SET_DEFAULT_CONFIG]();
            this[ENABLE_JSON_REQUEST]();
            this[ENABLE_CONTENT_TYPE_SHORTCUT]();
            this[ENABLE_TIME_UPDATE]();
            this[HANDLE_GLOBAL_ERROR]();
            this[ENABLE_CSRF]();
        }
        babelHelpers.createClass(Ajax, [
            {
                key: SET_DEFAULT_CONFIG,
                value: function value() {
                    this.config.cache = true;
                    this.config.timeout = 25 * 1000;
                    this.config.charset = 'utf-8';
                }
            },
            {
                key: ENABLE_JSON_REQUEST,
                value: function value() {
                    var serializeAsForm = this.hooks.serializeData;
                    var serializeAsJSON = function serializeAsJSON(prefix, data, contentType) {
                        if (!prefix && contentType === 'application/json') {
                            return JSON.stringify(data);
                        }
                        return serializeAsForm.apply(this.hooks, arguments);
                    };
                    this.hooks.serializeData = serializeAsJSON.bind(this);
                    this.hooks.serializeData.getKey = serializeAsForm.getKey;
                }
            },
            {
                key: ENABLE_CONTENT_TYPE_SHORTCUT,
                value: function value() {
                    this.hooks.beforeExecute = function (options) {
                        if (options.contentType && CONTENT_TYPE_ALIAS.hasOwnProperty(options.contentType)) {
                            options.contentType = CONTENT_TYPE_ALIAS[options.contentType];
                        }
                    };
                }
            },
            {
                key: ENABLE_TIME_UPDATE,
                value: function value() {
                    this.hooks.afterReceive = function (xhr) {
                        var date = xhr.getResponseHeader('date');
                    };
                }
            },
            {
                key: HANDLE_GLOBAL_ERROR,
                value: function value() {
                    this.on('fail', function (error) {
                        if (error.options.background) {
                            return;
                        }
                        if (isInAlert) {
                            return;
                        }
                        var config = GLOBAL_ERROR_CODES[error.xhr.status];
                        if (config) {
                            var options = {
                                title: config.title,
                                content: config.message
                            };
                            _adapt['default'].alert(options);
                        }
                    });
                }
            },
            {
                key: ENABLE_CSRF,
                value: function value() {
                    var _this = this;
                    this.hooks.beforeSend = function (xhr, options) {
                        var method = options.method.toUpperCase();
                        var sessionToken = _this.getSessionToken();
                        if ((method === 'POST' || method === 'PUT') && sessionToken) {
                            xhr.setRequestHeader('X-Session-Token', sessionToken);
                        }
                    };
                }
            }
        ]);
        return Ajax;
    }(_erAjax.Ajax);
    module.exports = Ajax;
    _oo['default'].defineAccessor(Ajax.prototype, 'sessionToken');
});
define('channel/ChannelData', [
    'exports',
    'module',
    'common/adapt/BaseData',
    'ub-ria/mvc/RequestManager',
    '../common/util'
], function (exports, module, _commonAdaptBaseData, _ubRiaMvcRequestManager, _commonUtil) {
    var _BaseData2 = babelHelpers.interopRequireDefault(_commonAdaptBaseData);
    var _RequestManager = babelHelpers.interopRequireDefault(_ubRiaMvcRequestManager);
    var CHANNEL_TYPE = {
        cpro: 'cpro-channel',
        search: 'search-software-channel',
        software: 'search-software-channel'
    };
    var CHANNEL_PARAMS = {
        cpro: '',
        search: '/0',
        software: '/1'
    };
    var ChannelData = function (_BaseData) {
        babelHelpers.inherits(ChannelData, _BaseData);
        function ChannelData() {
            babelHelpers.classCallCheck(this, ChannelData);
            babelHelpers.get(Object.getPrototypeOf(ChannelData.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(ChannelData, [
            {
                key: 'getCNList',
                value: function getCNList(type) {
                    return this.request('$entity/category', null, {
                        method: 'GET',
                        url: '$entity/' + CHANNEL_TYPE[type] + '/cn-list' + CHANNEL_PARAMS[type],
                        urlPrefix: '/v2/client/'
                    });
                }
            },
            {
                key: 'search',
                value: function search(cid, type) {
                    return this.request('$entity/search', null, {
                        method: 'GET',
                        url: '$entity/' + CHANNEL_TYPE[type] + '/query/' + cid,
                        urlPrefix: '/v2/client/'
                    });
                }
            },
            {
                key: 'update',
                value: function update(query, type) {
                    query = _commonUtil.omit(query, 'type');
                    return this.request('$entity/update', query, {
                        method: 'POST',
                        url: '$entity/' + CHANNEL_TYPE[type] + '/modify',
                        urlPrefix: '/v2/client/',
                        contentType: 'application/json'
                    });
                }
            },
            {
                key: 'delete',
                value: function _delete(query, type) {
                    return this.request('$entity/remove', query, {
                        method: 'POST',
                        url: '$entity/' + CHANNEL_TYPE[type] + '/delete',
                        urlPrefix: '/v2/client/',
                        contentType: 'application/json'
                    });
                }
            },
            {
                key: 'findById',
                value: function findById(id, type) {
                    return this.request('$entity/findById', null, {
                        method: 'GET',
                        url: '$entity/' + CHANNEL_TYPE[type] + '/query/' + id,
                        urlPrefix: '/v2/client/'
                    });
                }
            },
            {
                key: 'save',
                value: function save(data) {
                    var type = data.type;
                    var entity = _commonUtil.omit(data, 'type');
                    var verb = {
                        cpro: 'save-url-channel',
                        search: 'save',
                        software: 'save'
                    };
                    return this.request('$entity/save', entity, {
                        method: 'POST',
                        url: '$entity/' + CHANNEL_TYPE[type] + '/' + verb[type],
                        urlPrefix: '/v2/client/',
                        contentType: 'application/json'
                    });
                }
            }
        ]);
        return ChannelData;
    }(_BaseData2['default']);
    module.exports = ChannelData;
    var requests = [
        {
            name: 'expert/search',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'expert/list',
            scope: 'instance',
            policy: 'auto'
        },
        {
            name: 'expert/reports',
            scope: 'instance',
            policy: 'auto'
        }
    ];
    requests.forEach(function (config) {
        return _RequestManager['default'].register(ChannelData, config.name, config);
    });
});
define('batchCopyAd/BatchCopyAdData', [
    'exports',
    'module',
    'common/adapt/BaseData',
    'ub-ria/mvc/RequestManager'
], function (exports, module, _commonAdaptBaseData, _ubRiaMvcRequestManager) {
    var _BaseData2 = babelHelpers.interopRequireDefault(_commonAdaptBaseData);
    var _RequestManager = babelHelpers.interopRequireDefault(_ubRiaMvcRequestManager);
    var BatchCopyAdData = function (_BaseData) {
        babelHelpers.inherits(BatchCopyAdData, _BaseData);
        function BatchCopyAdData() {
            babelHelpers.classCallCheck(this, BatchCopyAdData);
            babelHelpers.get(Object.getPrototypeOf(BatchCopyAdData.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(BatchCopyAdData, [{
                key: 'save',
                value: function save(data) {
                    return this.request('$entity/save', data, {
                        method: 'POST',
                        url: 'adpos/adpos/batch-copy',
                        urlPrefix: '/v2/client/',
                        contentType: 'application/json'
                    });
                }
            }]);
        return BatchCopyAdData;
    }(_BaseData2['default']);
    module.exports = BatchCopyAdData;
    var requests = [];
    requests.forEach(function (config) {
        return _RequestManager['default'].register(BatchCopyAdData, config.name, config);
    });
});
define('common/adapt', [
    'require',
    'ub-ria/util',
    'esui/lib',
    'promise'
], function (require) {
    var u = require('ub-ria/util');
    var lib = require('esui/lib');
    var adapt = {};
    adapt.preventScrolltoTop = false;
    var messageOperations = {};
    var postMessage = function (label, data) {
        parent.postMessage(JSON.stringify({
            label: label,
            data: data
        }), '*');
    };
    if (!window.postMessage) {
        window.__messageCallback = function (data) {
            messageWatcher({ data: data });
        };
        postMessage = function (label, data) {
            if (document.referrer.indexOf(location.protocol + '//' + location.host) === 0) {
                if (parent.er) {
                    parent.er.controller.fireMain('frameMessage', {
                        data: JSON.stringify({
                            label: label,
                            data: data
                        })
                    });
                }
            }
        };
    }
    var initMessageWatch = u.once(function () {
        lib.on(window, 'message', messageWatcher);
    });
    function messageWatcher(ev) {
        var e = ev || window.event;
        var message = JSON.parse(e.data);
        var handler = messageOperations[message.label];
        if (handler) {
            handler(message.data);
        }
    }
    adapt.resize = function () {
        postMessage('resize', { height: document.body.offsetHeight });
    };
    adapt.alert = function (message) {
        postMessage('alert', message);
    };
    adapt.open = function (url, target) {
        target = target || '_self';
        postMessage('openLink', {
            url: url,
            target: target
        });
    };
    function removeConfirmOperation() {
        adapt.removeMessageOperation('confirm:ok');
        adapt.removeMessageOperation('confirm:cancel');
    }
    adapt.confirm = function (message) {
        var Promise = require('promise');
        var executor = function (resolve, reject) {
            adapt.registerMessageOperation('confirm:ok', function () {
                resolve();
                removeConfirmOperation();
            });
            adapt.registerMessageOperation('confirm:cancel', function () {
                removeConfirmOperation();
            });
        };
        postMessage('confirm', message);
        return new Promise(executor);
    };
    adapt.loading = function () {
        postMessage('loading');
    };
    adapt.hideLoading = function () {
        postMessage('hideLoading');
    };
    adapt.scrollTo = function (xpos, ypos) {
        postMessage('scrollTo', {
            xpos: xpos,
            ypos: ypos
        });
    };
    adapt.registerMessageOperation = function (label, callback) {
        initMessageWatch();
        if (typeof callback === 'function') {
            if (label in messageOperations) {
                throw new Error(label + ' has existed in messageOperations!');
            }
            messageOperations[label] = callback;
        }
    };
    adapt.removeMessageOperation = function (label) {
        if (label in messageOperations) {
            delete messageOperations[label];
        } else {
            throw new Error(label + ' does not exist in messageOperations!');
        }
    };
    adapt.postCustomMessage = postMessage;
    return adapt;
});
define('account/mvc/AccountInfoView', [
    'require',
    'tpl!startup/template',
    'common/adapt',
    'esui/lib',
    'ub-ria/util',
    'ssp-account/enum',
    '../enum',
    'esui/Toast',
    'ssp-account/mvc/AccountInfoView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var adapt = require('common/adapt');
    var lib = require('esui/lib');
    var u = require('ub-ria/util');
    var AccountModifyTarget = require('ssp-account/enum').AccountModifyTarget;
    var VerificationStatusType = require('../enum').VerificationStatus;
    var DivideStatus = require('ssp-account/enum').DivideStatus;
    var exports = {};
    exports.template = 'unionAccountInfo';
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = { 'modify-member-info:click': modifyMemberInfo };
        this.addUIEvents(uiEvents);
    };
    function modifyMemberInfo() {
        this.fire('modifyMember');
    }
    exports.alert = function (content, title) {
        var options = typeof content === 'string' ? {
            title: title || document.title,
            content: content
        } : u.clone(content);
        return adapt.alert(options);
    };
    exports.bindEvents = function () {
        this.$super(arguments);
        registerVerifyCodeEditField.call(this);
    };
    function registerVerifyCodeEditField() {
        var form = this.getSafely('member-verifyCode-form');
        form.on('action@submitcancel', function (e) {
            e.preventDefault();
            this.get('member-verifyCode-form').hide();
            this.get('member-phone').show();
        }, this);
        form.on('action@entitysave', function (e) {
            this.get('member-verifyCode-form').hide();
            this.openEditingForm('member-phone', {});
        }, this);
    }
    exports.modifyUserPassword = function () {
        this.openEditingForm('user-password', {
            target: AccountModifyTarget.USER,
            user: this.model.get('user').customerId
        });
    };
    exports.modifyMemberMail = function () {
        this.openEditingForm('member-mail', {
            target: AccountModifyTarget.USER,
            user: this.model.get('user').customerId
        });
    };
    exports.modifyMemberPhone = function () {
        this.fire('modifyPhone');
    };
    exports.showModifyPhonePanel = function (type) {
        switch (type) {
        case VerificationStatusType.INVALID:
            this.openEditingForm('member-phone', {});
            break;
        case VerificationStatusType.AUDITED:
            this.get('member-phone').hide();
            var childActionPanel = this.get('member-verifyCode-form');
            childActionPanel.reload({});
            childActionPanel.show();
            break;
        }
    };
    exports.checkCertification = function () {
        if (!this.model.get('isFinanceInfoFilled') || this.model.get('user').canDivide !== DivideStatus.NORMAL) {
            this.alert(this.model.get('noCertificationTip'), '\u65E0\u6CD5\u8FDB\u884C\u5B9E\u540D\u8BA4\u8BC1');
            return false;
        }
        return true;
    };
    exports.popDrawerAction = function () {
        var drawerActionPanel = this.$super(arguments);
        drawerActionPanel.on('panelHide', onDrawActionPanelClose);
        drawerActionPanel.on('panelShow', onDrawActionPanelShow);
        return drawerActionPanel;
    };
    function onDrawActionPanelClose() {
        lib.removeClass(document.getElementById('page-container'), 'page-container-hide');
        adapt.resize();
    }
    function onDrawActionPanelShow() {
        document.body.style.overflowY = '';
        lib.addClass(document.getElementById('page-container'), 'page-container-hide');
    }
    exports.handleAfterRelatedEntitySaved = function (entity, targetId) {
        if (targetId === 'modifyMember') {
            require('esui/Toast').success('\u57FA\u672C\u4FE1\u606F\u4FEE\u6539\u6210\u529F!').show();
            this.fire('reload');
        }
    };
    var SSPAccountInfoView = require('ssp-account/mvc/AccountInfoView');
    var AccountInfoView = require('eoo').create(SSPAccountInfoView, exports);
    return AccountInfoView;
});
define('account/mvc/AccountInfoModel', [
    'require',
    'ub-ria/util',
    'ssp-account/enum',
    '../enum',
    'ssp-finance/enum',
    'promise',
    'ssp-account/mvc/AccountInfoModel',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var CertifyClass = require('ssp-account/enum').CertifyClass;
    var Certification = require('../enum').Certification;
    var UserAccountType = require('ssp-finance/enum').UserAccountType;
    var VerificationStatusType = require('../enum').VerificationStatus;
    var exports = {};
    var WHOLE_ACCOUNT_INFO = {
        wholeAccountInfo: function (model) {
            return model.data().getWholeAcountInfo();
        }
    };
    var IS_FINANCEINFO_FILLED = {
        isFinanceInfoFilled: function (model) {
            return model.data().checkFinanceInfoFilled();
        }
    };
    exports.constructor = function () {
        this.$super(arguments);
        var datasource = this.getDatasource();
        datasource.unshift(WHOLE_ACCOUNT_INFO);
        this.putDatasource(IS_FINANCEINFO_FILLED, 0);
    };
    exports.prepareMemberInfo = function () {
        var member = u.deepClone(this.get('member'));
        var user = this.get('user');
        if (u.isEmpty(member)) {
            return;
        }
        member.emailStatus = user.emailStatus;
        member.emailStatusText = VerificationStatusType.getTextFromValue(member.emailStatus);
        member.phoneStatus = user.phoneStatus;
        member.phoneStatusText = VerificationStatusType.getTextFromValue(member.phoneStatus);
        member.certifyClass = user.certifyClass;
        member.certification = user.realNameAuthStatus;
        member.certificationText = Certification.getTextFromValue(member.certification);
        member.Certification = Certification;
        member.certifyClassText = CertifyClass.getTextFromValue(member.certifyClass);
        member.requireCertification = member.certification === Certification.INVALID || member.certification === Certification.FAILED || member.certification === Certification.UPCOMING || member.certification === Certification.EXPIRED;
        member.certificationHrefText = member.certification === Certification.INVALID ? '\u7ACB\u523B\u8BA4\u8BC1' : '\u91CD\u65B0\u8BA4\u8BC1';
        this.set('member', member);
    };
    exports.prepareFinanceInfo = function () {
        var finance = u.deepClone(this.get('finance'));
        var user = this.get('user');
        if (u.isEmpty(finance)) {
            return;
        }
        finance.userAccountType = user.payType;
        finance.userAccountTypeText = UserAccountType.getTextFromValue(user.payType);
        this.set('finance', finance);
        this.set('UserAccountType', UserAccountType);
    };
    exports.prepareCertificationURL = function () {
        var template = this.get('certificationURLTemplate');
        var url = template.replace('${member}', this.get('user').ucid);
        this.set('certificationURL', url);
    };
    exports.getMemberInfo = function () {
        if (this.checkPermission('canViewMemberInfo')) {
            var accountInfo = this.get('wholeAccountInfo');
            return u.deepClone(accountInfo.customerInfo);
        }
        return require('promise').resolve({});
    };
    exports.getUserInfo = function () {
        var accountInfo = this.get('wholeAccountInfo');
        var globalData = this.data('global');
        return globalData.getUser().then(function (data) {
            var user = u.deepClone(accountInfo.customer);
            user.realNameAuthStatus = data.realNameAuthStatus;
            return user;
        });
    };
    exports.getFinanceInfo = function () {
        if (this.checkPermission('canViewMemberInfo') && this.checkPermission('canViewFinanceInfo')) {
            var accountInfo = this.get('wholeAccountInfo');
            return u.deepClone(accountInfo.customerFinInfo);
        }
        return require('promise').resolve({});
    };
    exports.getCertificationURLTemplate = function () {
        return 'http://defensor.baidu.com/dftools/commtask?appid=3&userid=${member}';
    };
    var SSPAccountInfoModel = require('ssp-account/mvc/AccountInfoModel');
    var AccountInfoModel = require('eoo').create(SSPAccountInfoModel, exports);
    return AccountInfoModel;
});
define('account/mvc/AccountInfo', [
    'require',
    'ssp-account/mvc/AccountInfo',
    'eoo'
], function (require) {
    var exports = {};
    exports.entityDescription = '\u7528\u6237\u4FE1\u606F';
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('modifyMember', onModifyMember, this);
        this.view.on('reload', onReload, this);
        this.view.on('modifyPhone', onModifyPhone, this);
    };
    function onReload() {
        this.reload();
    }
    function onModifyMember() {
        var member = this.model.get('member');
        this.view.popDrawerAction({
            url: '/account/modifyMemberInfo',
            actionOptions: {
                id: member.customerId,
                entity: member,
                userAccountType: this.model.get('finance').userAccountType
            }
        }, 'modifyMember').show();
    }
    function onModifyPhone() {
        var phoneStatus = this.model.get('member').phoneStatus;
        this.view.showModifyPhonePanel(phoneStatus);
    }
    var SSPAccountInfo = require('ssp-account/mvc/AccountInfo');
    return require('eoo').create(SSPAccountInfo, exports);
});
define('account/mvc/AccountCertifyDetailView', [
    'require',
    'tpl!startup/template',
    'ssp-account/mvc/AccountCertifyDetailView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'unionAccountCertifyDetail';
    var SSPAccountCertifyDetailView = require('ssp-account/mvc/AccountCertifyDetailView');
    var AccountCertifyDetailView = require('eoo').create(SSPAccountCertifyDetailView, exports);
    return AccountCertifyDetailView;
});
define('account/memberSchema', ['require'], function (require) {
    return {
        address: [
            'string',
            '\u5730\u5740',
            { maxLength: 64 }
        ],
        postcode: [
            'string',
            '\u90AE\u7F16',
            { maxLength: 6 }
        ]
    };
});
define('account/handler/SuccessRedirectSubmitHandler', [
    'require',
    'esui/Toast',
    'ub-ria/mvc/handler/RedirectSubmitHandler',
    'eoo'
], function (require) {
    var exports = {};
    exports.template = '/account/info';
    exports.redirectOptions = {
        global: true,
        force: true,
        childFormSubmitRedirect: false
    };
    exports.next = function (entity, action) {
        var actionDescription = action.getEntityDescription();
        require('esui/Toast').success(actionDescription + '\u4FEE\u6539\u6210\u529F!').show();
    };
    var RedirectSubmitHandler = require('ub-ria/mvc/handler/RedirectSubmitHandler');
    var SuccessRedirectSubmitHandler = require('eoo').create(RedirectSubmitHandler, exports);
    return SuccessRedirectSubmitHandler;
});
define('account/enum', [
    'require',
    'er/Enum'
], function (require) {
    var Enum = require('er/Enum');
    var exports = {};
    exports.VerificationStatus = new Enum({
        alias: 'INVALID',
        text: '\u672A\u9A8C\u8BC1'
    }, {
        alias: 'AUDITED',
        text: '\u5DF2\u9A8C\u8BC1'
    });
    exports.Certification = new Enum({
        alias: 'ERROR',
        text: '\u83B7\u53D6\u4FE1\u606F\u5931\u8D25',
        value: -1
    }, {
        alias: 'INVALID',
        text: '\u672A\u9A8C\u8BC1',
        value: 0
    }, {
        alias: 'AUDITED',
        text: '\u5DF2\u9A8C\u8BC1',
        value: 2
    }, {
        alias: 'FAILED',
        text: '\u5BA1\u6838\u672A\u901A\u8FC7',
        value: 4
    }, {
        alias: 'AUDITING',
        text: '\u5BA1\u6838\u4E2D',
        value: 6
    }, {
        alias: 'UPCOMING',
        text: '\u5373\u5C06\u8FC7\u671F',
        value: 8
    }, {
        alias: 'EXPIRED',
        text: '\u5DF2\u8FC7\u671F',
        value: 10
    });
    return exports;
});
define('account/AccountPermission', [
    'require',
    'eoo'
], function (require) {
    var returnTrue = function () {
        return true;
    };
    var returnFalse = function () {
        return false;
    };
    var exports = {};
    exports.canModifyUserInfo = returnTrue;
    exports.canModifyMemberInfo = returnTrue;
    exports.canViewMemberInfo = returnTrue;
    exports.canViewFinanceInfo = returnTrue;
    exports.canBatchModify = returnFalse;
    var oo = require('eoo');
    oo.defineAccessor(exports, 'systemPermission');
    var AccountPermission = oo.create(exports);
    return AccountPermission;
});
define('common/util', [
    'require',
    'eoo',
    'ub-ria/util'
], function (require) {
    var util = require('eoo').static(require('ub-ria/util'));
    util.parseDateRanges = function (array) {
        if (!array) {
            throw new Error('No date ranges given');
        }
        if (array.length % 2 !== 0) {
            throw new Error('Invalid date range length');
        }
        var stop = array.length / 2;
        var result = [];
        for (var i = 0; i < stop; i++) {
            result.push([
                array[i * 2],
                array[i * 2 + 1]
            ]);
        }
        return result;
    };
    util.objectArrayUnion = function (arr1, arr2) {
        var targetArray = util.deepClone(arr1);
        var unionArray = util.deepClone(arr2);
        util.each(targetArray, function (item1) {
            unionArray = util.reject(unionArray, function (item2) {
                return util.isEqual(item1, item2);
            });
        });
        return util.union(targetArray, unionArray);
    };
    util.permission = function (auth) {
        return function () {
            return this.getSystemPermission().isAllow(auth);
        };
    };
    util.anyPermission = function (authorities) {
        return function () {
            var permission = this.getSystemPermission();
            return util.any(authorities, permission.isAllow);
        };
    };
    util.postParamArrayProcess = function (entity) {
        util.each(entity, function (value, key) {
            if (util.isArray(value)) {
                util.each(value, function (value, index) {
                    var arrayKey = key + '[' + index + ']';
                    entity[arrayKey] = value;
                });
                delete entity[key];
            }
        });
    };
    util.prefixObjectKey = function (prefix, obj) {
        var o = {};
        util.each(obj, function (value, key) {
            if (obj.hasOwnProperty(key)) {
                o[prefix + key] = value;
            }
        });
        return o;
    };
    util.mask = function (str) {
        return function (item) {
            return item != null && (!util.isString(item) || item.length) ? item : str;
        };
    };
    return util;
});
define('common/BaseData', [
    'exports',
    'module',
    './util',
    'ub-ria/mvc/RequestManager'
], function (exports, module, _util, _ubRiaMvcRequestManager) {
    var _u = babelHelpers.interopRequireDefault(_util);
    var _RequestManager2 = babelHelpers.interopRequireDefault(_ubRiaMvcRequestManager);
    var BaseData = function (_RequestManager) {
        babelHelpers.inherits(BaseData, _RequestManager);
        function BaseData() {
            babelHelpers.classCallCheck(this, BaseData);
            babelHelpers.get(Object.getPrototypeOf(BaseData.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(BaseData, [
            {
                key: 'search',
                value: function search(query) {
                    return this.request('$entity/search', query, {
                        method: 'GET',
                        url: '/$entity'
                    });
                }
            },
            {
                key: 'list',
                value: function list(query) {
                    return this.request('$entity/list', query, {
                        method: 'GET',
                        url: '/$entity/list'
                    });
                }
            },
            {
                key: 'nakedList',
                value: function nakedList(query) {
                    var list;
                    return regeneratorRuntime.async(function nakedList$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                context$2$0.next = 2;
                                return regeneratorRuntime.awrap(this.list(query));
                            case 2:
                                list = context$2$0.sent;
                                return context$2$0.abrupt('return', list.results);
                            case 4:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'tree',
                value: function tree(query) {
                    return this.request('$entity/tree', query, {
                        method: 'GET',
                        url: '/$entity/tree'
                    });
                }
            },
            {
                key: 'save',
                value: function save(entity) {
                    return this.request('$entity/save', entity, {
                        method: 'POST',
                        url: '/$entity'
                    });
                }
            },
            {
                key: 'update',
                value: function update(entity) {
                    var submitEntity = _u['default'].omit(entity, 'id');
                    return this.request('$entity/update', submitEntity, {
                        method: 'PUT',
                        url: '/$entity/' + entity.id
                    });
                }
            },
            {
                key: 'updateStatus',
                value: function updateStatus(status, ids) {
                    return this.request('$entity/updateStatus', {
                        ids: ids,
                        status: status
                    }, {
                        method: 'POST',
                        url: '/$entity/status'
                    });
                }
            },
            {
                key: 'getAdvice',
                value: function getAdvice(status, ids) {
                    return this.request('$entity/advice', {
                        ids: ids,
                        status: status
                    }, {
                        method: 'GET',
                        url: '/$entity/status/advice'
                    });
                }
            },
            {
                key: 'findById',
                value: function findById(id) {
                    return this.request('$entity/findById', null, {
                        method: 'GET',
                        url: '/$entity/' + id
                    });
                }
            }
        ]);
        return BaseData;
    }(_RequestManager2['default']);
    module.exports = BaseData;
});
define('common/adapt/BaseData', [
    'require',
    'promise',
    'common/BaseData',
    'eoo'
], function (require) {
    var Promise = require('promise');
    var exports = {};
    exports.request = function (name, data, options) {
        var requesting = this.$super(arguments);
        var excutor = function (resolve, reject) {
            return requesting.then(function (response) {
                if (response.status === -1) {
                    var errors = {};
                    if (response.msg && response.msg[0]) {
                        errors.message = response.msg[0];
                    }
                    if (response.data.fields) {
                        errors.fields = response.data.fields;
                    }
                    reject(errors, response);
                } else {
                    resolve(response.data);
                }
            }, reject);
        };
        var excutorV2 = function (resolve, reject) {
            return requesting.then(function (response) {
                if (response.status === 0) {
                    resolve(response.data);
                } else {
                    var errors = {};
                    errors.message = response.msg;
                    if (response.fieldErrors) {
                        errors.fields = response.fieldErrors;
                    }
                    reject(errors, response);
                }
            }, reject);
        };
        var isV2 = options.url.indexOf('/v2/client') === 0 || options.urlPrefix && options.urlPrefix.indexOf('/v2/client') === 0;
        return new Promise(isV2 ? excutorV2 : excutor);
    };
    var BaseData = require('common/BaseData');
    return require('eoo').create(BaseData, exports);
});
define('account/AccountData', [
    'require',
    'ub-ria/util',
    'common/adapt/BaseData',
    'eoo',
    'ub-ria/mvc/RequestManager'
], function (require) {
    var u = require('ub-ria/util');
    var exports = {};
    exports.updatePassword = function (entity) {
        return this.request('$entity/updatePassword', {
            oldPassword: entity.password,
            newPassword: entity.newPassword,
            repeatPassword: entity.newPassword
        }, {
            method: 'POST',
            url: '/$entity/customer-info/mod-password',
            urlPrefix: '/v2/client'
        });
    };
    exports.updateMail = function (entity) {
        var param = u.omit(entity, 'id');
        return this.request('$entity/updateMail', param, {
            method: 'POST',
            url: '/$entity/customer-info/mod-email',
            urlPrefix: '/v2/client'
        });
    };
    exports.getWholeAcountInfo = function () {
        return this.request('$entity/getWholeAcountInfo', null, {
            method: 'GET',
            url: '/$entity/customer-info/init',
            urlPrefix: '/v2/client'
        });
    };
    exports.checkFinanceInfoFilled = function () {
        return this.request('$entity/checkFinanceInfoFilled', null, {
            method: 'GET',
            url: '/$entity/customer-info/fin-info-is-complete',
            urlPrefix: '/v2/client'
        }).then(function (response) {
            return response.finInfoIsComplete;
        });
    };
    exports.updateMemberInfo = function (entity) {
        return this.request('$entity/updateMemberInfo', entity, {
            method: 'POST',
            url: '/$entity/customer-info/mod-info',
            urlPrefix: '/v2/client'
        });
    };
    exports.sendValidateCodeToOldPhone = function () {
        return this.request('$entity/sendValidateCodeToOldPhone', null, {
            method: 'POST',
            url: '/$entity/customer-info/send-validate-code4-old-cell-phone',
            urlPrefix: '/v2/client'
        });
    };
    exports.checkValidateCodeForOldPhone = function (entity) {
        return this.request('$entity/checkValidateCodeForOldPhone', entity, {
            method: 'POST',
            url: '/$entity/customer-info/check-validate-code4-old-cell-phone',
            urlPrefix: '/v2/client'
        });
    };
    exports.sendValidateCodeToNewPhone = function (phone) {
        return this.request('$entity/sendValidateCodeToNewPhone', { newCellPhone: phone }, {
            method: 'POST',
            url: '/$entity/customer-info/send-validate-code4-new-cell-phone',
            urlPrefix: '/v2/client'
        });
    };
    exports.checkValidateCodeForNewPhone = function (entity) {
        return this.request('$entity/checkValidateCodeForNewPhone', entity, {
            method: 'POST',
            url: '/$entity/customer-info/check-validate-code4-new-cell-phone',
            urlPrefix: '/v2/client'
        });
    };
    exports.getLoginList = function (entity) {
        return this.request('$entity/getLoginList', entity, {
            method: 'GET',
            url: '/$entity/customer-login-history/query-logs',
            urlPrefix: '/v2/client'
        }).then(function (response) {
            return {
                results: response,
                totalCount: (response || []).length
            };
        });
    };
    var requests = {
        save: {
            name: 'account/save',
            scope: 'instance',
            policy: 'auto'
        },
        update: {
            name: 'account/update',
            scope: 'instance',
            policy: 'auto'
        },
        findById: {
            name: 'account/findById',
            scope: 'instance',
            policy: 'auto'
        },
        updatePassword: {
            name: 'account/updatePassword',
            scope: 'instance',
            policy: 'auto'
        },
        updateMail: {
            name: 'account/updateMail',
            scope: 'instance',
            policy: 'auto'
        },
        getWholeAcountInfo: {
            name: 'account/getWholeAcountInfo',
            scope: 'instance',
            policy: 'auto'
        },
        checkFinanceInfoFilled: {
            name: 'account/checkFinanceInfoFilled',
            scope: 'instance',
            policy: 'auto'
        },
        updateMemberInfo: {
            name: 'account/updateMemberInfo',
            scope: 'instance',
            policy: 'auto'
        },
        sendValidateCodeToOldPhone: {
            name: 'account/sendValidateCodeToOldPhone',
            scope: 'instance',
            policy: 'auto'
        },
        checkValidateCodeForOldPhone: {
            name: 'account/checkValidateCodeForOldPhone',
            scope: 'instance',
            policy: 'auto'
        },
        sendValidateCodeToNewPhone: {
            name: 'account/sendValidateCodeToNewPhone',
            scope: 'instance',
            policy: 'auto'
        },
        checkValidateCodeForNewPhone: {
            name: 'account/checkValidateCodeForNewPhone',
            scope: 'instance',
            policy: 'auto'
        },
        getLoginList: {
            name: 'account/getLoginList',
            scope: 'instance',
            policy: 'auto'
        }
    };
    var BaseData = require('common/adapt/BaseData');
    var AccountData = require('eoo').create(BaseData, exports);
    var RequestManager = require('ub-ria/mvc/RequestManager');
    u.each(requests, function (config) {
        RequestManager.register(AccountData, config.name, config);
    });
    return AccountData;
});
define('ssp-slot/ui/extension/FlatBoxGroupValue', [
    'require',
    'eoo',
    'esui/Extension',
    'esui'
], function (require) {
    var exports = {};
    exports.type = 'FlatBoxGroupValue';
    exports.activate = function () {
        this.$super(arguments);
        if (this.target.type !== 'BoxGroup') {
            return;
        }
        var target = this.target;
        if (target.hasOwnProperty('getRawValue')) {
            this.originGetRawValue = target.getRawValue;
        }
        var originGetRawValue = this.target.getRawValue;
        this.target.getRawValue = function () {
            return originGetRawValue.call(this)[0];
        };
    };
    exports.inactivate = function () {
        if (this.target.type !== 'BoxGroup') {
            return;
        }
        delete this.target.getRawValue;
        if (this.originGetRawValue) {
            this.target.getRawValue = this.originGetRawValue;
        }
        this.$super(arguments);
    };
    var ConvertToNumber = require('eoo').create(require('esui/Extension'), exports);
    require('esui').registerExtension(ConvertToNumber);
    return ConvertToNumber;
});
define('ssp-slot/ui/extension/ConvertToNumber', [
    'require',
    'eoo',
    'esui/Extension',
    'esui'
], function (require) {
    var exports = {};
    exports.type = 'ConvertToNumber';
    exports.activate = function () {
        this.$super(arguments);
        var target = this.target;
        if (target.hasOwnProperty('getRawValue')) {
            this.originGetRawValue = target.getRawValue;
        }
        var originGetRawValue = this.target.getRawValue;
        this.target.getRawValue = function () {
            var rawValue = originGetRawValue.call(this);
            if (rawValue instanceof Array) {
                rawValue = rawValue.map(function (value) {
                    return value ? +value : value;
                });
            }
            if (this.type === 'BoxGroup' && this.get('boxType') === 'radio') {
                rawValue = rawValue[0];
            }
            return rawValue && typeof rawValue === 'string' ? +rawValue : rawValue;
        };
    };
    exports.inactivate = function () {
        delete this.target.getRawValue;
        if (this.originGetRawValue) {
            this.target.getRawValue = this.originGetRawValue;
        }
        this.$super(arguments);
    };
    var ConvertToNumber = require('eoo').create(require('esui/Extension'), exports);
    require('esui').registerExtension(ConvertToNumber);
    return ConvertToNumber;
});
define('ssp-slot/ui/extension/ConvertToColorString', [
    'require',
    'eoo',
    'esui/Extension',
    'esui'
], function (require) {
    var exports = {};
    exports.type = 'ConvertToColorString';
    exports.activate = function () {
        this.$super(arguments);
        var target = this.target;
        if (target.hasOwnProperty('getRawValue')) {
            this.originGetRawValue = target.getRawValue;
        }
        var originGetRawValue = target.getRawValue;
        target.getRawValue = function () {
            return '#' + originGetRawValue.call(this).hex;
        };
    };
    exports.inactivate = function () {
        delete this.target.getRawValue;
        if (this.originGetRawValue) {
            this.target.getRawValue = this.originGetRawValue;
        }
        this.$super(arguments);
    };
    var ConvertToColorString = require('eoo').create(require('esui/Extension'), exports);
    require('esui').registerExtension(ConvertToColorString);
    return ConvertToColorString;
});
define('ssp-report/ui/ToggleSubmitableTableRichSelector', [
    'require',
    './SubmitableTableRichSelector',
    '../util',
    'esui',
    'esui/lib',
    'esui/Layer',
    'esui/InputControl',
    'eoo',
    'esui/painters'
], function (require) {
    require('./SubmitableTableRichSelector');
    var u = require('../util');
    var ui = require('esui');
    var lib = require('esui/lib');
    var Layer = require('esui/Layer');
    var InputControl = require('esui/InputControl');
    var layerProto = {};
    layerProto.render = function (element) {
        var control = this.control;
        document.body.appendChild(element);
        element.innerHTML = this.getLayerHTML();
        control.helper.initChildren(element);
    };
    layerProto.getLayerHTML = function () {
        var html = '' + '<div data-ui-type="SubmitableTableRichSelector"' + 'data-ui-width="300" data-ui-child-name="selector"></div>';
        return html;
    };
    layerProto.initBehavior = function () {
        this.$super(arguments);
        var control = this.control;
        var selector = control.getChild('selector');
        selector.on('submit', select, this);
    };
    function select() {
        this.hide();
        var control = this.control;
        var selector = control.getChild('selector');
        var selectedItems = selector.getRawValue();
        control.setRawValue(u.pluck(selectedItems, 'id'));
    }
    var ToggleSubmitableTableRichSelectorLayer = require('eoo').create(Layer, layerProto);
    var exports = {};
    exports.type = 'ToggleSubmitableTableRichSelector';
    exports.constructor = function () {
        this.$super(arguments);
        this.layer = new ToggleSubmitableTableRichSelectorLayer(this);
    };
    exports.initOptions = function (options) {
        var properties = {
            multi: true,
            datasource: [],
            rawValue: [],
            defaultText: '\u7B5B\u9009'
        };
        lib.extend(properties, options);
        this.$super([properties]);
    };
    exports.initStructure = function () {
        var tpl = '' + '<div class="${className}" id="${id}">${text}</div>' + '<div class="${arrow}"></div>';
        this.main.innerHTML = lib.format(tpl, {
            className: this.helper.getPartClassName('text'),
            id: this.helper.getId('text'),
            text: this.defaultText,
            arrow: this.helper.getPartClassName('arrow')
        });
    };
    exports.initEvents = function () {
        this.$super(arguments);
        this.helper.addDOMEvent(this.main, 'click', u.bind(this.layer.toggle, this.layer));
    };
    function updateMain() {
        var selectedItems = this.selectedItems;
        var text = this.defaultText;
        if (!u.isEmpty(selectedItems)) {
            var item = selectedItems[0];
            text = item.name;
            if (selectedItems.length > 1) {
                text += '\u7B49';
            }
        }
        var textPart = this.helper.getPart('text');
        textPart.innerHTML = u.escape(text);
    }
    exports.setProperties = function (properties) {
        if (this.hasOwnProperty('multi')) {
            this.multi = !!this.multi;
        }
        if (properties.multi === 'false') {
            properties.multi = false;
        }
        if (properties.hasOwnProperty('datasource')) {
            properties.datasourceIndexes = u.indexBy(properties.datasource, 'id');
        }
        adjustRawValue.call(this, properties);
        var changes = this.$super(arguments);
        if (changes.hasOwnProperty('rawValue')) {
            this.fire('change');
        }
        return changes;
    };
    function adjustRawValue(properties) {
        var rawValue = this.rawValue;
        if (properties.hasOwnProperty('rawValue')) {
            rawValue = properties.rawValue;
        }
        var datasourceIndexes = this.datasourceIndexes;
        if (properties.hasOwnProperty('datasourceIndexes')) {
            datasourceIndexes = properties.datasourceIndexes;
        }
        var isChanged = false;
        var newRawValue = [];
        u.each(rawValue, function (id) {
            if (datasourceIndexes.hasOwnProperty(id)) {
                newRawValue.push(id);
            } else {
                isChanged = true;
            }
        });
        if (isChanged) {
            properties.rawValue = newRawValue;
        }
    }
    exports.repaint = require('esui/painters').createRepaint(InputControl.prototype.repaint, {
        name: 'datasource',
        paint: function (control, datasource) {
            var element = control.helper.getPart('layer');
            if (!element) {
                control.layer.getElement();
            }
            var selector = control.getChild('selector');
            selector.setProperties({ datasource: datasource });
        }
    }, {
        name: [
            'rawValue',
            'datasource'
        ],
        paint: function (control, rawValue, datasource) {
            control.selectedItems = u.map(rawValue, function (id) {
                return control.datasourceIndexes[id];
            });
            updateMain.apply(control);
            var selector = control.getChild('selector');
            selector.setRawValue(control.selectedItems);
        }
    }, {
        name: 'multi',
        paint: function (control, multi) {
            var selector = control.getChild('selector');
            selector.setProperties({ multi: multi });
        }
    });
    exports.getSelectedItems = function () {
        return this.selectedItems || [];
    };
    exports.dispose = function () {
        if (this.helper.isInStage('DISPOSED')) {
            return;
        }
        if (this.layer) {
            this.layer.dispose();
            this.layer = null;
        }
        this.$super(arguments);
    };
    var ToggleSubmitableTableRichSelector = require('eoo').create(InputControl, exports);
    ui.register(ToggleSubmitableTableRichSelector);
    return ToggleSubmitableTableRichSelector;
});
define('ssp-report/ui/SubmitableTableRichSelector', [
    'require',
    'esui/Button',
    'underscore',
    'esui',
    'esui/lib',
    'ub-ria-ui/TableRichSelector',
    'mini-event',
    'esui/painters',
    'eoo'
], function (require) {
    require('esui/Button');
    var u = require('underscore');
    var ui = require('esui');
    var lib = require('esui/lib');
    var TableRichSelector = require('ub-ria-ui/TableRichSelector');
    var exports = {};
    exports.type = 'SubmitableTableRichSelector';
    exports.styleType = 'RichSelector';
    exports.initOptions = function (options) {
        var properties = {
            height: 240,
            width: 170,
            hasRowHead: false,
            hasOKBtn: true,
            hasHead: true,
            mode: 'add',
            hasBatchAction: true,
            hasInverse: false,
            multi: true,
            fields: [
                {
                    field: 'id',
                    width: 0,
                    isDefaultSearchField: true
                },
                {
                    field: 'name',
                    content: 'name',
                    title: '\u540D\u79F0',
                    searchScope: 'partial',
                    isDefaultSearchField: true
                }
            ]
        };
        lib.extend(properties, options);
        if (!properties.multi) {
            properties.hasBatchAction = false;
        }
        if (properties.mode !== 'add' && properties.mode !== 'load') {
            throw new Error('SubmitableTableRichSelector\u4EC5\u652F\u6301add\u548Cload\u6A21\u5F0F');
        }
        this.$super([properties]);
    };
    exports.getHeadHTML = function () {
        var helper = this.helper;
        var inverseHTML = '';
        if (this.hasInverse) {
            inverseHTML = '<span class="${inverseClass}" id="${inverseId}">${inverseText}</span>';
        }
        var actionLink = '';
        if (this.hasBatchAction) {
            actionLink = '' + helper.getPartBeginTag('batch-action-wrapper', 'div') + '<span class="${selectAllClass}" id="${selectAllId}">${selectAllText}</span>' + '<span class="${deselectAllClass}" id="${deselectAllId}">${deselectAllText}</span>' + inverseHTML + helper.getPartEndTag('batch-action-wrapper', 'div');
        }
        var okBtn = '';
        if (this.hasOKBtn) {
            okBtn = '<div data-ui="type:Button;childName:okBtn" class="${okBtnClass}">\u786E\u5B9A</div>';
        }
        var head = '' + '<div data-ui="type:Panel;childName:head" class="${headClass}">' + actionLink + okBtn + '</div>';
        head = lib.format(head, {
            headClass: helper.getPartClassName('head'),
            batchActionId: helper.getId('batch-action'),
            selectAllClass: helper.getPartClassName('batch-action') + ' ' + helper.getPartClassName('batch-action-select'),
            selectAllId: helper.getId('batch-action-select'),
            selectAllText: this.selectAllLabel || '\u5168\u9009',
            deselectAllClass: helper.getPartClassName('batch-action') + ' ' + helper.getPartClassName('batch-action-deselect'),
            deselectAllId: helper.getId('batch-action-deselect'),
            deselectAllText: this.deselectAllLabel || '\u5168\u4E0D\u9009',
            inverseClass: helper.getPartClassName('batch-action') + ' ' + helper.getPartClassName('batch-action-inverse'),
            inverseId: helper.getId('batch-action-inverse'),
            inverseText: this.inverseLabel || '\u53CD\u9009',
            okBtnClass: helper.getPartClassName('submit')
        });
        return head;
    };
    exports.initStructure = function () {
        var tpl = '' + '<div data-ui="type:Panel;childName:body" class="${bodyClass}">' + '${searchInput}' + '<div data-ui="type:Panel;childName:content" class="${contentClass}">' + '<div data-ui="type:Label;childName:emptyText" class="${emptyTextClass}">' + '${emptyText}</div>' + '<div data-ui="type:Panel;childName:queryList" class="${queryListClass}"></div>' + '</div>' + '</div>' + '${head}';
        var helper = this.helper;
        var head = '';
        if (this.hasHead) {
            head = this.getHeadHTML();
        }
        var searchInput = '';
        if (this.hasSearchBox) {
            var searchBoxWidth = this.width - 55;
            searchInput = '' + '<div data-ui="type:Panel;childName:searchBoxArea" class="${searchWrapperClass}">' + '<div data-ui="type:SearchBox;childName:itemSearch;" data-ui-skin="magnifier"' + 'data-ui-width="' + searchBoxWidth + '"></div>' + '</div>' + '<div data-ui="type:Panel;childName:generalQueryResultArea"' + 'class="${generalQueryResultClass}" id="${queryResultId}">' + '<span class="${linkClass}" id="${linkId}">\u6E05\u7A7A</span>' + '\u5171\u627E\u5230<span id="${queryResultCountId}"></span>\u4E2A' + '</div>';
            searchInput = lib.format(searchInput, {
                searchWrapperClass: helper.getPartClassName('search-wrapper'),
                generalQueryResultClass: helper.getPartClassName('query-result-general'),
                queryResultCountId: helper.getId('result-count'),
                linkClass: helper.getPartClassName('clear-query-link'),
                linkId: helper.getId('clear-query')
            });
        }
        this.main.style.width = this.width + 'px';
        this.main.innerHTML = lib.format(tpl, {
            bodyClass: helper.getPartClassName('body'),
            searchInput: searchInput,
            contentClass: helper.getPartClassName('content-wrapper'),
            emptyTextClass: helper.getPartClassName('empty-text'),
            emptyText: this.emptyText,
            queryListClass: helper.getPartClassName('query-list'),
            head: head
        });
        this.initChildren();
        if (this.mode === 'load') {
            this.addState('load');
        } else if (this.mode === 'add') {
            this.addState('add');
        }
        lib.addClasses(this.main, [
            'ui-table-richselector',
            'ui-submitabletablerichselector'
        ]);
    };
    exports.initEvents = function () {
        this.$super(arguments);
        var helper = this.helper;
        var batchActionWrapper = helper.getPart('batch-action-wrapper');
        if (batchActionWrapper) {
            helper.addDOMEvent(batchActionWrapper, 'click', u.bind(this.batchAction, this));
        }
        var clearQueryLink = helper.getPart('clear-query');
        if (clearQueryLink) {
            helper.addDOMEvent(clearQueryLink, 'click', u.bind(this.clearQuery, this));
        }
        var searchBox = this.getSearchBox();
        if (searchBox) {
            searchBox.on('search', search, this);
        }
        var queryList = this.getQueryList().main;
        helper.addDOMEvent(queryList, 'click', u.bind(this.eventDispatcher, this));
        var head = this.getChild('head');
        if (head) {
            var okBtn = head.getChildSafely('okBtn');
            require('mini-event').delegate(okBtn, 'click', this, 'submit');
        }
    };
    exports.refresh = function () {
        this.$super(arguments);
        updateSelectedStatus.apply(this);
    };
    function search(e) {
        this.search();
    }
    function updateSingleItemStatus(control, item, toBeSelected) {
        if (!item) {
            return;
        }
        item.isSelected = toBeSelected;
        var itemDOM = control.helper.getPart('row-' + item.id);
        var changeClass = toBeSelected ? lib.addClasses : lib.removeClasses;
        changeClass(itemDOM, control.helper.getPartClasses('row-selected'));
    }
    function selectAll() {
        var data = this.isQuery() ? this.queriedData : this.allData;
        var fire = false;
        u.each(data, function (item) {
            var itemIndex = this.indexData[item.id];
            var rawItem = this.allData[itemIndex];
            if (!rawItem.isSelected) {
                updateSingleItemStatus(this, rawItem, true);
                fire = true;
            }
        }, this);
        addAllSelectedState.apply(this);
        if (fire) {
            this.fire('change');
        }
    }
    function deselectAll() {
        var data = this.isQuery() ? this.queriedData : this.allData;
        var fire = false;
        u.each(data, function (item) {
            var itemIndex = this.indexData[item.id];
            var rawItem = this.allData[itemIndex];
            if (rawItem.isSelected) {
                updateSingleItemStatus(this, rawItem, false);
                fire = true;
            }
        }, this);
        addAllUnselectedState.apply(this);
        if (fire) {
            this.fire('change');
        }
    }
    function inverse() {
        var data = this.isQuery() ? this.queriedData : this.allData;
        u.each(data, function (item) {
            var itemIndex = this.indexData[item.id];
            var rawItem = this.allData[itemIndex];
            updateSingleItemStatus(this, rawItem, !rawItem.isSelected);
        }, this);
        updateSelectedStatus.apply(this);
        this.fire('change');
    }
    function addAllSelectedState() {
        this.removeState('all-unselected');
        this.addState('all-selected');
    }
    function addAllUnselectedState() {
        this.removeState('all-selected');
        this.addState('all-unselected');
    }
    function updateSelectedStatus() {
        if (isAllShownSelected.apply(this)) {
            addAllSelectedState.apply(this);
        } else if (isAllShownUnselected.apply(this)) {
            addAllUnselectedState.apply(this);
        } else {
            this.removeState('all-selected');
            this.removeState('all-unselected');
        }
    }
    exports.batchAction = function (e) {
        var target = e.target;
        if (target === e.currentTarget) {
            return;
        }
        var selectAllElement = this.helper.getPart('batch-action-select');
        var deselectAllElement = this.helper.getPart('batch-action-deselect');
        var inverseElement = this.helper.getPart('batch-action-inverse');
        switch (target) {
        case selectAllElement:
            selectAll.apply(this);
            break;
        case deselectAllElement:
            deselectAll.apply(this);
            break;
        case inverseElement:
            inverse.apply(this);
            break;
        }
    };
    exports.eventDispatcher = function (e) {
        var tar = e.target;
        var helper = this.helper;
        var rowClasses = helper.getPartClasses('row');
        var actionClasses = helper.getPartClasses('row-action-icon');
        while (tar && tar !== document.body) {
            var rowDOM;
            if (this.hasIcon && this.fireOnIcon && u.every(actionClasses, u.partial(lib.hasClass, tar))) {
                rowDOM = tar.parentNode;
            } else {
                if (u.every(rowClasses, u.partial(lib.hasClass, tar))) {
                    rowDOM = tar;
                }
            }
            if (rowDOM) {
                this.operateRow(rowDOM);
                return;
            }
            tar = tar.parentNode;
        }
    };
    exports.operateRow = function (row) {
        var disabledClasses = this.helper.getPartClasses('row-disabled');
        if (u.every(disabledClasses, u.partial(lib.hasClass, row))) {
            return;
        }
        var index = parseInt(row.getAttribute('index'), 10);
        var item = this.allData[index];
        if (!item) {
            return;
        }
        if (!this.multi) {
            var currentSelectedId = this.currentSelectedId;
            var currentSelectedIndex = this.indexData[currentSelectedId];
            var currentSelectedItem = this.allData[currentSelectedIndex];
            updateSingleItemStatus(this, currentSelectedItem, false);
            this.currentSelectedId = currentSelectedItem === item ? null : item.id;
        } else {
            updateSingleItemStatus(this, item, !item.isSelected);
        }
        updateSelectedStatus.apply(this);
        this.fire('change');
    };
    exports.adjustHeight = function () {
        var settingHeight = this.height;
        var headHeight = 40;
        var searchBoxHeight = this.hasSearchBox ? 48 : 0;
        var contentHeight = settingHeight - headHeight - searchBoxHeight;
        if (this.isQuery()) {
            contentHeight -= 30;
        }
        var content = this.getContent().main;
        content.style.height = contentHeight + 'px';
    };
    function isAllShownSelected() {
        var data = this.isQuery() ? this.queriedData : this.allData;
        if (!data || !data.length) {
            return false;
        }
        return u.every(data, function (item) {
            return !!item.isSelected;
        });
    }
    function isAllShownUnselected() {
        var data = this.isQuery() ? this.queriedData : this.allData;
        if (!data || !data.length) {
            return false;
        }
        return u.every(data, function (item) {
            return !item.isSelected;
        });
    }
    exports.isAllSelected = function () {
        return u.every(this.allData, function (item) {
            return !!item.isSelected;
        });
    };
    exports.isAllUnselected = function () {
        if (!this.allData || !this.allData.length) {
            return false;
        }
        return u.every(this.allData, function (item) {
            return !item.isSelected;
        });
    };
    exports.parseValue = function (value) {
        if (!value) {
            return null;
        }
        var items = u.map(value.split(','), function (item) {
            return { id: item };
        });
        return items;
    };
    exports.setRawValue = function (rawValue) {
        this.$super(arguments);
        this.setProperties({ rawValue: u.extend({}, rawValue) });
    };
    exports.repaint = require('esui/painters').createRepaint(TableRichSelector.prototype.repaint, {
        name: 'rawValue',
        paint: function (control, rawValue) {
            updateSelectedStatus.apply(control);
        }
    });
    var SubmitableTableRichSelector = require('eoo').create(TableRichSelector, exports);
    ui.register(SubmitableTableRichSelector);
    return SubmitableTableRichSelector;
});
define('ssp-report/ui/RegionChart', [
    'require',
    'esui/lib',
    'esui/controlHelper',
    'esui/Control',
    './BaseChart',
    'echarts',
    'echarts/chart/map',
    'echarts/chart/pie',
    '../util',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var Control = require('esui/Control');
    var BaseChart = require('./BaseChart');
    var echarts = require('echarts');
    require('echarts/chart/map');
    require('echarts/chart/pie');
    var u = require('../util');
    var exports = {};
    exports.type = 'RegionChart';
    exports.styleType = 'Chart';
    exports.initOptions = function (options) {
        var mapSeries = {
            name: '',
            type: 'map',
            mapType: 'china',
            mapLocation: { x: 'left' },
            tooltip: {
                trigger: 'item',
                formatter: lib.bind(this.tipFormatter, this)
            },
            itemStyle: {
                normal: { label: { show: true } },
                emphasis: { label: { show: true } }
            },
            data: []
        };
        var pieSeries = {
            name: '',
            type: 'pie',
            tooltip: {
                trigger: 'item',
                formatter: '{a} <br/>{b} : {c} ({d}%)'
            },
            radius: [
                50,
                120
            ],
            data: []
        };
        var properties = {
            backgroundColor: '#f8f8f8',
            tooltip: { trigger: 'item' },
            animation: false,
            series: [
                mapSeries,
                pieSeries
            ]
        };
        this.chartOptions = properties;
        var controlProperties = {
            loadingText: '\u6B63\u5728\u52AA\u529B\u6E32\u67D3...',
            mapName: '',
            mapData: [],
            pieName: '',
            pieData: [],
            rangeColors: [
                '#ff8656',
                '#ffa347',
                '#ffd254',
                '#9de0a5',
                '#bbbbbb'
            ],
            pieColors: [
                '#ff8656',
                '#ffa347',
                '#ffd254',
                '#9de0a5',
                '#9de0a5',
                '#9de0a5',
                '#bbbbbb'
            ]
        };
        lib.extend(controlProperties, options);
        this.setProperties(controlProperties);
    };
    exports.initStructure = function () {
        this.main.innerHTML = '' + this.helper.getPartBeginTag('frame', 'div') + this.helper.getPartBeginTag('main', 'div') + this.helper.getPartEndTag('main', 'div') + this.helper.getPartBeginTag('loading-mask', 'div') + this.loadingText + this.helper.getPartEndTag('loading-mask', 'div') + this.helper.getPartEndTag('frame', 'div');
        lib.addClass(this.main, 'ui-regionchart');
        var chart = echarts.init(this.helper.getPart('main'));
        this.chart = chart;
        this.helper.addDOMEvent(window, 'resize', function () {
            var pieSeries = this.chartOptions.series[1];
            var chartMain = this.helper.getPart('main');
            if (chartMain) {
                var pieLeftPosition = getPieLeftPosition(chartMain.offsetWidth);
                pieSeries.center = [
                    pieLeftPosition,
                    200
                ];
                chart.setOption(this.chartOptions, true);
            }
            chart.resize();
        });
    };
    exports.tipFormatter = function (params, axisIndex) {
        var name = params.name;
        var value = params.value;
        var format = params.data.format;
        if (format === 'money') {
            value = value === '-' ? '- -' : u.formatNumber(value, 2, '');
        } else if (format === 'int') {
            value = u.formatNumber(value);
        } else if (format === 'percent') {
            value = value + '%';
        }
        var seriesName = params.seriesName;
        var html = name + '<br>' + seriesName + '\uFF1A' + value;
        return html;
    };
    exports.repaint = helper.createRepaint(Control.prototype.repaint, {
        name: [
            'mapData',
            'mapName',
            'pieData',
            'pieName'
        ],
        paint: function (chart, mapData, mapName, pieData, pieName) {
            if (!mapData || !pieData) {
                return;
            }
            var mapSeries = chart.chartOptions.series[0];
            var pieSeries = chart.chartOptions.series[1];
            var isMapEqual = u.isEqual(mapSeries.data, mapData);
            var isPieEqual = u.isEqual(pieSeries.data, pieData);
            var isMapEmpty = mapData.length === 0;
            var isPieEmpty = pieData.length === 0;
            if (isMapEqual && isPieEqual && !isPieEmpty && !isMapEmpty) {
                return;
            }
            if (u.isArray(pieData)) {
                pieSeries.data = formatPieData.call(chart, pieData);
                pieSeries.name = pieName;
            }
            if (u.isArray(mapData)) {
                mapSeries.data = mapData;
                mapSeries.name = mapName;
            }
            var maxItem = u.max(mapData, function (item) {
                return item.value;
            });
            var minItem = u.min(mapData, function (item) {
                return item.value;
            });
            var max = maxItem.value;
            var min = minItem.value;
            var dataRange = {
                orient: 'vertical',
                min: min,
                max: max,
                x: 'center',
                y: 'center',
                itemWidth: 7,
                itemHeight: 40,
                itemGap: 5,
                text: [
                    '\u9AD8',
                    '\u4F4E'
                ],
                color: chart.rangeColors,
                calculable: false
            };
            var chartMain = lib.g(chart.helper.getId('main'));
            var pieLeftPosition = getPieLeftPosition(chartMain.offsetWidth);
            pieSeries.center = [
                pieLeftPosition,
                200
            ];
            chart.chartOptions.dataRange = dataRange;
            chart.chartOptions.series = [
                mapSeries,
                pieSeries
            ];
            chart.draw();
        }
    });
    function formatPieData(data) {
        var control = this;
        return u.map(data, function (item, index) {
            item.itemStyle = {
                normal: {
                    color: function (args) {
                        return control.pieColors[args.dataIndex];
                    },
                    label: { textStyle: { color: control.pieColors[index] } },
                    labelLine: { lineStyle: { color: control.pieColors[index] } }
                }
            };
            return item;
        });
    }
    var LEFT_EXTREME_POSITION = 640;
    var WINDOW_WIDTH = 1200;
    function getPieLeftPosition(mainWidth) {
        var pieLeftPosition = mainWidth - (mainWidth > WINDOW_WIDTH ? 400 : 220);
        if (pieLeftPosition < LEFT_EXTREME_POSITION) {
            pieLeftPosition = LEFT_EXTREME_POSITION;
        }
        return pieLeftPosition;
    }
    var RegionChart = require('eoo').create(BaseChart, exports);
    require('esui').register(RegionChart);
    return RegionChart;
});
define('ssp-report/ui/RangeCalendarWithContrast', [
    'require',
    'esui/Button',
    'esui/MonthView',
    'esui/CheckBox',
    'esui/Label',
    'esui/InputControl',
    'esui/controlHelper',
    'esui/Layer',
    'esui/lib',
    'esui/main',
    '../util',
    'moment',
    'underscore',
    'eoo'
], function (require) {
    require('esui/Button');
    require('esui/MonthView');
    require('esui/CheckBox');
    require('esui/Label');
    var InputControl = require('esui/InputControl');
    var helper = require('esui/controlHelper');
    var Layer = require('esui/Layer');
    var lib = require('esui/lib');
    var ui = require('esui/main');
    var util = require('../util');
    var m = require('moment');
    var u = require('underscore');
    var BEGIN_DATE = new Date(1983, 8, 3);
    var END_DATE = new Date(2046, 10, 4);
    var DATE_FORMAT = 'YYYY-MM-DD';
    var layerProto = {};
    function getMiniCalendarHtml(calendar) {
        var shownShortCut = calendar.shownShortCut.split(',');
        var shownShortCutHash = {};
        for (var k = 0; k < shownShortCut.length; k++) {
            shownShortCutHash[shownShortCut[k]] = true;
        }
        var tplItem = '' + '<span data-index="${shortIndex}" class="${shortClass}" id="${shortId}">' + '${shortName}</span>';
        var shortItems = calendar.shortCutItems;
        var len = shortItems.length;
        var html = [];
        for (var i = 0; i < len; i++) {
            var shortItem = shortItems[i];
            if (shownShortCutHash[shortItem.text]) {
                var shortText = shortItem.text;
                var shortClasses = [calendar.helper.getPartClassName('shortcut-item')];
                if (i === 0) {
                    shortClasses = shortClasses.concat(calendar.helper.getPartClasses('shortcut-item-first'));
                }
                var disabled = isOutOfRange(calendar, shortItem);
                if (disabled) {
                    shortClasses = shortClasses.concat(calendar.helper.getPartClasses('shortcut-item-disabled'));
                }
                var shortId = calendar.helper.getId('shortcut-item' + i);
                html.push(lib.format(tplItem, {
                    shortIndex: i,
                    shortClass: shortClasses.join(' '),
                    shortId: shortId,
                    shortName: shortText
                }));
            }
        }
        return html.join('');
    }
    function getCalendarHtml(calendar, type) {
        var tpl = '' + '<div class="${frameClass}">' + '<div class="${labelClass}">' + '<h3>${labelTitle}</h3>' + '</div>' + '<div class="${calClass}">' + '<div data-ui="type:MonthView;' + 'childName:${calName}"></div>' + '</div>' + '</div>';
        return lib.format(tpl, {
            frameClass: calendar.helper.getPartClassName(type),
            labelClass: calendar.helper.getPartClassName('label'),
            labelTitle: type === 'begin' ? '\u5F00\u59CB\u65E5\u671F' : '\u7ED3\u675F\u65E5\u671F',
            titleId: calendar.helper.getId(type + 'Label'),
            calClass: calendar.helper.getPartClassName(type + '-cal'),
            calName: type + 'Cal'
        });
    }
    function getLayerHtml(calendar) {
        var helper = calendar.helper;
        var tpl = '' + helper.getPartBeginTag('shortcut', 'div') + '${shortCut}</div>' + helper.getPartBeginTag('body', 'div') + helper.getPartBeginTag('main', 'div') + '${beginCalendar}${endCalendar}' + helper.getPartEndTag('main', 'div') + helper.getPartBeginTag('side', 'div') + '<div class="${labelClass}"><h3>\u65E5\u671F\u8303\u56F4</h3></div>' + helper.getPartBeginTag('side-body', 'div') + helper.getPartHTML('base-time', 'div') + helper.getPartHTML('contrast-time', 'div') + helper.getPartBeginTag('contrast-action', 'div') + '<input type="checkbox" title="\u5BF9\u6BD4\u65E5\u671F\u8303\u56F4" class="${contrastCheckClass}"' + 'data-ui="type:CheckBox;childName:contrastCheck" />' + '<div data-ui="type:Select;childName:contrastSelector"' + 'class="${contrastSelectorClass}"></div>' + helper.getPartEndTag('contrast-action', 'div') + helper.getPartEndTag('side-body', 'div') + helper.getPartEndTag('side', 'div') + helper.getPartEndTag('body', 'div') + helper.getPartBeginTag('foot', 'div') + '<div class="${okBtnClass}" data-ui="type:Button;childName:okBtn;">\u786E\u5B9A</div>' + '<div class="${cancelBtnClass}" data-ui="type:Button;childName:cancelBtn;">\u53D6\u6D88</div>' + helper.getPartEndTag('foot', 'div') + '<div data-ui="type:Button;childName:closeBtn;skin:layerClose;height:12;"></div>';
        return lib.format(tpl, {
            shortCut: getMiniCalendarHtml(calendar),
            beginCalendar: getCalendarHtml(calendar, 'begin'),
            endCalendar: getCalendarHtml(calendar, 'end'),
            labelClass: helper.getPartClassName('label'),
            contrastCheckClass: helper.getPartClassName('contrast-action-check'),
            contrastSelectorClass: helper.getPartClassName('contrast-action-selector'),
            okBtnClass: helper.getPartClassName('okBtn'),
            cancelBtnClass: helper.getPartClassName('cancelBtn')
        });
    }
    function getSelectedIndex(calendar, value) {
        var shortCutItems = calendar.shortCutItems;
        var len = shortCutItems.length;
        for (var i = 0; i < len; i++) {
            var item = shortCutItems[i];
            var itemValue = item.getValue(calendar.now);
            if (isSameDate(value.begin, itemValue.begin) && isSameDate(value.end, itemValue.end)) {
                return i;
            }
        }
        return -1;
    }
    function selectIndex(calendar, index) {
        var shortCutItems = calendar.shortCutItems;
        if (index < 0 || index >= shortCutItems.length || calendar.hasState('contrast')) {
            return;
        }
        var value = shortCutItems[index].getValue(calendar.now);
        var begin = value.begin;
        var end = value.end;
        calendar.view = {
            begin: begin,
            end: end
        };
        paintCal(calendar, 'begin', begin);
        paintCal(calendar, 'end', end);
        paintMiniCal(calendar, index);
    }
    function shortcutClick(e) {
        var tar = e.target || e.srcElement;
        var classes = this.helper.getPartClasses('shortcut-item');
        var disableClasses = this.helper.getPartClasses('shortcut-item-disabled');
        while (tar && tar !== document.body) {
            if (lib.hasClass(tar, classes[0]) && !lib.hasClass(tar, disableClasses[0])) {
                var index = tar.getAttribute('data-index');
                selectIndex(this, +index);
                return;
            }
            tar = tar.parentNode;
        }
    }
    function changeHighlightState(monthView, date, highlightTypes) {
        var dateItem = monthView.getDateItemHTML(date);
        var parts = [
            'month-item-base',
            'month-item-contrast'
        ];
        u.each(parts, function (part) {
            monthView.helper.removePartClasses(part, dateItem);
        });
        u.each(highlightTypes, function (type) {
            monthView.helper.addPartClasses('month-item-' + type, dateItem);
        });
    }
    function updateSingleMonth(monthView, calendar) {
        var begin = m([
            monthView.year,
            monthView.month,
            1
        ]);
        var end = begin.clone().endOf('month');
        var view = calendar.view;
        var rangeBegin = m(view.begin).clone().startOf('day');
        var rangeEnd = m(view.end).clone().endOf('day');
        if (rangeBegin > rangeEnd) {
            var tempDate = rangeEnd;
            rangeEnd = rangeBegin.endOf('day');
            rangeBegin = tempDate.startOf('day');
        }
        var contrastView = calendar.contrastView;
        var contrastRangeBegin = m(contrastView.begin).clone().startOf('day');
        var contrastRangeEnd = m(contrastView.end).clone().endOf('day');
        var cursor = begin;
        while (cursor <= end) {
            var highlightTypes = [];
            if (cursor >= rangeBegin && cursor <= rangeEnd) {
                highlightTypes.push('base');
            }
            if (calendar.hasState('contrast') && !u.isEmpty(contrastView) && cursor >= contrastRangeBegin && cursor <= contrastRangeEnd) {
                highlightTypes.push('contrast');
            }
            changeHighlightState(monthView, cursor.toDate(), highlightTypes);
            cursor = cursor.add('days', 1);
        }
    }
    function updateHighlightRange(calendar) {
        var beginMonth = calendar.getChild('beginCal');
        var endMonth = calendar.getChild('endCal');
        updateSingleMonth(beginMonth, calendar);
        updateSingleMonth(endMonth, calendar);
    }
    function syncContrastCalendar(type) {
        var begin = this.getChild('beginCal').getRawValue();
        var end = this.getChild('endCal').getRawValue();
        var durations = util.getDurations(m(this.view.end), m(this.view.begin));
        if (type === 'begin') {
            var realEnd = m(begin).add('days', durations);
            if (!isSameDate(realEnd.toDate(), end)) {
                this.getChild('endCal').setRawValue(realEnd.toDate());
                return;
            }
        } else {
            var realBegin = m(end).subtract('days', durations);
            if (!isSameDate(realBegin.toDate(), begin)) {
                this.getChild('beginCal').setRawValue(realBegin.toDate());
                return;
            }
        }
    }
    function syncContrastSelector(contrastView) {
        var contrastSelector = this.getChild('contrastSelector');
        var index = getContrastItemIndex.call(this, contrastView);
        contrastSelector.set('selectedIndex', index);
    }
    function getContrastItemIndex(range) {
        var contrastItems = this.contrastItems;
        var baseView = this.view;
        for (var i = 1; i < contrastItems.length; i++) {
            var value = contrastItems[i].getValue(baseView);
            if (isSameDate(value.begin, range.begin) && isSameDate(value.end, range.end)) {
                return i;
            }
        }
        return 0;
    }
    function updateView(monthView, type) {
        var date = monthView.getRawValue();
        if (!date) {
            return;
        }
        var timeTextWrapperPartName = '';
        var dateRange = null;
        if (this.hasState('contrast')) {
            syncContrastCalendar.call(this, type);
            var begin = this.getChild('beginCal').getRawValue();
            var end = this.getChild('endCal').getRawValue();
            this.contrastView = {
                begin: begin,
                end: end
            };
            syncContrastSelector.call(this, this.contrastView);
            var okBtn = this.getChild('okBtn');
            okBtn.isDisabled() && okBtn.enable();
            timeTextWrapperPartName = 'contrast-time';
            dateRange = this.contrastView;
        } else {
            this.view[type] = date;
            var selectedIndex = getSelectedIndex(this, this.view);
            paintMiniCal(this, selectedIndex);
            timeTextWrapperPartName = 'base-time';
            dateRange = this.view;
        }
        paintTimeText(this, dateRange, timeTextWrapperPartName);
        updateHighlightRange(this);
    }
    function toggleContrast(e) {
        var contrastCheck = e.target;
        var contrastSelector = this.getChild('contrastSelector');
        var shortcut = this.helper.getPart('shortcut');
        var beginCal = this.getChild('beginCal');
        var endCal = this.getChild('endCal');
        var okBtn = this.getChild('okBtn');
        var stateMethod = contrastCheck.isChecked() ? 'addState' : 'removeState';
        this[stateMethod]('contrast');
        if (!this.hasState('contrast')) {
            this.contrastView = {};
            contrastSelector.hide();
            this.helper.removePartClasses('shortcut-disabled', shortcut);
            paintCal(this, 'begin', m(this.view.begin).clone().toDate());
            paintCal(this, 'end', m(this.view.end).clone().toDate());
            paintTimeText(this, this.contrastView, 'contrast-time');
            okBtn.enable();
        } else {
            this.helper.addPartClasses('shortcut-disabled', shortcut);
            contrastSelector.set('selectedIndex', 0);
            contrastSelector.show();
            var properties = {
                range: {
                    begin: this.range.begin,
                    end: END_DATE
                }
            };
            beginCal.setProperties(properties);
            endCal.setProperties(properties);
            okBtn.disable();
        }
    }
    function selectContrastItem(e) {
        var contrastSelector = e.target;
        var selectedItem = contrastSelector.getSelectedItem();
        if (!selectedItem.getValue) {
            return;
        }
        var value = selectedItem.getValue(this.view);
        if (!isSameDate(value.begin, this.contrastView.begin) || !isSameDate(value.end, this.contrastView.end)) {
            this.contrastView = value;
            paintCal(this, 'begin', this.contrastView.begin);
            paintCal(this, 'end', this.contrastView.end);
        }
    }
    function commitValue(calendar) {
        var view = calendar.view;
        var rawValue = {
            begin: view.begin,
            end: view.end
        };
        rawValue = sortDate(rawValue);
        if (calendar.hasState('contrast')) {
            rawValue.contrastBegin = calendar.contrastView.begin;
            rawValue.contrastEnd = calendar.contrastView.end;
        }
        var event = calendar.fire('beforechange', { value: rawValue });
        if (!event.isDefaultPrevented()) {
            calendar.rawValue = rawValue;
            calendar.value = calendar.convertToParam(rawValue);
            updateMain(calendar, rawValue);
            calendar.layer.hide();
            calendar.fire('change', rawValue);
        }
    }
    function bindLayerEvents(calendar) {
        var shortcutDom = calendar.helper.getPart('shortcut');
        calendar.helper.addDOMEvent(shortcutDom, 'click', shortcutClick);
        var beginCalendar = calendar.getChild('beginCal');
        beginCalendar.on('change', u.bind(updateView, calendar, beginCalendar, 'begin'));
        beginCalendar.on('changemonth', u.partial(updateHighlightRange, calendar));
        var endCalendar = calendar.getChild('endCal');
        endCalendar.on('change', u.bind(updateView, calendar, endCalendar, 'end'));
        endCalendar.on('changemonth', u.partial(updateHighlightRange, calendar));
        var contrastCheck = calendar.getChild('contrastCheck');
        contrastCheck.on('change', u.bind(toggleContrast, calendar));
        var contrastSelector = calendar.getChild('contrastSelector');
        var porperties = {
            selectedIndex: 0,
            datasource: calendar.contrastItems
        };
        contrastSelector.setProperties(porperties);
        contrastSelector.on('change', u.bind(selectContrastItem, calendar));
        var okBtn = calendar.getChild('okBtn');
        okBtn.on('click', u.partial(commitValue, calendar));
        var cancelBtn = calendar.getChild('cancelBtn');
        cancelBtn.on('click', u.bind(calendar.layer.hide, calendar.layer));
        var closeBtn = calendar.getChild('closeBtn');
        closeBtn.on('click', u.bind(calendar.layer.hide, calendar.layer));
    }
    function paintTimeText(calendar, dateRange, part) {
        var timeTextWrapper = calendar.helper.getPart(part);
        var timeText = '';
        if (dateRange && dateRange.begin && dateRange.end) {
            dateRange = {
                begin: new Date(dateRange.begin.getTime()),
                end: new Date(dateRange.end.getTime())
            };
            timeText = getDateValueText(calendar, sortDate(dateRange));
        }
        timeTextWrapper.innerHTML = timeText;
    }
    function paintContrast(calendar, flag) {
        var contrastCheck = calendar.getChild('contrastCheck');
        contrastCheck.setChecked(flag);
    }
    function paintMiniCal(calendar, index) {
        var shortCutItems = calendar.shortCutItems;
        var miniMode = calendar.miniMode;
        if (miniMode !== null && miniMode !== index) {
            calendar.helper.removePartClasses('shortcut-item-selected', calendar.helper.getPart('shortcut-item' + miniMode));
        }
        calendar.miniMode = index;
        if (index >= 0) {
            calendar.helper.addPartClasses('shortcut-item-selected', calendar.helper.getPart('shortcut-item' + index));
            calendar.curMiniName = shortCutItems[index].text;
        } else {
            calendar.curMiniName = null;
        }
    }
    function paintCal(calendar, type, value) {
        var monthView = calendar.getChild(type + 'Cal');
        if (!monthView) {
            return;
        }
        var properties = {
            rawValue: value,
            range: {
                begin: calendar.range.begin,
                end: END_DATE
            }
        };
        if (!calendar.hasState('contrast')) {
            var selectedIndex = getSelectedIndex(calendar, calendar.view);
            paintMiniCal(calendar, selectedIndex);
            properties.range = calendar.range;
        }
        monthView.setProperties(properties);
    }
    function paintLayer(calendar, value) {
        calendar.view.begin = value.begin;
        calendar.view.end = value.end;
        calendar.contrastView.begin = value.contrastBegin;
        calendar.contrastView.end = value.contrastEnd;
        paintContrast(calendar, value.contrastBegin && value.contrastEnd);
        if (calendar.hasState('contrast')) {
            paintCal(calendar, 'begin', calendar.contrastView.begin);
            paintCal(calendar, 'end', calendar.contrastView.end);
        } else {
            paintCal(calendar, 'begin', calendar.view.begin);
            paintCal(calendar, 'end', calendar.view.end);
        }
        var selectedIndex = getSelectedIndex(calendar, calendar.view);
        paintMiniCal(calendar, selectedIndex);
        paintTimeText(calendar, calendar.view, 'base-time');
    }
    layerProto.render = function (element) {
        var calendar = this.control;
        lib.addClass(element, 'ui-rangecalendarwithcontrast-layer');
        document.body.appendChild(element);
        element.innerHTML = getLayerHtml(calendar);
        calendar.helper.initChildren(element);
        bindLayerEvents(calendar);
        paintLayer(calendar, calendar.rawValue);
    };
    layerProto.toggle = function () {
        var element = this.getElement();
        if (!element || this.control.helper.isPart(element, 'layer-hidden')) {
            var calendar = this.control;
            paintLayer(calendar, calendar.rawValue, 'repaint');
            this.show();
        } else {
            this.hide();
        }
    };
    var RangeCalendarWithContrastLayer = require('eoo').create(Layer, layerProto);
    var exports = {};
    exports.type = 'RangeCalendarWithContrast';
    exports.styleType = 'RangeCalendar';
    exports.constructor = function (options) {
        this.now = new Date();
        this.$super(arguments);
        this.layer = new RangeCalendarWithContrastLayer(this);
    };
    function startOfDay(day) {
        return m(day).startOf('day').toDate();
    }
    function endOfDay(day) {
        return m(day).endOf('day').toDate();
    }
    function isOutOfRange(calendar, shortItem) {
        var range = calendar.range;
        var itemValue = shortItem.getValue(calendar.now);
        var result = startOfDay(range.begin) > startOfDay(range.begin) || endOfDay(itemValue.end) < endOfDay(itemValue.end);
        return result;
    }
    function isSameDate(date1, date2) {
        if (!date1 && date2 || date1 && !date2) {
            return false;
        } else if (!date1 && !date2) {
            return true;
        }
        return m(date1).isSame(date2, 'day');
    }
    function updateMain(calendar, range) {
        var helper = calendar.helper;
        var text = helper.getPart('text');
        var tpl = '<div class="${baseDateClass}">${baseText}</div>';
        var data = {
            baseDateClass: helper.getPartClassName('text-base') + ' ' + helper.getPartClassName('text-date'),
            contrastDateId: helper.getId('text-contrast'),
            baseText: getValueText(calendar, range)
        };
        if (calendar.hasState('contrast')) {
            tpl += '' + helper.getPartBeginTag('text-label', 'div') + '&nbsp;&nbsp;\u5BF9\u6BD4&nbsp;&nbsp;</div>' + '<div class="${contrastDateClass}" id="${contrastDateId}">${contrastText}</div>';
            data.contrastDateClass = helper.getPartClassName('text-contrast') + ' ' + helper.getPartClassName('text-date');
            data.contrastDateId = helper.getId('text-contrast');
            data.contrastText = getDateValueText(calendar, {
                begin: range.contrastBegin,
                end: range.contrastEnd
            });
        }
        text.innerHTML = lib.format(tpl, data);
    }
    exports.convertToParam = function (rawValue) {
        var beginTail = ' 00:00:00';
        var endTail = ' 23:59:59';
        var timeResult = [];
        timeResult.push(m(rawValue.begin).format(DATE_FORMAT) + beginTail);
        timeResult.push(m(rawValue.end).format(DATE_FORMAT) + endTail);
        if (rawValue.contrastBegin && rawValue.contrastEnd) {
            timeResult.push(m(rawValue.contrastBegin).format(DATE_FORMAT) + beginTail);
            timeResult.push(m(rawValue.contrastEnd).format(DATE_FORMAT) + endTail);
        }
        return timeResult.join(',');
    };
    exports.convertToRaw = function (value) {
        var strDates = value.split(',');
        var begin = strDates[0] || '1983-09-03';
        var end = strDates[1] || '2046-11-04';
        var baseValue = {
            begin: m(begin, DATE_FORMAT),
            end: m(end, DATE_FORMAT)
        };
        baseValue = sortDate(baseValue);
        var rawValue = {
            begin: baseValue.begin.toDate(),
            end: baseValue.end.toDate()
        };
        if (strDates.length >= 4 && strDates[2] && strDates[3]) {
            var contrastValue = {
                begin: m(strDates[2], DATE_FORMAT),
                end: m(strDates[3], DATE_FORMAT)
            };
            contrastValue = sortDate(contrastValue);
            if (checkContrastRange(contrastValue, baseValue)) {
                rawValue.contrastBegin = contrastValue.begin.toDate();
                rawValue.contrastEnd = contrastValue.end.toDate();
            }
        }
        return rawValue;
    };
    function checkContrastRange(contrastView, baseView) {
        var durations = util.getDurations(m(baseView.begin), m(baseView.end));
        var contrastDurations = util.getDurations(m(contrastView.begin), m(contrastView.end));
        return durations === contrastDurations;
    }
    function getValueText(calendar, rawValue) {
        var dateText = getDateValueText(calendar, rawValue);
        var shortcut = '';
        if (!calendar.curMiniName && calendar.miniMode !== null && calendar.miniMode >= 0 && calendar.miniMode < calendar.shortCutItems.length) {
            calendar.curMiniName = calendar.shortCutItems[calendar.miniMode].text;
        }
        if (calendar.curMiniName) {
            shortcut = calendar.curMiniName + '&nbsp;&nbsp;';
        }
        if (dateText) {
            return calendar.hasState('contrast') ? dateText : shortcut + dateText;
        }
        return '';
    }
    function getDateValueText(calendar, value) {
        var begin = value.begin;
        var end = value.end;
        var pattern = calendar.dateFormat;
        if (begin && end) {
            return m(begin).format(pattern) + ' \u81F3 ' + m(end).format(pattern);
        }
        return '';
    }
    function sortDate(range) {
        if (range && range.begin > range.end) {
            var temp = range.begin;
            range.begin = range.end;
            range.end = temp;
        }
        return range;
    }
    exports.initOptions = function (options) {
        var properties = {};
        lib.extend(properties, this.$self.defaultProperties, options);
        helper.extractValueFromInput(this, properties);
        if (properties.value) {
            properties.rawValue = this.convertToRaw(properties.value);
            properties.miniMode = null;
        } else if (properties.rawValue) {
            properties.miniMode = null;
        } else if (properties.miniMode != null) {
            var shortCutItem = properties.shortCutItems[properties.miniMode];
            if (shortCutItem) {
                properties.rawValue = shortCutItem.getValue(this.now);
                properties.miniMode = parseInt(properties.miniMode, 10);
            } else {
                properties.miniMode = null;
            }
        }
        if (properties.rawValue) {
            properties.view = u.clone(properties.rawValue);
        }
        if (properties.range && typeof properties.range === 'string') {
            properties.range = this.convertToRaw(properties.range);
        }
        var defaultRaw = {
            begin: this.now,
            end: this.now
        };
        var defaults = {
            range: {
                begin: BEGIN_DATE,
                end: END_DATE
            },
            rawValue: defaultRaw,
            view: u.clone(defaultRaw),
            contrastView: {},
            contrast: false,
            shownShortCut: u.pluck(properties.shortCutItems, 'text').join(',')
        };
        u.defaults(properties, defaults);
        this.setProperties(properties);
    };
    exports.setProperties = function (properties) {
        if (this.hasOwnProperty('contrast')) {
            this.contrast = !!this.contrast;
        }
        if (properties.hasOwnProperty('rawValue')) {
            var rawValue = properties.rawValue;
            if (rawValue && rawValue.contrastBegin && rawValue.contrastEnd) {
                var contrastView = {
                    begin: rawValue.contrastBegin,
                    end: rawValue.contrastEnd
                };
                if (checkContrastRange(contrastView, rawValue)) {
                    properties.contrastView = contrastView;
                    properties.contrast = true;
                }
            }
        }
        return this.$super(arguments);
    };
    exports.initStructure = function () {
        if (lib.isInput(this.main)) {
            helper.replaceMain(this);
        }
        var tpl = [
            '<div class="${arrow}"></div>',
            '<div class="${className}" id="${id}"></div>'
        ];
        this.main.innerHTML = lib.format(tpl.join('\n'), {
            className: this.helper.getPartClassName('text'),
            id: helper.getId(this, 'text'),
            arrow: this.helper.getPartClassName('arrow')
        });
        lib.addClass(this.main, 'ui-rangecalendarwithcontrast');
    };
    exports.initEvents = function () {
        this.helper.addDOMEvent(this.main, 'mousedown', u.bind(this.layer.toggle, this.layer));
    };
    exports.repaint = helper.createRepaint(InputControl.prototype.repaint, {
        name: 'contrast',
        paint: function (calendar, contrast) {
            var method = contrast ? 'addState' : 'removeState';
            calendar[method]('contrast');
        }
    }, {
        name: [
            'rawValue',
            'range'
        ],
        paint: function (calendar, rawValue, range) {
            if (range) {
                if (typeof range === 'string') {
                    range = calendar.convertToRaw(range);
                }
                if (!range.begin) {
                    range.begin = BEGIN_DATE;
                } else if (!range.end) {
                    range.end = END_DATE;
                }
                calendar.range = range;
            }
            if (rawValue) {
                updateMain(calendar, rawValue);
            }
        }
    }, {
        name: [
            'disabled',
            'hidden',
            'readOnly'
        ],
        paint: function (calendar, disabled, hidden, readOnly) {
            if (disabled || hidden || readOnly) {
                calendar.layer.hide();
            }
        }
    });
    exports.stringifyValue = function (rawValue) {
        return this.convertToParam(rawValue) || '';
    };
    exports.parseValue = function (value) {
        return this.convertToRaw(value);
    };
    exports.addState = function (state) {
        this.$super(arguments);
        var element = this.helper.getPart('layer');
        lib.addClasses(element, this.helper.getStateClasses(state));
    };
    exports.removeState = function (state) {
        this.$super(arguments);
        var element = this.helper.getPart('layer');
        lib.removeClasses(element, this.helper.getStateClasses(state));
    };
    exports.getShortcutAlias = function () {
        var shortCutItems = this.shortCutItems;
        if (this.miniMode != null && this.miniMode >= 0) {
            return shortCutItems[this.miniMode].alias;
        }
        return null;
    };
    exports.dispose = function () {
        if (helper.isInStage(this, 'DISPOSED')) {
            return;
        }
        if (this.layer) {
            this.layer.dispose();
            this.layer = null;
        }
        this.$super(arguments);
    };
    var RangeCalendarWithContrast = require('eoo').create(InputControl, exports);
    RangeCalendarWithContrast.defaultProperties = {
        dateFormat: DATE_FORMAT,
        shortCutItems: [
            util.dateRangeShortcut.yesterday,
            util.dateRangeShortcut.today,
            util.dateRangeShortcut.lastSevenDays,
            util.dateRangeShortcut.lastWeek,
            util.dateRangeShortcut.currentMonth,
            util.dateRangeShortcut.lastMonth,
            util.dateRangeShortcut.lastQuarter
        ],
        contrastItems: [
            {
                text: '\u81EA\u5B9A\u4E49',
                value: 0
            },
            util.contrastRangeShortcut.lastRange,
            util.contrastRangeShortcut.lastYear
        ]
    };
    ui.register(RangeCalendarWithContrast);
    return RangeCalendarWithContrast;
});
define('ssp-report/ui/LineChart', [
    'require',
    'moment/lang/zh-cn',
    'echarts/chart/line',
    'moment',
    'esui/lib',
    'esui/controlHelper',
    './BaseChart',
    '../util',
    'eoo',
    'esui'
], function (require) {
    require('moment/lang/zh-cn');
    require('echarts/chart/line');
    var m = require('moment');
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var BaseChart = require('./BaseChart');
    var u = require('../util');
    var exports = {};
    exports.type = 'LineChart';
    exports.styleType = 'Chart';
    exports.getTipTitleHtml = function (options) {
        var timeStr;
        if (options.isContrast) {
            timeStr = getContrastRealTime.call(this, options.pointIndex);
        } else {
            timeStr = options.pointInfo[0].name;
        }
        var week = '';
        var date = m(timeStr, 'YYYY-MM-DD', 'zh-cn');
        if (date.isValid()) {
            week = date.format('dddd');
        }
        timeStr += ' ' + week;
        return timeStr;
    };
    function getContrastRealTime(index) {
        var xSeriesContrast = this.xSeriesContrast;
        return xSeriesContrast[index];
    }
    exports.formatYSeriesData = function (serie, index) {
        if (this.isContrast) {
            index = Math.floor(index / 2);
        }
        var areaColor = u.hexToRGB(serie.color);
        return {
            name: serie.label,
            type: 'line',
            symbol: 'emptyCircle',
            yAxisIndex: index,
            itemStyle: {
                normal: {
                    color: serie.color,
                    lineStyle: { width: 2 },
                    areaStyle: { color: 'rgba(' + areaColor.r + ',' + areaColor.g + ',' + areaColor.b + ', 0.2)' }
                }
            },
            smooth: this.get('serieSmooth'),
            data: serie.data
        };
    };
    exports.repaint = helper.createRepaint(BaseChart.prototype.repaint);
    exports.initChartOptions = function () {
        return {
            tooltip: {
                trigger: 'axis',
                formatter: lib.bind(this.tipFormatter, this),
                axisPointer: {
                    type: 'line',
                    lineStyle: {
                        color: this.get('tooltipLineColor'),
                        width: 1,
                        type: 'solid'
                    }
                }
            },
            xAxis: [{
                    type: 'category',
                    boundaryGap: false,
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: this.get('xAxisLineColor'),
                            width: 1,
                            style: 'solid'
                        }
                    },
                    axisTick: { show: false },
                    splitLine: { show: false }
                }],
            grid: { borderWidth: this.get('gridBorderWidth') }
        };
    };
    var LineChart = require('eoo').create(BaseChart, exports);
    require('esui').register(LineChart);
    return LineChart;
});
define('ssp-report/ui/GroupableSimpleSelect', [
    'require',
    'esui/painters',
    'esui/lib',
    'underscore',
    'esui/Control',
    'eoo',
    'esui'
], function (require) {
    var painters = require('esui/painters');
    var lib = require('esui/lib');
    var u = require('underscore');
    var Control = require('esui/Control');
    var exports = {};
    exports.type = 'GroupableSimpleSelect';
    exports.itemTemplate = '<span>${text}</span>';
    function indexDatasource(datasource) {
        var keyIndexes = [];
        var datasourceIndexes = {};
        u.each(datasource, function (item, i) {
            if (item.hasOwnProperty('group')) {
                u.each(item.items, function (value, index) {
                    var indexedItem = u.extend({}, value);
                    indexedItem.group = item.group;
                    indexedItem.rawItem = value;
                    if (index === item.items.length - 1) {
                        indexedItem.groupLast = true;
                    }
                    var key = value.value + value.text;
                    datasourceIndexes[key] = indexedItem;
                    keyIndexes.push(key);
                });
            } else {
                var key = item.value + item.text;
                datasourceIndexes[key] = item;
                keyIndexes.push(key);
            }
        });
        this.datasourceIndexes = datasourceIndexes;
        this.keyIndexes = keyIndexes;
    }
    exports.initOptions = function (options) {
        var properties = {
            hasHead: false,
            title: '\u6807\u9898\u540D',
            datasource: [],
            selectedIndex: -1
        };
        lib.extend(properties, options);
        this.setProperties(properties);
    };
    exports.getHeadHTML = function () {
        var head = '<h3 data-ui="type:Label;childName:title;" class="${headClass}">${title}</h3>';
        return lib.format(head, {
            title: this.title,
            headClass: this.helper.getPartClassName('head')
        });
    };
    exports.getItemHTML = function (item) {
        return lib.format(this.itemTemplate, { text: u.escape(item.text) });
    };
    exports.getListHTML = function () {
        var html = [];
        var tpl = '<li data-index="${index}" class="${nodeClass}" id="${nodeId}">${item}</li>';
        var helper = this.helper;
        u.each(this.keyIndexes, function (key, i) {
            var classes = helper.getPartClasses('node');
            var item = this.datasourceIndexes[key];
            if (i === this.selectedIndex) {
                classes.push.apply(classes, helper.getPartClasses('node-selected'));
            }
            if (item.disabled) {
                classes.push.apply(classes, helper.getPartClasses('node-disabled'));
            }
            if (item.group) {
                classes.push.apply(classes, helper.getPartClasses('node-' + item.group));
            }
            if (i !== this.keyIndexes.length - 1 && (item.groupLast || !item.group && this.keyIndexes[i + 1].group)) {
                classes.push.apply(classes, helper.getPartClasses('node-group-last'));
            }
            var nodeHTML = lib.format(tpl, {
                index: i,
                nodeClass: classes.join(' '),
                nodeId: helper.getId('node-' + i),
                item: this.getItemHTML(item)
            });
            html.push(nodeHTML);
        }, this);
        return html.join('');
    };
    exports.initStructure = function () {
        var tpl = '' + '${head}' + '<div class="${bodyClass}" id="${bodyId}">' + '<ul id="${listId}">' + '${list}' + '</ul>' + '</div>';
        var helper = this.helper;
        this.main.innerHTML = lib.format(tpl, {
            head: this.hasHead ? this.getHeadHTML() : '',
            bodyClass: helper.getPartClassName('body'),
            bodyId: helper.getId('body'),
            listId: helper.getId('list'),
            list: this.getListHTML()
        });
        this.initChildren();
    };
    exports.initEvents = function () {
        var list = this.helper.getPart('list');
        this.helper.addDOMEvent(list, 'click', this.selectItem);
    };
    function updateSelectedStatus(index) {
        var i = 0;
        var selectedClasses = this.helper.getPartClasses('node-selected');
        if (u.isEmpty(this.keyIndexes)) {
            return;
        }
        while (i < this.keyIndexes.length) {
            var node = this.helper.getPart('node-' + i);
            if (u.every(selectedClasses, u.partial(lib.hasClass, node))) {
                this.helper.removePartClasses('node-selected', node);
                break;
            }
            i++;
        }
        var selectedNode = this.helper.getPart('node-' + index);
        this.helper.addPartClasses('node-selected', selectedNode);
    }
    exports.selectItem = function (e) {
        var target = e.target;
        while (target !== e.currentTarget && !lib.hasAttribute(target, 'data-index')) {
            target = target.parentNode;
        }
        if (target === e.currentTarget) {
            return;
        }
        var index = +target.getAttribute('data-index');
        var key = this.keyIndexes[index];
        var item = this.datasourceIndexes[key];
        if (item) {
            if (item.disabled || index === this.selectedIndex) {
                return;
            }
            this.setProperties({ selectedIndex: index });
            this.fire('select');
        }
    };
    exports.setSelectedItem = function (item) {
        this.setProperties({ selectedItem: item });
    };
    exports.getSelectedItem = function () {
        var key = this.keyIndexes[this.selectedIndex];
        var item = this.datasourceIndexes[key];
        if (item) {
            return item.rawItem || item;
        }
        return null;
    };
    exports.setProperties = function (properties) {
        if (properties.datasource && properties.datasource.length) {
            var selectedItemkey = '';
            if (!u.isEmpty(this.datasource) && this.selectedIndex >= 0) {
                selectedItemkey = this.keyIndexes[this.selectedIndex];
            }
            indexDatasource.call(this, properties.datasource);
            if (selectedItemkey && this.datasourceIndexes[selectedItemkey]) {
                properties.selectedIndex = this.keyIndexes[selectedItemkey];
            }
        }
        if (properties.hasOwnProperty('selectedItem')) {
            var item = properties.selectedItem;
            var key = item ? item.value + item.text : '';
            properties.selectedIndex = u.indexOf(this.keyIndexes, key);
            u.omit(properties, 'selectedItem');
        }
        var changes = this.$super(arguments);
        if (changes.hasOwnProperty('selectedIndex')) {
            this.fire('change');
        }
    };
    exports.repaint = painters.createRepaint(Control.prototype.repaint, {
        name: 'title',
        paint: function (control, title) {
            var titleLabel = control.getChild('title');
            titleLabel && titleLabel.setText(title);
        }
    }, {
        name: 'datasource',
        paint: function (control, datasource) {
            var listElement = control.helper.getPart('list');
            listElement.innerHTML = control.getListHTML();
        }
    }, {
        name: 'selectedIndex',
        paint: function (control, selectedIndex) {
            updateSelectedStatus.call(control, selectedIndex);
        }
    });
    var GroupableSimpleSelect = require('eoo').create(Control, exports);
    require('esui').register(GroupableSimpleSelect);
    return GroupableSimpleSelect;
});
define('ssp-report/ui/FilterSelect', [
    'require',
    './GroupableSimpleSelect',
    './SubmitableTableRichSelector',
    'underscore',
    'esui',
    'esui/lib',
    'eoo',
    'esui/Layer',
    'esui/InputControl',
    'esui/painters'
], function (require) {
    require('./GroupableSimpleSelect');
    require('./SubmitableTableRichSelector');
    var u = require('underscore');
    var ui = require('esui');
    var lib = require('esui/lib');
    var eoo = require('eoo');
    var Layer = require('esui/Layer');
    var InputControl = require('esui/InputControl');
    var layerProto = {};
    function showFilter(control, datasource, rawValue) {
        var filter = control.getChild('filter');
        filter.setProperties({ datasource: datasource });
        filter.setRawValue(rawValue);
        filter.enable();
        filter.show();
    }
    function hideFilter(control) {
        var filter = control.getChild('filter');
        filter.setRawValue(null);
        filter.disable();
        filter.hide();
    }
    function paintFilter(control, selectedItem, datasource) {
        var filterRawValue = [];
        if (control.filterInitialStatus === 1) {
            filterRawValue = u.map(datasource, function (item) {
                return u.pick(item, 'id');
            });
        }
        var rawValue = control.getRawValue();
        if (rawValue && rawValue.selectedItem && rawValue.selectedItem.value === selectedItem.value && rawValue.filterRawValue && rawValue.filterRawValue.length) {
            filterRawValue = rawValue.filterRawValue;
        }
        showFilter(control, datasource, filterRawValue);
    }
    function enterFilter(selectedItem) {
        if (selectedItem.data) {
            paintFilter(this, selectedItem, selectedItem.data);
        } else {
            var filter = this.getChild('filter');
            filter.setProperties({ datasource: [] });
            this.fire('loaddata', { item: selectedItem });
        }
    }
    layerProto.render = function (element) {
        var select = this.control;
        document.body.appendChild(element);
        element.innerHTML = this.getLayerHTML();
        select.helper.initChildren(element);
    };
    layerProto.getLayerHTML = function () {
        var tpl = '' + '<div data-ui="type:GroupableSimpleSelect;childName:selector" class="${selectorClass}"></div>' + '<div data-ui="type:SubmitableTableRichSelector;childName:filter;hidden:hidden" ' + 'class="${filterClass}"></div>';
        return lib.format(tpl, {
            selectorClass: this.control.helper.getPartClassName('selector'),
            filterClass: this.control.helper.getPartClassName('filter')
        });
    };
    layerProto.paintLayer = function () {
        var filterSelect = this.control;
        var selector = filterSelect.getChild('selector');
        var properties = {
            datasource: filterSelect.selectorDatasource,
            selectedItem: null
        };
        if (filterSelect.rawValue && filterSelect.rawValue.selectedItem) {
            properties.selectedItem = filterSelect.rawValue.selectedItem;
        }
        selector.setProperties(properties);
        var selectedItem = selector.getSelectedItem();
        if (selectedItem && selectedItem.canFilter) {
            enterFilter.call(filterSelect, selectedItem);
        } else {
            hideFilter(filterSelect);
        }
    };
    layerProto.show = function () {
        this.paintLayer();
        this.$super(arguments);
    };
    function isEqual(object1, object2) {
        var result = false;
        if (!object1 && !object2) {
            result = true;
        } else if (object1 && object2) {
            if (!object1.selectedItem && !object2.selectedItem) {
                result = true;
            } else if (object1.selectedItem && object2.selectedItem) {
                result = object1.selectedItem.value === object2.selectedItem.value;
                result = result && u.isEqual(u.pluck(object1.filterRawValue, 'id'), u.pluck(object2.filterRawValue, 'id'));
            }
        }
        return result;
    }
    function submit() {
        this.layer.hide();
        var selector = this.getChild('selector');
        var filter = this.getChild('filter');
        var selectedItem = selector.getSelectedItem();
        var newRawValue = null;
        if (selectedItem.canFilter) {
            if (!selectedItem.data || !selectedItem.data.length || filter.isAllSelected()) {
                newRawValue = { selectedItem: selectedItem };
            } else if (!filter.isAllUnselected()) {
                var selectedData = filter.getRawValue();
                newRawValue = {
                    selectedItem: selectedItem,
                    filterRawValue: selectedData
                };
            }
        } else {
            newRawValue = { selectedItem: selectedItem };
        }
        if (!isEqual(this.rawValue, newRawValue)) {
            this.fire('beforechange');
            this.setRawValue(newRawValue);
            this.fire('change');
        }
    }
    function selectItem(e) {
        var selector = e.target;
        var selectedItem = selector.getSelectedItem();
        if (selectedItem.canFilter) {
            enterFilter.call(this, selectedItem);
            return;
        }
        hideFilter(this);
        submit.apply(this);
    }
    layerProto.initBehavior = function () {
        var filterSelect = this.control;
        var selector = filterSelect.getChild('selector');
        selector.on('select', selectItem, filterSelect);
        var filter = filterSelect.getChild('filter');
        filter.on('submit', submit, filterSelect);
    };
    layerProto.isHidden = function () {
        var element = this.getElement();
        return this.control.helper.isPart(element, 'layer-hidden');
    };
    var FilterSelectLayer = eoo.create(Layer, layerProto);
    var exports = {};
    exports.type = 'FilterSelect';
    exports.constructor = function () {
        this.$super(arguments);
        this.layer = new FilterSelectLayer(this);
    };
    exports.initOptions = function (options) {
        var properties = {
            defaultText: '\u8BF7\u9009\u62E9',
            selectorDatasource: [],
            rawValue: null,
            filterInitialStatus: 1
        };
        lib.extend(properties, options);
        this.setProperties(properties);
    };
    exports.initStructure = function () {
        if (lib.isInput(this.main)) {
            this.helper.replaceMain(this);
        }
        var tpl = [
            '<div class="${className}" id="${id}">${text}</div>',
            '<div class="${arrow}"></div>'
        ];
        this.main.innerHTML = lib.format(tpl.join('\n'), {
            className: this.helper.getPartClassName('text'),
            id: this.helper.getId('text'),
            text: this.defaultText,
            arrow: this.helper.getPartClassName('arrow')
        });
    };
    exports.initEvents = function () {
        this.helper.addDOMEvent(this.main, 'mousedown', u.bind(this.layer.toggle, this.layer));
    };
    exports.repaint = require('esui/painters').createRepaint(InputControl.prototype.repaint, {
        name: 'filterDatasource',
        paint: function (control, filterDatasource) {
            if (control.layer && !control.layer.isHidden()) {
                var selector = control.getChild('selector');
                var selectedItem = selector.getSelectedItem();
                if (selectedItem && selectedItem.value === filterDatasource.value) {
                    selectedItem.data = filterDatasource.datasource;
                    paintFilter(control, selectedItem, filterDatasource.datasource);
                }
            }
        }
    }, {
        name: [
            'selectorDatasource',
            'rawValue'
        ],
        paint: function (control, selectorDatasource, rawValue) {
            updateMain.apply(control);
            if (control.layer && !control.layer.isHidden()) {
                control.layer.paintLayer();
            }
        }
    });
    exports.dispose = function () {
        var layer = this.layer;
        if (layer) {
            layer.dispose();
        }
        this.$super(arguments);
    };
    function updateMain() {
        var rawValue = this.rawValue;
        var text = this.defaultText;
        if (rawValue) {
            if (rawValue.selectedItem) {
                text = rawValue.selectedItem.text;
            }
            if (rawValue.filterRawValue && rawValue.filterRawValue.length) {
                var name = rawValue.filterRawValue[0].name;
                if (name && rawValue.filterRawValue.length > 1) {
                    name += '\u7B49';
                }
                text = name || text;
            }
        }
        var textPart = this.helper.getPart('text');
        textPart.innerHTML = u.escape(text);
    }
    var FilterSelect = eoo.create(InputControl, exports);
    ui.register(FilterSelect);
    return FilterSelect;
});
define('ssp-report/ui/DimensionSelector', [
    'require',
    'esui/Button',
    'esui/extension/CustomData',
    './FilterSelect',
    '../util',
    'esui',
    'esui/lib',
    'esui/Control',
    'esui/painters',
    'eoo'
], function (require) {
    require('esui/Button');
    require('esui/extension/CustomData');
    require('./FilterSelect');
    var u = require('../util');
    var ui = require('esui');
    var lib = require('esui/lib');
    var Control = require('esui/Control');
    var exports = {};
    var DEFAULT_DATASOURCE_CONFIG = {
        dimensionRelation: {},
        filterRelation: {},
        canFilterDimensions: []
    };
    exports.type = 'DimensionSelector';
    exports.initOptions = function (options) {
        var properties = {
            datasource: [],
            datasourceConfig: {},
            selectedDimensions: [],
            filterDatasource: {},
            adderText: '\u6DFB\u52A0\u7EF4\u5EA6',
            seperator: '|'
        };
        u.extend(properties, options);
        this.setProperties(properties);
    };
    exports.setProperties = function (properties) {
        if (properties.hasOwnProperty('datasourceConfig')) {
            properties.datasourceConfig = u.defaults(properties.datasourceConfig, DEFAULT_DATASOURCE_CONFIG);
        }
        var changes = this.$super(arguments);
        if (changes.hasOwnProperty('selectedDimensions')) {
            var event = this.fire('change');
            if (event.isDefaultPrevented()) {
                return;
            }
        }
        return changes;
    };
    exports.repaint = require('esui/painters').createRepaint(Control.prototype.repaint, {
        name: [
            'selectedDimensions',
            'datasource',
            'datasourceConfig'
        ],
        paint: function (dimensionSelector, selectedDimensions, datasource, datasourceConfig) {
            dimensionSelector.adaptData();
            dimensionSelector.refresh();
        }
    }, {
        name: 'filterDatasource',
        paint: function (dimensionSelector, filterDatasource) {
            if (dimensionSelector.activeDimension) {
                var target = dimensionSelector.activeDimension.target;
                var dimension = dimensionSelector.activeDimension.value;
                var properties = {
                    filterDatasource: {
                        value: dimension,
                        datasource: filterDatasource[dimension]
                    }
                };
                target.setProperties(properties);
                dimensionSelector.activeDimension = null;
            }
        }
    });
    exports.adaptData = function () {
        buildAllDimensions.apply(this);
        buildFilterRelationInfo.apply(this);
        buildDimensionRelationInfo.apply(this);
        reviseSelectedDimensions.apply(this);
        reviseFilterDatasouce.apply(this);
        buildSelectedDimensionData.apply(this);
    };
    function buildAllDimensions() {
        var allDimensions = [];
        u.each(this.datasource, function (item) {
            if (item.hasOwnProperty('group')) {
                u.each(item.items, function (dimension) {
                    allDimensions.push(dimension);
                });
            } else {
                allDimensions.push(item);
            }
        });
        this.allDimensions = allDimensions;
        this.dimensionIndexes = u.indexBy(this.allDimensions, 'value');
    }
    function buildFilterRelationInfo() {
        var filterRelation = this.datasourceConfig.filterRelation;
        var parentToChild = {};
        u.each(filterRelation, function (value, key) {
            u.each(value, function (item) {
                if (!parentToChild[item]) {
                    parentToChild[item] = [];
                }
                parentToChild[item].push(key);
            });
        });
        this.filterRelationInfo = {
            childToParent: filterRelation,
            parentToChild: parentToChild
        };
    }
    function buildDimensionRelationInfo() {
        var allDimensions = this.allDimensions;
        var dimensionRelation = this.datasourceConfig.dimensionRelation;
        var relationInfo = {};
        var mutexes = dimensionRelation.mutexes || [];
        var prerequisite = dimensionRelation.prerequisite || {};
        var flattenMutexes = u.flatten(mutexes);
        u.each(u.pluck(allDimensions, 'value'), function (value) {
            var exclude = [];
            var include = [];
            if (u.contains(flattenMutexes, value)) {
                u.each(mutexes, function (mutex) {
                    var flattenMutex = u.flatten(mutex);
                    if (u.contains(mutex, value)) {
                        exclude = exclude.concat(flattenMutex);
                    } else if (u.contains(flattenMutex, value)) {
                        u.each(mutex, function (item) {
                            if (u.isArray(item) && u.contains(item, value)) {
                                exclude = exclude.concat(u.flatten(u.without(mutex, item)));
                            }
                        });
                    }
                });
            }
            if (prerequisite.hasOwnProperty(value)) {
                include = prerequisite[value];
            }
            exclude = u.without(exclude, value);
            exclude = u.uniq(exclude);
            relationInfo[value] = {
                exclude: u.uniq(exclude),
                include: include
            };
        });
        this.relationInfo = relationInfo;
    }
    function reviseSelectedDimensions() {
        u.each(this.selectedDimensions, function (item) {
            var dimension = this.dimensionIndexes[item.value];
            item.text = dimension.text;
            item.canFilter = this.canFilter(item.value);
        }, this);
    }
    function reviseFilterDatasouce() {
        var selectedDimensionValues = u.pluck(this.selectedDimensions, 'value');
        var pickMethod = u.partial(u.pick, this.filterDatasource);
        this.filterDatasource = pickMethod.apply(u, selectedDimensionValues);
    }
    function buildDimensionItem(prevDimensions, item, dimension) {
        var disabled = false;
        if (prevDimensions.length) {
            disabled = u.contains(prevDimensions, item.value);
            disabled = disabled || u.some(prevDimensions, function (value) {
                var exclude = this.relationInfo[value] && this.relationInfo[value].exclude || [];
                return u.contains(exclude, item.value);
            }, this);
        }
        item.disabled = disabled;
        item.canFilter = this.canFilter(item.value);
        if (item.canFilter && item.value === dimension) {
            item.data = this.filterDatasource[item.value];
        }
    }
    exports.refresh = function () {
        this.helper.disposeChildren();
        this.main.innerHTML = getDimensionItemsHTML.apply(this) + getDimensionAdderHTML.apply(this);
        this.initChildren();
        u.each(this.selectedDimensionData, function (item, index) {
            var filterSelect = this.getChild(getChildName(item.value, 'select'));
            var properties = {
                selectorDatasource: item.datasource,
                rawValue: item.rawValue,
                filterDatasource: item.filterDatasource
            };
            filterSelect.setProperties(properties);
            if (item.cannotModify) {
                filterSelect.setReadOnly(true);
            }
            filterSelect.on('change', changeDimension, this);
            filterSelect.on('loaddata', loadFilterData, this);
            var button = this.getChildSafely(getChildName(item.value, 'remove'));
            button.on('click', removeDimension, this);
        }, this);
        var dimensionAdder = this.getChild('adder');
        dimensionAdder.setProperties({ selectorDatasource: getDimensionAdderDatasource.apply(this) });
        dimensionAdder.on('change', addDimension, this);
        dimensionAdder.on('loaddata', loadFilterData, this);
    };
    function getDimensionItemsHTML() {
        var dimensionItemTplHead = '<div class="${dimensionItemClasses}">';
        var dimensionItemSelectTpl = '' + '<div data-ui-type="FilterSelect"' + 'data-ui-child-name="' + getChildName('${dimension}', 'select') + '"' + 'data-ui-extension-data-type="CustomData"' + 'data-ui-data-value="${dimension}"' + 'data-ui-group="dimension-select"></div>';
        var dimensionItemButtonTpl = '' + '<div data-ui-type="Button"' + 'data-ui-child-name="' + getChildName('${dimension}', 'remove') + '"' + 'data-ui-extension-data-type="CustomData"' + 'data-ui-data-value="${dimension}"' + 'data-ui-group="dimension-remove" title="\u5220\u9664\u7EF4\u5EA6"><i class="ui-icon-close"></i></div>';
        var dimensionItemSeperatorTpl = '<span class="${seperatorClasses}">${seperator}</span>';
        var dimensionItemTplTail = '</div>';
        var dimensionItemsHTML = '';
        u.each(this.selectedDimensionData, function (item, index) {
            var dimensionItemTpl = dimensionItemTplHead + dimensionItemSelectTpl;
            if (!item.cannotModify) {
                dimensionItemTpl += dimensionItemButtonTpl;
            }
            dimensionItemTpl += dimensionItemSeperatorTpl;
            dimensionItemTpl += dimensionItemTplTail;
            var dimensionItemClasses = this.helper.getPartClasses('item');
            if (item.cannotModify) {
                dimensionItemClasses += dimensionItemClasses.concat(this.helper.getPartClasses('item-fixed'));
            }
            var data = {
                dimension: item.value,
                dimensionItemClasses: dimensionItemClasses.join(' '),
                seperatorClasses: this.helper.getPartClassName('seperator'),
                seperator: u.escape(this.seperator)
            };
            dimensionItemsHTML += lib.format(dimensionItemTpl, data);
        }, this);
        return dimensionItemsHTML;
    }
    function getDimensionAdderHTML() {
        var dimensionAdderHTML = '' + '<div data-ui-type="FilterSelect" data-ui-child-name="adder"' + 'data-ui-default-text="${text}" data-ui-group="dimension-select"' + 'class="${adderClass}">' + '</div>';
        return lib.format(dimensionAdderHTML, {
            text: this.adderText,
            adderClass: this.helper.getPartClassName('adder')
        });
    }
    function getDimensionDatasource(prevDimensions, dimension) {
        var datasource = u.deepClone(this.datasource);
        u.each(datasource, function (item) {
            if (item.hasOwnProperty('group')) {
                u.each(item.items, function (dimensionItem) {
                    buildDimensionItem.call(this, prevDimensions, dimensionItem, dimension);
                }, this);
            } else {
                buildDimensionItem.call(this, prevDimensions, item, dimension);
            }
        }, this);
        return datasource;
    }
    function getDimensionAdderDatasource() {
        var datasource = getDimensionDatasource.call(this, u.pluck(this.selectedDimensions, 'value'));
        return datasource;
    }
    function buildSelectedDimensionData() {
        var selectedDimensionData = [];
        u.each(this.selectedDimensions, function (dimension, index) {
            var prevDimensions = u.pluck(this.selectedDimensions.slice(0, index), 'value');
            var itemDatasource = getDimensionDatasource.call(this, prevDimensions, dimension.value);
            var dimensionData = u.extend({}, dimension);
            dimensionData.datasource = itemDatasource;
            dimensionData.rawValue = {
                selectedItem: {
                    value: dimension.value,
                    text: dimension.text
                }
            };
            if (dimension.canFilter && dimension.ids) {
                var filterData = this.filterDatasource[dimension.value];
                filterData = u.indexBy(filterData, 'id');
                var filterRawValue = [];
                u.map(dimension.ids, function (id) {
                    if (filterData[id]) {
                        filterRawValue.push({
                            id: id,
                            name: filterData[id].name
                        });
                    }
                });
                dimensionData.rawValue.filterRawValue = filterRawValue;
            }
            selectedDimensionData.push(dimensionData);
        }, this);
        this.selectedDimensionData = selectedDimensionData;
    }
    function getItemsWithoutSpecified(list, value, relationValues) {
        var result = [];
        var flag = false;
        u.each(list, function (item) {
            if (flag && !u.contains(relationValues, item.value)) {
                result.push(item);
            }
            if (!flag && value !== item.value) {
                result.push(item);
            } else {
                flag = true;
            }
        });
        return result;
    }
    function addSpecifiedDimension(newSelectedDimensions, rawValue, relation) {
        if (relation && relation.include && relation.include.length > 0) {
            var differences = u.difference(relation.include, u.pluck(newSelectedDimensions, 'value'));
            u.each(differences, function (item) {
                newSelectedDimensions.push({ value: item });
            });
        }
        var item = u.pick(rawValue.selectedItem, 'value', 'canFilter');
        if (rawValue.filterRawValue) {
            item.ids = u.pluck(rawValue.filterRawValue, 'id');
        }
        newSelectedDimensions.push(item);
    }
    function addDimension(e) {
        var rawValue = e.target.getRawValue();
        if (rawValue) {
            var relation = this.relationInfo[rawValue.selectedItem.value];
            var selectedDimensions = this.selectedDimensions || [];
            var newSelectedDimensions = selectedDimensions.slice();
            addSpecifiedDimension(newSelectedDimensions, rawValue, relation);
            this.setProperties({ selectedDimensions: newSelectedDimensions });
        }
    }
    function changeDimension(e) {
        var select = e.target;
        var oldValue = select.getData('value');
        var newValue = select.getRawValue();
        var index = getIndex(this.selectedDimensions, oldValue);
        var relationValues = this.filterRelationInfo.parentToChild[oldValue] || [];
        relationValues = relationValues.concat(this.filterRelationInfo.parentToChild[newValue.selectedItem.value] || []);
        relationValues = relationValues.concat(this.relationInfo[newValue.selectedItem.value].exclude || []);
        relationValues.push(newValue.selectedItem.value);
        var newSelectedDimensions = getItemsWithoutSpecified(this.selectedDimensions, oldValue, relationValues);
        if (newValue) {
            var item = u.pick(newValue.selectedItem, 'value', 'canFilter');
            if (newValue.filterRawValue) {
                item.ids = u.pluck(newValue.filterRawValue, 'id');
            }
            newSelectedDimensions.splice(index, 0, item);
        }
        this.setProperties({ selectedDimensions: newSelectedDimensions });
    }
    function removeDimension(e) {
        var button = e.target;
        var value = button.getData('value');
        var relationValues = this.filterRelationInfo.parentToChild[value] || [];
        var newSelectedDimensions = getItemsWithoutSpecified(this.selectedDimensions, value, relationValues);
        this.setProperties({ selectedDimensions: newSelectedDimensions });
    }
    function loadFilterData(e) {
        var target = e.target;
        var args = { value: e.item.value };
        var childToParent = this.filterRelationInfo.childToParent[e.item.value];
        if (childToParent) {
            var selectedDimensions = this.selectedDimensions || [];
            var rawValue = target.getRawValue();
            if (rawValue) {
                var index = getIndex(selectedDimensions, rawValue.selectedItem.value);
                selectedDimensions = selectedDimensions.slice(0, index);
            }
            var dimensionsBeforeIndexes = u.indexBy(selectedDimensions, 'value');
            var filters = [];
            u.each(childToParent, function (value) {
                if (dimensionsBeforeIndexes[value] && dimensionsBeforeIndexes[value].ids) {
                    filters.push({
                        name: value,
                        value: dimensionsBeforeIndexes[value].ids
                    });
                }
            });
            if (filters.length) {
                args.filters = filters;
            }
        }
        this.activeDimension = {
            value: args.value,
            target: target
        };
        this.fire('loaddata', args);
    }
    function getIndex(dimensions, dimensionValue) {
        var dimensionValues = u.pluck(dimensions, 'value');
        return u.indexOf(dimensionValues, dimensionValue);
    }
    exports.canFilter = function (dimensionValue) {
        var parentToChild = this.filterRelationInfo.parentToChild;
        if (u.contains(this.datasourceConfig.canFilterDimensions, dimensionValue)) {
            if (parentToChild && parentToChild.hasOwnProperty(dimensionValue)) {
                var selectedDimensions = this.selectedDimensions;
                var index = getIndex(selectedDimensions, dimensionValue);
                var dimensionsBefore = selectedDimensions;
                if (index >= 0) {
                    dimensionsBefore = selectedDimensions.slice(0, index);
                }
                var children = parentToChild[dimensionValue];
                var intersections = u.intersection(children, u.pluck(dimensionsBefore, 'value'));
                var selectedDimensionsIndexes = u.indexBy(selectedDimensions, 'value');
                return !u.some(intersections, function (item) {
                    var dimensionItem = selectedDimensionsIndexes[item];
                    return !u.isEmpty(dimensionItem.ids);
                });
            }
            return true;
        }
        return false;
    };
    exports.setSelectedDimensions = function (dimensions) {
        this.setProperties({ selectedDimensions: dimensions });
    };
    exports.getSelectedDimensions = function () {
        return this.selectedDimensions;
    };
    exports.getFlattenSelectedDimensions = function () {
        var selectedItems = this.getSelectedDimensions();
        var flattenValues = u.map(selectedItems, function (item) {
            if (item.ids) {
                return item.value + '|' + item.ids.join(',');
            }
            return item.value;
        });
        return flattenValues.length ? flattenValues.join(';') : '';
    };
    function getChildName(value, type) {
        var childNameParts = ['dimension'];
        [].push.apply(childNameParts, arguments);
        return childNameParts.join('-');
    }
    var DimensionSelector = require('eoo').create(Control, exports);
    ui.register(DimensionSelector);
    return DimensionSelector;
});
define('ssp-report/ui/CommandCrumb', [
    'require',
    '../util',
    'esui/lib',
    'esui/Crumb',
    'eoo',
    'esui'
], function (require) {
    var u = require('../util');
    var lib = require('esui/lib');
    var Crumb = require('esui/Crumb');
    var exports = {};
    exports.type = 'CommandCrumb';
    exports.styleType = 'Crumb';
    exports.initOptions = function (options) {
        var properties = { path: [] };
        u.extend(properties, Crumb.defaultProperties, options);
        var children = lib.getChildren(this.main);
        if (!options.path && children.length) {
            properties.path = u.map(children, function (element) {
                var node = { text: lib.getText(element) };
                if (lib.getAttribute(element, 'data-command')) {
                    node.dataCommand = lib.getAttribute(element, 'data-command');
                    node.dataCommandArgs = lib.getAttribute(element, 'data-command-args');
                }
                return node;
            });
        }
        this.setProperties(properties);
    };
    exports.textNodeTemplate = '<span class="${classes}" data-index="${index}" ${command}>${text}</span>';
    exports.getNodeHTML = function (node, index) {
        var classes = this.helper.getPartClasses('node');
        if (index === 0) {
            classes.push.apply(classes, this.helper.getPartClasses('node-first'));
        }
        if (index === this.path.length - 1) {
            classes.push.apply(classes, this.helper.getPartClasses('node-last'));
        }
        var template = this.textNodeTemplate;
        var data = {
            text: u.escape(node.text),
            index: index,
            classes: classes.join(' '),
            command: ''
        };
        if (node.dataCommand) {
            data.command = '' + 'data-command="' + node.dataCommand + '" ' + 'data-command-args="' + node.dataCommandArgs + '"';
        }
        return lib.format(template, data);
    };
    var CommandCrumb = require('eoo').create(Crumb, exports);
    require('esui').register(CommandCrumb);
    return CommandCrumb;
});
define('ssp-report/ui/ChartSerieSelector', [
    'require',
    'esui/BoxGroup',
    '../util',
    'esui',
    'esui/lib',
    'esui/Layer',
    'esui/Control',
    'eoo',
    'esui/painters'
], function (require) {
    require('esui/BoxGroup');
    var u = require('../util');
    var ui = require('esui');
    var lib = require('esui/lib');
    var Layer = require('esui/Layer');
    var Control = require('esui/Control');
    var layerProto = {};
    layerProto.dock = { strictWidth: true };
    layerProto.render = function (element) {
        var selector = this.control;
        document.body.appendChild(element);
        element.innerHTML = this.getLayerHTML();
        selector.helper.initChildren(element);
        var serieSelector = selector.getChild('serieSelector');
        serieSelector.on('change', changeSerie, selector);
    };
    layerProto.getLayerHTML = function () {
        var helper = this.control.helper;
        var html = '' + helper.getPartBeginTag('serie-body', 'div') + this.getSerieHTML() + helper.getPartBeginTag('serie-color-wrapper', 'div') + this.getSerieColorHTML() + helper.getPartEndTag('serie-color-wrapper', 'div') + helper.getPartEndTag('serie-body', 'div') + this.getFootHTML();
        return html;
    };
    layerProto.getSerieColorHTML = function () {
        var selector = this.control;
        var html = [];
        u.each(selector.datasource, function (item) {
            html.push(getSerieColorItem(selector, item));
        }, selector);
        return html.join('');
    };
    function getSerieColorItem(selector, serie) {
        var helper = selector.helper;
        var tpl = '' + helper.getPartBeginTag('serie-color-row', 'div') + '<div style="background:${color}" class="${colorClass}"></div>' + '<div style="background:${contrastColor}" class="${contrastColorClass}"></div>' + '</div>';
        var colorClass = helper.getPartClassName('serie-color-item');
        return lib.format(tpl, {
            color: serie.color,
            contrastColor: serie.contrastColor,
            colorClass: colorClass + ' ' + helper.getPartClassName('serie-color-base'),
            contrastColorClass: colorClass + ' ' + helper.getPartClassName('serie-color-contrast')
        });
    }
    layerProto.getSerieHTML = function () {
        var selector = this.control;
        var boxGroupHeadTpl = '' + '<div data-ui="type:BoxGroup;childName:serieSelector;' + 'boxType:${boxType};orientation:vertical;skin:flat"' + 'class="${selectorClass}">';
        var boxGroupHeadHTML = lib.format(boxGroupHeadTpl, {
            selectorId: selector.helper.getId('serie-selector'),
            boxType: selector.multi ? 'checkbox' : 'radio',
            selectorClass: selector.helper.getPartClassName('serie-selector')
        });
        var html = [boxGroupHeadHTML];
        u.each(selector.datasource, function (item) {
            html.push(getSerieItem(selector, item));
        });
        html.push('</div>');
        return html.join('');
    };
    function getSerieItem(selector, serie) {
        var tpl = '' + '<input type="${type}" id="${serieId}" value="${serieValue}" />' + '<label for="${serieId}">${serieName}</label>';
        var data = {
            type: selector.multi ? 'checkbox' : 'radio',
            serieId: selector.helper.getId('serie-' + serie.value),
            serieValue: serie.value,
            serieName: serie.name
        };
        return lib.format(tpl, data);
    }
    layerProto.getFootHTML = function () {
        var selector = this.control;
        if (selector.multi) {
            return '' + selector.helper.getPartBeginTag('foot', 'div') + '\u6700\u591A\u53EF\u4EE5\u9009\u62E92\u9879' + '</div>';
        }
        return '';
    };
    function changeSerie() {
        var selector = this.getChild('serieSelector');
        var value = selector.getRawValue();
        var currentSelectedSeries = this.selectedSeries.slice();
        var finalSeries = [];
        if (this.multi) {
            var unionLength = u.union(value, currentSelectedSeries).length;
            if (unionLength === value.length && unionLength === currentSelectedSeries.length) {
                return;
            }
            var olderIndex = this.olderSerieIndex;
            var length = value.length;
            if (length === 0) {
                finalSeries = currentSelectedSeries;
            } else if (length === 1) {
                finalSeries = value;
                olderIndex = 0;
            } else if (length === 2 || length === 3) {
                var difference = u.difference(value, currentSelectedSeries);
                if (length === 2) {
                    finalSeries = currentSelectedSeries.concat(difference);
                    olderIndex = 0;
                } else {
                    currentSelectedSeries[olderIndex] = difference[0];
                    finalSeries = currentSelectedSeries;
                    olderIndex = (olderIndex + 1) % 2;
                }
            }
            this.olderSerieIndex = olderIndex;
        } else {
            finalSeries = value;
        }
        this.setProperties({ selectedSeries: finalSeries });
        this.fire('change');
    }
    var ChartSerieSelectorLayer = require('eoo').create(Layer, layerProto);
    var exports = {};
    exports.type = 'ChartSerieSelector';
    exports.constructor = function () {
        this.$super(arguments);
        this.layer = new ChartSerieSelectorLayer(this);
    };
    exports.initOptions = function (options) {
        var properties = {
            contrast: false,
            multi: true,
            datasource: [],
            selectedSeries: [],
            olderSerieIndex: 0
        };
        lib.extend(properties, options);
        this.$super([properties]);
    };
    exports.initStructure = function () {
        var helper = this.helper;
        var html = '' + helper.getPartBeginTag('legend-wrapper', 'div') + this.getLegendHTML() + helper.getPartEndTag('legend-wrapper', 'div') + helper.getPartBeginTag('seperator', 'div') + '|</div>' + helper.getPartHTML('arrow', 'div');
        this.main.innerHTML = html;
    };
    exports.getLegendHTML = function () {
        var datasourceIndexes = this.datasourceIndexes;
        var selectedSeries = this.selectedSeries;
        var html = '';
        if (this.multi) {
            var leftSerie = datasourceIndexes[selectedSeries[0]];
            var rightSerie = datasourceIndexes[selectedSeries[1]];
            html = getLegendItem.call(this, leftSerie, 'left') + getLegendItem.call(this, rightSerie, 'right');
        } else {
            html = getLegendItem.call(this, datasourceIndexes[selectedSeries[0]]);
        }
        return html;
    };
    function getLegendItem(serie, position) {
        position = position || 'left';
        var tpl = '<div class="${legendClass}">\u2014 \u2014</div>';
        var data = { legendClass: this.helper.getPartClassName('legend-' + position) };
        if (serie) {
            tpl = '' + '<div class="${legendClass}">' + getSerieColorItem(this, serie) + '<span class="${legendTextClass}">${text}</span>' + '</div>';
            data.legendTextClass = this.helper.getPartClassName('legend-text');
            data.text = u.escape(serie.name);
        }
        return lib.format(tpl, data);
    }
    exports.initEvents = function () {
        this.$super(arguments);
        this.helper.addDOMEvent(this.main, 'click', u.bind(this.layer.toggle, this.layer));
    };
    function updateMain() {
        var html = this.getLegendHTML();
        var legendWrapper = this.helper.getPart('legend-wrapper');
        legendWrapper.innerHTML = html;
    }
    exports.setProperties = function (properties) {
        if (this.hasOwnProperty('contrast')) {
            this.contrast = !!this.contrast;
        }
        if (this.hasOwnProperty('multi')) {
            this.multi = !!this.multi;
        }
        if (properties.hasOwnProperty('datasource')) {
            this.datasourceIndexes = u.indexBy(properties.datasource, 'value');
        }
        if (properties.contrast === 'false') {
            properties.contrast = false;
        }
        if (properties.multi === 'false') {
            properties.multi = false;
        }
        this.$super(arguments);
    };
    exports.getSelectedSeries = function () {
        return this.selectedSeries || [];
    };
    exports.setSelectedSeries = function (series) {
        this.setProperties({ selectedSeries: series });
    };
    exports.addState = function (state) {
        this.$super(arguments);
        var element = this.helper.getPart('layer');
        lib.addClasses(element, this.helper.getStateClasses(state));
    };
    exports.removeState = function (state) {
        this.$super(arguments);
        var element = this.helper.getPart('layer');
        lib.removeClasses(element, this.helper.getStateClasses(state));
    };
    exports.repaint = require('esui/painters').createRepaint(Control.prototype.repaint, {
        name: 'datasource',
        paint: function (control, datasource) {
            var element = control.helper.getPart('layer');
            if (!element) {
                control.layer.getElement();
            } else {
                control.layer.repaint();
            }
        }
    }, {
        name: 'selectedSeries',
        paint: function (control, selectedSeries) {
            updateMain.apply(control);
            var serieSelector = control.getChild('serieSelector');
            serieSelector.setRawValue(selectedSeries);
        }
    }, {
        name: 'contrast',
        paint: function (control, contrast) {
            var method = contrast ? 'addState' : 'removeState';
            control[method]('contrast');
        }
    }, {
        name: 'multi',
        paint: function (control, multi) {
            var method = multi ? 'addState' : 'removeState';
            control[method]('multi');
        }
    });
    exports.dispose = function () {
        if (this.helper.isInStage('DISPOSED')) {
            return;
        }
        if (this.layer) {
            this.layer.dispose();
            this.layer = null;
        }
        this.$super(arguments);
    };
    var ChartSerieSelector = require('eoo').create(Control, exports);
    ui.register(ChartSerieSelector);
    return ChartSerieSelector;
});
define('ssp-report/ui/BaseChart', [
    'require',
    'echarts',
    'esui/lib',
    'esui/controlHelper',
    'esui/Control',
    '../util',
    'eoo',
    'esui'
], function (require) {
    var echarts = require('echarts');
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var Control = require('esui/Control');
    var u = require('../util');
    var exports = {};
    exports.type = 'Chart';
    exports.getTipTitleHtml = function (params) {
        return '';
    };
    exports.tipFormatter = function (params, axisIndex) {
        axisIndex = +axisIndex.slice(5);
        params = u.map(params, function (param, index) {
            param.index = index;
            return param;
        });
        var paramsGroup;
        if (this.isContrast) {
            paramsGroup = [
                [],
                []
            ];
            u.each(params, function (param, index) {
                paramsGroup[index % 2].push(param);
            });
        } else {
            paramsGroup = [params];
        }
        var html = [];
        u.each(paramsGroup, function (params, index) {
            var title = this.getTipTitleHtml({
                pointInfo: params,
                pointIndex: axisIndex,
                isContrast: index % 2 !== 0
            });
            html.push(title);
            u.each(params, function (param, paramIndex) {
                var itemHTML = buildTipItem.call(this, param);
                html.push(itemHTML);
            }, this);
        }, this);
        return html.join('<br>');
    };
    function buildTipItem(param) {
        var legend = this.legend;
        var format = legend[param.index].format;
        var legendColor = legend[param.index].color;
        var value = param.data;
        if (format === 'money') {
            value = value === '-' ? '- -' : u.formatNumber(value, 2, '', '&yen;');
        } else if (format === 'int') {
            value = u.formatNumber(value);
        } else if (format === 'percent') {
            value = value + '%';
        }
        var styles = 'margin-right:5px;display:inline-block;width:10px;height:10px;';
        return '<b style="' + styles + 'background:' + legendColor + ';"></b>' + param.seriesName + '\uFF1A' + value;
    }
    exports.formatYAxisData = function (serie, index) {
        var data = serie.data;
        if (this.isContrast) {
            data = data.concat(this.ySeries[index + 1].data);
        }
        var splitNumber = this.splitNumber;
        var labelAlign = index === 0 ? 'left' : 'right';
        var sortedData = u.sortBy([].slice.call(data), function (item) {
            return +item;
        });
        var maxData = sortedData[data.length - 1];
        var average = Math.ceil(maxData / splitNumber);
        var scale = getNearestScale(this, average);
        var max = scale * splitNumber;
        var formatter = function (serie) {
            return function (value) {
                if (serie.format === 'percent') {
                    value = value + '%';
                } else if (serie.format === 'money') {
                    value = u.formatNumber(value, 2);
                } else if (serie.format === 'int') {
                    value = u.formatNumber(value);
                }
                return value;
            };
        };
        return {
            type: 'value',
            name: '',
            axisLabel: {
                show: true,
                interval: 'auto',
                margin: this.get('yAxisTextMargin'),
                formatter: formatter(serie),
                textStyle: {
                    color: this.get('yAxisTextColor'),
                    baseline: 'top',
                    align: labelAlign
                }
            },
            min: 0,
            max: max,
            splitNumber: splitNumber,
            scale: true,
            axisLine: { show: false },
            splitLine: { show: false }
        };
    };
    function getNearestScale(chart, average) {
        var averageStr = average.toString();
        var bits = averageStr.length;
        var power = Math.pow(10, bits - 1);
        var baseScale = chart.scale.split(',');
        var scale;
        for (var i = 0; i < baseScale.length; i++) {
            baseScale[i] = parseFloat(baseScale[i]) * power;
            if (average <= baseScale[i]) {
                scale = baseScale[i];
                break;
            }
        }
        return scale;
    }
    function showLoading() {
        var mask = this.helper.getPart('loading-mask');
        this.helper.addPartClasses('loading-mask-show', mask);
    }
    function hideLoading() {
        var mask = this.helper.getPart('loading-mask');
        this.helper.removePartClasses('loading-mask-show', mask);
    }
    exports.draw = function () {
        if (!this.chartOptions.series) {
            return;
        }
        showLoading.call(this);
        var chart = this.chart;
        var notMerge = true;
        chart.setOption(this.chartOptions, notMerge);
        hideLoading.call(this);
    };
    exports.initOptions = function (options) {
        var properties = {
            scale: '1, 1.5, 2, 5, 10',
            splitNumber: 4,
            loadingText: '\u6B63\u5728\u52AA\u529B\u6E32\u67D3...',
            xSeries: [],
            ySeries: [],
            tooltipLineColor: '#cce32f',
            xAxisLineColor: '#dbdbdb',
            gridBorderWidth: 0,
            yAxisTextColor: '#a4a4a4',
            yAxisTextMargin: 20,
            serieSmooth: true,
            isContrast: false,
            xSeriesContrast: [],
            maxXLabelLength: 20
        };
        lib.extend(properties, options);
        if (properties.isContrast === 'false') {
            properties.isContrast = false;
        }
        this.setProperties(properties);
    };
    exports.initStructure = function () {
        this.main.innerHTML = '' + this.helper.getPartBeginTag('frame', 'div') + this.helper.getPartBeginTag('main', 'div') + this.helper.getPartEndTag('main', 'div') + this.helper.getPartBeginTag('yaxis-1', 'div') + this.helper.getPartEndTag('yaxis-1', 'div') + this.helper.getPartBeginTag('yaxis-2', 'div') + this.helper.getPartEndTag('yaxis-2', 'div') + this.helper.getPartBeginTag('loading-mask', 'div') + this.loadingText + this.helper.getPartEndTag('loading-mask', 'div') + this.helper.getPartEndTag('frame', 'div');
        var chart = echarts.init(this.helper.getPart('main'));
        this.chart = chart;
        helper.addDOMEvent(this, window, 'resize', function () {
            chart.resize();
        });
    };
    exports.repaint = helper.createRepaint(Control.prototype.repaint, {
        name: [
            'xSeries',
            'ySeries',
            'hideLabel'
        ],
        paint: function (chart, xSeries, ySeries) {
            if (!ySeries) {
                return;
            }
            if (!chart.chartOptions) {
                chart.chartOptions = chart.initChartOptions();
            }
            chart.chartOptions.xAxis[0].data = chart.formatXSeries(xSeries);
            if (xSeries.length === 1) {
                chart.chartOptions.xAxis[0].boundaryGap = true;
            }
            var formattedYSeries = [];
            chart.legend = [];
            u.each(ySeries, function (serie, index) {
                var formattedYSeriesData = chart.formatYSeriesData(serie, index);
                formattedYSeries.push(formattedYSeriesData);
                chart.legend[index] = {
                    color: serie.color,
                    format: serie.format
                };
            }, chart);
            var yAxis = chart.buildYAxis(ySeries);
            chart.chartOptions.yAxis = yAxis;
            chart.chartOptions.series = formattedYSeries;
            chart.draw();
        }
    });
    exports.formatXSeries = function (xSeries) {
        return xSeries;
    };
    exports.buildYAxis = function (ySeries) {
        var yAxis = [];
        var gap = 1;
        if (this.isContrast) {
            gap = 2;
        }
        for (var i = 0; i < ySeries.length; i += gap) {
            var serie = ySeries[i];
            var formattedYAxisData = this.formatYAxisData(serie, i);
            yAxis.push(formattedYAxisData);
        }
        return yAxis;
    };
    exports.initChartOptions = function () {
        return {};
    };
    exports.formatYSeriesData = function (serie, index) {
        return {};
    };
    exports.dispose = function () {
        if (this.helper.isInStage('DISPOSED')) {
            return;
        }
        if (this.chart) {
            this.chart.dispose();
            this.chart = null;
        }
        this.$super(arguments);
    };
    var BaseChart = require('eoo').create(Control, exports);
    require('esui').register(BaseChart);
    return BaseChart;
});
define('ssp-report/ui/BarChart', [
    'require',
    'echarts/chart/bar',
    'esui/lib',
    'esui/controlHelper',
    '../util',
    './BaseChart',
    'eoo',
    'esui'
], function (require) {
    require('echarts/chart/bar');
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var u = require('../util');
    var BaseChart = require('./BaseChart');
    var exports = {};
    exports.type = 'BarChart';
    exports.styleType = 'Chart';
    exports.getTipTitleHtml = function (options) {
        var fullText = this.ellipsisToFull[options.pointIndex];
        var length = fullText.length;
        var begin = 0;
        var lines = [];
        while (begin < length) {
            lines.push(fullText.substr(begin, 50));
            begin = Math.min(begin + 50, length);
        }
        return lines.join('<br>');
    };
    exports.formatYSeriesData = function (serie, index) {
        return {
            name: serie.label,
            type: 'bar',
            barWidth: 20,
            itemStyle: { normal: { color: serie.color } },
            data: serie.data
        };
    };
    exports.repaint = helper.createRepaint(BaseChart.prototype.repaint);
    exports.initChartOptions = function () {
        var chart = this;
        return {
            tooltip: {
                trigger: 'axis',
                formatter: lib.bind(this.tipFormatter, this)
            },
            xAxis: [{
                    type: 'category',
                    axisLabel: {
                        interval: 0,
                        formatter: function (value) {
                            return u.ellipsis(value, chart.maxXLabelLength);
                        }
                    },
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: '#333',
                            width: 1,
                            style: 'solid'
                        }
                    }
                }]
        };
    };
    exports.formatXSeries = function (xSeries) {
        var ellipsisToFull = [];
        var formattedXSeries = [];
        u.each(xSeries, function (serie, index) {
            ellipsisToFull.push(serie);
            formattedXSeries.push(serie);
        });
        this.ellipsisToFull = ellipsisToFull;
        return formattedXSeries;
    };
    var BarChart = require('eoo').create(BaseChart, exports);
    require('esui').register(BarChart);
    return BarChart;
});
define('ssp-report/mvc/helper/TypeInfoHelper', [
    'require',
    '../../util',
    'er/URL',
    'eoo'
], function (require) {
    var u = require('../../util');
    var URL = require('er/URL');
    var exports = {};
    exports.buildRawTypeInfo = function (model) {
        var typeInfo = {
            reportType: model.getReportType(),
            subReportType: model.get('subReportType'),
            id: model.get('id'),
            name: model.get('name')
        };
        return u.purify(typeInfo);
    };
    exports.buildRawDiyTypeInfo = function (model) {
        return { reportType: model.reportType };
    };
    exports.buildTypeInfo = function (model) {
        var raw = this.buildRawTypeInfo(model);
        return this.stringify(raw);
    };
    exports.buildDiyTypeInfo = function (model) {
        var raw = this.buildRawDiyTypeInfo(model);
        return this.stringify(raw);
    };
    exports.stringify = function (typeInfo) {
        return JSON.stringify(typeInfo);
    };
    exports.parse = function (typeInfoString) {
        return JSON.parse(typeInfoString);
    };
    exports.resolveURL = function (typeInfo) {
        if (typeof typeInfo === 'string') {
            typeInfo = this.parse(typeInfo);
        }
        var map = this.getURLMap() || {};
        var url = map[typeInfo.reportType];
        var query = u.omit(typeInfo, 'reportType');
        return URL.withQuery(url, query).toString();
    };
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'uRLMap');
    var TypeInfoHelper = eoo.create(exports);
    return TypeInfoHelper;
});
define('ssp-report/mvc/fetcher/EnumFetcher', [
    'require',
    '../../util',
    'promise',
    'eoo'
], function (require) {
    var u = require('../../util');
    var exports = {};
    exports.constructor = function (enumSet, enumName) {
        this.enumSet = enumSet;
        this.enumName = enumName;
    };
    exports.fetch = function (query) {
        var enumSet = this.enumSet;
        var enumName = this.enumName;
        if (enumSet && enumName && enumSet[enumName]) {
            return require('promise').resolve(this.buildData(enumSet[enumName]));
        }
        throw new Error('No enumSet or enumName or enumSet[enumName]!');
    };
    exports.buildData = function (enumObject) {
        return u.map(enumObject.toArray(), function (item) {
            return {
                id: item.value,
                name: item.text
            };
        });
    };
    return require('eoo').create(exports);
});
define('ssp-report/mvc/ReportView', [
    'require',
    'tpl!startup/template',
    '../util',
    'moment',
    'mini-event',
    'promise',
    'eoo',
    'ub-ria/mvc/BaseView'
], function (require) {
    require('tpl!startup/template');
    var u = require('../util');
    var moment = require('moment');
    var exports = {};
    exports.template = 'sspReport';
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = {
            'crumb:command': 'crumbClick',
            'range:change': 'notifyRefresh',
            'sub-report-switch:change': 'notifySubReportChange',
            'report-list:actionloaded': 'reportListLoaded',
            'download:click': u.partial(onOperationClick, 'Download', '\u4E0B\u8F7D'),
            'email:click': u.partial(onOperationClick, 'Email', '\u90AE\u4EF6'),
            'save:click': u.partial(onOperationClick, 'Save', '\u4FDD\u5B58')
        };
        this.addUIEvents(uiEvents);
    };
    exports.reportListLoaded = function (e) {
        var action = e.target.get('action');
        var Event = require('mini-event');
        Event.delegate(action, this, 'todetail', { preserveData: true });
        action.on('search', onListSearch, this);
        action.on('tablesort', onListSort, this);
    };
    exports.bindEvents = function () {
        this.$super(arguments);
        var charts = this.getGroup('chart');
        charts.on('actionloaded', onChartActionLoaded, this);
    };
    function onChartActionLoaded() {
        var action = this.getListAction();
        if (!require('promise').isPromise(action)) {
            try {
                action.adjustLayout();
            } catch (error) {
                return;
            }
        }
    }
    function onListSearch(e) {
        e.preventDefault();
        triggerListUpdate.call(this, e.args);
        this.reloadList(this.model.get('listActionOptions'));
    }
    exports.reloadList = function () {
        var action = this.getListAction();
        action.reload(this.model.get('listActionOptions'));
    };
    function onListSort(e) {
        var action = e.target;
        triggerListUpdate.call(this, action.view.getSearchArgs());
        var query = action.getSearchQuery();
        if (query.page !== 1) {
            e.preventDefault();
            action.reloadWithQueryUpdate(query);
        }
    }
    function triggerListUpdate(query) {
        this.fire('listupdate', { args: query });
    }
    function onOperationClick(type, title) {
        var options = this.getOperationActionOptions(type, title);
        this.popOperationView(options);
    }
    exports.getOperationActionOptions = function (type, title) {
        var options = {
            url: this.model.get(type.toLowerCase() + 'ActionURL'),
            title: title,
            width: 400,
            skin: 'report',
            actionOptions: this.model['get' + type + 'ActionOptions']()
        };
        return options;
    };
    exports.popOperationView = function (options) {
        return this.waitActionDialog(options);
    };
    exports.crumbClick = function (e) {
        var args = e.args.split('|');
        var type = args[0];
        var id = args[1];
        var name = args[2];
        this.fire('crumbredirect', {
            itemId: id,
            itemType: type,
            itemName: name
        });
    };
    exports.notifyRefresh = function (e) {
        this.fire('refresh');
    };
    exports.notifySubReportChange = function (e) {
        this.fire('subreportchange');
    };
    exports.getSearchArgs = function () {
        var url = this.model.get('url');
        var query = url.getQuery();
        query = u.omit(query, 'begin', 'end', 'contrastBegin', 'contrastEnd', 'templateId');
        var time = this.get('range').getRawValue();
        u.each([
            'begin',
            'end',
            'contrastBegin',
            'contrastEnd'
        ], function (key) {
            if (time[key]) {
                query[key] = moment(time[key]).format(this.model.timeFormat.backend);
            }
        }, this);
        var subReportType = this.getSafely('sub-report-switch').getValue();
        if (subReportType) {
            query.subReportType = subReportType;
        }
        var listAction = this.model.get('listActionOptions');
        if (listAction.filterValues != null) {
            query.filterValues = listAction.filterValues;
            query.filterFields = listAction.filterFields;
        }
        if (listAction.keyword != null) {
            query.keyword = listAction.keyword;
        }
        return query;
    };
    exports.getListAction = function () {
        var reportListPanel = this.get('report-list');
        var action = reportListPanel.get('action');
        return action;
    };
    var ReportView = require('eoo').create(require('ub-ria/mvc/BaseView'), exports);
    return ReportView;
});
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/zh-cn', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('zh-cn', {
        months: '\u4E00\u6708_\u4E8C\u6708_\u4E09\u6708_\u56DB\u6708_\u4E94\u6708_\u516D\u6708_\u4E03\u6708_\u516B\u6708_\u4E5D\u6708_\u5341\u6708_\u5341\u4E00\u6708_\u5341\u4E8C\u6708'.split('_'),
        monthsShort: '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split('_'),
        weekdays: '\u661F\u671F\u65E5_\u661F\u671F\u4E00_\u661F\u671F\u4E8C_\u661F\u671F\u4E09_\u661F\u671F\u56DB_\u661F\u671F\u4E94_\u661F\u671F\u516D'.split('_'),
        weekdaysShort: '\u5468\u65E5_\u5468\u4E00_\u5468\u4E8C_\u5468\u4E09_\u5468\u56DB_\u5468\u4E94_\u5468\u516D'.split('_'),
        weekdaysMin: '\u65E5_\u4E00_\u4E8C_\u4E09_\u56DB_\u4E94_\u516D'.split('_'),
        longDateFormat: {
            LT: 'Ah\u70B9mm',
            L: 'YYYY-MM-DD',
            LL: 'YYYY\u5E74MMMD\u65E5',
            LLL: 'YYYY\u5E74MMMD\u65E5LT',
            LLLL: 'YYYY\u5E74MMMD\u65E5ddddLT',
            l: 'YYYY-MM-DD',
            ll: 'YYYY\u5E74MMMD\u65E5',
            lll: 'YYYY\u5E74MMMD\u65E5LT',
            llll: 'YYYY\u5E74MMMD\u65E5ddddLT'
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '\u51CC\u6668';
            } else if (hm < 900) {
                return '\u65E9\u4E0A';
            } else if (hm < 1130) {
                return '\u4E0A\u5348';
            } else if (hm < 1230) {
                return '\u4E2D\u5348';
            } else if (hm < 1800) {
                return '\u4E0B\u5348';
            } else {
                return '\u665A\u4E0A';
            }
        },
        calendar: {
            sameDay: function () {
                return this.minutes() === 0 ? '[\u4ECA\u5929]Ah[\u70B9\u6574]' : '[\u4ECA\u5929]LT';
            },
            nextDay: function () {
                return this.minutes() === 0 ? '[\u660E\u5929]Ah[\u70B9\u6574]' : '[\u660E\u5929]LT';
            },
            lastDay: function () {
                return this.minutes() === 0 ? '[\u6628\u5929]Ah[\u70B9\u6574]' : '[\u6628\u5929]LT';
            },
            nextWeek: function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[\u4E0B]' : '[\u672C]';
                return this.minutes() === 0 ? prefix + 'dddAh\u70B9\u6574' : prefix + 'dddAh\u70B9mm';
            },
            lastWeek: function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() < startOfWeek.unix() ? '[\u4E0A]' : '[\u672C]';
                return this.minutes() === 0 ? prefix + 'dddAh\u70B9\u6574' : prefix + 'dddAh\u70B9mm';
            },
            sameElse: 'LL'
        },
        ordinal: function (number, period) {
            switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '\u65E5';
            case 'M':
                return number + '\u6708';
            case 'w':
            case 'W':
                return number + '\u5468';
            default:
                return number;
            }
        },
        relativeTime: {
            future: '%s\u5185',
            past: '%s\u524D',
            s: '\u51E0\u79D2',
            m: '1\u5206\u949F',
            mm: '%d\u5206\u949F',
            h: '1\u5C0F\u65F6',
            hh: '%d\u5C0F\u65F6',
            d: '1\u5929',
            dd: '%d\u5929',
            M: '1\u4E2A\u6708',
            MM: '%d\u4E2A\u6708',
            y: '1\u5E74',
            yy: '%d\u5E74'
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));
define('ssp-report/mvc/ReportModel', [
    'require',
    'moment/lang/zh-cn',
    'moment',
    '../util',
    '../enum',
    'eoo',
    'ub-ria/mvc/BaseModel'
], function (require) {
    require('moment/lang/zh-cn');
    var moment = require('moment');
    var u = require('../util');
    var AllDimension = require('../enum').AllDimension;
    var REPORT_CONFIG = {
        bizConfig: {
            retrieve: function (model) {
                var reportType = model.getReportType();
                return model.getReports()[reportType];
            },
            dump: true
        },
        needContrast: function (model) {
            return model.getConfiguration().needContrast();
        }
    };
    var REPORT_TEMPLATE = {
        template: function (model) {
            return model.loadTemplate();
        }
    };
    var exports = {};
    exports.maxScope = 365;
    exports.timeFormat = {
        backend: 'YYYYMMDD',
        frontend: 'YYYY-MM-DD ddd'
    };
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(REPORT_CONFIG, 0);
        this.putDatasource(REPORT_TEMPLATE, 0);
    };
    exports.loadTemplate = function () {
        if (this.get('templateId')) {
            return this.data('template').findById(this.get('templateId'));
        }
        return null;
    };
    exports.prepare = function () {
        this.$super(arguments);
        this.set('range', { end: moment().startOf('day').toDate() });
        if (this.get('templateId') && this.get('template')) {
            this.spreadTemplate();
        }
        this.refreshSearch();
    };
    exports.spreadTemplate = function () {
        var template = this.get('template');
        template.keyword && this.set('keyword', template.keyword);
        template.filterFields && this.set('filterFields', template.filterFields.join(','));
        template.filterValues && this.set('filterValues', u.stringifyFilterValues(template.filterValues));
    };
    function buildChartFields() {
        var chartFields = this.get('basicFields');
        var AllMetric = require('../enum').AllMetric;
        chartFields = u.map(chartFields, function (field) {
            var element = AllMetric.fromValue(field);
            return {
                value: field,
                name: element.text,
                format: element.format,
                color: element.color,
                contrastColor: element.contrastColor
            };
        });
        return chartFields;
    }
    function buildGeneralDataConfig() {
        var time = this.get('time');
        var allGeneralFields = this.getConfiguration().getFullGeneralMetrics();
        var generalDataConfig = u.map(this.get('generalFields'), function (item) {
            var field = u.findWhere(allGeneralFields, { field: item });
            return u.extend(field, time);
        }, this);
        return generalDataConfig;
    }
    exports.refreshSearch = function () {
        var time = {
            begin: this.get('begin'),
            end: this.get('end'),
            contrastBegin: this.get('contrastBegin'),
            contrastEnd: this.get('contrastEnd')
        };
        time = u.reviseTime(time, this.timeFormat.backend, this.maxScope);
        time = this.getDisplayDuration(time);
        this.set('time', time);
        var reportType = this.getReportType();
        var reportName = u.getReportName(this.getConfiguration().getReportTypes(), reportType);
        this.set('reportName', reportName);
        this.set('isGeneralReport', this.isGeneralReport());
        var detailDimensions = this.get('detailDimension') || [];
        if (u.isFunction(detailDimensions)) {
            detailDimensions = detailDimensions(this);
        }
        this.set('detailDimension', detailDimensions);
        var crumbContext = this.getCrumbContext(reportType);
        if (crumbContext) {
            this.set('crumbContext', crumbContext);
        }
        if (this.has('id') && this.has('name')) {
            this.set('shouldShowId', this.isShowIdDimension(reportType));
        }
        if (this.isGeneralReport()) {
            this.set('dimension', this.get('bizField'));
        } else {
            var subReportType = this.get('subReportType') || detailDimensions[0];
            this.set('subReportType', subReportType);
            this.set('dimension', subReportType);
        }
        this.set('generalActionOptions', this.getGeneralActionOptions());
        setSubReportTab.call(this);
        setLineChartOptions.call(this);
        setBarChartOptions.call(this);
        setRegionChartOptions.call(this);
        this.set('listActionOptions', this.getListActionOptions());
    };
    function setSubReportTab() {
        if (!this.isGeneralReport()) {
            if (!this.get('subReportType')) {
                this.set('subReportType', 'day');
            }
            var detailDimensions = this.get('detailDimension');
            var activeDimension = 0;
            detailDimensions = u.map(detailDimensions, function (detailDimension, index) {
                if (detailDimension === this.get('subReportType')) {
                    activeDimension = detailDimension;
                }
                var auth = true;
                if (!u.contains([
                        'day',
                        'hour',
                        'region'
                    ], detailDimension)) {
                    auth = this.checkPermission('canView' + u.capitalize(detailDimension) + 'Report');
                }
                return {
                    value: detailDimension,
                    id: detailDimension,
                    title: u.getReportName(this.getConfiguration().getSubReportTypes(), detailDimension),
                    auth: auth
                };
            }, this);
            this.set('detailDimensions', detailDimensions);
            this.set('activeDimension', activeDimension);
        }
    }
    function setLineChartOptions() {
        if (this.isGeneralReport() || this.get('subReportType') === 'day' || this.get('subReportType') === 'hour') {
            this.set('hasLineChart', true);
            var options = {
                timeGranularity: this.get('id') == null ? 'day' : this.get('subReportType'),
                type: 'line'
            };
            this.set('lineChartActionOptions', this.getChartActionOptions(options));
        }
    }
    function setBarChartOptions() {
        var barSupportFields = this.getConfiguration().getBarSupportDimensions();
        if (u.contains(barSupportFields, this.get('dimension'))) {
            this.set('hasBarChart', true);
            var dimension = this.get('dimension');
            var options = {
                timeGranularity: 'sum',
                dimensionName: AllDimension.getTextFromValue(dimension),
                dimensions: buildDimensions([dimension]),
                limit: 10,
                type: 'bar'
            };
            this.set('barChartActionOptions', this.getChartActionOptions(options));
        }
    }
    function setRegionChartOptions() {
        if (!this.isGeneralReport() && this.get('subReportType') === 'region') {
            this.set('hasRegionChart', true);
            var options = {
                timeGranularity: 'sum',
                dimensions: buildDimensions([this.get('dimension')]),
                type: 'region'
            };
            this.set('regionChartActionOptions', this.getChartActionOptions(options));
        }
    }
    exports.getGeneralActionOptions = function () {
        var options = { dataConfig: buildGeneralDataConfig.apply(this) };
        options.isContrast = !!options.dataConfig[0].contrastBegin;
        options = this.addParentFilterParams(options);
        return options;
    };
    exports.getChartActionOptions = function (options) {
        var time = this.get('time');
        var dimension = this.get('dimension');
        let fieldOp = buildChartFields.call(this);
        if (dimension === 'adPosition') {
            fieldOp = fieldOp.filter(item => item.value !== 'pageview');
        }
        options = u.extend(options, time, { fields: fieldOp });
        options = this.addParentFilterParams(options);
        return options;
    };
    exports.getListActionOptions = function () {
        var timeGranularity = 'sum';
        if (this.isGeneralReport()) {
            if (this.get('bizField') === 'day') {
                timeGranularity = 'day';
            }
        } else {
            if (this.get('subReportType') === 'day' || this.get('subReportType') === 'hour') {
                timeGranularity = this.get('subReportType');
            }
        }
        var supportKeyword = false;
        var keywordPlaceholder = '';
        var dimension = this.get('dimension');
        if (u.contains(this.getConfiguration().getKeywordDimensions(), dimension)) {
            supportKeyword = true;
            var dimensionText = AllDimension.getTextFromValue(dimension);
            keywordPlaceholder = '\u8F93\u5165' + dimensionText + '\u540D\u79F0';
            if (this.isShowIdDimension(dimension)) {
                keywordPlaceholder += '\u6216ID';
            }
        }
        var listFields = getListFields.apply(this);
        if (dimension === 'adPosition') {
            listFields.metricFields = listFields.metricFields.filter(item => item.field !== 'pageview');
        }
        var options = u.extend({
            timeGranularity: timeGranularity,
            metricFields: listFields.metricFields,
            dimensionFields: listFields.dimensionFields,
            dimension: dimension,
            dimensions: buildListDimensions.call(this),
            supportKeyword: supportKeyword,
            keywordPlaceholder: keywordPlaceholder
        }, this.get('time'), this.getListFilterConfig());
        var filterValues = this.get('filterValues');
        if (filterValues) {
            options.filterValues = filterValues;
            options.filterFields = this.get('filterFields');
        }
        var keyword = this.get('keyword');
        if (keyword) {
            options.keyword = keyword;
        }
        var parentFilter = this.getParentFilter();
        if (parentFilter) {
            options.parentFilterField = parentFilter.field;
            options.parentFilterValue = parentFilter.value;
        }
        if (options.timeGranularity === 'sum') {
            options.orderBy = 'income';
        } else {
            options.orderBy = 'time';
        }
        options.order = 'desc';
        return options;
    };
    function getListFields() {
        var metrics = this.get('basicFields');
        var dimension = this.get('dimension');
        if (u.isTimeDimension(dimension)) {
            dimension = 'time';
        }
        var dimensions = this.get('extraDimensions') || [];
        dimensions = [dimension].concat(dimensions);
        return u.buildListFields(metrics, dimensions, this.getConfiguration());
    }
    function buildListDimensions() {
        var dimension = this.get('dimension');
        var dimensions = this.get('extraDimensions') || [];
        if (!u.isTimeDimension(dimension)) {
            dimensions = [dimension].concat(dimensions);
        }
        return buildDimensions(dimensions);
    }
    function buildDimensions(originDimensions) {
        var dimensions = [];
        u.each(originDimensions, function (dimension) {
            dimensions.push(dimension + 'Id');
            dimensions.push(dimension + 'Name');
        });
        return dimensions;
    }
    exports.getListFilterConfig = function () {
        var reportType = this.get('subReportType') || this.getReportType();
        var reportConfig = this.getReports()[reportType];
        if (reportConfig && reportConfig.listFilters) {
            return u.pick(reportConfig, 'listFilters', 'filterRelation');
        }
        var dimension = reportConfig && reportConfig.bizField || this.get('subReportType');
        if (u.contains(this.getConfiguration().getFilterDimensions(), dimension)) {
            return {
                listFilters: [{
                        name: dimension,
                        type: 'multi',
                        text: AllDimension.getTextFromValue(dimension)
                    }]
            };
        }
        return {};
    };
    exports.getCrumbContext = function (reportType) {
        if (this.isGeneralReport()) {
            return null;
        }
        var allDimensionAffliation = this.getConfiguration().getDimensionAffliation();
        var dimensionAffliation = u.find(allDimensionAffliation, function (item) {
            return u.contains(item, reportType);
        });
        var crumbContext = [];
        u.each(dimensionAffliation, function (item) {
            var id = this.get(item + 'Id');
            var name = this.get(item + 'Name');
            if (id && name) {
                crumbContext.push({
                    id: id,
                    name: name,
                    type: item,
                    typeName: AllDimension.getTextFromValue(item),
                    commandArgs: item + '|' + id + '|' + name
                });
            }
        }, this);
        return crumbContext.slice(0, u.indexOf(dimensionAffliation, reportType));
    };
    exports.getActiveEntity = function () {
        var time = this.get('time');
        var listActionOptions = this.get('listActionOptions');
        var activeEntity = {
            begin: listActionOptions.beginBackend,
            end: listActionOptions.endBackend,
            contrastBegin: listActionOptions.contrastBeginBackend,
            contrastEnd: listActionOptions.contrastEndBackend,
            timeGranularity: listActionOptions.timeGranularity,
            keyword: listActionOptions.keyword,
            dimensions: listActionOptions.dimensions,
            metrics: this.get('basicFields'),
            filterFields: listActionOptions.filterFields,
            filterValues: listActionOptions.filterValues
        };
        var parentFilter = this.getParentFilter();
        if (!activeEntity.filterFields && !activeEntity.filterValues && parentFilter) {
            activeEntity.filterValues = parentFilter.value;
            activeEntity.filterFields = parentFilter.field;
        }
        var nameParts = [
            this.get('reportName'),
            '_',
            time.beginFrontend.substring(0, 10),
            '~',
            time.endFrontend.substring(0, 10)
        ];
        activeEntity.name = nameParts.join('');
        if (activeEntity.filterFields && activeEntity.filterValues) {
            activeEntity.filterFields = activeEntity.filterFields.split(',');
            activeEntity.filterValues = u.parseFilterValues(activeEntity.filterValues);
        }
        return u.purify(activeEntity);
    };
    exports.getDownloadActionOptions = function () {
        var activeEntity = this.getActiveEntity();
        var listActionOptions = this.get('listActionOptions');
        activeEntity.order = listActionOptions.order;
        activeEntity.orderBy = listActionOptions.orderBy;
        return { activeEntity: activeEntity };
    };
    exports.getEmailActionOptions = function () {
        var activeEntity = this.getActiveEntity();
        var typeInfoHelper = this.getTypeInfoHelper();
        if (typeInfoHelper) {
            activeEntity.typeInfo = typeInfoHelper.buildTypeInfo(this);
        }
        return {
            activeEntity: activeEntity,
            formType: 'create'
        };
    };
    exports.getSaveActionOptions = function () {
        var activeEntity = this.getActiveEntity();
        var typeInfoHelper = this.getTypeInfoHelper();
        if (typeInfoHelper) {
            activeEntity.typeInfo = typeInfoHelper.buildTypeInfo(this);
        }
        return {
            activeEntity: activeEntity,
            formType: 'create'
        };
    };
    exports.getDisplayDuration = function (time) {
        var session = this.getSession();
        var sessionReportRange;
        if (session && session.get('reportRangeTime')) {
            sessionReportRange = session.get('reportRangeTime');
        }
        var begin = time.begin;
        var end = time.end;
        if (begin && end) {
            begin = moment(begin, this.timeFormat.backend);
            end = moment(end, this.timeFormat.backend);
        } else {
            if (sessionReportRange) {
                begin = sessionReportRange.begin;
                end = sessionReportRange.end;
            } else {
                var duration = this.getDefaultTimeRange();
                begin = duration.begin;
                end = duration.end;
            }
        }
        var timeOptions = {
            begin: begin,
            end: end
        };
        var contrastBegin = time.contrastBegin;
        var contrastEnd = time.contrastEnd;
        var scopeDays = end.diff(begin, 'days');
        if (contrastBegin) {
            contrastBegin = moment(contrastBegin, this.timeFormat.backend, 'zh-cn');
            contrastEnd = moment(contrastEnd, this.timeFormat.backend, 'zh-cn');
        } else if (!time.begin && sessionReportRange) {
            contrastBegin = sessionReportRange.contrastBegin;
            contrastEnd = sessionReportRange.contrastEnd;
        }
        if (contrastBegin) {
            var scopeContrastDays = contrastEnd.diff(contrastBegin, 'days');
            if (scopeContrastDays === scopeDays) {
                timeOptions = u.extend(timeOptions, {
                    contrastBegin: contrastBegin,
                    contrastEnd: contrastEnd
                });
            }
        }
        if (session && !this.hasReadableValue('templateId')) {
            session.set('reportRangeTime', timeOptions);
        }
        var fullTimeOptions = {};
        u.each(timeOptions, function (time, key) {
            fullTimeOptions[key] = time.toDate();
            fullTimeOptions[key + 'Backend'] = time.format(this.timeFormat.backend);
            fullTimeOptions[key + 'Frontend'] = time.format(this.timeFormat.frontend);
        }, this);
        return fullTimeOptions;
    };
    exports.updateListActionOptions = function (query) {
        var listActionOptions = u.extend({}, this.get('listActionOptions'), query);
        this.set('listActionOptions', listActionOptions);
    };
    exports.addParentFilterParams = function (options) {
        var filter = this.getParentFilter();
        if (filter) {
            options.filterFields = filter.field;
            options.filterValues = filter.value;
        }
        return options;
    };
    exports.getParentFilter = function () {
        if (!this.isGeneralReport()) {
            return {
                field: this.getReportType() + 'Id',
                value: this.get('id')
            };
        }
        return null;
    };
    exports.isGeneralReport = function () {
        return this.get('id') == null;
    };
    exports.isShowIdDimension = function (dimension) {
        return u.contains(this.getConfiguration().getShowIdDimensions(), dimension);
    };
    exports.setGlobalData = function (data) {
        this.addData('global', data);
    };
    exports.setTemplateData = function (data) {
        this.addData('template', data);
    };
    exports.getReportURL = function (moduleName) {
        var path = this.get('url').getPath();
        var index = path.lastIndexOf('/');
        if (moduleName) {
            return path.substring(0, index + 1) + moduleName;
        }
        return path;
    };
    exports.getDefaultTimeRange = function () {
        var defaultTimeRange = this.getConfiguration().getDefaultTimeRange();
        return u.buildDefaultTimeRange(defaultTimeRange);
    };
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'reportType');
    eoo.defineAccessor(exports, 'session');
    eoo.defineAccessor(exports, 'configuration');
    eoo.defineAccessor(exports, 'reports');
    eoo.defineAccessor(exports, 'typeInfoHelper');
    var BaseModel = require('ub-ria/mvc/BaseModel');
    var ReportModel = eoo.create(BaseModel, exports);
    return ReportModel;
});
define('ssp-report/mvc/ReportListView', [
    'require',
    '../util',
    'tpl!startup/template',
    'eoo',
    'ub-ria/mvc/ListView'
], function (require) {
    var u = require('../util');
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'sspReportList';
    exports.getSearchArgs = function () {
        var form = this.get('filter');
        var filterData = form ? form.getData() : {};
        var filterFields = [];
        var filterValues = [];
        u.each(filterData, function (value, key) {
            if (u.isArray(value) && value.length || !u.isArray(value) && value != null && value !== 'all' && value !== '') {
                value = u.isArray(value) ? value.join() : value;
                filterValues.push(value);
                filterFields.push(key + 'Id');
            }
        });
        var args = {
            filterFields: filterFields.join(),
            filterValues: filterValues.join('|'),
            order: this.get('table').order,
            orderBy: this.get('table').orderBy
        };
        var keyword = this.get('keyword');
        if (keyword) {
            args.keyword = u.trim(keyword.getValue());
        }
        return args;
    };
    exports.commandHandler = function (e) {
        if (e.triggerType === 'click' && e.name === 'detail') {
            var args = e.args.split('|');
            var id = args[0];
            var name = args[1];
            this.fire('todetail', {
                id: id,
                name: name
            });
        }
    };
    exports.getUIProperties = function () {
        var uiProperties = this.$super(arguments) || {};
        uiProperties = u.deepClone(uiProperties);
        uiProperties.table = {};
        return uiProperties;
    };
    exports.changePage = function () {
        var table = this.get('table');
        table.setProperties({
            datasource: this.model.get('results'),
            orderBy: this.model.get('orderBy'),
            order: this.model.get('order')
        });
        var pager = this.getSafely('pager');
        var pageSize = this.model.get('pageSize');
        pager.setProperties({
            pageSize: pageSize,
            page: this.model.get('page')
        });
    };
    exports.bindEvents = function () {
        this.$super(arguments);
        this.initFilterEvents();
    };
    exports.initFilterEvents = function () {
        var filterRelation = this.model.get('filterRelation');
        if (filterRelation) {
            u.each(filterRelation, function (item, key) {
                u.each(item, function (parent) {
                    this.get(parent).on('change', u.bind(this.parentFilterChangeHandler, this, key));
                }, this);
            }, this);
        }
    };
    exports.parentFilterChangeHandler = function (filterName) {
        var args = { filter: filterName };
        args.query = this.getParentFilterValue(filterName);
        this.fire('filterchange', args);
    };
    exports.getParentFilterValue = function (filterName) {
        var filterRelation = this.model.get('filterRelation');
        var query = {};
        u.each(filterRelation[filterName], function (item) {
            var value = this.get(item).getRawValue();
            query[item + 'Id'] = value === 'all' ? '' : value;
        }, this);
        return query;
    };
    exports.updateFilterDatasource = function (filterName, query, datasource) {
        var currentQuery = this.getParentFilterValue(filterName);
        var notChanged = u.every(currentQuery, function (value, key) {
            return u.isEqual(value, query[key]);
        });
        if (notChanged) {
            this.get(filterName).setProperties({ datasource: datasource });
        }
    };
    exports.adjustLayout = function () {
        this.$super(arguments);
        var table = this.get('table');
        table.resetFollowHead();
    };
    var ReportListView = require('eoo').create(require('ub-ria/mvc/ListView'), exports);
    return ReportListView;
});
define('ssp-report/mvc/ReportListModel', [
    'require',
    '../util',
    'moment',
    'er/URL',
    '../enum',
    'promise',
    'ub-ria/mvc/filterHelper',
    'esui/Table',
    'eoo',
    'ub-ria/mvc/ListModel'
], function (require) {
    var u = require('../util');
    var m = require('moment');
    var URL = require('er/URL');
    var TimeGranularity = require('../enum').TimeGranularity;
    var NAME_SUFFIX = 'Name';
    var LIST_DATASOURCE = {
        list: {
            retrieve: function (model) {
                var loadingPageSize = null;
                if (model.get('timeGranularity') === 'hour') {
                    loadingPageSize = require('promise').resolve(24);
                } else {
                    loadingPageSize = model.data('global').getPageSize();
                }
                return loadingPageSize.then(function (pageSize) {
                    var query = model.getQuery();
                    query.pageSize = pageSize;
                    query = u.purify(query, null, true);
                    return model.search(query);
                });
            },
            dump: true
        }
    };
    var LIST_CONFIG = {
        isContrast: function (model) {
            return model.has('contrastBegin');
        },
        moreDimensionUrl: function (model) {
            return getMoreDimensionURL.call(model);
        },
        supportFilter: function (model) {
            return model.has('listFilters');
        }
    };
    var FILTER_DATASOURCE = {
        filterDatasource: function (model) {
            return model.loadFilterDatasource();
        }
    };
    var PAGE_SIZE = {
        pageSize: function (model) {
            if (model.get('timeGranularity') === 'hour') {
                return 24;
            }
            return model.data('global').getPageSize();
        }
    };
    var exports = {};
    exports.timeFormat = {
        frontend: {
            hour: 'HH:mm',
            day: 'YYYY-MM-DD ddd',
            week: 'YYYY-MM-DD',
            month: 'YYYY-MM-DD'
        }
    };
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(LIST_DATASOURCE, 0);
        this.putDatasource(LIST_CONFIG, 0);
        this.putDatasource(PAGE_SIZE, 0);
        this.putDatasource(FILTER_DATASOURCE, 0);
    };
    exports.search = function (query) {
        var data = this.data();
        if (!data) {
            throw new Error('No default data object attached to this Model');
        }
        if (typeof data.search !== 'function') {
            throw new Error('No search method implemented on default data object');
        }
        return data.search(query || {});
    };
    exports.loadFilterDatasource = function () {
        if (this.has('listFilters')) {
            var filterNames = u.pluck(this.get('listFilters'), 'name');
            var deferreds = u.map(filterNames, function (filterName) {
                var query = this.getFilterQuery(filterName);
                return this.getFetcher().fetch(filterName, query);
            }, this);
            return require('promise').all(deferreds);
        }
        return [];
    };
    exports.loadSingleFilterDatasource = function (filterName, query) {
        var parentFilterQuery = this.getParentFilterFieldQuery();
        query = u.extend(query, parentFilterQuery);
        return this.getFetcher().fetch(filterName, u.purify(query));
    };
    exports.getFilterQuery = function (filterName) {
        var query = {};
        var filterRelation = this.get('filterRelation');
        var filterKeyValues = this.getFilterKeyValues();
        if (filterKeyValues.length && filterRelation && filterRelation[filterName]) {
            var intersection = u.intersection(u.pluck(filterKeyValues, 'name'), filterRelation[filterName]);
            u.each(intersection, function (item) {
                var parentFilter = u.findWhere(filterKeyValues, { name: item });
                if (parentFilter) {
                    query[item + 'Id'] = parentFilter.ids;
                }
            }, this);
        }
        var parentFilterQuery = this.getParentFilterFieldQuery();
        return u.extend(query, parentFilterQuery);
    };
    exports.getParentFilterFieldQuery = function () {
        var query = {};
        var parentFilterField = this.get('parentFilterField');
        if (parentFilterField) {
            query[parentFilterField] = [this.get('parentFilterValue')];
        }
        return query;
    };
    exports.getFilterKeyValues = function () {
        var filterKeyValues = [];
        if (this.has('filterFields') && this.has('filterValues')) {
            var filterFields = this.get('filterFields').split(',');
            var filterValues = u.parseFilterValues(this.get('filterValues'));
            filterKeyValues = u.map(filterFields, function (field, index) {
                return {
                    name: field.replace(/Id|Name/, ''),
                    ids: filterValues[index]
                };
            });
        }
        return filterKeyValues;
    };
    exports.prepare = function () {
        this.prepareFilterConfigs();
        this.$super(arguments);
        var listFields = u.union(this.get('dimensionFields'), this.get('metricFields'));
        this.set('listFields', listFields);
        prepareResults.call(this, this.get('results'));
    };
    exports.prepareFilterConfigs = function () {
        var filterDatasource = this.get('filterDatasource');
        var filterConfigs = u.map(this.get('listFilters'), function (filter, index) {
            var config = u.pick(filter, 'name', 'text', 'type');
            config.title = config.text;
            config.datasource = filterDatasource[index];
            var filterKeyValue = u.findWhere(this.getFilterKeyValues(), { name: filter.name });
            if (filterKeyValue) {
                config.value = filterKeyValue.ids;
            }
            return config;
        }, this);
        this.set('filterConfigs', filterConfigs);
    };
    exports.getFilterTextMethod = function (type) {
        var methodMap = {
            single: require('ub-ria/mvc/filterHelper').select.getText,
            multi: function (rawFilter) {
                var text = '';
                if (rawFilter.value && rawFilter.value.length) {
                    var item = u.find(rawFilter.datasource, function (item) {
                        return item.id == rawFilter.value[0];
                    });
                    if (item) {
                        text = rawFilter.value.length > 1 ? item.name + '\u7B49' : item.name;
                    }
                }
                return text;
            }
        };
        return methodMap[type];
    };
    exports.getFiltersInfo = function () {
        var isAllFiltersDefault = true;
        var filters = {};
        var filterConfigs = this.get('filterConfigs');
        u.each(filterConfigs, function (config) {
            var filter = u.pick(config, 'title', 'name', 'datasource', 'value');
            var getText = this.getFilterTextMethod(config.type);
            if (config.type === 'single') {
                filter.value = filter.value && filter.value[0] || 'all';
                filter.isDefaultValue = filter.value === 'all';
            } else {
                filter.isDefaultValue = u.isEmpty(filter.value);
            }
            if (!filter.isDefaultValue) {
                isAllFiltersDefault = false;
            }
            filter.text = getText(filter);
            filters[config.name] = filter;
        }, this);
        return {
            filters: filters,
            isAllFiltersDefault: isAllFiltersDefault
        };
    };
    function prepareResults(results) {
        var timeGranularity = this.get('timeGranularity');
        var isContrast = this.get('isContrast');
        results = u.map(results, function (item, index) {
            if (isContrast) {
                item = attachContrastInfo.call(this, item);
            } else {
                if (timeGranularity !== 'sum') {
                    item.time = formatTime.call(this, item.time);
                }
            }
            return buildFieldContent.call(this, item);
        }, this);
        this.set('results', results);
    }
    function buildFieldContent(item) {
        var detailFields = this.getConfiguration().getDetailDimensions();
        var bizFields = this.getConfiguration().getDimensions();
        var builtItem = {};
        u.each(item, function (value, key) {
            var dimension = key.endsWith(NAME_SUFFIX) ? key.slice(0, -NAME_SUFFIX.length) : key;
            if (key === 'time' || !u.contains(bizFields, dimension)) {
                builtItem[key] = value;
            } else {
                var text;
                var idKey = dimension + 'Id';
                if (!u.contains(detailFields, dimension) || item[idKey] === null) {
                    text = u.escape(value);
                } else {
                    var Table = require('esui/Table');
                    var config = {
                        command: 'detail',
                        args: item[idKey] + '|' + value,
                        text: u.escape(value),
                        tagName: 'a'
                    };
                    text = Table.command(config);
                }
                if (item[key + 'Contrast']) {
                    text += item[key + 'Contrast'];
                }
                builtItem[key] = text;
            }
        });
        return builtItem;
    }
    function attachContrastInfo(item) {
        var bizFields = this.getConfiguration().getDimensions();
        var contrastResults = this.get('contrastResults');
        var contrastItem = contrastResults[item.originIndex];
        var timeGranularity = this.get('timeGranularity');
        var baseContent = '' + this.get('beginFrontend') + '~' + this.get('endFrontend');
        var contrastContent = '' + this.get('contrastBeginFrontend') + '~' + this.get('contrastEndFrontend');
        var contrastInfo = buildContrastItem(baseContent, contrastContent);
        var cloneItem = u.deepClone(item);
        u.each(item, function (value, key) {
            var field = key.endsWith(NAME_SUFFIX) ? key.slice(0, -NAME_SUFFIX.length) : key;
            if (field === 'time') {
                if (timeGranularity === TimeGranularity.DAY) {
                    cloneItem.time = buildContrastItem(formatTime.call(this, item.time), formatTime.call(this, contrastItem.time));
                } else {
                    cloneItem.time = formatTime.call(this, item.time) + contrastInfo;
                }
            } else if (field === this.get('dimension')) {
                cloneItem[key + 'Contrast'] = contrastInfo;
            } else if (!u.contains(bizFields, field)) {
                cloneItem[key + 'Contrast'] = contrastItem[key];
            }
        }, this);
        return cloneItem;
    }
    function buildContrastItem(baseContent, contrastContent) {
        return '' + '<p class="base-item">' + baseContent + '</p>' + '<p class="contrast-item">' + contrastContent + '</p>';
    }
    function formatTime(time) {
        var timeGranularity = this.get('timeGranularity');
        var backendTimeFormat = this.getConfiguration().getBackendTimeFormat()[timeGranularity];
        var frontendTimeFormat = this.timeFormat.frontend[timeGranularity];
        if (timeGranularity === TimeGranularity.DAY || timeGranularity === TimeGranularity.HOUR) {
            time = m(time, backendTimeFormat).format(frontendTimeFormat);
        } else if (timeGranularity === TimeGranularity.WEEK || timeGranularity === TimeGranularity.MONTH) {
            var date = m(time, backendTimeFormat);
            var startDay = date.startOf(timeGranularity);
            var endDay = date.clone().endOf(timeGranularity);
            var begin = m(this.get('begin'));
            var end = m(this.get('end'));
            if (startDay.isBefore(begin)) {
                startDay = begin;
            }
            if (endDay.isAfter(end)) {
                endDay = end;
            }
            time = startDay.format(frontendTimeFormat) + '~' + endDay.format(frontendTimeFormat);
        }
        return time;
    }
    exports.getQuery = function () {
        var metrics = u.pluck(this.get('metricFields'), 'field');
        var query = {
            begin: this.get('beginBackend'),
            end: this.get('endBackend'),
            timeGranularity: this.get('timeGranularity'),
            metrics: metrics.join(),
            pageNo: this.get('page') || 1,
            keyword: this.get('keyword'),
            order: this.get('order'),
            orderBy: this.get('orderBy')
        };
        if (this.has('dimensions')) {
            query.dimensions = this.get('dimensions').join();
        }
        if (this.has('contrastBegin')) {
            query.contrastBegin = this.get('contrastBeginBackend');
            query.contrastEnd = this.get('contrastEndBackend');
        }
        if (this.hasFilterField()) {
            query.filterFields = this.get('filterFields');
            query.filterValues = this.get('filterValues');
        }
        if (this.has('parentFilterValue')) {
            query = this.addFilter(query, this.get('parentFilterField'), this.get('parentFilterValue'));
        }
        return query;
    };
    exports.addFilter = function (options, field, value) {
        var filterFields = options.filterFields;
        var filterValues = options.filterValues;
        if (!filterFields || !filterValues) {
            filterFields = [];
            filterValues = [];
        } else {
            filterFields = filterFields.split(',');
            filterValues = u.parseFilterValues(filterValues);
        }
        var index = u.indexOf(filterFields, field);
        if (index >= 0) {
            filterValues[index] = [value];
        } else {
            filterFields.push(field);
            filterValues.push([value]);
        }
        options.filterFields = filterFields.join(',');
        options.filterValues = u.stringifyFilterValues(filterValues);
        return options;
    };
    exports.changeQuery = function (query) {
        if (query.order) {
            this.set('order', query.order);
            this.set('orderBy', query.orderBy);
        } else if (query.page) {
            query.order = this.get('order');
            query.orderBy = this.get('orderBy');
        }
        this.set('page', query.page);
        query.pageNo = query.page;
        query.pageSize = this.get('pageSize');
        query = u.omit(query, 'page');
        var model = this;
        return this.search(query).then(function (response) {
            prepareResults.call(model, response.results);
        });
    };
    exports.updatePageSize = function (pageSize) {
        var data = this.data('global');
        return data.updatePageSize(pageSize).thenBind(updatePageSizeInStore, this, pageSize);
    };
    function updatePageSizeInStore(pageSize) {
        this.set('pageSize', pageSize);
    }
    exports.hasFilterField = function () {
        return this.has('filterFields') && this.has('filterValues');
    };
    function getMoreDimensionURL() {
        var query = this.getQuery();
        var diyUrl = this.get('diyActionURL');
        var dimensions = [];
        var dimension = this.get('dimension');
        if (query.timeGranularity !== 'sum' && dimension !== query.timeGranularity) {
            dimensions.push(query.timeGranularity);
        }
        if (query.filterFields) {
            var filterFields = query.filterFields.split(',');
            var filterValues = query.filterValues.split('|');
            u.each(filterFields, function (filterField, index) {
                filterField = filterField.substr(0, filterField.length - 2);
                dimensions.push(filterField + '|' + filterValues[index]);
            });
            if (!u.contains(filterFields, dimension + 'Id')) {
                dimensions.push(dimension);
            }
        } else {
            dimensions.push(dimension);
        }
        var args = u.pick(query, 'begin', 'end');
        args.dimensions = dimensions.join(';');
        return URL.withQuery(diyUrl, args).toString();
    }
    exports.prepareSelectMode = function () {
        this.set('selectMode', '');
    };
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'fetcher');
    eoo.defineAccessor(exports, 'configuration');
    var ReportListModel = eoo.create(require('ub-ria/mvc/ListModel'), exports);
    return ReportListModel;
});
define('ssp-report/mvc/ReportList', [
    'require',
    'mini-event',
    'eoo',
    'ub-ria/mvc/ListAction'
], function (require) {
    var exports = {};
    exports.initBehavior = function () {
        this.$super(arguments);
        var Event = require('mini-event');
        Event.delegate(this.view, this, 'todetail', { preserveData: true });
        Event.delegate(this.view, this, 'redirect', { preserveData: true });
        this.view.on('filterchange', onFilterChange, this);
    };
    function onFilterChange(e) {
        this.handleFilterChange(e.filter, e.query);
    }
    exports.handleFilterChange = function (filterName, query) {
        this.model.loadSingleFilterDatasource(filterName, query).thenBind(this.view.updateFilterDatasource, this.view, filterName, query);
    };
    exports.performSearch = function () {
        var query = this.getSearchQuery();
        var event = this.fire('search', { args: query });
        if (!event.isDefaultPrevented()) {
            this.reloadWithQueryUpdate(query);
        }
    };
    exports.reloadWithQueryUpdate = function (query) {
        if (query.order || query.page) {
            this.model.changeQuery(query).thenBind(this.view.changePage, this.view);
        }
    };
    var ReportList = require('eoo').create(require('ub-ria/mvc/ListAction'), exports);
    return ReportList;
});
define('ssp-report/mvc/ReportGeneralView', [
    'require',
    'tpl!startup/template',
    'eoo',
    'ub-ria/mvc/BaseView'
], function (require) {
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'sspReportGeneral';
    var ReportGeneralView = require('eoo').create(require('ub-ria/mvc/BaseView'), exports);
    return ReportGeneralView;
});
define('ssp-report/mvc/ReportGeneralModel', [
    'require',
    '../util',
    'ub-ria/mvc/BaseModel',
    'eoo'
], function (require) {
    var u = require('../util');
    var exports = {};
    exports.getQuery = function (isContrast) {
        var options = {
            begin: [],
            end: [],
            metrics: [],
            timeGranularity: 'sum'
        };
        if (this.has('filterFields') && this.has('filterValues')) {
            options.filterFields = this.get('filterFields');
            options.filterValues = this.get('filterValues');
        }
        u.each(this.get('dataConfig'), function (config) {
            if (isContrast) {
                options.begin.push(config.contrastBeginBackend);
                options.end.push(config.contrastEndBackend);
            } else {
                options.begin.push(config.beginBackend);
                options.end.push(config.endBackend);
            }
            options.metrics.push(config.field);
        }, this);
        return options;
    };
    var GENERAL_DATASOURCE = {
        results: function (model) {
            var query = model.getQuery();
            return model.data().batchSearch(query).thenGetProperty('batchResults');
        },
        contrastResults: function (model) {
            if (model.get('isContrast')) {
                var query = model.getQuery(true);
                return model.data().batchSearch(query).thenGetProperty('batchResults');
            }
            return null;
        }
    };
    exports.prepare = function () {
        this.$super(arguments);
        var detailData = this.buildDetailData();
        this.set('detailData', detailData);
    };
    exports.buildDetailData = function () {
        var results = this.get('results');
        var contrastResults = this.get('contrastResults');
        var baseDetailData = generateDetailData.call(this, results);
        var contrastDetailData = generateDetailData.call(this, contrastResults, 'contrast');
        var detailData = baseDetailData;
        if (contrastDetailData) {
            detailData = mixDetailData.call(this, baseDetailData, contrastDetailData);
        }
        return detailData;
    };
    function mixDetailData(baseDetailData, contrastDetailData) {
        var detailData = u.extend(baseDetailData, contrastDetailData);
        var trend = '';
        u.each(this.get('dataConfig'), function (config, index) {
            var baseField = detailData[config.field + 'Raw'];
            var contastField = detailData[config.field + 'Raw' + 'Contrast'];
            if (contastField > baseField) {
                trend = 'down';
            } else if (contastField < baseField) {
                trend = 'up';
            } else {
                trend = 'same';
            }
            detailData[config.field + 'Trend'] = trend;
        });
        return detailData;
    }
    function generateDetailData(results, type) {
        var suffix = type === 'contrast' ? 'Contrast' : '';
        var detailData = {};
        if (results && results.length > 0) {
            u.each(this.get('dataConfig'), function (config, index) {
                var result = results[index].results.length ? results[index].results[0][config.field] : null;
                detailData[config.field + suffix] = u.format(result, config.format);
                detailData[config.field + 'Raw' + suffix] = +result;
            });
        } else {
            detailData = null;
        }
        return detailData;
    }
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(GENERAL_DATASOURCE);
    };
    var BaseModel = require('ub-ria/mvc/BaseModel');
    var ReportGeneralModel = require('eoo').create(BaseModel, exports);
    return ReportGeneralModel;
});
define('ssp-report/mvc/ReportGeneral', [
    'require',
    'ub-ria/mvc/BaseAction',
    'eoo'
], function (require) {
    var BaseAction = require('ub-ria/mvc/BaseAction');
    var exports = {};
    var ReportGeneral = require('eoo').create(BaseAction, exports);
    return ReportGeneral;
});
define('ssp-report/mvc/ReportDiyListView', [
    'require',
    'tpl!startup/template',
    '../util',
    'er/URL',
    'esui/Table',
    '../enum',
    'moment',
    'mini-event',
    'eoo',
    'ub-ria/mvc/ListView'
], function (require) {
    require('tpl!startup/template');
    var u = require('../util');
    var URL = require('er/URL');
    var Table = require('esui/Table');
    var EmailFrequency = require('../enum').EmailFrequency;
    var WEEKDAYS_SHORT = '\u4E00\u4E8C\u4E09\u56DB\u4E94\u516D\u65E5';
    var exports = {};
    exports.template = 'sspReportDiyList';
    exports.getTableFields = function () {
        var canDownload = this.model.checkPermission('canDownload');
        var canRemove = this.model.checkPermission('canRemoveReportTemplate');
        var canEmail = this.model.checkPermission('canEmailReportTemplate');
        var view = this;
        return [
            {
                title: '\u62A5\u544A\u540D\u79F0',
                field: 'name',
                sortable: false,
                resizable: false,
                width: 300,
                stable: true,
                content: function (item) {
                    var config = [{
                            text: item.name,
                            url: view.getReadURL(item),
                            type: 'read',
                            redirectOptions: [
                                'global',
                                'force'
                            ]
                        }];
                    return Table.operations(config);
                }
            },
            {
                title: '\u521B\u5EFA\u8005',
                field: 'author',
                sortable: false,
                resizable: false,
                width: 80,
                stable: true,
                content: 'author'
            },
            {
                title: '\u521B\u5EFA\u65F6\u95F4',
                field: 'createTime',
                resizable: false,
                width: 120,
                stable: true,
                sortable: false,
                content: function (item) {
                    var moment = require('moment');
                    return moment(item.createTime, 'YYYYMMDD').format('YYYY-MM-DD');
                }
            },
            {
                title: '\u90AE\u7BB1',
                field: 'emails',
                resizable: false,
                width: 120,
                stable: false,
                sortable: false,
                content: 'emails'
            },
            {
                title: '\u53D1\u9001\u9891\u7387',
                field: 'freqency',
                sortable: false,
                resizable: false,
                width: 80,
                stable: true,
                content: function (item) {
                    var freqency = item.emailFrequency;
                    if (freqency == null) {
                        return '\u672A\u8BBE\u7F6E';
                    }
                    var text = EmailFrequency.fromValue(freqency).text;
                    if (freqency === EmailFrequency.WEEKLY) {
                        text += WEEKDAYS_SHORT[item.emailDate - 1];
                    } else if (freqency === EmailFrequency.MONTHLY) {
                        text += item.emailDate + '\u53F7';
                    }
                    return text;
                }
            },
            {
                title: '\u64CD\u4F5C',
                field: 'operations',
                sortable: false,
                resizable: false,
                width: 80,
                stable: true,
                content: function (item) {
                    var config = [
                        {
                            text: '\u67E5\u770B',
                            type: 'read',
                            url: view.getReadURL(item),
                            redirectOptions: [
                                'global',
                                'force'
                            ]
                        },
                        {
                            text: '\u8BBE\u7F6E\u5B9A\u65F6\u53D1\u9001',
                            type: 'email',
                            command: 'email',
                            auth: canEmail,
                            args: item.id
                        },
                        {
                            text: '\u5220\u9664',
                            type: 'remove',
                            command: 'remove',
                            auth: canRemove,
                            args: item.id
                        },
                        {
                            text: '\u4E0B\u8F7D',
                            type: 'download',
                            command: 'download',
                            auth: canDownload,
                            args: item.id
                        }
                    ];
                    return Table.slideOperations(config);
                }
            }
        ];
    };
    exports.getReadURL = function (item) {
        var typeInfo = item.typeInfo;
        if (typeInfo) {
            var typeInfoHelper = this.getTypeInfoHelper();
            if (!typeInfoHelper) {
                throw new Error('No typeInfoHelper!');
            }
            var url = typeInfoHelper.resolveURL(typeInfo);
            url = URL.parse(url);
            var query = url.getQuery();
            var path = url.getPath();
            query.templateId = item.id;
            return '#' + URL.withQuery(path, query).toString();
        }
        return '#' + URL.withQuery(this.model.get('diyActionURL'), { templateId: item.id }).toString();
    };
    exports.commandHandler = function (e) {
        if (e.triggerType === 'click') {
            var name = e.name;
            var id = e.args;
            switch (name) {
            case 'remove':
                modifyStatus.call(this, e);
                break;
            case 'email':
                email.call(this, id);
                break;
            case 'download':
                download.call(this, id);
                break;
            }
        }
    };
    function modifyStatus(e) {
        var transition = u.findWhere(this.model.getStatusTransitions(), { statusName: e.name });
        var args = {
            id: e.args,
            status: transition.status
        };
        this.fire('modifystatus', args);
    }
    function email(id) {
        var options = this.getOperationActionOptions('email', '\u90AE\u4EF6');
        options.actionOptions = {
            id: id,
            formType: 'update'
        };
        this.popOperationView(options).then(u.bind(handlePopSuccess, this));
    }
    function download(id) {
        var options = this.getOperationActionOptions('download', '\u4E0B\u8F7D');
        options.actionOptions = { id: id };
        this.popOperationView(options);
    }
    function handlePopSuccess(e) {
        var action = e.target.get('action');
        require('mini-event').delegate(action, this, 'entitysave', { preserveData: true });
    }
    exports.getOperationActionOptions = function (type, title) {
        var options = {
            url: this.model.get(type.toLowerCase() + 'ActionURL'),
            title: title,
            width: 400,
            skin: 'report'
        };
        return options;
    };
    exports.popOperationView = function (options) {
        return this.waitActionDialog(options);
    };
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'typeInfoHelper');
    var ListView = require('ub-ria/mvc/ListView');
    var ReportDiyListView = eoo.create(ListView, exports);
    return ReportDiyListView;
});
define('ssp-report/mvc/ReportDiyListModel', [
    'require',
    '../util',
    'eoo',
    'ub-ria/mvc/ListModel'
], function (require) {
    var u = require('../util');
    var exports = {};
    exports.getItemById = function (id) {
        var list = this.getAllItems();
        return u.find(list, function (item) {
            return item.id + '' === id + '';
        });
    };
    exports.prepareSelectMode = function () {
        this.set('selectMode', '');
    };
    var ReportDiyListModel = require('eoo').create(require('ub-ria/mvc/ListModel'), exports);
    return ReportDiyListModel;
});
define('ssp-report/mvc/ReportDiyList', [
    'require',
    'ub-ria/mvc/ListAction',
    'eoo'
], function (require) {
    var exports = {};
    exports.entityDescription = '\u81EA\u5B9A\u4E49\u62A5\u544A\u6A21\u677F';
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('entitysave', handleSetEmail, this);
    };
    function handleSetEmail() {
        var url = this.model.get('url');
        this.redirect(url, { force: true });
    }
    var ListAction = require('ub-ria/mvc/ListAction');
    var ReportDiyList = require('eoo').create(ListAction, exports);
    return ReportDiyList;
});
define('ssp-report/mvc/ReportChartView', [
    'require',
    'tpl!startup/template',
    'ub-ria/mvc/BaseView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'sspReportChart';
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = { 'chart-serie-selector:change': changeDisplayFields };
        this.addUIEvents(uiEvents);
    };
    function changeDisplayFields(e) {
        this.fire('displayfieldschange', { selectedFields: e.target.getSelectedSeries() });
    }
    exports.updateView = function () {
        this.updateChart();
        this.updateChartSerieSelector();
    };
    exports.updateChart = function () {
        var chart = this.getSafely('chart');
        var type = this.model.get('type');
        if (type === 'region') {
            chart.setProperties({
                mapData: this.model.get('mapData'),
                pieData: this.model.get('pieData'),
                mapName: this.model.get('mapName'),
                pieName: this.model.get('pieName')
            });
        } else {
            var xSeries = this.model.get('xSeries');
            if (type === 'bar') {
                var method = xSeries.length ? 'show' : 'hide';
                chart[method]();
                method = xSeries.length ? 'hide' : 'show';
                this.get('no-data-container')[method]();
            }
            if (type !== 'bar' || xSeries.length) {
                chart.set('xSeries', xSeries);
                chart.set('ySeries', this.model.get('ySeries'));
            }
        }
    };
    exports.updateChartSerieSelector = function () {
        var chartSerieSelector = this.get('chart-serie-selector');
        if (chartSerieSelector) {
            chartSerieSelector.set('selectedSeries', this.model.get('selectedFields'));
        }
    };
    exports.adjustLayout = function () {
        var chart = this.get('chart');
        if (chart && chart.get('chart')) {
            chart.get('chart').resize();
        }
        var contrastChart = this.get('region-chart-contrast');
        if (contrastChart && contrastChart.get('chart')) {
            contrastChart.get('chart').resize();
        }
    };
    var BaseView = require('ub-ria/mvc/BaseView');
    var ReportChartView = require('eoo').create(BaseView, exports);
    return ReportChartView;
});
define('ssp-report/mvc/ReportChartModel', [
    'require',
    '../util',
    'moment',
    'promise',
    'eoo',
    'ub-ria/mvc/BaseModel'
], function (require) {
    var u = require('../util');
    var moment = require('moment');
    var LIST_DATASOURCE = {
        list: {
            retrieve: function (model) {
                var query = model.getQuery();
                query = u.purify(query, null, true);
                var data = model.data();
                return data.list(query);
            },
            dump: true
        },
        isContrast: function (model) {
            return model.isContrast();
        },
        chartName: function (model) {
            if (model.get('type') === 'bar') {
                return 'TOP10' + model.get('dimensionName');
            }
            if (model.get('type') === 'region') {
                return '\u5730\u57DF';
            }
            return null;
        },
        chartTitle: function (model) {
            var title = model.get('beginFrontend') + ' ~ ' + model.get('endFrontend');
            if (model.isContrast()) {
                title += ' \u5BF9\u6BD4 ' + model.get('contrastBeginFrontend') + ' ~ ' + model.get('contrastEndFrontend');
            }
            return title;
        }
    };
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(LIST_DATASOURCE, 0);
    };
    exports.timeParamFormat = {
        xAxisLabelFormat: {
            day: 'YYYY-MM-DD',
            hour: 'HH:mm'
        },
        backendTimeFormat: 'YYYYMMDD'
    };
    exports.getMetrics = function () {
        return u.pluck(this.get('fields'), 'value');
    };
    exports.isContrast = function () {
        if (this.get('type') !== 'bar' && this.get('contrastBegin')) {
            return true;
        }
        return false;
    };
    exports.prepare = function () {
        this.$super(arguments);
        this.set('selectedFields', this.getDefaultSelectedFields());
        this.prepareResults('results');
        this.set('xSeries', buildXSeries.call(this, 'results'));
        this.set('ySeriesAll', buildYSeriesAll.call(this, 'results'));
        if (this.isContrast()) {
            this.prepareResults('contrastResults');
            this.set('xSeriesContrast', buildXSeries.call(this, 'contrastResults'));
            this.set('ySeriesAllContrast', buildYSeriesAll.call(this, 'contrastResults'));
        }
        this.buildDataBySelectedField();
    };
    exports.buildDataBySelectedField = function () {
        if (this.isContrast()) {
            if (this.get('type') === 'region') {
                this.set('ySeries', buildYSeries.call(this, 'ySeriesAll'));
                this.set('ySeriesContrast', buildYSeries.call(this, 'ySeriesAllContrast'));
            } else {
                this.set('ySeries', buildMixedYSeries.call(this));
            }
        } else {
            this.set('ySeries', buildYSeries.call(this, 'ySeriesAll'));
        }
        if (this.get('type') === 'region') {
            this.set('mapData', this.buildMapData('xSeries', 'ySeries'));
            this.set('mapName', this.getSelectedFieldsName()[0]);
            this.set('pieData', this.buildPieData('xSeries', 'ySeries'));
            this.set('pieName', this.getSelectedFieldsName()[0]);
            if (this.isContrast()) {
                this.set('contrastMapData', this.buildMapData('xSeriesContrast', 'ySeriesContrast'));
                this.set('contrastPieData', this.buildPieData('xSeriesContrast', 'ySeriesContrast'));
            }
        }
    };
    exports.buildMapData = function (xDatasource, yDatasource) {
        var regions = this.get(xDatasource);
        var ySerie = this.get(yDatasource)[0];
        var mapData = u.map(regions, function (region, index) {
            var value = parseFloat(ySerie.data[index]);
            return u.extend(region, {
                value: value,
                format: ySerie.format
            });
        });
        mapData = u.filter(mapData, function (item) {
            return !isForeignData(item.regionId);
        });
        return mapData;
    };
    function isForeignData(regionId) {
        return regionId === '0' || regionId === '999';
    }
    exports.buildPieData = function (xDatasource, yDatasource) {
        var mapData = u.deepClone(this.buildMapData(xDatasource, yDatasource));
        var sortMapData = u.sortBy(mapData, 'value').reverse();
        var total = this.getMapTotalData(yDatasource);
        if (sortMapData.length <= 6) {
            return sortMapData;
        }
        var pieData = sortMapData.slice(0, 6);
        var selectedData = u.reduce(pieData, function (sum, item) {
            return sum + item.value;
        }, 0);
        var other = {
            name: '\u5176\u4ED6\u5730\u57DF',
            value: total - selectedData,
            regionId: '9999'
        };
        pieData.push(other);
        return pieData;
    };
    exports.getMapTotalData = function (yDatasource) {
        return u.reduce(this.get(yDatasource)[0].data, function (sum, value) {
            return sum + parseFloat(value);
        }, 0);
    };
    exports.getDefaultSelectedFields = function () {
        var fields = this.get('fields');
        var end = 2;
        if (this.get('type') !== 'line') {
            end = 1;
        }
        return u.pluck(fields.slice(0, end), 'value');
    };
    exports.getSelectedFieldsName = function () {
        var fields = this.get('fields');
        var selectedFields = this.get('selectedFields');
        return u.map(selectedFields, function (fieldValue) {
            var sameField = u.findWhere(fields, { value: fieldValue });
            return sameField.name;
        });
    };
    exports.prepareResults = function (key) {
        var results = this.get(key);
        if (this.get('type') === 'line') {
            var begin = 'begin';
            var end = 'end';
            if (key !== 'results') {
                begin = 'contrastBegin';
                end = 'contrastEnd';
            }
            var dateRange = getDateRange(this.get(begin), this.get(end), this.get('timeGranularity'));
            results = u.map(dateRange, function (time) {
                var resultItem = u.findWhere(results, { time: time });
                var defaultValue = {};
                u.each(this.getMetrics(), function (field) {
                    defaultValue[field] = 0;
                });
                return resultItem || u.defaults({ time: time }, defaultValue);
            }, this);
        }
        this.set(key, results);
    };
    function getDateRange(begin, end, timeGranularity) {
        var range = [];
        if (timeGranularity === 'day') {
            begin = moment(begin);
            end = moment(end);
            while (begin.isBefore(end)) {
                range.push(begin.clone());
                begin.add('d', 1);
            }
            range.push(end.clone());
            return u.invoke(range, 'format', 'YYYYMMDD');
        } else if (timeGranularity === 'hour') {
            var index = 0;
            while (index < 24) {
                range.push('' + index);
                index++;
            }
            return range;
        }
    }
    function buildXSeries(key) {
        var timeGranularity = this.get('timeGranularity');
        var backendTimeFormat;
        var frontendTimeFormat;
        if (this.get('type') === 'line') {
            backendTimeFormat = this.getConfiguration().getBackendTimeFormat()[timeGranularity];
            frontendTimeFormat = this.timeParamFormat.xAxisLabelFormat[timeGranularity];
        }
        var xSeries = u.map(this.get(key), function (item) {
            if (this.get('type') === 'line') {
                return moment(item.time, backendTimeFormat).format(frontendTimeFormat);
            }
            if (this.get('type') === 'bar') {
                var dimensionKey = this.get('dimensions')[1];
                return item[dimensionKey] || '\u672A\u77E5';
            }
            if (this.get('type') === 'region') {
                return {
                    name: u.without(item.regionName.split(''), '\u7701', '\u5E02').join(''),
                    regionId: item.regionId
                };
            }
        }, this);
        return xSeries;
    }
    function buildYSeries(key) {
        var ySeriesAll = this.get(key);
        var selectedFields = this.get('selectedFields');
        var ySeries = u.map(selectedFields, function (field, index) {
            return ySeriesAll[field];
        });
        return ySeries;
    }
    function buildMixedYSeries() {
        var ySeries = buildYSeries.call(this, 'ySeriesAll');
        var ySeriesAllContrast = this.get('ySeriesAllContrast');
        var newYSeries = [];
        u.each(ySeries, function (serie) {
            newYSeries.push(serie);
            newYSeries.push(ySeriesAllContrast[serie.name]);
        });
        return newYSeries;
    }
    function buildYSeriesAll(key) {
        var fields = this.get('fields');
        if (this.get('type') === 'bar') {
            fields = u.where(fields, { value: this.get('selectedFields')[0] });
        }
        var results = this.get(key);
        var colorKey = key === 'contrastResults' ? 'contrastColor' : 'color';
        var ySeriesAll = {};
        u.each(fields, function (field) {
            var serie = {
                name: field.value,
                label: field.name,
                format: field.format,
                color: field[colorKey]
            };
            serie.data = u.map(results, function (data) {
                var value = data[serie.name];
                return value == null ? '0' : value;
            });
            ySeriesAll[serie.name] = serie;
        });
        return ySeriesAll;
    }
    exports.getQuery = function () {
        var query = {
            begin: this.get('beginBackend'),
            end: this.get('endBackend')
        };
        if (this.isContrast()) {
            query.contrastBegin = this.get('contrastBeginBackend');
            query.contrastEnd = this.get('contrastEndBackend');
        }
        query.timeGranularity = this.get('timeGranularity');
        if (this.get('dimensions')) {
            query.dimensions = this.get('dimensions').join();
        }
        if (this.get('type') === 'bar') {
            var selectedFields = this.get('selectedFields');
            if (!selectedFields) {
                selectedFields = this.getDefaultSelectedFields()[0];
            } else if (u.isArray(selectedFields)) {
                selectedFields = selectedFields.join();
            }
            query.metrics = selectedFields;
            query.orderBy = selectedFields;
            query.order = 'desc';
            query.limit = 10;
        } else {
            query.metrics = this.getMetrics().join();
        }
        if (this.has('filterFields') && this.has('filterValues')) {
            query.filterFields = this.get('filterFields');
            query.filterValues = this.get('filterValues');
        }
        return query;
    };
    exports.updateSelectFields = function (fields) {
        var model = this;
        this.set('selectedFields', fields);
        if (this.get('type') === 'bar') {
            var query = this.getQuery();
            return this.data().list(query).then(function (response) {
                model.set('results', response.results);
                model.set('xSeries', buildXSeries.call(model, 'results'));
                model.set('ySeriesAll', buildYSeriesAll.call(model, 'results'));
                model.buildDataBySelectedField();
            });
        }
        this.buildDataBySelectedField();
        return require('promise').resolve();
    };
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'configuration');
    var BaseModel = require('ub-ria/mvc/BaseModel');
    var ReportChartModel = eoo.create(BaseModel, exports);
    return ReportChartModel;
});
define('ssp-report/mvc/ReportChart', [
    'require',
    'eoo',
    'ub-ria/mvc/BaseAction'
], function (require) {
    var exports = {};
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('displayfieldschange', updateSelectedField, this);
        this.getLayoutChangeNotifier().on('layoutchanged', adjustLayout, this);
    };
    exports.leave = function () {
        this.getLayoutChangeNotifier().un('layoutchanged', adjustLayout, this);
        this.$super(arguments);
    };
    function adjustLayout() {
        this.view.adjustLayout();
    }
    function updateSelectedField(e) {
        var loading = this.model.updateSelectFields(e.selectedFields);
        loading.thenBind(this.view.updateView, this.view);
    }
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'layoutChangeNotifier');
    var ReportChart = eoo.create(require('ub-ria/mvc/BaseAction'), exports);
    return ReportChart;
});
define('ssp-report/mvc/Report', [
    'require',
    'er/URL',
    'ub-ria/mvc/BaseAction',
    '../util',
    'eoo'
], function (require) {
    var URL = require('er/URL');
    var BaseAction = require('ub-ria/mvc/BaseAction');
    var u = require('../util');
    var exports = {};
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('refresh', refresh, this);
        this.view.on('subreportchange', onSubReportChange, this);
        this.view.on('todetail', toDetail, this);
        this.view.on('crumbredirect', crumbRedirect, this);
        this.view.on('listupdate', onListUpdate, this);
    };
    function crumbRedirect(e) {
        var args = u.pick(this.view.getSearchArgs(), [
            'begin',
            'end',
            'contrastBegin',
            'contrastEnd'
        ]);
        args.subReportType = 'day';
        args.id = e.itemId;
        args.name = e.itemName;
        var crumbContext = this.model.getCrumbContext(e.itemType);
        u.each(crumbContext, function (item) {
            args[item.type + 'Id'] = item.id;
            args[item.type + 'Name'] = item.name;
        });
        args = u.omit(args, 'filterValues', 'filterFields', 'keyword');
        redirect.call(this, args, e.itemType);
    }
    function toDetail(e) {
        var id = e.id;
        var name = e.name;
        var args = this.view.getSearchArgs();
        var moduleName = null;
        if (this.model.isGeneralReport()) {
            args.id = id;
            args.name = name;
            args.subReportType = 'day';
        } else {
            var subReportType = args.subReportType;
            var mainReportType = this.model.getReportType();
            args[mainReportType + 'Id'] = args.id;
            args[mainReportType + 'Name'] = args.name;
            args.id = id;
            args.name = name;
            args.subReportType = 'day';
            moduleName = subReportType;
        }
        args = u.omit(args, 'filterValues', 'filterFields', 'keyword');
        redirect.call(this, args, moduleName);
    }
    function refresh(e) {
        redirect.call(this);
    }
    function onSubReportChange(e) {
        var query = this.view.getSearchArgs();
        query = u.omit(query, 'filterFields', 'filterValues', 'keyword');
        redirect.call(this, query);
    }
    function redirect(args, moduleName) {
        args = args || this.view.getSearchArgs();
        var path = this.model.getReportURL(moduleName);
        var url = URL.withQuery(path, u.purify(args, null, false));
        this.redirect(url, { force: true });
    }
    function onListUpdate(e) {
        this.model.updateListActionOptions(e.args);
        var args = this.view.getSearchArgs();
        var path = this.model.getReportURL();
        var url = URL.withQuery(path, u.purify(args, null, false));
        this.redirect(url, { silent: true });
    }
    var eoo = require('eoo');
    var Report = eoo.create(BaseAction, exports);
    return Report;
});
define('ssp-report/mvc/FilterDataFetcherProxy', [
    'require',
    '../util',
    'eoo'
], function (require) {
    var u = require('../util');
    var exports = {};
    exports.fetch = function (dimension, query) {
        var fetcher = this.getFetcherSet()[dimension];
        if (fetcher && u.isFunction(fetcher.fetch)) {
            return fetcher.fetch(query);
        }
        throw new Error('Missing data fetcher for dimension: ' + dimension + '!');
    };
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'fetcherSet');
    var FilterDataFetcherProxy = eoo.create(exports);
    return FilterDataFetcherProxy;
});
define('ssp-report/enum', [
    'require',
    'er/Enum'
], function (require) {
    var Enum = require('er/Enum');
    var exports = {};
    exports.ReportFileType = new Enum({
        alias: 'CSV',
        text: 'CSV'
    }, {
        alias: 'XLS',
        text: 'EXCEL'
    });
    exports.EmailFrequency = new Enum({
        alias: 'ONCE',
        text: '\u4E00\u6B21'
    }, {
        alias: 'DAILY',
        text: '\u6BCF\u5929'
    }, {
        alias: 'WEEKLY',
        text: '\u6BCF\u5468'
    }, {
        alias: 'MONTHLY',
        text: '\u6BCF\u6708'
    }, {
        alias: 'QUARTERLY',
        text: '\u6BCF\u5B63\u5EA6'
    });
    exports.TimeGranularity = new Enum({
        alias: 'HOUR',
        text: '\u5C0F\u65F6',
        value: 'hour'
    }, {
        alias: 'DAY',
        text: '\u5929',
        value: 'day'
    }, {
        alias: 'WEEK',
        text: '\u5468',
        value: 'week'
    }, {
        alias: 'MONTH',
        text: '\u6708',
        value: 'month'
    }, {
        alias: 'SUM',
        text: '\u6C47\u603B',
        value: 'sum'
    });
    exports.AllDimension = new Enum({
        alias: 'TIME',
        text: '\u65F6\u95F4',
        value: 'time'
    }, {
        alias: 'WEBSITE',
        text: '\u7F51\u7AD9',
        value: 'website'
    }, {
        alias: 'AD_POSITION',
        text: '\u4EE3\u7801\u4F4D',
        value: 'adPosition'
    }, {
        alias: 'AD_POSITION_LABEL',
        text: '\u4EE3\u7801\u4F4D\u6807\u7B7E',
        value: 'adPositionLabel'
    }, {
        alias: 'ORDER',
        text: '\u8BA2\u5355',
        value: 'order'
    }, {
        alias: 'DELIVERY',
        text: '\u5E7F\u544A',
        value: 'delivery'
    }, {
        alias: 'SALESMAN',
        text: '\u9500\u552E',
        value: 'salesman'
    }, {
        alias: 'AD_OWNER',
        text: '\u5E7F\u544A\u5BA2\u6237',
        value: 'adOwner'
    }, {
        alias: 'CREATIVE',
        text: '\u7269\u6599',
        value: 'creative'
    }, {
        alias: 'SELL_TYPE',
        text: '\u552E\u5356\u65B9\u5F0F',
        value: 'sellType'
    }, {
        alias: 'REGION',
        text: '\u5730\u57DF',
        value: 'region'
    }, {
        alias: 'DSP',
        text: 'DSP',
        value: 'dsp'
    }, {
        alias: 'CONTRACT_NUM',
        text: '\u5408\u540C\u53F7',
        value: 'contractNum'
    }, {
        alias: 'APP',
        text: 'APP',
        value: 'app'
    }, {
        alias: 'APP_VERSION',
        text: '\u5E94\u7528\u7248\u672C',
        value: 'appVersion'
    }, {
        alias: 'SYSTEM',
        text: '\u7CFB\u7EDF',
        value: 'system'
    }, {
        alias: 'DEVICE',
        text: '\u7EC8\u7AEF\u7C7B\u578B',
        value: 'device'
    }, {
        alias: 'AD_TYPE',
        text: '\u5E7F\u544A\u7C7B\u578B',
        value: 'adType'
    }, {
        alias: 'REALIZATION_TYPE',
        text: '\u53D8\u73B0\u7C7B\u578B',
        value: 'realizationType'
    }, {
        alias: 'ALLIANCE',
        text: '\u6536\u5165\u6765\u6E90',
        value: 'alliance'
    }, {
        alias: 'BUSINESS_SYSTEM',
        text: '\u6570\u636E\u6765\u6E90',
        value: 'businessSystem'
    }, {
        alias: 'ADP_GROUP',
        text: '\u4EE3\u7801\u4F4D\u5206\u7EC4',
        value: 'adpGroup'
    }, {
        alias: 'ADP_GROUP_TYPE',
        text: '\u7C7B\u578B',
        value: 'adpGroupType'
    }, {
        alias: 'C',
        text: '\u8BA1\u8D39\u540D',
        value: 'c'
    }, {
        alias: 'TM',
        text: '\u5A92\u4F53',
        value: 'tm'
    }, {
        alias: 'CPRO_CHANNEL',
        text: '\u6E20\u9053',
        value: 'cproChannel'
    }, {
        alias: 'SEARCH_CHANNEL',
        text: '\u6E20\u9053',
        value: 'searchChannel'
    }, {
        alias: 'APP_STYLE',
        text: '\u6837\u5F0F',
        value: 'appStyle'
    }, {
        alias: 'REFLUX_AD_POSITION',
        text: '\u4EE3\u7801\u4F4D',
        value: 'refluxAdPosition'
    }, {
        alias: 'DAN_AD_TYPE',
        text: '\u4EA7\u54C1',
        value: 'danAdType'
    }, {
        alias: 'TNAME',
        text: '\u8BA1\u8D39\u540D',
        value: 'tname'
    }, {
        alias: 'ADM_AD_POSITION',
        text: '\u5E7F\u544A\u7BA1\u5BB6\u4EE3\u7801\u4F4D',
        value: 'admAdPosition'
    });
    exports.AllMetric = new Enum({
        alias: 'REQUEST',
        text: '\u8BF7\u6C42\u6570',
        value: 'request',
        format: 'int',
        color: '#38f1d7',
        contrastColor: '#b8f7ee'
    }, {
        alias: 'VIEW',
        text: '\u5C55\u73B0\u91CF',
        value: 'view',
        format: 'int',
        color: '#66c3f9',
        contrastColor: '#97d9ff'
    }, {
        alias: 'AD_POSITION_VIEW',
        text: '\u4EE3\u7801\u4F4D\u5C55\u73B0\u91CF',
        value: 'adPositionView',
        format: 'int',
        color: '#4db6ac',
        contrastColor: '#b2dfdb'
    }, {
        alias: 'COOKIE',
        text: '\u72EC\u7ACB\u8BBF\u5BA2',
        value: 'cookie',
        format: 'int',
        color: '#ff8555',
        contrastColor: '#ffa886'
    }, {
        alias: 'IP',
        text: '\u72EC\u7ACBIP',
        value: 'ip',
        format: 'int',
        color: '#de9071',
        contrastColor: '#e9b49f'
    }, {
        alias: 'CLICK',
        text: '\u70B9\u51FB\u91CF',
        value: 'click',
        format: 'int',
        color: '#acdd96',
        contrastColor: '#cde9c0'
    }, {
        alias: 'CLICK_RATIO',
        text: '\u70B9\u51FB\u7387',
        value: 'clickRatio',
        format: 'percent',
        color: '#ffd155',
        contrastColor: '#ffe191'
    }, {
        alias: 'EINCOME',
        text: '\u6536\u76CA\u4F18\u5316',
        value: 'eincome',
        format: 'money',
        color: '#d5d837',
        contrastColor: '#ebee90'
    }, {
        alias: 'INCOME',
        text: '\u6536\u5165',
        value: 'income',
        format: 'money',
        color: '#fd2222',
        contrastColor: '#ff7171'
    }, {
        alias: 'ECPM',
        text: 'eCPM',
        value: 'ecpm',
        format: 'money',
        color: '#acc1fe',
        contrastColor: '#c8d6ff'
    }, {
        alias: 'CPC',
        text: 'CPC',
        value: 'cpc',
        format: 'money',
        color: '#a1e1e0',
        contrastColor: '#c2edec'
    }, {
        alias: 'FILL_RATIO',
        text: '\u586B\u5145\u7387',
        value: 'fillRatio',
        format: 'percent',
        color: '#ffa248',
        contrastColor: '#ffc388'
    }, {
        alias: 'AD_POSITION_FILL_RATIO',
        text: '\u4EE3\u7801\u4F4D\u586B\u5145\u7387',
        value: 'adPositionFillRatio',
        format: 'percent',
        color: '#ffa248',
        contrastColor: '#ffc388'
    }, {
        alias: 'UNION_APP_FILL_RATIO',
        text: '\u586B\u5145\u7387',
        value: 'unionAppFillRatio',
        format: 'percent',
        color: '#ffa248',
        contrastColor: '#ffc388'
    }, {
        alias: 'CPM_INCOME',
        text: '\u5C55\u73B0\u6536\u5165',
        value: 'cpmIncome',
        format: 'money',
        color: '#ab96ec',
        contrastColor: '#c6b8ec'
    }, {
        alias: 'CPC_INCOME',
        text: '\u70B9\u51FB\u6536\u5165',
        value: 'cpcIncome',
        format: 'money',
        color: '#a64d79',
        contrastColor: '#c27ba0'
    }, {
        alias: 'CONSUME',
        text: '\u6D88\u8D39\u6B21\u6570',
        value: 'consume',
        format: 'int',
        color: '#f44fff',
        contrastColor: '#fab7ff'
    }, {
        alias: 'PAGE_VIEW',
        text: '\u9875\u9762\u5C55\u73B0\u91CF',
        value: 'pageview',
        format: 'int',
        color: '#7aff6a',
        contrastColor: '#98f09b'
    }, {
        alias: 'PAGE_CLICK_RATIO',
        text: '\u9875\u9762\u70B9\u51FB\u7387',
        value: 'pageClickRatio',
        format: 'percent',
        color: '#866787',
        contrastColor: '#a57fa6'
    }, {
        alias: 'PAGE_ECPM',
        text: '\u9875\u9762eCPM',
        value: 'pageEcpm',
        format: 'money',
        color: '#674ea7',
        contrastColor: '#b4a7d6'
    }, {
        alias: 'RETRIEVAL',
        text: '\u68C0\u7D22\u91CF',
        value: 'retrieval',
        format: 'int',
        color: '#6fa8dc',
        contrastColor: '#9fc5e8'
    }, {
        alias: 'IP_ECPM',
        text: '\u5343\u6B21IP\u6536\u5165',
        value: 'ipEcpm',
        format: 'money',
        color: '#ffa248',
        contrastColor: '#ffc388'
    }, {
        alias: 'INSTALLS',
        text: '\u5B89\u88C5\u91CF',
        value: 'installs',
        format: 'int',
        color: '#6fa8dc',
        contrastColor: '#9fc5e8'
    }, {
        alias: 'INSTALLS_INCOME',
        text: '\u5B89\u88C5\u6536\u5165',
        value: 'installsIncome',
        format: 'money',
        color: '#ab96ec',
        contrastColor: '#c6b8ec'
    }, {
        alias: 'ACTIVES',
        text: '\u6D3B\u8DC3\u91CF',
        value: 'actives',
        format: 'int',
        color: '#a64d79',
        contrastColor: '#c27ba0'
    }, {
        alias: 'ACTIVES_INCOME',
        text: '\u6D3B\u8DC3\u6536\u5165',
        value: 'activesIncome',
        format: 'money',
        color: '#f44fff',
        contrastColor: '#fab7ff'
    }, {
        alias: 'ACTIVATES',
        text: '\u6FC0\u6D3B\u91CF',
        value: 'activates',
        format: 'int',
        color: '#866787',
        contrastColor: '#a57fa6'
    }, {
        alias: 'ACTIVATES_INCOME',
        text: '\u6FC0\u6D3B\u6536\u5165',
        value: 'activatesIncome',
        format: 'money',
        color: '#674ea7',
        contrastColor: '#b4a7d6'
    });
    return exports;
});
define('ssp-report/util', [
    'require',
    'moment',
    'underscore',
    'ub-ria/util',
    './enum'
], function (require) {
    var moment = require('moment');
    var underscore = require('underscore');
    var Util = function () {
    };
    Util.prototype = underscore;
    var util = new Util();
    util.extend(util, require('ub-ria/util'));
    util.format = function (number, format) {
        var nullStr = '--';
        if (number === null) {
            return nullStr;
        }
        if (format === 'percent') {
            return number + '%';
        }
        if (format === 'int') {
            return this.formatNumber(number, 0, nullStr);
        }
        if (format === 'money') {
            return this.formatNumber(number, 2, nullStr);
        }
    };
    util.getDurations = function (begin, end, type) {
        type = type || 'days';
        if (begin.diff && end.diff) {
            return Math.abs(begin.diff(end, type));
        }
        return -1;
    };
    util.dateRangeShortcut = {
        yesterday: {
            text: '\u6628\u5929',
            alias: 'yesterday',
            value: 0,
            getValue: function (now) {
                var yesterday = new Date(now.getTime());
                yesterday.setDate(yesterday.getDate() - 1);
                return {
                    begin: yesterday,
                    end: yesterday
                };
            }
        },
        today: {
            text: '\u4ECA\u5929',
            alias: 'today',
            value: 1,
            getValue: function (now) {
                return {
                    begin: now,
                    end: now
                };
            }
        },
        lastSevenDays: {
            text: '\u6700\u8FD17\u5929',
            value: 2,
            alias: 'lastSevenDays',
            getValue: function (now) {
                var mDate = moment(now);
                return {
                    begin: mDate.clone().subtract('day', 7).toDate(),
                    end: mDate.clone().subtract('day', 1).toDate()
                };
            }
        },
        lastWeek: {
            text: '\u4E0A\u5468',
            value: 3,
            alias: 'lastWeek',
            getValue: function (now) {
                var begin = new Date(now.getTime());
                var end = new Date(now.getTime());
                var startOfWeek = 1;
                if (begin.getDay() < startOfWeek % 7) {
                    begin.setDate(begin.getDate() - 14 + startOfWeek - begin.getDay());
                } else {
                    begin.setDate(begin.getDate() - 7 - begin.getDay() + startOfWeek % 7);
                }
                begin.setHours(0, 0, 0, 0);
                end.setFullYear(begin.getFullYear(), begin.getMonth(), begin.getDate() + 6);
                end.setHours(0, 0, 0, 0);
                return {
                    begin: begin,
                    end: end
                };
            }
        },
        currentMonth: {
            text: '\u672C\u6708',
            value: 4,
            alias: 'currentMonth',
            getValue: function (now) {
                return {
                    begin: moment(now).startOf('month').toDate(),
                    end: moment(now).toDate()
                };
            }
        },
        lastMonth: {
            text: '\u4E0A\u4E2A\u6708',
            value: 5,
            alias: 'lastMonth',
            getValue: function (now) {
                var begin = moment(now).subtract('month', 1).startOf('month').toDate();
                var end = moment(now).startOf('month').subtract('day', 1).toDate();
                return {
                    begin: begin,
                    end: end
                };
            }
        },
        lastQuarter: {
            text: '\u4E0A\u4E2A\u5B63\u5EA6',
            value: 6,
            alias: 'lastQuarter',
            getValue: function (now) {
                var begin = moment(now).subtract('month', now.getMonth() % 3 + 3).startOf('month').toDate();
                var end = moment(now).subtract('month', now.getMonth() % 3).startOf('month').subtract('day', 1).toDate();
                return {
                    begin: begin,
                    end: end
                };
            }
        }
    };
    util.contrastRangeShortcut = {
        lastRange: {
            text: '\u4E0A\u4E00\u6BB5\u65F6\u95F4',
            value: 1,
            alias: 'lastRange',
            getValue: function (baseRange) {
                var begin = moment(baseRange.begin);
                var end = moment(baseRange.end);
                var contrastEnd = begin.clone().subtract('day', 1);
                var durations = util.getDurations(begin, end);
                var contrastBegin = contrastEnd.clone().subtract('day', durations);
                return {
                    begin: contrastBegin.toDate(),
                    end: contrastEnd.toDate()
                };
            }
        },
        lastYear: {
            text: '\u53BB\u5E74',
            value: 2,
            alias: 'lastYear',
            getValue: function (baseRange) {
                var begin = moment(baseRange.begin);
                var end = moment(baseRange.end);
                var durations = util.getDurations(begin, end);
                var contrastBegin = begin.clone().subtract('year', 1);
                var contrastEnd = contrastBegin.clone().add('day', durations);
                return {
                    begin: contrastBegin.toDate(),
                    end: contrastEnd.toDate()
                };
            }
        }
    };
    util.hexToRGB = function (hex) {
        if (hex.indexOf('#') === 0) {
            hex = hex.substring(1);
        }
        if (hex.length === 3) {
            hex = hex.charAt(0) + hex.charAt(0) + hex.charAt(1) + hex.charAt(1) + hex.charAt(2) + hex.charAt(2);
        }
        var rgb = {
            red: parseInt(hex.charAt(0) + hex.charAt(1), 16) || 0,
            green: parseInt(hex.charAt(2) + hex.charAt(3), 16) || 0,
            blue: parseInt(hex.charAt(4) + hex.charAt(5), 16) || 0
        };
        rgb.r = rgb.red;
        rgb.g = rgb.green;
        rgb.b = rgb.blue;
        return rgb;
    };
    util.capitalize = function (string) {
        string = String(string);
        return string.charAt(0).toUpperCase() + string.slice(1);
    };
    util.ellipsis = function (str, len) {
        len = parseInt(len, 10);
        if (str.length * 2 <= len) {
            return str;
        }
        var strlen = 0;
        var s = '';
        for (var i = 0; i < str.length; i++) {
            if (str.charCodeAt(i) > 128) {
                strlen = strlen + 2;
                if (strlen > len) {
                    return s.substring(0, s.length - 1) + '...';
                }
            } else {
                strlen = strlen + 1;
                if (strlen > len) {
                    return s.substring(0, s.length - 2) + '...';
                }
            }
            s = s + str.charAt(i);
        }
        return s;
    };
    util.stringifyFilterValues = function (filterValues) {
        filterValues = underscore.map(filterValues, function (item) {
            return item.join();
        });
        return filterValues.join('|');
    };
    util.parseFilterValues = function (filterValues) {
        return underscore.map(filterValues.split('|'), function (item) {
            return item.split(',');
        });
    };
    util.isTimeDimension = function (dimension) {
        var TimeGranularity = require('./enum').TimeGranularity;
        return !!TimeGranularity.fromValue(dimension) && dimension !== TimeGranularity.SUM;
    };
    util.reviseTime = function (query, format, maxScope) {
        var begin = query.begin;
        var end = query.end;
        var isRevised = false;
        if (begin && end) {
            begin = moment(begin, format);
            end = moment(end, format);
            if (begin.isAfter(end)) {
                var temp = begin;
                begin = end;
                end = temp;
                isRevised = true;
            }
            var validEnd = moment().endOf('day');
            if (end.toDate() > validEnd.toDate()) {
                end = validEnd;
                isRevised = true;
            }
            var validBegin = end.clone().subtract('d', maxScope - 1);
            if (validBegin.toDate() > begin.toDate()) {
                begin = validBegin;
                isRevised = true;
            }
        }
        if (isRevised) {
            return {
                begin: begin.format(format),
                end: end.format(format)
            };
        }
        return query;
    };
    util.buildListFields = function (metrics, dimensions, config) {
        var allMetricFields = config.getMetricTableFields();
        var allDimensionFields = config.getDimensionTableFields();
        var metricFields = util.map(metrics, function (metric) {
            return util.findWhere(allMetricFields, { field: metric });
        });
        var dimensionFields = [];
        util.each(dimensions, function (dimension) {
            if (util.isTimeDimension(dimension)) {
                dimension = 'time';
            }
            var field = util.find(allDimensionFields, function (item) {
                return item.field === dimension || item.field === dimension + 'Name';
            });
            dimensionFields.push(field);
            if (util.contains(config.getShowIdDimensions(), dimension)) {
                field = util.find(allDimensionFields, function (item) {
                    return item.field === dimension + 'Id';
                });
            }
            dimensionFields.push(field);
        });
        return {
            metricFields: metricFields,
            dimensionFields: dimensionFields
        };
    };
    util.getReportName = function (reportTypes, reportType) {
        var item = util.findWhere(reportTypes, { value: reportType });
        if (item) {
            return item.text;
        }
        throw new Error('\u672A\u627E\u5230\u6307\u5B9A\u7C7B\u578B\u7684\u62A5\u544A\u914D\u7F6E!');
    };
    util.buildDefaultTimeRange = function (rangeAlias) {
        var defaultTimeRange = util.dateRangeShortcut[rangeAlias] || util.dateRangeShortcut.yesterday;
        defaultTimeRange = defaultTimeRange.getValue(new Date());
        defaultTimeRange.begin = moment(defaultTimeRange.begin);
        defaultTimeRange.end = moment(defaultTimeRange.end);
        return defaultTimeRange;
    };
    return util;
});
define('ssp-report/ReportData', [
    'require',
    './util',
    'ub-ria/mvc/StaticListData',
    'eoo'
], function (require) {
    var u = require('./util');
    var exports = {};
    exports.batchSearch = function (options) {
        throw new Error('batchSearch method is not implemented');
    };
    exports.doCache = function (data, query) {
        this.cacheList = data;
        this.cacheList.results = u.map(data.results, function (item, index) {
            item.originIndex = index;
            return item;
        });
        return this.filterData(query);
    };
    var BaseData = require('ub-ria/mvc/StaticListData');
    var ReportData = require('eoo').create(BaseData, exports);
    return ReportData;
});
define('ssp-media-protect/mvc/MediaProtectListView', [
    'require',
    'tpl!startup/template',
    'moment',
    'ub-ria/util',
    'esui/Table',
    'ub-ria/mvc/ListView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var m = require('moment');
    var u = require('ub-ria/util');
    var exports = {};
    exports.template = 'sspMediaProtectList';
    exports.getTableFields = function () {
        var canModify = this.model.checkPermission('canModify');
        var canDelete = this.model.checkPermission('canDelete');
        var fields = [
            {
                title: '\u540D\u79F0',
                field: 'name',
                sortable: true,
                width: 200,
                stable: false,
                content: 'name'
            },
            {
                title: '\u5C4F\u853D\u5185\u5BB9',
                field: 'content',
                stable: false,
                width: 200,
                content: 'content'
            },
            {
                title: '\u521B\u5EFA\u4EBA',
                field: 'creatorId',
                sortable: true,
                stable: false,
                width: 150,
                content: 'creator'
            },
            {
                title: '\u521B\u5EFA\u65F6\u95F4',
                field: 'createTime',
                sortable: true,
                width: 150,
                stable: true,
                content: function (item) {
                    return m(item.createTime).format('YYYY-MM-DD HH:mm');
                }
            }
        ];
        if (canModify || canDelete) {
            fields.push({
                title: '\u64CD\u4F5C',
                field: 'operation',
                width: 80,
                stable: true,
                content: function (item) {
                    var config = [
                        {
                            command: 'modify',
                            type: 'modify',
                            args: item.id,
                            text: '\u4FEE\u6539',
                            auth: canModify
                        },
                        '|',
                        {
                            command: 'remove',
                            type: 'remove',
                            args: item.id,
                            text: '\u5220\u9664',
                            auth: canDelete
                        }
                    ];
                    var Table = require('esui/Table');
                    return Table.slideOperations(config);
                }
            });
        }
        var columns = this.model.getExcludeColumn();
        if (columns) {
            fields = u.filter(fields, function (field) {
                return !u.contains(columns, field.field);
            });
        }
        return fields;
    };
    var ListView = require('ub-ria/mvc/ListView');
    var MediaProtectListView = require('eoo').create(ListView, exports);
    return MediaProtectListView;
});
define('ssp-media-protect/mvc/MediaProtectListModel', [
    'require',
    'eoo',
    'ub-ria/mvc/ListModel'
], function (require) {
    var exports = {};
    exports.defaultArgs = {
        orderBy: 'createTime',
        order: 'desc',
        status: 'all'
    };
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'excludeColumn');
    var ListModel = require('ub-ria/mvc/ListModel');
    var MediaProtectListModel = eoo.create(ListModel, exports);
    return MediaProtectListModel;
});
define('ssp-media-protect/mvc/MediaProtectList', [
    'require',
    'ub-ria/util',
    'er/util',
    'ub-ria/mvc/ListAction',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var exports = {};
    exports.entityDescription = '\u5E38\u7528\u8BBE\u7F6E';
    exports.notifyModifyFail = function (context, errors) {
        if (errors.status === 409) {
            errors = require('er/util').parseJSON(errors.responseText);
        }
        if (errors.fields) {
            var globalError = u.findWhere(errors.fields, { field: 'global' });
            if (globalError) {
                this.view.alert(globalError.message, context.command + this.getEntityDescription());
                return;
            }
        }
        this.$super(arguments);
    };
    var ListAction = require('ub-ria/mvc/ListAction');
    var MediaProtectList = require('eoo').create(ListAction, exports);
    return MediaProtectList;
});
define('ssp-media/siteSchema', ['require'], function (require) {
    return {
        name: [
            'string',
            '\u540D\u79F0',
            {
                required: true,
                maxLength: 100
            }
        ]
    };
});
define('ssp-media/enum', [
    'require',
    'er/Enum'
], function (require) {
    var Enum = require('er/Enum');
    var exports = {};
    exports.PVLevel = new Enum({
        alias: 'FIFTH',
        text: '1\u4E07\u4EE5\u4E0B',
        value: 1
    }, {
        alias: 'FOURTH',
        text: '1\u4E07-10\u4E07',
        value: 2
    }, {
        alias: 'THIRD',
        text: '10\u4E07-100\u4E07',
        value: 3
    }, {
        alias: 'SECOND',
        text: '100\u4E07-1000\u4E07',
        value: 4
    }, {
        alias: 'FIRST',
        text: '1000\u4E07\u4EE5\u4E0A',
        value: 5
    });
    exports.Business = new Enum({
        alias: 'CPRO',
        text: '\u7F51\u76DF\u63A8\u5E7F\u5408\u4F5C'
    });
    exports.SiteStatus = new Enum({
        alias: 'ADOPTED',
        text: '\u5DF2\u901A\u8FC7'
    }, {
        alias: 'AUDIT',
        text: '\u5BA1\u6838\u4E2D'
    }, {
        alias: 'REJECTED',
        text: '\u672A\u901A\u8FC7'
    });
    exports.MediaType = new Enum({
        alias: 'SITE',
        text: '\u7F51\u7AD9'
    }, {
        alias: 'APP',
        text: '\u5E94\u7528'
    }, {
        alias: 'SOFTWARE',
        text: '\u8F6F\u4EF6'
    });
    return exports;
});
define('ssp-media/mvc/MediaSiteListView', [
    'require',
    'tpl!startup/template',
    'tpl!startup/template',
    'moment',
    'ub-ria/util',
    '../enum',
    'er/URL',
    'esui/Table',
    'eoo',
    'ub-ria/mvc/ListView'
], function (require) {
    require('tpl!startup/template');
    require('tpl!startup/template');
    var m = require('moment');
    var u = require('ub-ria/util');
    var Business = require('../enum').Business;
    var SiteStatus = require('../enum').SiteStatus;
    var exports = {};
    exports.template = 'sspMediaSiteList';
    exports.getTableFields = function () {
        var templateEngine = this.getTemplateEngine();
        var statusRender = templateEngine.getRenderer('sspMediaSiteStatusField');
        var statusDetailRender = templateEngine.getRenderer('sspMediaSiteStatusFieldWithDetail');
        var canModify = this.model.checkPermission('canModify');
        var canDelete = this.model.checkPermission('canDelete');
        var canViewReport = this.model.checkPermission('canViewReport');
        var fields = [
            {
                title: '\u7F51\u7AD9\u57DF\u540D',
                field: 'domain',
                width: 200,
                stable: false,
                content: 'domain'
            },
            {
                title: '\u7F51\u7AD9\u540D\u79F0',
                field: 'name',
                stable: false,
                width: 200,
                content: 'name'
            },
            {
                title: '\u5DF2\u5F00\u901A\u4E1A\u52A1',
                field: 'bizStatus',
                stable: false,
                width: 150,
                content: function (item) {
                    var business = '';
                    u.each(item.bizStatus, function (status) {
                        business += Business.getTextFromAlias(status.toUpperCase()) + '\u3001';
                    });
                    if (business.length) {
                        business = business.substring(0, business.length - 1);
                    }
                    return business ? business : '\u65E0';
                }
            },
            {
                title: '\u72B6\u6001',
                field: 'state',
                sortable: true,
                width: 150,
                stable: true,
                content: function (item) {
                    var data = {
                        statusName: u.dasherize(SiteStatus.getAliasFromValue(item.state)),
                        statusContent: SiteStatus.getTextFromValue(item.state)
                    };
                    if (item.state === SiteStatus.REJECTED) {
                        data.refuseReason = item.refuseReason;
                        return statusDetailRender(data);
                    }
                    if (item.state === SiteStatus.AUDIT) {
                        return statusDetailRender(data);
                    }
                    return statusRender(data);
                }
            },
            {
                title: '\u521B\u5EFA\u65F6\u95F4',
                field: 'createTime',
                sortable: true,
                width: 150,
                stable: true,
                content: function (item) {
                    return m(item.createTime).format('YYYY-MM-DD HH:mm');
                }
            },
            {
                title: '\u64CD\u4F5C',
                field: 'operation',
                width: 80,
                stable: true,
                content: function (item) {
                    var canOperate = item.state !== SiteStatus.AUDIT;
                    if (!canOperate) {
                        return '';
                    }
                    var config = [
                        {
                            command: 'modify',
                            type: 'modify',
                            args: item.id,
                            text: '\u4FEE\u6539',
                            auth: canModify && canOperate
                        },
                        '|',
                        {
                            command: 'remove',
                            type: 'remove',
                            args: item.id,
                            text: '\u5220\u9664',
                            auth: canDelete && canOperate
                        },
                        '|',
                        {
                            text: '\u62A5\u544A',
                            type: 'report',
                            command: 'viewReport',
                            args: require('er/URL').withQuery('/report/website', {
                                id: item.id,
                                name: item.name
                            }),
                            auth: canViewReport
                        }
                    ];
                    var Table = require('esui/Table');
                    return Table.slideOperations(config);
                }
            }
        ];
        if (!canModify && !canDelete) {
            fields.pop();
        }
        return fields;
    };
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = { 'disallow-create:click': preventDefault };
        this.addUIEvents(uiEvents);
    };
    function preventDefault(e) {
        e.preventDefault();
    }
    exports.popDrawerAction = function () {
        var drawerActionPanel = this.$super(arguments);
        drawerActionPanel.on('close', drawerActionPanel.dispose, drawerActionPanel);
        return drawerActionPanel;
    };
    var oo = require('eoo');
    oo.defineAccessor(exports, 'templateEngine');
    var ListView = require('ub-ria/mvc/ListView');
    var MediaSiteListView = oo.create(ListView, exports);
    return MediaSiteListView;
});
define('ssp-media/mvc/MediaSiteListModel', [
    'require',
    'er/Deferred',
    'ub-ria/mvc/ListModel',
    'eoo'
], function (require) {
    var exports = {};
    var SITE_COUNT = {
        siteCountInfo: function (model) {
            return model.data().getSiteCount();
        }
    };
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(SITE_COUNT);
    };
    exports.defaultArgs = {
        orderBy: 'createTime',
        order: 'desc',
        status: 'all'
    };
    exports.getRemoveAdvice = function (ids) {
        var Deferred = require('er/Deferred');
        var advice = { message: '\u662F\u5426\u786E\u8BA4\u5220\u9664\uFF1F\u5220\u9664\u540E\u5F53\u5929\u6536\u5165\u5C06\u65E0\u6CD5\u8BA1\u5165\u3002' };
        return Deferred.resolved(advice);
    };
    var ListModel = require('ub-ria/mvc/ListModel');
    var MediaSiteListModel = require('eoo').create(ListModel, exports);
    return MediaSiteListModel;
});
define('ssp-media/mvc/MediaSiteList', [
    'require',
    'er/util',
    'eoo',
    'ub-ria/mvc/ListAction'
], function (require) {
    var exports = {};
    exports.entityDescription = '\u7F51\u7AD9';
    exports.notifyModifyFail = function (context, errors) {
        if (errors.status === 409) {
            errors = require('er/util').parseJSON(errors.responseText);
        }
        if (errors.message) {
            this.view.alert(errors.message, context.command + this.getEntityDescription());
            return;
        }
        this.$super(arguments);
    };
    exports.initBehavior = function () {
        this.$super(arguments);
        var session = this.getSession();
        if (this.model.has('fromNewerGuide') && session && session.get('mediaDrawerOpen')) {
            this.view.popDrawerAction({ url: this.model.get('createURL') }).show();
        }
    };
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'session');
    var ListAction = require('ub-ria/mvc/ListAction');
    var MediaSiteList = eoo.create(ListAction, exports);
    return MediaSiteList;
});
define('ssp-finance/ui/extension/RemoveBlank', [
    'exports',
    'module',
    'esui',
    'esui/Extension',
    'esui/InputControl'
], function (exports, module, _esui, _esuiExtension, _esuiInputControl) {
    var _esui2 = babelHelpers.interopRequireDefault(_esui);
    var _Extension2 = babelHelpers.interopRequireDefault(_esuiExtension);
    var _InputControl = babelHelpers.interopRequireDefault(_esuiInputControl);
    var RemoveBlank = function (_Extension) {
        babelHelpers.inherits(RemoveBlank, _Extension);
        function RemoveBlank() {
            babelHelpers.classCallCheck(this, RemoveBlank);
            babelHelpers.get(Object.getPrototypeOf(RemoveBlank.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(RemoveBlank, [
            {
                key: 'activate',
                value: function activate() {
                    var target = this.target;
                    if (!(target instanceof _InputControl['default'])) {
                        return;
                    }
                    target.on('afterrender', trim, this);
                    target.on('change', trim, this);
                    babelHelpers.get(Object.getPrototypeOf(RemoveBlank.prototype), 'activate', this).call(this);
                }
            },
            {
                key: 'inactive',
                value: function inactive() {
                    var target = this.target;
                    if (!(target instanceof _InputControl['default'])) {
                        return;
                    }
                    target.un('afterrender', trim, this);
                    target.un('change', trim, this);
                    babelHelpers.get(Object.getPrototypeOf(RemoveBlank.prototype), 'inactive', this).call(this);
                }
            },
            {
                key: 'type',
                get: function get() {
                    return 'RemoveBlank';
                }
            }
        ]);
        return RemoveBlank;
    }(_Extension2['default']);
    module.exports = RemoveBlank;
    function trim() {
        var value = this.target.getValue();
        var trimedValue = value.replace(/\s/g, '');
        this.target.setValue(trimedValue);
    }
    _esui2['default'].registerExtension(RemoveBlank);
});
define('ssp-finance/ui/extension/FinanceInvalidIndicator', [
    'exports',
    'module',
    'esui',
    'esui/Extension',
    'esui/InputControl',
    'esui/TextBox'
], function (exports, module, _esui, _esuiExtension, _esuiInputControl, _esuiTextBox) {
    var _esui2 = babelHelpers.interopRequireDefault(_esui);
    var _Extension2 = babelHelpers.interopRequireDefault(_esuiExtension);
    var _InputControl = babelHelpers.interopRequireDefault(_esuiInputControl);
    var _TextBox = babelHelpers.interopRequireDefault(_esuiTextBox);
    var FinanceInvalidIndicator = function (_Extension) {
        babelHelpers.inherits(FinanceInvalidIndicator, _Extension);
        babelHelpers.createClass(FinanceInvalidIndicator, [{
                key: 'type',
                get: function get() {
                    return 'FinanceInvalidIndicator';
                }
            }]);
        function FinanceInvalidIndicator(options) {
            babelHelpers.classCallCheck(this, FinanceInvalidIndicator);
            babelHelpers.get(Object.getPrototypeOf(FinanceInvalidIndicator.prototype), 'constructor', this).call(this, options);
            this.isValid = options.isValid === 'false' ? false : options.isValid;
        }
        babelHelpers.createClass(FinanceInvalidIndicator, [
            {
                key: 'activate',
                value: function activate() {
                    var target = this.target;
                    if (!(target instanceof _InputControl['default'])) {
                        return;
                    }
                    target.on('afterrender', this.initState, this);
                    var type = target instanceof _TextBox['default'] ? 'focus' : 'change';
                    target.on(type, this.cleanState, this);
                    babelHelpers.get(Object.getPrototypeOf(FinanceInvalidIndicator.prototype), 'activate', this).call(this);
                }
            },
            {
                key: 'initState',
                value: function initState() {
                    var invalidState = this.target.get('invalild');
                    if (!this.isValid || invalidState === 'true' || invalidState === true) {
                        this.target.addState('invalid');
                    }
                }
            },
            {
                key: 'cleanState',
                value: function cleanState() {
                    this.target.removeState('invalid');
                }
            },
            {
                key: 'inactive',
                value: function inactive() {
                    var target = this.target;
                    if (!(target instanceof _InputControl['default'])) {
                        return;
                    }
                    target.un('afterrender', this.initState, this);
                    target.un('change', this.cleanState, this);
                    babelHelpers.get(Object.getPrototypeOf(FinanceInvalidIndicator.prototype), 'inactive', this).call(this);
                }
            }
        ]);
        return FinanceInvalidIndicator;
    }(_Extension2['default']);
    module.exports = FinanceInvalidIndicator;
    _esui2['default'].registerExtension(FinanceInvalidIndicator);
});
define('ssp-finance/ui/extension/AutoComplete', [
    'require',
    'ub-ria/util',
    'eoo',
    'esui',
    'esui/lib',
    'esui/Extension',
    'esui/Layer',
    'esui/TextBox'
], function (require) {
    var u = require('ub-ria/util');
    var eoo = require('eoo');
    var esui = require('esui');
    var lib = require('esui/lib');
    var Extension = require('esui/Extension');
    var Layer = require('esui/Layer');
    require('esui/TextBox');
    var TEXTBOX_TYPE = 'TextBox';
    var LAYER_PREFIX_CLASS = 'autocomplete';
    var KEYBOARD = {
        UP: 38,
        DOWN: 40,
        RETURN: 13
    };
    var AutoCompleteLayer = eoo.create(Layer, {
        constructor: function (control) {
            this.$super(arguments);
            this.dock = { strictWidth: true };
            this.active = false;
            this.initStructure();
            this.initEvents();
        },
        type: 'AutoCompleteLayer',
        initStructure: function () {
            var helper = this.control.helper;
            this.addCustomClasses([helper.getPartClasses(LAYER_PREFIX_CLASS + '-layer')]);
            this.getElement();
        },
        initEvents: function () {
            var helper = this.control.helper;
            var inputElement = this.inputElement = this.getInput();
            var layerElement = this.getElement(false);
            this.selectItemChoosedHandler = u.bind(selectItemChoosedHandler, this);
            this.inputKeyupHanlder = u.bind(inputKeyupHanlder, this);
            this.inputHandler = u.bind(inputHandler, this);
            helper.addDOMEvent(layerElement, 'click', this.selectItemChoosedHandler);
            helper.addDOMEvent(inputElement, 'keyup', this.inputKeyupHanlder);
            this.control.on('input', this.inputHandler);
            inputElement.setAttribute('autocomplete', 'off');
        },
        repaint: function (html) {
            var element = this.getElement(false);
            if (element) {
                this.render(element, html);
            }
        },
        render: function (element, html) {
            if (html) {
                element.innerHTML = html;
            }
        },
        getSelectedItemIndex: function () {
            var helper = this.control.helper;
            var element = this.getElement(false);
            var selectItems = element.children;
            var selectedItemIndex = -1;
            for (var i = 0, len = selectItems.length; i < len; i++) {
                if (lib.hasClass(selectItems[i], helper.getPartClasses(LAYER_PREFIX_CLASS + '-layer-item-selected'))) {
                    selectedItemIndex = i;
                    break;
                }
            }
            return selectedItemIndex;
        },
        getSelectedItem: function () {
            var element = this.getElement(false);
            var selectedItem;
            var selectedItemIndex = this.getSelectedItemIndex();
            if (selectedItemIndex !== -1) {
                selectedItem = element.children[selectedItemIndex];
            }
            return selectedItem;
        },
        setTargetValue: function (selectedItem) {
            var text = selectedItem.getAttribute('data-text');
            var id = selectedItem.getAttribute('data-id');
            var args = { value: text };
            if (id) {
                args.id = id;
            }
            var selectEvent = this.control.fire(LAYER_PREFIX_CLASS + 'select', args);
            if (selectEvent.isDefaultPrevented()) {
                return;
            }
            this.control.setValue(text);
            this.hide();
        },
        getInput: function () {
            var control = this.control;
            if (control.type === TEXTBOX_TYPE && control.mode !== 'textarea') {
                return lib.g(control.inputId);
            }
            return null;
        },
        filter: function (value, datasource) {
            return u.filter(datasource, function (data) {
                var text = u.isObject(data) ? data.text : data;
                return new RegExp(escapeRegex(value), 'i').test(text);
            });
        },
        dispose: function () {
            var inputElement = this.getInput();
            var helper = this.control.helper;
            helper.removeDOMEvent(inputElement, 'keyup', this.inputKeyupHanlder);
            this.control.un('input', this.inputHandler);
            this.$super(arguments);
        },
        nodeName: 'ol'
    });
    function selectItemChoosedHandler(e) {
        var clickedTarget = e.target;
        while (clickedTarget && clickedTarget.tagName.toLowerCase() !== 'li') {
            clickedTarget = clickedTarget.parentNode;
        }
        if (!clickedTarget) {
            return;
        }
        this.setTargetValue(clickedTarget);
    }
    function inputHandler(e) {
        var inputControl = this.control;
        var value = this.getInput().value;
        if (!value || /(?:\s)$/.test(value)) {
            repaintSuggest.call(this, '');
            this.hide();
            return;
        }
        if (u.isFunction(inputControl.extractWord)) {
            value = inputControl.extractWord(value);
        }
        repaintSuggest.call(this, value);
    }
    function inputKeyupHanlder(e) {
        if (!this.active) {
            return;
        }
        switch (e.keyCode) {
        case KEYBOARD.UP:
            e.preventDefault();
            moveHandler.call(this, 'up');
            break;
        case KEYBOARD.DOWN:
            e.preventDefault();
            moveHandler.call(this, 'down');
            break;
        case KEYBOARD.RETURN:
            var selectedItem = this.getSelectedItem();
            if (selectedItem) {
                this.setTargetValue(selectedItem);
            }
            e.preventDefault();
            e.stopPropagation();
            break;
        }
    }
    function escapeRegex(value) {
        return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
    }
    function repaintSuggest(value) {
        if (!value) {
            renderSuggest.call(this);
            return;
        }
        var self = this;
        var datasource = this.control.datasource;
        if (typeof datasource === 'function') {
            datasource.call(this, value, function (data) {
                renderSuggest.call(self, data, value);
            });
        } else if (datasource && datasource.length) {
            renderSuggest.call(this, this.filter(value, datasource), value);
        } else {
            throw new Error('AutoComplete extension has no datasource!');
        }
    }
    function renderSuggest(data, inputValue) {
        var helper = this.control.helper;
        var ret = [];
        var tpl = '<li tabindex="-1" ${dataId} data-text="${dataText}" class="${lineClasses}">' + '<span class="${itemClasses}">${text}</span>${desc}</li>';
        if (data && data.length) {
            for (var i = 0, len = data.length; i < len; i++) {
                var item = data[i];
                var text = u.isObject(item) && item.text || item;
                var desc = u.isObject(item) && item.desc || undefined;
                var html = lib.format(tpl, {
                    dataId: u.isObject(item) && item.id ? ' data-id="' + item.id + '"' : '',
                    dataText: text,
                    lineClasses: helper.getPartClasses(LAYER_PREFIX_CLASS + '-layer-item') + (i === 0 ? ' ' + helper.getPartClasses(LAYER_PREFIX_CLASS + '-layer-item-selected') : ''),
                    itemClasses: helper.getPartClasses(LAYER_PREFIX_CLASS + '-layer-item-text'),
                    text: text.replace(new RegExp(escapeRegex(inputValue), 'i'), highlightWord),
                    desc: desc ? '<span class="' + helper.getPartClasses(LAYER_PREFIX_CLASS + '-layer-item-desc') + '">' + item.desc + '</span>' : ''
                });
                ret.push(html);
            }
            ret = ret.join('');
            this.active = true;
            this.repaint(ret);
            this.show();
        } else {
            this.active = false;
            this.hide();
        }
        function highlightWord(word) {
            return '<i class="' + helper.getPartClasses(LAYER_PREFIX_CLASS + '-layer-item-char-selected') + '">' + word + '</i>';
        }
    }
    function moveHandler(updown) {
        var helper = this.control.helper;
        var element = this.getElement(false);
        var items = element.children;
        var selectedItemIndex = this.getSelectedItemIndex();
        var selectedItem = null;
        if (selectedItemIndex !== -1) {
            selectedItem = items[selectedItemIndex];
            if (selectedItem) {
                lib.removeClass(selectedItem, helper.getPartClasses(LAYER_PREFIX_CLASS + '-layer-item-selected'));
            }
        }
        switch (updown) {
        case 'up':
            if (selectedItemIndex === -1 || selectedItemIndex === 0) {
                selectedItemIndex = items.length - 1;
            } else {
                selectedItemIndex--;
            }
            break;
        case 'down':
            if (selectedItemIndex === -1 || selectedItemIndex === items.length - 1) {
                selectedItemIndex = 0;
            } else {
                selectedItemIndex++;
            }
            break;
        }
        selectedItem = items[selectedItemIndex];
        lib.addClass(selectedItem, helper.getPartClasses(LAYER_PREFIX_CLASS + '-layer-item-selected'));
        this.inputElement.focus();
    }
    var AutoComplete = eoo.create(Extension, {
        type: 'AutoComplete',
        activate: function () {
            var type = this.target.type;
            if (type === TEXTBOX_TYPE && this.target.mode === 'text') {
                setTimeout(u.bind(function () {
                    this.autoCompleteLayer = new AutoCompleteLayer(this.target);
                }, this), 0);
                this.$super(arguments);
            }
        },
        inactivate: function () {
            var type = this.target.type;
            if (type === TEXTBOX_TYPE && this.target.mode === 'text') {
                this.autoCompleteLayer.dispose();
                this.autoCompleteLayer = null;
                this.$super(arguments);
            }
        }
    });
    esui.registerExtension(AutoComplete);
    return AutoComplete;
});
define('ssp-finance/ui/FinanceUploader', [
    'exports',
    'module',
    'ub-ria/ui/Uploader',
    'esui'
], function (exports, module, _ubRiaUiUploader, _esui) {
    var _Uploader2 = babelHelpers.interopRequireDefault(_ubRiaUiUploader);
    var _esui2 = babelHelpers.interopRequireDefault(_esui);
    var TIMER_ID = Symbol('timer-id');
    var IS_IE = function () {
        var b = document.createElement('b');
        b.innerHTML = '<!--[if IE]><i></i><![endif]-->';
        return b.getElementsByTagName('i').length === 1;
    }();
    var FinanceUploader = function (_Uploader) {
        babelHelpers.inherits(FinanceUploader, _Uploader);
        function FinanceUploader() {
            babelHelpers.classCallCheck(this, FinanceUploader);
            babelHelpers.get(Object.getPrototypeOf(FinanceUploader.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(FinanceUploader, [
            {
                key: 'checkFileSize',
                value: function checkFileSize() {
                    if (this.maxSize) {
                        var input = this.helper.getPart('input');
                        var fileSize = null;
                        if (input.files) {
                            fileSize = input.files[0].size;
                        } else if (IS_IE) {
                            try {
                                var fso = new ActiveXObject('Scripting.FileSystemObject');
                                fileSize = fso.GetFile(input.filename).Size;
                            } catch (error) {
                            }
                        }
                        if (fileSize) {
                            var isValid = fileSize / (1024 * 1024) <= this.maxSize;
                            if (!isValid) {
                                var message = this.maxSizeErrorMessage || '\u6587\u4EF6\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7' + this.maxSize + 'MB\uFF0C\u8BF7\u91CD\u65B0\u4E0A\u4F20';
                                this.notifyFail(message);
                            }
                            return isValid;
                        }
                    }
                    return true;
                }
            },
            {
                key: 'receiveFile',
                value: function receiveFile() {
                    var input = this.helper.getPart('input');
                    var filename = input.value;
                    if (filename && this.checkFileSize()) {
                        babelHelpers.get(Object.getPrototypeOf(FinanceUploader.prototype), 'receiveFile', this).call(this);
                    }
                }
            },
            {
                key: 'submit',
                value: function submit() {
                    this.initTimer();
                    babelHelpers.get(Object.getPrototypeOf(FinanceUploader.prototype), 'submit', this).call(this);
                }
            },
            {
                key: 'initTimer',
                value: function initTimer() {
                    var _this = this;
                    if (this.timeout) {
                        this[TIMER_ID] = setTimeout(function () {
                            return _this.notifyFail(_this.timeoutErrorMessage || '\u8BF7\u6C42\u8D85\u65F6\uFF0C\u8BF7\u91CD\u65B0\u4E0A\u4F20');
                        }, this.timeout * 1000);
                    }
                }
            },
            {
                key: 'showUploadResult',
                value: function showUploadResult() {
                    this[TIMER_ID] && clearTimeout(this[TIMER_ID]);
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    babelHelpers.get(Object.getPrototypeOf(FinanceUploader.prototype), 'showUploadResult', this).apply(this, args);
                }
            },
            {
                key: 'dispose',
                value: function dispose() {
                    babelHelpers.get(Object.getPrototypeOf(FinanceUploader.prototype), 'dispose', this).call(this);
                    this[TIMER_ID] && clearTimeout(this[TIMER_ID]);
                }
            },
            {
                key: 'type',
                get: function get() {
                    return 'FinanceUploader';
                }
            },
            {
                key: 'styleType',
                get: function get() {
                    return 'Uploader';
                }
            }
        ]);
        return FinanceUploader;
    }(_Uploader2['default']);
    module.exports = FinanceUploader;
    _esui2['default'].register(FinanceUploader);
});
define('ssp-finance/ui/FilePreview', [
    'require',
    'esui/Panel',
    'esui',
    'esui/InputControl',
    'ub-ria/util',
    'esui/lib',
    'esui/painters',
    'eoo'
], function (require) {
    require('esui/Panel');
    var ui = require('esui');
    var InputControl = require('esui/InputControl');
    var u = require('ub-ria/util');
    var lib = require('esui/lib');
    var exports = {};
    exports.type = 'FilePreview';
    exports.initStructure = function () {
        this.$super(arguments);
        createStructure(this);
    };
    var template = '<span title="\u79FB\u9664" class=${fileClass} data-index="${index}">${name}</span>';
    exports.addValue = function (value) {
        this.rawValue = this.rawValue || [];
        this.rawValue.push(value);
        createStructure(this);
    };
    exports.initEvents = function () {
        this.helper.addDOMEvent(this.main, 'click', onMainClick);
    };
    function getFileHTML(object, index) {
        return lib.format(template, {
            name: u.escape(object.name),
            index: index,
            fileClass: this.helper.getPartClassName('file')
        });
    }
    function createStructure(control) {
        control.main.innerHTML = u.map(control.getRawValue(), getFileHTML, control).join('');
    }
    function onMainClick(e) {
        var target = e.target;
        if (this.helper.isPart(target, 'file')) {
            var index = e.target.getAttribute('data-index');
            var value = this.getRawValue();
            value.splice(index, 1);
            this.setRawValue(value.slice(0));
        }
    }
    exports.repaint = require('esui/painters').createRepaint(InputControl.prototype.repaint, {
        name: 'rawValue',
        paint: function (uploader, rawValue) {
            createStructure(uploader);
        }
    });
    var FilePreview = require('eoo').create(InputControl, exports);
    ui.register(FilePreview);
    return FilePreview;
});
define('ssp-finance/mvc/FinancePaymentListView', [
    'exports',
    'module',
    'tpl!startup/template',
    'tpl!startup/template',
    'ub-ria/util',
    'ub-ria/mvc/ListView',
    'er/URL',
    '../enum'
], function (exports, module, _tplTplFinancePaymentListTplHtml, _tplTplFinanceCommonTplHtml, _ubRiaUtil, _ubRiaMvcListView, _erURL, _enum) {
    var _u = babelHelpers.interopRequireDefault(_ubRiaUtil);
    var _ListView2 = babelHelpers.interopRequireDefault(_ubRiaMvcListView);
    var _URL = babelHelpers.interopRequireDefault(_erURL);
    var TEMPLATE_ENGINE = Symbol('templateEngine');
    var FinancePaymentListView = function (_ListView) {
        babelHelpers.inherits(FinancePaymentListView, _ListView);
        babelHelpers.createClass(FinancePaymentListView, [{
                key: 'template',
                get: function get() {
                    return 'sspFinancePaymentList';
                }
            }]);
        function FinancePaymentListView() {
            babelHelpers.classCallCheck(this, FinancePaymentListView);
            babelHelpers.get(Object.getPrototypeOf(FinancePaymentListView.prototype), 'constructor', this).call(this);
            var uiEvents = { 'rule:change': resetTableHeaderFollow };
            this.addUIEvents(uiEvents);
        }
        babelHelpers.createClass(FinancePaymentListView, [
            {
                key: 'getTableFields',
                value: function getTableFields() {
                    var templateEngine = this.getTemplateEngine();
                    var userAccountFieldRenderer = templateEngine.getRenderer('sspFinancePaymentListUserAccountField');
                    var paymentStatusFieldRenderer = templateEngine.getRenderer('sspFinancePaymentListPaymentStatusField');
                    var operationFieldRenderer = templateEngine.getRenderer('sspFinancePaymentListOperationField');
                    var canViewERPInvoice = this.model.checkPermission('canViewERPInvoice');
                    var tableFields = [
                        {
                            title: '\u65F6\u95F4',
                            field: 'date',
                            sortable: false,
                            resizable: false,
                            width: 70,
                            stable: true,
                            content: function content(item) {
                                return _u['default'].escape(item.date);
                            }
                        },
                        {
                            title: '\u8D22\u52A1\u5BF9\u8C61',
                            field: 'userAccountType',
                            sortable: false,
                            resizable: false,
                            width: 130,
                            stable: true,
                            content: function content(item) {
                                var userAccountType = _enum.UserAccountType.getTextFromValue(item.userAccountType);
                                var canFillInvoice = item.itemCount && item.userAccountType === _enum.UserAccountType.ENTERPRISE && canViewERPInvoice;
                                return userAccountFieldRenderer({
                                    userAccountType: userAccountType,
                                    canFillInvoice: canFillInvoice,
                                    isPaymentPostponed: item.blacklistFlag,
                                    date: item.date
                                });
                            }
                        },
                        {
                            title: '\u7A0E\u524D\u6536\u5165(\u5143)',
                            field: 'monthlyIncome',
                            sortable: false,
                            resizable: false,
                            width: 85,
                            stable: true,
                            content: function content(item) {
                                return formatMoney(item.monthlyIncome);
                            }
                        },
                        {
                            title: '\u5B9E\u9645\u652F\u4ED8\u91D1\u989D(\u6263\u9664\u7A0E\u8D39\u540E/\u5143)',
                            field: 'actualPayAfterTax',
                            sortable: false,
                            resizable: false,
                            width: 140,
                            stable: true,
                            content: function content(item) {
                                if (item.userAccountType === _enum.UserAccountType.INDIVIDUAL) {
                                    return formatMoney(fixMoney(item.actualPayAfterTax, item.monthlyIncome, getTaxStatus(item.taxStatus)));
                                }
                                return formatMoney(item.actualPayAfterTax);
                            }
                        },
                        {
                            title: '\u4ED8\u6B3E\u72B6\u6001',
                            field: 'status',
                            sortable: false,
                            resizable: false,
                            width: 70,
                            stable: true,
                            content: function content(item) {
                                var text = '--';
                                var paymentStatusItem = _enum.PaymentStatus.fromAlias(item.status);
                                var taxStatus = getTaxStatus(item.taxStatus);
                                var taxStatusItem = _enum.TaxStatus.fromValue(taxStatus);
                                var isIndividual = item.userAccountType === _enum.UserAccountType.INDIVIDUAL;
                                if (item.monthlyIncome === 0 || item.itemCount === 0 || item.itemCount > 0 && item.actualPay == null) {
                                    text = '--';
                                } else if (isIndividual && taxStatus === _enum.TaxStatus.TAXING) {
                                    text = taxStatusItem.text;
                                } else if (paymentStatusItem) {
                                    text = paymentStatusItem.text;
                                } else if (!isIndividual && item.status === 'READYING') {
                                    text = '--';
                                } else if (!isIndividual || isIndividual && taxStatus === _enum.TaxStatus.TAXED) {
                                    text = '\u4ED8\u6B3E\u4E2D';
                                }
                                var data = {
                                    paymentStatus: item.status,
                                    payFailedReason: item.payFailedReason,
                                    text: text
                                };
                                return paymentStatusFieldRenderer(data);
                            }
                        },
                        {
                            title: '\u64CD\u4F5C',
                            field: 'operation',
                            sortable: false,
                            resizable: false,
                            width: 80,
                            stable: true,
                            content: function content(item) {
                                var data = {
                                    paymentStatus: item.status,
                                    repayStatus: item.repay,
                                    repayStatusEnum: _enum.RepayStatus,
                                    date: item.date
                                };
                                return operationFieldRenderer(data);
                            }
                        }
                    ];
                    return tableFields;
                }
            },
            {
                key: 'enterDocument',
                value: function enterDocument() {
                    babelHelpers.get(Object.getPrototypeOf(FinancePaymentListView.prototype), 'enterDocument', this).call(this);
                    resetTableHeaderFollow.call(this);
                }
            },
            {
                key: 'commandHandler',
                value: function commandHandler(e) {
                    var _this = this;
                    babelHelpers.get(Object.getPrototypeOf(FinancePaymentListView.prototype), 'commandHandler', this).call(this, e);
                    var name = e.name;
                    var args = e.args;
                    if (name === 'invoice') {
                        (function () {
                            var invoiceSetListURL = _this.model.get('invoiceSetListURL');
                            var actionOptions = {
                                invoiceMonthInfo: getInvoiceItemByDate.call(_this, args),
                                financeInfo: _this.model.get('financeInfo')
                            };
                            var options = {
                                id: 'invoice-dialog',
                                url: _URL['default'].withQuery(invoiceSetListURL, { date: args }),
                                actionOptions: actionOptions,
                                title: '\u53D1\u7968\u4FE1\u606F'
                            };
                            var actionPanel = _this.popDrawerAction(options);
                            actionPanel.show();
                            actionPanel.on('action@refreshInvoicePaymentListView', function () {
                                actionPanel.reload(actionOptions);
                            }, actionPanel);
                        }());
                    } else if (name === 'applyRepay') {
                        this.handleApplyRepay(args);
                    }
                }
            },
            {
                key: 'handleApplyRepay',
                value: function handleApplyRepay(date) {
                    this.fire('applyrepay', { date: date });
                }
            },
            {
                key: 'waitApplyRepayConfirm',
                value: function waitApplyRepayConfirm() {
                    return this.waitConfirm({
                        content: '\u8BF7\u60A8\u786E\u8BA4\u662F\u5426\u5DF2\u6839\u636E\u9000\u7968\u539F\u56E0\u5C06\u76F8\u5173\u4FE1\u606F\u4FEE\u6B63\u5B8C\u6BD5\uFF0C\u5426\u5219\u5C06\u65E0\u6CD5\u4E3A\u60A8\u5B8C\u6210\u8865\u4ED8\u3002',
                        title: '\u6E29\u99A8\u63D0\u793A\uFF1A'
                    });
                }
            },
            {
                key: 'setTemplateEngine',
                value: function setTemplateEngine(templateEngine) {
                    this[TEMPLATE_ENGINE] = templateEngine;
                }
            },
            {
                key: 'getTemplateEngine',
                value: function getTemplateEngine() {
                    return this[TEMPLATE_ENGINE];
                }
            }
        ]);
        return FinancePaymentListView;
    }(_ListView2['default']);
    module.exports = FinancePaymentListView;
    function formatMoney(money) {
        return money == null ? '--' : _u['default'].escape(money);
    }
    function fixMoney(money, monthlyIncome, taxStatus) {
        if (!monthlyIncome || monthlyIncome === 0 || taxStatus === _enum.TaxStatus.TAXING) {
            return null;
        }
        return money;
    }
    function getTaxStatus(taxStatus) {
        return taxStatus > 0 ? _enum.TaxStatus.TAXED : _enum.TaxStatus.TAXING;
    }
    function resetTableHeaderFollow() {
        this.get('table').resetFollowHead();
    }
    function getInvoiceItemByDate(date) {
        return this.model.get('results').find(function (item) {
            return item.date === date;
        });
    }
});
define('ssp-finance/mvc/FinancePaymentListModel', [
    'exports',
    'module',
    'ub-ria/mvc/ListModel',
    'ub-ria/util',
    '../enum'
], function (exports, module, _ubRiaMvcListModel, _ubRiaUtil, _enum) {
    var _ListModel2 = babelHelpers.interopRequireDefault(_ubRiaMvcListModel);
    var _u = babelHelpers.interopRequireDefault(_ubRiaUtil);
    var BALANCE = {
        balance: function balance(model) {
            return model.data().getBalance();
        }
    };
    var FINANCE_INFO = {
        financeInfo: function financeInfo(model) {
            return model.getFinanceInfo();
        }
    };
    var PAYMENTS = {
        list: {
            retrieve: function retrieve(model) {
                var query = model.getQuery();
                return model.data().searchPayments(_u['default'].purify(query, null, true));
            },
            dump: true
        }
    };
    var FinancePaymentListModel = function (_ListModel) {
        babelHelpers.inherits(FinancePaymentListModel, _ListModel);
        babelHelpers.createClass(FinancePaymentListModel, [{
                key: 'defaultArgs',
                get: function get() {
                    return {
                        order: 'desc',
                        orderBy: 'createTime'
                    };
                }
            }]);
        function FinancePaymentListModel() {
            babelHelpers.classCallCheck(this, FinancePaymentListModel);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            babelHelpers.get(Object.getPrototypeOf(FinancePaymentListModel.prototype), 'constructor', this).apply(this, args);
            this.putDatasource(BALANCE, 0);
            this.putDatasource(PAYMENTS, 0);
            this.putDatasource(FINANCE_INFO, 0);
        }
        babelHelpers.createClass(FinancePaymentListModel, [
            {
                key: 'prepare',
                value: function prepare() {
                    babelHelpers.get(Object.getPrototypeOf(FinancePaymentListModel.prototype), 'prepare', this).call(this);
                    this.set('results', this.prepareResults(this.get('results')));
                    this.set('BalanceStatus', _enum.BalanceStatus);
                }
            },
            {
                key: 'prepareResults',
                value: function prepareResults(results) {
                    return (results || []).map(function (item) {
                        return babelHelpers._extends({}, item, { status: item.status === 'BFBACCEPTFAILED' ? 'FAILED' : item.status });
                    });
                }
            },
            {
                key: 'prepareSelectMode',
                value: function prepareSelectMode() {
                    this.set('selectMode', '');
                }
            },
            {
                key: 'getFinanceInfo',
                value: function getFinanceInfo() {
                    if (this.checkPermission('canViewFinanceInfo')) {
                        return this.data().getFinanceInfo();
                    }
                    return Promise.resolve({});
                }
            },
            {
                key: 'applyRepay',
                value: function applyRepay(date) {
                    return regeneratorRuntime.async(function applyRepay$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                context$2$0.next = 2;
                                return regeneratorRuntime.awrap(this.data().applyRepay(date));
                            case 2:
                                return context$2$0.abrupt('return', this.updateLocalRepayStatus(date, _enum.RepayStatus.APPLIED));
                            case 3:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'updateLocalRepayStatus',
                value: function updateLocalRepayStatus(date, repayStatus) {
                    var item = _u['default'].findWhere(this.get('results'), { date: date });
                    item.repay = repayStatus;
                }
            }
        ]);
        return FinancePaymentListModel;
    }(_ListModel2['default']);
    module.exports = FinancePaymentListModel;
});
define('ssp-finance/mvc/FinancePaymentList', [
    'exports',
    'module',
    'ub-ria/mvc/ListAction'
], function (exports, module, _ubRiaMvcListAction) {
    var _ListAction2 = babelHelpers.interopRequireDefault(_ubRiaMvcListAction);
    var FinancePaymentList = function (_ListAction) {
        babelHelpers.inherits(FinancePaymentList, _ListAction);
        function FinancePaymentList() {
            babelHelpers.classCallCheck(this, FinancePaymentList);
            babelHelpers.get(Object.getPrototypeOf(FinancePaymentList.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(FinancePaymentList, [
            {
                key: 'initBehavior',
                value: function initBehavior() {
                    babelHelpers.get(Object.getPrototypeOf(FinancePaymentList.prototype), 'initBehavior', this).call(this);
                    this.view.on('applyrepay', onApplyRepay, this);
                }
            },
            {
                key: 'applyRepay',
                value: function applyRepay(date) {
                    return regeneratorRuntime.async(function applyRepay$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                context$2$0.next = 2;
                                return regeneratorRuntime.awrap(this.view.waitApplyRepayConfirm());
                            case 2:
                                context$2$0.next = 4;
                                return regeneratorRuntime.awrap(this.model.applyRepay(date));
                            case 4:
                                this.handleApplyRepaySuccess(date);
                            case 5:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'handleApplyRepaySuccess',
                value: function handleApplyRepaySuccess(date) {
                    var item = (this.model.get('results') || []).find(function (item) {
                        return item.date === date;
                    });
                    this.view.updateItems([item]);
                }
            },
            {
                key: 'entityDescription',
                get: function get() {
                    return '\u4ED8\u6B3E\u8BB0\u5F55';
                }
            }
        ]);
        return FinancePaymentList;
    }(_ListAction2['default']);
    module.exports = FinancePaymentList;
    function onApplyRepay(e) {
        this.applyRepay(e.date);
    }
});
define('ssp-finance/mvc/FinanceInfoView', [
    'exports',
    'module',
    'tpl!startup/template',
    'tpl!startup/template',
    'ub-ria-ui/DrawerActionPanel',
    'ub-ria/mvc/BaseView',
    '../enum'
], function (exports, module, _tplTplFinanceInfoTplHtml, _tplTplFinanceCommonTplHtml, _ubRiaUiDrawerActionPanel, _ubRiaMvcBaseView, _enum) {
    var _DrawerActionPanel = babelHelpers.interopRequireDefault(_ubRiaUiDrawerActionPanel);
    var _BaseView2 = babelHelpers.interopRequireDefault(_ubRiaMvcBaseView);
    var FinanceInfoView = function (_BaseView) {
        babelHelpers.inherits(FinanceInfoView, _BaseView);
        babelHelpers.createClass(FinanceInfoView, [{
                key: 'template',
                get: function get() {
                    return 'sspFinanceInfo';
                }
            }]);
        function FinanceInfoView() {
            babelHelpers.classCallCheck(this, FinanceInfoView);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            babelHelpers.get(Object.getPrototypeOf(FinanceInfoView.prototype), 'constructor', this).apply(this, args);
            var uiEvents = {
                'create:click': popDrawerActionPanel,
                'keep-money-modify:click': toggleModifyKeepMoney,
                'keep-money-modify-cancel:click': toggleModifyKeepMoney,
                'keep-money-submit:click': submitKeepMoney,
                'keep-money-cancel:click': toggleModifyKeepMoney,
                'modify-finance-info:click': popModifyFinancePanel
            };
            this.addUIEvents(uiEvents);
        }
        babelHelpers.createClass(FinanceInfoView, [
            {
                key: 'updateKeepMoneyView',
                value: function updateKeepMoneyView() {
                    var status = this.model.get('keepMoney');
                    this.get('keep-money').set('text', _enum.KeepMoney.getTextFromValue(status));
                    toggleModifyKeepMoney.call(this);
                }
            },
            {
                key: 'popDrawerAction',
                value: function popDrawerAction(options) {
                    options.id = options.id || 'drawer-action';
                    var drawerActionPanel = this.get(options.id);
                    if (!drawerActionPanel) {
                        drawerActionPanel = this.create('DrawerActionPanel', options);
                        drawerActionPanel.render();
                        drawerActionPanel.on('action@submitcancel', cancel);
                        drawerActionPanel.on('action@back', back);
                        drawerActionPanel.on('close', closeDrawerActionPanel, this);
                    } else {
                        drawerActionPanel.setProperties(options);
                    }
                    return drawerActionPanel;
                }
            }
        ]);
        return FinanceInfoView;
    }(_BaseView2['default']);
    module.exports = FinanceInfoView;
    function popModifyFinancePanel() {
        var url = this.model.get('updateURL');
        this.popDrawerAction({ url: url }).show();
    }
    function submitKeepMoney(e) {
        var data = this.get('form').getData();
        data.status = data.status === 'on' ? _enum.KeepMoney.ON : _enum.KeepMoney.OFF;
        this.fire('keepmoneymodify', { data: data });
    }
    function toggleModifyKeepMoney() {
        this.getGroup('keep-money-modify').toggle();
        this.get('keep-money-status').setChecked(!!this.model.get('keepMoney'));
    }
    function popDrawerActionPanel(e) {
        e.stopPropagation();
        e.preventDefault();
        var url = String(e.target.get('href'));
        if (url.charAt(0) === '#') {
            url = url.slice(1);
        }
        this.popDrawerAction({ url: url }).show();
    }
    function cancel(e) {
        e.preventDefault();
        this.dispose();
    }
    function back(e) {
        e.stopPropagation();
        e.preventDefault();
        this.hide();
    }
    function closeDrawerActionPanel(e) {
        this.fire('close');
    }
});
define('ssp-finance/mvc/FinanceInfoModel', [
    'exports',
    'module',
    'ub-ria/mvc/BaseModel',
    'ub-ria/update',
    'ub-ria/util',
    'ssp-account/enum',
    '../enum'
], function (exports, module, _ubRiaMvcBaseModel, _ubRiaUpdate, _ubRiaUtil, _sspAccountEnum, _enum) {
    var _BaseModel2 = babelHelpers.interopRequireDefault(_ubRiaMvcBaseModel);
    var _update = babelHelpers.interopRequireDefault(_ubRiaUpdate);
    var _u = babelHelpers.interopRequireDefault(_ubRiaUtil);
    var MEMBER_INFO = {
        member: function member(model) {
            return model.getMemberInfo();
        }
    };
    var USER_INFO = {
        user: function user(model) {
            return model.getUserInfo();
        }
    };
    var FINANCE_INFO = {
        financeInfo: {
            retrieve: function retrieve(model) {
                return model.data().getFinanceInfo();
            },
            dump: true
        }
    };
    var REGION_INFO = {
        region: function region(model) {
            return model.data().getRegionInfo().then(function (_ref) {
                var results = _ref.results;
                return results;
            });
        }
    };
    var KEEP_MONEY = {
        keepMoney: function keepMoney(model) {
            return model.data().getKeepMoney();
        }
    };
    var PAY_CHANNEL = {
        payChannel: function payChannel(model) {
            return model.data().getPayChannel();
        }
    };
    var FinanceInfoModel = function (_BaseModel) {
        babelHelpers.inherits(FinanceInfoModel, _BaseModel);
        function FinanceInfoModel() {
            babelHelpers.classCallCheck(this, FinanceInfoModel);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            babelHelpers.get(Object.getPrototypeOf(FinanceInfoModel.prototype), 'constructor', this).apply(this, args);
            this.putDatasource(MEMBER_INFO, 0);
            this.putDatasource(FINANCE_INFO, 0);
            this.putDatasource(REGION_INFO, 0);
            this.putDatasource(KEEP_MONEY, 0);
            this.putDatasource(USER_INFO, 0);
            this.putDatasource(PAY_CHANNEL, 0);
        }
        babelHelpers.createClass(FinanceInfoModel, [
            {
                key: 'prepare',
                value: function prepare() {
                    babelHelpers.get(Object.getPrototypeOf(FinanceInfoModel.prototype), 'prepare', this).call(this);
                    var flag = this.get('flag');
                    this.set('hasFinanceInfo', flag !== _enum.FinanceStatus.UNAUDITED_NON_EXISTENT);
                    if (flag === _enum.FinanceStatus.AUDITING_NON_EXISTENT) {
                        this.set('financeTip', '\u8D22\u52A1\u4FE1\u606F\u5BA1\u6838\u4E2D\uFF0C\u5C1A\u672A\u751F\u6548!');
                    }
                    this.set('createURL', '#' + this.get('createURL'));
                    if (this.get('hasFinanceInfo')) {
                        var userAccountType = this.get('userAccountType');
                        this.set('userAccountTypeText', _enum.UserAccountType.getTextFromValue(userAccountType));
                        this.set('isEnterprise', userAccountType === _enum.UserAccountType.ENTERPRISE);
                        this.set('isEnterPrise', userAccountType === _enum.UserAccountType.ENTERPRISE);
                        var accProvince = this.get('accProvince');
                        var provinceItem = this.get('region')[accProvince] || {};
                        this.set('accProvinceText', provinceItem.text);
                        if (this.get('isEnterprise')) {
                            var invoiceType = this.get('invoiceType');
                            this.set('invoiceTypeText', _enum.TaxType.getTextFromValue(invoiceType));
                        }
                        this.set('keepMoneyText', _enum.KeepMoney.getTextFromValue(this.get('keepMoney')));
                    }
                    this.prepareMemberInfo();
                    this.getPayChannelAgreement(this.get('payChannel'));
                }
            },
            {
                key: 'prepareMemberInfo',
                value: function prepareMemberInfo() {
                    var member = this.get('member');
                    var hasMemberInfo = !_u['default'].isEmpty(member);
                    this.set('isAuditing', hasMemberInfo && member.certification === _sspAccountEnum.Certification.AUDITING);
                    if (hasMemberInfo) {
                        member = _update['default'].run(member, { requireCerfication: { $set: member.certification === _sspAccountEnum.Certification.INVALID || member.certification === _sspAccountEnum.Certification.FAILED } });
                        this.set('member', member);
                        var flag = this.get('flag');
                        var verificationEntryVisible = this.checkPermission('canViewMemberInfo') && member.requireCerfication && flag !== _enum.FinanceStatus.UNAUDITED_NON_EXISTENT && flag !== _enum.FinanceStatus.AUDITING_NON_EXISTENT && this.get('user').divideStatus === _sspAccountEnum.DivideStatus.NORMAL;
                        this.set('verificationEntryVisible', verificationEntryVisible);
                    }
                }
            },
            {
                key: 'getMemberInfo',
                value: function getMemberInfo() {
                    var globalData;
                    return regeneratorRuntime.async(function getMemberInfo$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                if (!this.checkPermission('canViewMemberInfo')) {
                                    context$2$0.next = 3;
                                    break;
                                }
                                globalData = this.data('global');
                                return context$2$0.abrupt('return', globalData.getMember());
                            case 3:
                                return context$2$0.abrupt('return', {});
                            case 4:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'getPayChannelAgreement',
                value: function getPayChannelAgreement(payChannel) {
                    if (payChannel.channel === 0 || payChannel.channel === 1) {
                        this.set('isShowPayChannelAgreement', true);
                        if (payChannel.channel === 0) {
                            this.set('payChannelAgreementURL', 'http://www.renshiren.com/baidu_agreement.html');
                        } else {
                            this.set('payChannelAgreementURL', 'http://180.76.135.244/baidu/udContract.html');
                        }
                    } else {
                        this.set('isShowPayChannelAgreement', false);
                    }
                }
            },
            {
                key: 'getUserInfo',
                value: function getUserInfo() {
                    return this.data('global').getUser();
                }
            },
            {
                key: 'updateKeepMoney',
                value: function updateKeepMoney(data) {
                    return regeneratorRuntime.async(function updateKeepMoney$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                context$2$0.next = 2;
                                return regeneratorRuntime.awrap(this.data().updateKeepMoney(data));
                            case 2:
                                this.set('keepMoney', data.status);
                            case 3:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'setGlobalData',
                value: function setGlobalData(data) {
                    this.addData('global', data);
                }
            }
        ]);
        return FinanceInfoModel;
    }(_BaseModel2['default']);
    module.exports = FinanceInfoModel;
});
define('ssp-finance/mvc/FinanceInfoFormView', [
    'exports',
    'module',
    'ub-ria/util',
    '../enum',
    'tpl!startup/template',
    'ub-ria/mvc/FormView',
    'esui/validator/Validity',
    'esui/validator/ValidityState'
], function (exports, module, _ubRiaUtil, _enum, _tplTplFinanceInfoFormTplHtml, _ubRiaMvcFormView, _esuiValidatorValidity, _esuiValidatorValidityState) {
    var _u = babelHelpers.interopRequireDefault(_ubRiaUtil);
    var _FormView2 = babelHelpers.interopRequireDefault(_ubRiaMvcFormView);
    var _Validity = babelHelpers.interopRequireDefault(_esuiValidatorValidity);
    var _ValidityState = babelHelpers.interopRequireDefault(_esuiValidatorValidityState);
    var COUNTDOWN = Symbol('countdown');
    var VERIFY_CODE_INTERVAL = 60;
    var BRANCH_BANK_LOADER_DELAY = 500;
    var FinanceInfoFormView = function (_FormView) {
        babelHelpers.inherits(FinanceInfoFormView, _FormView);
        function FinanceInfoFormView() {
            babelHelpers.classCallCheck(this, FinanceInfoFormView);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            babelHelpers.get(Object.getPrototypeOf(FinanceInfoFormView.prototype), 'constructor', this).apply(this, args);
            this.template = 'sspFinanceInfoForm';
            this.loadBranchBankTimer = null;
            var uiEvents = {
                'user-account-type:change': changeAccountType,
                'acc-province:change': changeAccProvince,
                'invoice-type:change': changeInvoiceType,
                'origin-uploader:complete': triggerComplete,
                'new-uploader:complete': triggerComplete,
                'sanfang-uploader:complete': triggerComplete,
                'proof-uploader:complete': triggerComplete,
                'need-verify-switch:change': verifySwitchChange,
                'send-verify-code:click': sendVerifyCode,
                'account-modify-entry:click': _u['default'].partial(setPrivateFieldStatus, 'account', true),
                'individual-register-number-modify-entry:click': _u['default'].partial(setPrivateFieldStatus, 'individual-register-number', true)
            };
            this.addUIEvents(uiEvents);
        }
        babelHelpers.createClass(FinanceInfoFormView, [
            {
                key: 'loadBranchBanks',
                value: function loadBranchBanks(callback) {
                    var query = this.getBranchBankSearchArgs();
                    var context = {
                        query: query,
                        callback: callback
                    };
                    this.fire('loadbranchbanks', { context: context });
                    this.loadBranchBankTimer = null;
                }
            },
            {
                key: 'getBranchBankSearchArgs',
                value: function getBranchBankSearchArgs() {
                    var province = this.get('acc-province').getSelectedItem();
                    var town = this.get('acc-town').getValue();
                    var payBank = this.get('pay-bank').getValue();
                    var keyword = this.get('sub-branch-bank').getValue();
                    return {
                        province: province ? province.text : '',
                        city: town,
                        subBank: keyword,
                        payBank: payBank
                    };
                }
            },
            {
                key: 'updateBranchBankSuggestion',
                value: function updateBranchBankSuggestion(context, data) {
                    var oldQuery = context.query;
                    var currentQuery = this.getBranchBankSearchArgs();
                    if (_u['default'].isEqual(oldQuery, currentQuery)) {
                        context.callback(data);
                    }
                }
            },
            {
                key: 'enterDocument',
                value: function enterDocument() {
                    var _this = this;
                    babelHelpers.get(Object.getPrototypeOf(FinanceInfoFormView.prototype), 'enterDocument', this).call(this);
                    if (this.model.get('formType') === 'create') {
                        this.setVerifyChecked(true);
                        this.verifyHide();
                    }
                    if (this.model.get('formType') === 'update' && this.model.get('verifying')) {
                        this.setVerifyChecked(false);
                        this.verifyHide();
                    }
                    changeInvoiceType.call(this);
                    changeAccountType.call(this);
                    this.toggleVerifyArea(this.getVerifyChecked());
                    var subBank = this.get('sub-branch-bank');
                    subBank.setProperties({
                        datasource: function datasource(keyword, cb) {
                            return _this.branchBankDatasource(keyword, cb);
                        }
                    });
                }
            },
            {
                key: 'toggleVerifyArea',
                value: function toggleVerifyArea(flag) {
                    var userAccountType = this.get('user-account-type').getValue();
                    var isUpdate = this.model.get('isUpdate');
                    if (flag) {
                        if (isUpdate) {
                            userAccountType = '' + _enum.UserAccountType.ENTERPRISE;
                            this.get('user-account-type').setValue(userAccountType);
                        }
                        if (userAccountType === '' + _enum.UserAccountType.ENTERPRISE) {
                            this.getGroup('enterprise-need-verify').enable();
                            this.getGroup('enterprise-need-verify').show();
                        } else {
                            this.getGroup('individual-need-verify').enable();
                            this.getGroup('individual-need-verify').show();
                            updateIndividualRegisterNumberView.call(this);
                        }
                        this.getSafely('normal-tip').hide();
                        this.getSafely('verify-tip').show();
                    } else {
                        var originUserAccountType = this.model.get('userAccountType');
                        if (originUserAccountType !== userAccountType) {
                            this.get('user-account-type').setValue('' + originUserAccountType);
                        }
                        this.getGroup('individual-need-verify').disable();
                        this.getGroup('individual-need-verify').hide();
                        this.getGroup('enterprise-need-verify').disable();
                        this.getGroup('enterprise-need-verify').hide();
                        this.getSafely('normal-tip').show();
                        this.getSafely('verify-tip').hide();
                    }
                }
            },
            {
                key: 'getVerifyChecked',
                value: function getVerifyChecked() {
                    return !!+this.get('need-verify-switch').getValue();
                }
            },
            {
                key: 'setVerifyChecked',
                value: function setVerifyChecked(checked) {
                    this.get('need-verify-switch').setValue(checked ? '1' : '0');
                }
            },
            {
                key: 'verifyHide',
                value: function verifyHide() {
                    var needVerify = this.get('need-verify-switch');
                    needVerify.hide();
                    needVerify.disable();
                }
            },
            {
                key: 'startVerifyCodeCountdown',
                value: function startVerifyCodeCountdown() {
                    var _this2 = this;
                    var button = this.get('send-verify-code');
                    button.disable();
                    button.set('content', VERIFY_CODE_INTERVAL + '\u79D2\u2026\u2026');
                    var remainingSeconds = VERIFY_CODE_INTERVAL;
                    this[COUNTDOWN] = setInterval(function () {
                        remainingSeconds--;
                        if (remainingSeconds) {
                            button.set('content', remainingSeconds + '\u79D2\u2026\u2026');
                        } else {
                            button.set('content', '\u83B7\u53D6\u9A8C\u8BC1\u7801');
                            button.enable();
                            clearInterval(_this2[COUNTDOWN]);
                        }
                    }, 1000);
                }
            },
            {
                key: 'notifyVerifyCodeSendFail',
                value: function notifyVerifyCodeSendFail() {
                    var button = this.get('send-verify-code');
                    button.enable();
                }
            },
            {
                key: 'getEntity',
                value: function getEntity() {
                    var entity = babelHelpers.get(Object.getPrototypeOf(FinanceInfoFormView.prototype), 'getEntity', this).call(this);
                    var needVerify = this.getVerifyChecked();
                    if (this.model.get('formType') === 'update' && !needVerify) {
                        entity.userAccountType = this.model.get('userAccountType');
                        entity.registerName = this.model.get('registerName');
                    }
                    if (needVerify) {
                        entity.userAccountType = +entity.userAccountType[0];
                        entity.oldPhotos = _u['default'].pluck(entity.oldPhotos, 'value').join(',');
                        entity.newPhotos = _u['default'].pluck(entity.newPhotos, 'value').join(',');
                        entity.sanfang = _u['default'].pluck(entity.sanfang, 'value').join(',');
                        entity.proof = _u['default'].pluck(entity.proof, 'value').join(',');
                    }
                    entity.accProvince = +entity.accProvince;
                    if (entity.userAccountType === _enum.UserAccountType.ENTERPRISE) {
                        entity.invoiceType = +entity.invoiceType[0];
                    }
                    var payBank = this.get('pay-bank').getValue();
                    if (payBank) {
                        entity.payBank = payBank;
                    }
                    if (this.model.get('formType') === 'update' && needVerify) {
                        var userAccountType = this.model.get('userAccountType');
                        if (userAccountType === _enum.UserAccountType.INDIVIDUAL) {
                            entity.modifyReason = _enum.IndividualToEnterpriseReason.getTextFromValue(entity.modifyReason);
                        } else {
                            entity.modifyReason = _enum.EnterpriseToEnterpriseReason.getTextFromValue(entity.modifyReason);
                        }
                    }
                    delete entity.file;
                    delete entity.cellphone;
                    return entity;
                }
            },
            {
                key: 'notifyErrors',
                value: function notifyErrors(errors) {
                    var payBankFail = _u['default'].findWhere(errors.fields, { field: 'payBank' });
                    if (payBankFail) {
                        payBankFail.field = 'subBranchBank';
                    }
                    var specialFields = [
                        'individualRegisterNumber',
                        'individualRegisterName',
                        'enterpriseRegisterNumber',
                        'enterpriseRegisterName'
                    ];
                    errors.fields = _u['default'].reject(errors.fields, function (fail) {
                        var checkResult = _u['default'].contains(specialFields, fail.field);
                        if (checkResult) {
                            var state = new _ValidityState['default'](false, fail.message);
                            var validity = new _Validity['default']();
                            validity.addState('server', state);
                            var control = this.get(_u['default'].dasherize(fail.field));
                            control.showValidity(validity);
                        }
                        return checkResult;
                    }, this);
                    if (errors.fields.length) {
                        babelHelpers.get(Object.getPrototypeOf(FinanceInfoFormView.prototype), 'notifyErrors', this).call(this, errors);
                    }
                }
            },
            {
                key: 'dispose',
                value: function dispose() {
                    clearInterval(this[COUNTDOWN]);
                    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        args[_key2] = arguments[_key2];
                    }
                    babelHelpers.get(Object.getPrototypeOf(FinanceInfoFormView.prototype), 'dispose', this).apply(this, args);
                }
            },
            {
                key: 'branchBankDatasource',
                value: function branchBankDatasource(keyword, callback) {
                    if (this.loadBranchBankTimer) {
                        clearTimeout(this.loadBranchBankTimer);
                    }
                    this.loadBranchBankTimer = setTimeout(_u['default'].bind(this.loadBranchBanks, this, callback), BRANCH_BANK_LOADER_DELAY);
                }
            }
        ]);
        return FinanceInfoFormView;
    }(_FormView2['default']);
    module.exports = FinanceInfoFormView;
    function changeAccountType() {
        var userAccountType = this.get('user-account-type').getValue();
        var activeUserTypeGroup = _u['default'].dasherize(_enum.UserAccountType.getAliasFromValue(+userAccountType));
        this.getGroup('user-type').hide();
        this.getGroup('user-type').disable();
        this.getGroup(activeUserTypeGroup).show();
        this.getGroup(activeUserTypeGroup).enable();
        if (this.getVerifyChecked()) {
            this.getGroup(activeUserTypeGroup + '-need-verify').show();
            this.getGroup(activeUserTypeGroup + '-need-verify').enable();
        }
        if (+userAccountType === _enum.UserAccountType.ENTERPRISE) {
            changeInvoiceType.call(this);
        } else if (this.model.get('formType') === 'update') {
            updateIndividualRegisterNumberView.call(this);
        }
        updatePayBankSelector.call(this, +userAccountType);
    }
    function updatePayBankSelector(userAccountType) {
        var payBankSelector = this.get('pay-bank-selector');
        var datasource = userAccountType === _enum.UserAccountType.ENTERPRISE ? this.model.get('payEnterpriseBanks') : this.model.get('payIndividualBanks');
        var changeProperty = {
            datasource: datasource,
            selectedData: payBankSelector.getSelectedItems()
        };
        payBankSelector.setProperties(changeProperty);
    }
    function updateIndividualRegisterNumberView() {
        var registerNumberModifyEntry = this.get('individual-register-number-modify-entry');
        if (registerNumberModifyEntry) {
            setPrivateFieldStatus.call(this, 'individual-register-number', registerNumberModifyEntry.isHidden());
        }
    }
    function changeAccProvince() {
        var accProvinceSelect = this.get('acc-province');
        var accTownSelect = this.get('acc-town');
        var provinceItem = accProvinceSelect.getSelectedItem();
        var properties = {
            datasource: provinceItem.children,
            value: provinceItem.children[0].value
        };
        accTownSelect.setProperties(properties);
    }
    function changeInvoiceType() {
        var invoiceType = this.get('invoice-type').getValue();
        var invoiceAlias = _enum.TaxType.getAliasFromValue(+invoiceType);
        invoiceAlias = _u['default'].dasherize(invoiceAlias);
        switchGroupStatus.call(this, 'invoice', invoiceAlias);
    }
    function switchGroupStatus(baseGroup, activeGroup) {
        var method = function method(methodName, control) {
            control[methodName]();
        };
        this.getGroup(baseGroup + '-wrapper').each(_u['default'].partial(method, 'hide'));
        this.getGroup(baseGroup).each(_u['default'].partial(method, 'disable'));
        this.getGroup(activeGroup + '-wrapper').each(_u['default'].partial(method, 'show'));
        this.getGroup(activeGroup).each(_u['default'].partial(method, 'enable'));
    }
    function branchBankDatasource(keyword, callback) {
        if (this.loadBranchBankTimer) {
            clearTimeout(this.loadBranchBankTimer);
        }
        this.loadBranchBankTimer = setTimeout(_u['default'].bind(this.loadBranchBanks, this, callback), BRANCH_BANK_LOADER_DELAY);
    }
    function setPrivateFieldStatus(field, modify) {
        var readControl = this.get(field + '-read');
        var fieldControl = this.get(field);
        if (modify) {
            readControl.hide();
            fieldControl.show();
            this.get(field + '-modify-entry').hide();
        } else {
            readControl.show();
            fieldControl.hide();
        }
        fieldControl.setDisabled(!modify);
    }
    function verifySwitchChange(e) {
        this.toggleVerifyArea(!!+e.target.getValue());
    }
    function triggerComplete(e) {
        var fileList = this.get(e.target.id + '-list');
        fileList.addValue(e.target.fileInfo);
        e.target.setRawValue({});
    }
    function sendVerifyCode() {
        this.fire('requirevc');
        var button = this.get('send-verify-code');
        button.set('text', '\u9A8C\u8BC1\u7801\u53D1\u9001\u4E2D');
        button.disable();
    }
});
define('ssp-finance/enterpriseBanks', ['require'], function (require) {
    return {
        bankList: [
            {
                name: '\u6BD4\u5229\u65F6\u8054\u5408\u94F6\u884C',
                pinyin: 'bilishilianheyinhang',
                id: 1
            },
            {
                name: '\u4E2D\u56FD\u5DE5\u5546\u94F6\u884C',
                pinyin: 'zhongguogongshangyinhang',
                id: 2
            },
            {
                name: '\u897F\u5FB7\u610F\u5FD7\u94F6\u884C',
                pinyin: 'xideyizhiyinhang',
                id: 3
            },
            {
                name: '\u97E9\u56FD\u4E2D\u5C0F\u4F01\u4E1A\u94F6\u884C',
                pinyin: 'hanguozhongxiaoqiyeyinhang',
                id: 4
            },
            {
                name: '\u9053\u4EA8\u94F6\u884C',
                pinyin: 'daohengyinhang',
                id: 5
            },
            {
                name: '\u6C5F\u82CF\u94F6\u884C',
                pinyin: 'jiangsuyinhang',
                id: 6
            },
            {
                name: '\u5B81\u6CE2\u56FD\u9645\u94F6\u884C',
                pinyin: 'ningboguojiyinhang',
                id: 7
            },
            {
                name: '\u4FE1\u6258\u6295\u8D44\u516C\u53F8',
                pinyin: 'xintuotouzigongsi',
                id: 8
            },
            {
                name: '\u745E\u58EB\u4FE1\u8D37\u7B2C\u4E00\u6CE2\u58EB\u987F',
                pinyin: 'ruishixindaidiyiboshidun',
                id: 9
            },
            {
                name: '\u6CD5\u56FD\u91CC\u6602\u4FE1\u8D37\u94F6\u884C',
                pinyin: 'faguoliangxindaiyinhang',
                id: 10
            },
            {
                name: '\u6D59\u6C5F\u6CF0\u9686\u94F6\u884C',
                pinyin: 'zhejiangtailongyinhang',
                id: 11
            },
            {
                name: '\u610F\u5927\u5229\u8054\u5408\u5546\u4E1A\u94F6\u884C',
                pinyin: 'yidalilianheshangyeyinhang',
                id: 12
            },
            {
                name: '\u4E2D\u56FD\u4EBA\u6C11\u94F6\u884C\u8425\u4E1A\u5904',
                pinyin: 'zhongguorenminyinhangyingyechu',
                id: 13
            },
            {
                name: '\u4E1C\u4E9A\u94F6\u884C',
                pinyin: 'dongyayinhang',
                id: 14
            },
            {
                name: '\u65E5\u8054\u94F6\u884C',
                pinyin: 'rilianyinhang',
                id: 15
            },
            {
                name: '\u4E2D\u56FD\u6295\u8D44\u94F6\u884C',
                pinyin: 'zhongguotouziyinhang',
                id: 16
            },
            {
                name: '\u65B0\u8054\u5546\u4E1A\u94F6\u884C',
                pinyin: 'xinlianshangyeyinhang',
                id: 17
            },
            {
                name: '\u82B1\u65D7\u94F6\u884C',
                pinyin: 'huaqiyinhang',
                id: 18
            },
            {
                name: '\u5EFA\u4E1C\u94F6\u884C',
                pinyin: 'jiandongyinhang',
                id: 19
            },
            {
                name: '\u6C38\u4EA8\u94F6\u884C',
                pinyin: 'yonghengyinhang',
                id: 20
            },
            {
                name: '\u9999\u6E2F\u4E0A\u6D77\u6C47\u4E30\u94F6\u884C',
                pinyin: 'xianggangshanghaihuifengyinhang',
                id: 21
            },
            {
                name: '\u6FB3\u65B0\u94F6\u884C',
                pinyin: 'aoxinyinhang',
                id: 22
            },
            {
                name: '\u56FD\u5BB6\u5F00\u53D1\u94F6\u884C',
                pinyin: 'guojiakaifayinhang',
                id: 23
            },
            {
                name: '\u6CF0\u4EAC\u94F6\u884C',
                pinyin: 'taijingyinhang',
                id: 24
            },
            {
                name: '\u76D8\u53E4\u94F6\u884C',
                pinyin: 'panguyinhang',
                id: 25
            },
            {
                name: '\u6FB3\u95E8\u6E05\u7B97\u884C',
                pinyin: 'aomenqingsuanhang',
                id: 26
            },
            {
                name: '\u5E7F\u4E1C\u53D1\u5C55\u94F6\u884C',
                pinyin: 'guangdongfazhanyinhang',
                id: 27
            },
            {
                name: '\u6A31\u82B1\u94F6\u884C',
                pinyin: 'yinghuayinhang',
                id: 28
            },
            {
                name: '\u6D59\u6C5F\u5546\u4E1A\u94F6\u884C',
                pinyin: 'zhejiangshangyeyinhang',
                id: 29
            },
            {
                name: '\u4E2D\u56FD\u6C11\u751F\u94F6\u884C',
                pinyin: 'zhongguominshengyinhang',
                id: 30
            },
            {
                name: '\u6D59\u5546\u94F6\u884C',
                pinyin: 'zheshangyinhang',
                id: 31
            },
            {
                name: '\u6CD5\u56FD\u5174\u4E1A\u94F6\u884C',
                pinyin: 'faguoxingyeyinhang',
                id: 32
            },
            {
                name: '\u4E2D\u56FD\u8FDB\u51FA\u53E3\u94F6\u884C',
                pinyin: 'zhongguojinchukouyinhang',
                id: 33
            },
            {
                name: '\u4E2D\u56FD\u94F6\u884C',
                pinyin: 'zhongguoyinhang',
                id: 34
            },
            {
                name: '\u4E2D\u592E\u56FD\u503A\u767B\u8BB0\u7ED3\u7B97\u516C\u53F8',
                pinyin: 'zhongyangguozhaidengjijiesuangongsi',
                id: 35
            },
            {
                name: '\u534E\u590F\u94F6\u884C',
                pinyin: 'huaxiayinhang',
                id: 36
            },
            {
                name: '\u4E09\u4E95\u4F4F\u53CB\u94F6\u884C',
                pinyin: 'sanjingzhuyouyinhang',
                id: 37
            },
            {
                name: '\u57CE\u5E02\u5546\u4E1A\u94F6\u884C\u8D44\u91D1\u6E05\u7B97',
                pinyin: 'chengshishangyeyinhangzijinqingsuan',
                id: 38
            },
            {
                name: '\u57CE\u5E02\u5546\u4E1A\u94F6\u884C',
                pinyin: 'chengshishangyeyinhang',
                id: 39
            },
            {
                name: '\u97E9\u4E9A\u94F6\u884C',
                pinyin: 'hanyayinhang',
                id: 40
            },
            {
                name: '\u519C\u6751\u5408\u4F5C\u94F6\u884C',
                pinyin: 'nongcunhezuoyinhang',
                id: 41
            },
            {
                name: '\u5357\u6D0B\u5546\u4E1A\u94F6\u884C',
                pinyin: 'nanyangshangyeyinhang',
                id: 42
            },
            {
                name: '\u7F8E\u4E00\u94F6\u884C',
                pinyin: 'meiyiyinhang',
                id: 43
            },
            {
                name: '\u62DB\u5546\u94F6\u884C',
                pinyin: 'zhaoshangyinhang',
                id: 44
            },
            {
                name: '\u8377\u5170\u94F6\u884C',
                pinyin: 'helanyinhang',
                id: 45
            },
            {
                name: '\u5916\u6C47\u4EA4\u6613\u4E2D\u5FC3',
                pinyin: 'waihuijiaoyizhongxin',
                id: 46
            },
            {
                name: '\u671D\u5174\u94F6\u884C',
                pinyin: 'chaoxingyinhang',
                id: 47
            },
            {
                name: '\u4E2D\u56FD\u5EFA\u8BBE\u94F6\u884C',
                pinyin: 'zhongguojiansheyinhang',
                id: 48
            },
            {
                name: '\u5965\u5730\u5229\u4E2D\u592E\u5408\u4F5C\u94F6\u884C',
                pinyin: 'aodilizhongyanghezuoyinhang',
                id: 49
            },
            {
                name: '\u4E2D\u4FE1\u8BC1\u5238',
                pinyin: 'zhongxinzhengquan',
                id: 50
            },
            {
                name: '\u5883\u5916\u94F6\u884C',
                pinyin: 'jingwaiyinhang',
                id: 51
            },
            {
                name: '\u97E9\u56FD\u4EA7\u4E1A\u94F6\u884C',
                pinyin: 'hanguochanyeyinhang',
                id: 52
            },
            {
                name: '\u798F\u5EFA\u4E9A\u6D32\u94F6\u884C',
                pinyin: 'fujianyazhouyinhang',
                id: 53
            },
            {
                name: '\u90AE\u653F\u50A8\u6C47',
                pinyin: 'youzhengchuhui',
                id: 54
            },
            {
                name: '\u5FBD\u5546\u94F6\u884C',
                pinyin: 'huishangyinhang',
                id: 55
            },
            {
                name: '\u4E2D\u56FD\u519C\u4E1A\u53D1\u5C55\u94F6\u884C',
                pinyin: 'zhongguonongyefazhanyinhang',
                id: 56
            },
            {
                name: '\u9996\u90FD\u94F6\u884C\u53CA\u4FE1\u6258\u516C\u53F8',
                pinyin: 'shoudouyinhangjixintuogongsi',
                id: 57
            },
            {
                name: '\u8499\u7279\u5229\u5C14\u94F6\u884C',
                pinyin: 'mengtelieryinhang',
                id: 58
            },
            {
                name: '\u6E24\u6D77\u94F6\u884C',
                pinyin: 'bohaiyinhang',
                id: 59
            },
            {
                name: '\u534E\u878D\u6E58\u6C5F\u94F6\u884C',
                pinyin: 'huarongxiangjiangyinhang',
                id: 60
            },
            {
                name: '\u6C11\u751F\u8BC1\u5238',
                pinyin: 'minshengzhengquan',
                id: 61
            },
            {
                name: '\u9999\u6E2F\u4EBA\u6C11\u5E01\u6E05\u7B97\u884C',
                pinyin: 'xianggangrenminbiqingsuanhang',
                id: 62
            },
            {
                name: '\u4E1C\u65B9\u6C47\u7406\u94F6\u884C',
                pinyin: 'dongfanghuiliyinhang',
                id: 63
            },
            {
                name: '\u6E23\u6253\u94F6\u884C',
                pinyin: 'zhadayinhang',
                id: 64
            },
            {
                name: '\u6CD5\u56FD\u5916\u8D38\u94F6\u884C',
                pinyin: 'faguowaimaoyinhang',
                id: 65
            },
            {
                name: '\u53CB\u5229\u94F6\u884C',
                pinyin: 'youliyinhang',
                id: 66
            },
            {
                name: '\u4E2D\u56FD\u94F6\u8054\u80A1\u4EFD\u6709\u9650\u516C\u53F8',
                pinyin: 'zhongguoyinliangufenyouxiangongsi',
                id: 67
            },
            {
                name: '\u7535\u5B50\u8054\u884C\u8F6C\u6362\u4E2D\u5FC3',
                pinyin: 'dianzilianhangzhuanhuanzhongxin',
                id: 68
            },
            {
                name: '\u6BD4\u5229\u65F6\u5BCC\u901A\u94F6\u884C',
                pinyin: 'bilishifutongyinhang',
                id: 69
            },
            {
                name: '\u7968\u4EA4\u6240',
                pinyin: 'piaojiaosuo',
                id: 70
            },
            {
                name: '\u798F\u5EFA\u5174\u4E1A\u94F6\u884C',
                pinyin: 'fujianxingyeyinhang',
                id: 71
            },
            {
                name: '\u5149\u5927\u94F6\u884C',
                pinyin: 'guangdayinhang',
                id: 72
            },
            {
                name: '\u534E\u4E00\u94F6\u884C',
                pinyin: 'huayiyinhang',
                id: 73
            },
            {
                name: '\u7F8E\u56FD\u94F6\u884C',
                pinyin: 'meiguoyinhang',
                id: 74
            },
            {
                name: '\u8377\u5170\u5408\u4F5C\u94F6\u884C\u4E2D\u56FD\u516C\u53F8',
                pinyin: 'helanhezuoyinhangzhongguogongsi',
                id: 75
            },
            {
                name: '\u57CE\u5E02\u4FE1\u7528\u5408\u4F5C\u793E',
                pinyin: 'chengshixinyonghezuoshe',
                id: 76
            },
            {
                name: '\u7F57\u9A6C\u94F6\u884C',
                pinyin: 'luomayinhang',
                id: 77
            },
            {
                name: '\u6469\u6839\u5927\u901A\u94F6\u884C',
                pinyin: 'mogendatongyinhang',
                id: 78
            },
            {
                name: '\u534E\u5546\u94F6\u884C',
                pinyin: 'huashangyinhang',
                id: 79
            },
            {
                name: '\u65B0\u97E9\u94F6\u884C',
                pinyin: 'xinhanyinhang',
                id: 80
            },
            {
                name: '\u90AE\u653F\u50A8\u6C47\u5C40',
                pinyin: 'youzhengchuhuiju',
                id: 81
            },
            {
                name: 'Goldman Sachs',
                pinyin: 'Goldman Sachs',
                id: 82
            },
            {
                name: '\u6052\u4E30\u94F6\u884C',
                pinyin: 'hengfengyinhang',
                id: 83
            },
            {
                name: '\u745E\u7A57\u5B9E\u4E1A\u94F6\u884C',
                pinyin: 'ruisuishiyeyinhang',
                id: 84
            },
            {
                name: '\u65B0\u52A0\u5761\u53D1\u5C55\u94F6\u884C',
                pinyin: 'xinjiapofazhanyinhang',
                id: 85
            },
            {
                name: '\u4E0A\u6D77 - \u5DF4\u9ECE\u56FD\u9645\u94F6\u884C',
                pinyin: 'shanghai - baliguojiyinhang',
                id: 86
            },
            {
                name: '\u73E0\u6D77\u5357\u901A\u94F6\u884C',
                pinyin: 'zhuhainantongyinhang',
                id: 87
            },
            {
                name: '\u5FB7\u5BCC\u6CF0\u94F6\u884C\u6709\u9650\u516C\u53F8',
                pinyin: 'defutaiyinhangyouxiangongsi',
                id: 88
            },
            {
                name: '\u53A6\u95E8\u56FD\u9645\u94F6\u884C',
                pinyin: 'shamenguojiyinhang',
                id: 89
            },
            {
                name: '\u5FB7\u610F\u5FD7\u94F6\u884C',
                pinyin: 'deyizhiyinhang',
                id: 90
            },
            {
                name: '\u6052\u751F\u94F6\u884C',
                pinyin: 'hengshengyinhang',
                id: 91
            },
            {
                name: '\u6CD5\u56FD\u5DF4\u9ECE\u94F6\u884C',
                pinyin: 'faguobaliyinhang',
                id: 92
            },
            {
                name: '\u652F\u4ED8\u7CFB\u7EDF\u6536\u8D39\u4E13\u6237',
                pinyin: 'zhifuxitongshoufeizhuanhu',
                id: 93
            },
            {
                name: '\u5E73\u5B89\u94F6\u884C',
                pinyin: 'pinganyinhang',
                id: 94
            },
            {
                name: '\u5C71\u53E3\u94F6\u884C',
                pinyin: 'shankouyinhang',
                id: 95
            },
            {
                name: '\u4E2D\u56FD\u519C\u4E1A\u94F6\u884C',
                pinyin: 'zhongguonongyeyinhang',
                id: 96
            },
            {
                name: 'Morgan Stanley',
                pinyin: 'Morgan Stanley',
                id: 97
            },
            {
                name: '\u661F\u5C55\u94F6\u884C',
                pinyin: 'xingzhanyinhang',
                id: 98
            },
            {
                name: '\u4E2D\u4FE1\u94F6\u884C',
                pinyin: 'zhongxinyinhang',
                id: 99
            },
            {
                name: '\u7EBD\u7EA6\u94F6\u884C',
                pinyin: 'niuyueyinhang',
                id: 100
            },
            {
                name: '\u534F\u548C\u94F6\u884C',
                pinyin: 'xieheyinhang',
                id: 101
            },
            {
                name: '\u4F4F\u623F\u50A8\u84C4\u94F6\u884C',
                pinyin: 'zhufangchuxuyinhang',
                id: 102
            },
            {
                name: '\u4E09\u83F1\u4E1C\u4EAC\u65E5\u8054\u94F6\u884C',
                pinyin: 'sanlingdongjingrilianyinhang',
                id: 103
            },
            {
                name: '\u9752\u5C9B\u56FD\u9645\u94F6\u884C',
                pinyin: 'qingdaoguojiyinhang',
                id: 104
            },
            {
                name: '\u5174\u4E1A\u94F6\u884C',
                pinyin: 'xingyeyinhang',
                id: 105
            },
            {
                name: '\u4E2D\u56FD\u4EBA\u6C11\u94F6\u884C\u56FD\u5E93\u5904',
                pinyin: 'zhongguorenminyinhangguokuchu',
                id: 106
            },
            {
                name: '\u519C\u6751\u5546\u4E1A\u94F6\u884C',
                pinyin: 'nongcunshangyeyinhang',
                id: 107
            },
            {
                name: '\u8D22\u52A1\u516C\u53F8',
                pinyin: 'caiwugongsi',
                id: 108
            },
            {
                name: '\u534E\u4FA8\u94F6\u884C',
                pinyin: 'huaqiaoyinhang',
                id: 109
            },
            {
                name: '\u8461\u56FD\u50A8\u84C4\u4FE1\u8D37\u94F6\u884C',
                pinyin: 'puguochuxuxindaiyinhang',
                id: 110
            },
            {
                name: '\u5FB7\u7D2F\u65AF\u987F\u94F6\u884C',
                pinyin: 'deleisidunyinhang',
                id: 111
            },
            {
                name: '\u5927\u534E\u94F6\u884C',
                pinyin: 'dahuayinhang',
                id: 112
            },
            {
                name: '\u9A6C\u6765\u4E9A\u94F6\u884C',
                pinyin: 'malaiyayinhang',
                id: 113
            },
            {
                name: '\u4E0A\u6295\u6469\u6839',
                pinyin: 'shangtoumogen',
                id: 114
            },
            {
                name: '\u4EE3\u6536\u4ED8\u6E05\u7B97\u7EC4\u7EC7',
                pinyin: 'daishoufuqingsuanzuzhi',
                id: 115
            },
            {
                name: '\u4EBA\u6C11\u94F6\u884C\u516C\u5F00\u5E02\u573A\u64CD\u4F5C',
                pinyin: 'renminyinhanggongkaishichangcaozuo',
                id: 116
            },
            {
                name: '\u8377\u5170\u5546\u4E1A\u94F6\u884C',
                pinyin: 'helanshangyeyinhang',
                id: 117
            },
            {
                name: '\u6DF1\u5733\u53D1\u5C55\u94F6\u884C',
                pinyin: 'shenzhenfazhanyinhang',
                id: 118
            },
            {
                name: '\u4E2D\u56FD\u90AE\u653F\u50A8\u84C4\u94F6\u884C',
                pinyin: 'zhongguoyouzhengchuxuyinhang',
                id: 119
            },
            {
                name: '\u5ED6\u521B\u5174\u94F6\u884C',
                pinyin: 'liaochuangxingyinhang',
                id: 120
            },
            {
                name: '\u4E9A\u6D32\u5546\u4E1A\u94F6\u884C',
                pinyin: 'yazhoushangyeyinhang',
                id: 121
            },
            {
                name: '\u5DF4\u4F10\u5229\u4E9A\u5DDE\u94F6\u884C',
                pinyin: 'bafaliyazhouyinhang',
                id: 122
            },
            {
                name: '\u4E0A\u6D77\u6D66\u4E1C\u53D1\u5C55\u94F6\u884C',
                pinyin: 'shanghaipudongfazhanyinhang',
                id: 123
            },
            {
                name: '\u4E30\u4E1A\u94F6\u884C',
                pinyin: 'fengyeyinhang',
                id: 124
            },
            {
                name: '\u8377\u5170\u4E07\u8D1D\u94F6\u884C',
                pinyin: 'helanwanbeiyinhang',
                id: 125
            },
            {
                name: '\u4EA4\u901A\u94F6\u884C',
                pinyin: 'jiaotongyinhang',
                id: 126
            },
            {
                name: '\u4E2D\u94F6\u9999\u6E2F',
                pinyin: 'zhongyinxianggang',
                id: 127
            },
            {
                name: '\u6CF0\u534E\u519C\u6C11\u94F6\u884C',
                pinyin: 'taihuanongminyinhang',
                id: 128
            },
            {
                name: '\u5FB7\u56FD\u5546\u4E1A\u94F6\u884C',
                pinyin: 'deguoshangyeyinhang',
                id: 129
            },
            {
                name: '\u519C\u6751\u4FE1\u7528\u5408\u4F5C\u793E',
                pinyin: 'nongcunxinyonghezuoshe',
                id: 130
            },
            {
                name: '\u97E9\u56FD\u5916\u6362\u94F6\u884C',
                pinyin: 'hanguowaihuanyinhang',
                id: 131
            },
            {
                name: '\u96C6\u53CB\u94F6\u884C',
                pinyin: 'jiyouyinhang',
                id: 132
            }
        ],
        hotBankList: [
            {
                name: '\u4E2D\u56FD\u519C\u4E1A\u94F6\u884C',
                pinyin: 'zhongguonongyeyinhang',
                id: 96
            },
            {
                name: '\u62DB\u5546\u94F6\u884C',
                pinyin: 'zhaoshangyinhang',
                id: 44
            },
            {
                name: '\u6DF1\u5733\u5E73\u5B89\u94F6\u884C',
                pinyin: 'shenzhenpinganyinhang',
                id: 94
            },
            {
                name: '\u4E2D\u56FD\u5DE5\u5546\u94F6\u884C',
                pinyin: 'zhongguogongshangyinhang',
                id: 2
            },
            {
                name: '\u4EA4\u901A\u94F6\u884C',
                pinyin: 'jiaotongyinhang',
                id: 126
            },
            {
                name: '\u4E2D\u56FD\u6C11\u751F\u94F6\u884C',
                pinyin: 'zhongguominshengyinhang',
                id: 30
            },
            {
                name: '\u4E2D\u56FD\u5EFA\u8BBE\u94F6\u884C',
                pinyin: 'zhongguojiansheyinhang',
                id: 48
            },
            {
                name: '\u4E0A\u6D77\u6D66\u4E1C\u53D1\u5C55\u94F6\u884C',
                pinyin: 'shanghaipudongfazhanyinhang',
                id: 123
            },
            {
                name: '\u6DF1\u5733\u53D1\u5C55\u94F6\u884C',
                pinyin: 'shenzhenfazhanyinhang',
                id: 118
            },
            {
                name: '\u4E2D\u56FD\u90AE\u653F\u50A8\u84C4\u94F6\u884C',
                pinyin: 'zhongguoyouzhengchuxuyinhang',
                id: 119
            },
            {
                name: '\u5149\u5927\u94F6\u884C',
                pinyin: 'guangdayinhang',
                id: 72
            },
            {
                name: '\u534E\u590F\u94F6\u884C',
                pinyin: 'huaxiayinhang',
                id: 36
            },
            {
                name: '\u4E2D\u56FD\u94F6\u884C',
                pinyin: 'zhongguoyinhang',
                id: 34
            },
            {
                name: '\u4E2D\u4FE1\u94F6\u884C',
                pinyin: 'zhongxinyinhang',
                id: 99
            },
            {
                name: '\u5E7F\u4E1C\u53D1\u5C55\u94F6\u884C',
                pinyin: 'guangdongfazhanyinhang',
                id: 27
            },
            {
                name: '\u5883\u5916\u94F6\u884C',
                pinyin: 'jingwaiyinhang',
                id: 51
            }
        ]
    };
});
define('ssp-finance/individualBanks', ['require'], function (require) {
    return {
        bankList: [
            {
                name: '\u4E2D\u56FD\u5DE5\u5546\u94F6\u884C',
                pinyin: 'zhongguogongshangyinhang',
                id: 2
            },
            {
                name: '\u6C5F\u82CF\u94F6\u884C',
                pinyin: 'jiangsuyinhang',
                id: 6
            },
            {
                name: '\u4E2D\u56FD\u6C11\u751F\u94F6\u884C',
                pinyin: 'zhongguominshengyinhang',
                id: 30
            },
            {
                name: '\u6D59\u5546\u94F6\u884C',
                pinyin: 'zheshangyinhang',
                id: 31
            },
            {
                name: '\u4E2D\u56FD\u94F6\u884C',
                pinyin: 'zhongguoyinhang',
                id: 34
            },
            {
                name: '\u534E\u590F\u94F6\u884C',
                pinyin: 'huaxiayinhang',
                id: 36
            },
            {
                name: '\u57CE\u5E02\u5546\u4E1A\u94F6\u884C',
                pinyin: 'chengshishangyeyinhang',
                id: 39
            },
            {
                name: '\u97E9\u4E9A\u94F6\u884C',
                pinyin: 'hanyayinhang',
                id: 40
            },
            {
                name: '\u62DB\u5546\u94F6\u884C',
                pinyin: 'zhaoshangyinhang',
                id: 44
            },
            {
                name: '\u4E2D\u56FD\u5EFA\u8BBE\u94F6\u884C',
                pinyin: 'zhongguojiansheyinhang',
                id: 48
            },
            {
                name: '\u5FBD\u5546\u94F6\u884C',
                pinyin: 'huishangyinhang',
                id: 55
            },
            {
                name: '\u6E24\u6D77\u94F6\u884C',
                pinyin: 'bohaiyinhang',
                id: 59
            },
            {
                name: '\u5149\u5927\u94F6\u884C',
                pinyin: 'guangdayinhang',
                id: 72
            },
            {
                name: '\u6052\u4E30\u94F6\u884C',
                pinyin: 'hengfengyinhang',
                id: 83
            },
            {
                name: '\u5E73\u5B89\u94F6\u884C',
                pinyin: 'pinganyinhang',
                id: 94
            },
            {
                name: '\u4E2D\u56FD\u519C\u4E1A\u94F6\u884C',
                pinyin: 'zhongguonongyeyinhang',
                id: 96
            },
            {
                name: '\u4E2D\u4FE1\u94F6\u884C',
                pinyin: 'zhongxinyinhang',
                id: 99
            },
            {
                name: '\u5174\u4E1A\u94F6\u884C',
                pinyin: 'xingyeyinhang',
                id: 105
            },
            {
                name: '\u519C\u6751\u5546\u4E1A\u94F6\u884C',
                pinyin: 'nongcunshangyeyinhang',
                id: 107
            },
            {
                name: '\u4E2D\u56FD\u90AE\u653F\u50A8\u84C4\u94F6\u884C',
                pinyin: 'zhongguoyouzhengchuxuyinhang',
                id: 119
            },
            {
                name: '\u4EA4\u901A\u94F6\u884C',
                pinyin: 'jiaotongyinhang',
                id: 126
            },
            {
                name: '\u519C\u6751\u4FE1\u7528\u5408\u4F5C\u793E',
                pinyin: 'nongcunxinyonghezuoshe',
                id: 130
            }
        ]
    };
});
define('ssp-finance/mvc/FinanceInfoFormModel', [
    'exports',
    'module',
    'ub-ria/util',
    '../enum',
    'er/datasource',
    'ub-ria/mvc/FormModel',
    '../enterpriseBanks',
    '../individualBanks'
], function (exports, module, _ubRiaUtil, _enum, _erDatasource, _ubRiaMvcFormModel, _enterpriseBanks, _individualBanks) {
    var _u = babelHelpers.interopRequireDefault(_ubRiaUtil);
    var _datasource = babelHelpers.interopRequireDefault(_erDatasource);
    var _FormModel2 = babelHelpers.interopRequireDefault(_ubRiaMvcFormModel);
    var ENTITY = {
        entity: function entity(model) {
            var entity;
            return regeneratorRuntime.async(function entity$(context$1$0) {
                while (1)
                    switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        if (!(model.get('formType') === 'update')) {
                            context$1$0.next = 5;
                            break;
                        }
                        context$1$0.next = 3;
                        return regeneratorRuntime.awrap(model.data().getFinanceInfo());
                    case 3:
                        entity = context$1$0.sent;
                        return context$1$0.abrupt('return', model.fillEntityToModel(entity));
                    case 5:
                        return context$1$0.abrupt('return', null);
                    case 6:
                    case 'end':
                        return context$1$0.stop();
                    }
            }, null, this);
        }
    };
    var REGION_INFO = {
        region: function region(model) {
            var data;
            return regeneratorRuntime.async(function region$(context$1$0) {
                while (1)
                    switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.next = 2;
                        return regeneratorRuntime.awrap(model.data().getRegionInfo());
                    case 2:
                        data = context$1$0.sent;
                        return context$1$0.abrupt('return', data.results);
                    case 4:
                    case 'end':
                        return context$1$0.stop();
                    }
            }, null, this);
        }
    };
    var TEXT_RATES = { taxRates: _datasource['default'].constant(_enum.TaxRate.toArray()) };
    var MEMBER_PHONE = {
        cellphone: function cellphone(model) {
            return model.loadMemberCellphone();
        }
    };
    var FinanceInfoFormModel = function (_FormModel) {
        babelHelpers.inherits(FinanceInfoFormModel, _FormModel);
        function FinanceInfoFormModel() {
            babelHelpers.classCallCheck(this, FinanceInfoFormModel);
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }
            babelHelpers.get(Object.getPrototypeOf(FinanceInfoFormModel.prototype), 'constructor', this).apply(this, args);
            this.putDatasource(ENTITY, 0);
            this.putDatasource(REGION_INFO, 0);
            this.putDatasource(TEXT_RATES, 0);
            this.putDatasource(MEMBER_PHONE, 0);
        }
        babelHelpers.createClass(FinanceInfoFormModel, [
            {
                key: 'setGlobalData',
                value: function setGlobalData(data) {
                    this.addData('global', data);
                }
            },
            {
                key: 'fillEntityToModel',
                value: function fillEntityToModel(entity) {
                    this.fill(entity);
                    return entity;
                }
            },
            {
                key: 'prepare',
                value: function prepare() {
                    babelHelpers.get(Object.getPrototypeOf(FinanceInfoFormModel.prototype), 'prepare', this).call(this);
                    this.set('isUpdate', this.get('formType') === 'update');
                    var _buildAccountTypeInfo = this.buildAccountTypeInfo(this.get('userAccountType'), this.checkPermission('canHaveIndividualFinanceInfo'));
                    var userAccountType = _buildAccountTypeInfo.userAccountType;
                    var userAccountTypes = _buildAccountTypeInfo.userAccountTypes;
                    this.set('userAccountType', userAccountType);
                    this.set('userAccountTypes', userAccountTypes);
                    this.set('isIndividual', userAccountType === _enum.UserAccountType.INDIVIDUAL);
                    this.set('reasons', this.get('isIndividual') ? _enum.IndividualToEnterpriseReason.toArray() : _enum.EnterpriseToEnterpriseReason.toArray());
                    this.fill(this.buildRegionInfo(this.get('region'), this.get('accProvince'), this.get('accTown')));
                    this.fill(this.buildPayBankInfo(_enterpriseBanks.bankList, _individualBanks.bankList));
                    this.set('payBankValue', this.buildSelectedPayBank(_enterpriseBanks.bankList, _individualBanks.bankList, this.get('payBank'), this.get('isUpdate'), this.get('isIndividual')));
                    var flag = this.get('flag');
                    this.set('verifying', flag === _enum.FinanceStatus.AUDITING_NON_EXISTENT || flag === _enum.FinanceStatus.AUDITING_EXISTENT);
                    this.fill(this.buildInvoiceTypeInfo(this.get('invoiceType'), this.get('isUpdate')));
                }
            },
            {
                key: 'buildAccountTypeInfo',
                value: function buildAccountTypeInfo(accountType, allowToBeIndividual) {
                    if (allowToBeIndividual) {
                        return {
                            userAccountType: accountType || _enum.UserAccountType.INDIVIDUAL,
                            userAccountTypes: _enum.UserAccountType.toArray()
                        };
                    }
                    return {
                        userAccountType: accountType != null ? accountType : _enum.UserAccountType.ENTERPRISE,
                        userAccountTypes: _enum.UserAccountType.toArray('ENTERPRISE')
                    };
                }
            },
            {
                key: 'buildRegionInfo',
                value: function buildRegionInfo(region, accProvince, accTown) {
                    var _Object$entries$map$sort$reduce = Object.entries(region).map(function (_ref3) {
                        var _ref32 = babelHelpers.slicedToArray(_ref3, 2);
                        var id = _ref32[0];
                        var value = _ref32[1];
                        return babelHelpers._extends({ id: id }, value);
                    }).sort(function (a, b) {
                        return a.id - b.id;
                    }).reduce(function (_ref4, curr) {
                        var provinces = _ref4.provinces;
                        var towns = _ref4.towns;
                        curr.parentId === -1 ? provinces.push(curr) : towns.push(curr);
                        return {
                            provinces: provinces,
                            towns: towns
                        };
                    }, {
                        provinces: [],
                        towns: []
                    });
                    var provinces = _Object$entries$map$sort$reduce.provinces;
                    var towns = _Object$entries$map$sort$reduce.towns;
                    provinces = provinces.map(function (_ref) {
                        var id = _ref.id;
                        var text = _ref.text;
                        return {
                            id: id + '',
                            text: text,
                            value: id + '',
                            children: []
                        };
                    });
                    towns.forEach(function (_ref2) {
                        var id = _ref2.id;
                        var text = _ref2.text;
                        var parentId = _ref2.parentId;
                        var province = provinces.find(function (item) {
                            return item.id === parentId + '';
                        });
                        province && province.children.push({
                            id: id,
                            text: text,
                            value: text
                        });
                    });
                    accProvince = accProvince || provinces[0].value;
                    var province = provinces.find(function (item) {
                        return item.value === accProvince + '';
                    }) || provinces[0];
                    towns = province.children;
                    accTown = accTown || towns[0].value;
                    return {
                        provinces: provinces,
                        towns: towns,
                        accProvince: accProvince,
                        accTown: accTown
                    };
                }
            },
            {
                key: 'buildPayBankInfo',
                value: function buildPayBankInfo(enterpriseBanks, individualBanks) {
                    var formatBanks = function formatBanks(banks) {
                        banks = _u['default'].chain(banks).map(function (_ref5) {
                            var name = _ref5.name;
                            var id = _ref5.id;
                            var pinyin = _ref5.pinyin;
                            return {
                                text: name,
                                id: id,
                                pinyin: pinyin,
                                initialLetter: pinyin.charAt(0).toUpperCase()
                            };
                        }).groupBy('initialLetter').map(function (value, key) {
                            return {
                                id: key,
                                text: key,
                                children: _u['default'].sortBy(value, 'pinyin')
                            };
                        }).sortBy('id').value();
                        return {
                            id: -1,
                            text: '\u6240\u6709\u94F6\u884C',
                            children: banks
                        };
                    };
                    return {
                        payEnterpriseBanks: formatBanks(enterpriseBanks),
                        payIndividualBanks: formatBanks(individualBanks)
                    };
                }
            },
            {
                key: 'buildSelectedPayBank',
                value: function buildSelectedPayBank(enterpriseBanks, individualBanks, payBank, isUpdate, isIndividual) {
                    if (!isUpdate) {
                        return;
                    }
                    var banks = isIndividual ? individualBanks : enterpriseBanks;
                    var bank = _u['default'].findWhere(banks, { name: payBank }) || {};
                    return bank.id ? [{ id: bank.id }] : [];
                }
            },
            {
                key: 'getInvoiceTypes',
                value: function getInvoiceTypes(invoiceTypes, cb) {
                    var finalInvoiceTypes = invoiceTypes.filter(cb).map(function (_ref6) {
                        var text = _ref6.text;
                        var value = _ref6.value;
                        return {
                            value: value,
                            text: text + '\u53D1\u7968'
                        };
                    });
                    return finalInvoiceTypes;
                }
            },
            {
                key: 'buildInvoiceTypeInfo',
                value: function buildInvoiceTypeInfo(invoiceType, isUpdate) {
                    invoiceType = invoiceType >= 0 ? +invoiceType : _enum.TaxType.VAT_SPEC;
                    var invoiceTypes = _enum.TaxType.toArray();
                    if (isUpdate && invoiceType === _enum.TaxType.VAT_NORMAL) {
                        var cb = function cb(item) {
                            return item.value !== _enum.TaxType.SALE;
                        };
                        invoiceTypes = this.getInvoiceTypes(invoiceTypes, cb);
                    } else {
                        var cb = function cb(item) {
                            return item.value !== _enum.TaxType.SALE && item.value !== _enum.TaxType.VAT_NORMAL;
                        };
                        invoiceTypes = this.getInvoiceTypes(invoiceTypes, cb);
                    }
                    return {
                        invoiceType: invoiceType,
                        invoiceTypes: invoiceTypes
                    };
                }
            },
            {
                key: 'getBranchBanks',
                value: function getBranchBanks(params) {
                    return this.data().getSubBankList(params);
                }
            },
            {
                key: 'loadMemberCellphone',
                value: function loadMemberCellphone() {
                    if (this.checkPermission('canVerifyMemberPhone')) {
                        return this.data('global').getMemberProperty('cellphone');
                    }
                    return '';
                }
            },
            {
                key: 'sendVerifyCode',
                value: function sendVerifyCode() {
                    return this.data('global').sendMemberPhoneModificationVerifyCode();
                }
            }
        ]);
        return FinanceInfoFormModel;
    }(_FormModel2['default']);
    module.exports = FinanceInfoFormModel;
});
define('ssp-finance/mvc/FinanceInfoForm', [
    'exports',
    'module',
    'ub-ria/mvc/FormAction',
    'er/events'
], function (exports, module, _ubRiaMvcFormAction, _erEvents) {
    var _FormAction2 = babelHelpers.interopRequireDefault(_ubRiaMvcFormAction);
    var _events = babelHelpers.interopRequireDefault(_erEvents);
    var FinanceInfoForm = function (_FormAction) {
        babelHelpers.inherits(FinanceInfoForm, _FormAction);
        function FinanceInfoForm() {
            babelHelpers.classCallCheck(this, FinanceInfoForm);
            babelHelpers.get(Object.getPrototypeOf(FinanceInfoForm.prototype), 'constructor', this).apply(this, arguments);
            this.entityDescription = '\u8D22\u52A1\u4FE1\u606F';
        }
        babelHelpers.createClass(FinanceInfoForm, [
            {
                key: 'initBehavior',
                value: function initBehavior() {
                    return regeneratorRuntime.async(function initBehavior$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                babelHelpers.get(Object.getPrototypeOf(FinanceInfoForm.prototype), 'initBehavior', this).call(this);
                                this.view.on('loadbranchbanks', onLoadBranchBanks, this);
                                this.view.on('requirevc', onRequireVerifyCode, this);
                            case 3:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'loadBranchBanks',
                value: function loadBranchBanks(context) {
                    var query, args, branchBanks;
                    return regeneratorRuntime.async(function loadBranchBanks$(context$2$0) {
                        while (1)
                            switch (context$2$0.prev = context$2$0.next) {
                            case 0:
                                query = context.query;
                                args = {
                                    province: query.province,
                                    city: query.city,
                                    bank_name: query.payBank,
                                    bank_name_detail: query.subBank
                                };
                                context$2$0.next = 4;
                                return regeneratorRuntime.awrap(this.model.getBranchBanks(args));
                            case 4:
                                branchBanks = context$2$0.sent;
                                this.view.updateBranchBankSuggestion(context, branchBanks);
                            case 6:
                            case 'end':
                                return context$2$0.stop();
                            }
                    }, null, this);
                }
            },
            {
                key: 'handleSendVerifyCodeError',
                value: function handleSendVerifyCodeError(errors) {
                    var handled = this.handleSubmitError(errors);
                    !handled && _events['default'].notifyError(errors.responseText);
                    this.view.notifyVerifyCodeSendFail(errors);
                }
            }
        ]);
        return FinanceInfoForm;
    }(_FormAction2['default']);
    module.exports = FinanceInfoForm;
    function onLoadBranchBanks(e) {
        this.loadBranchBanks(e.context);
    }
    function onRequireVerifyCode() {
        return regeneratorRuntime.async(function onRequireVerifyCode$(context$1$0) {
            while (1)
                switch (context$1$0.prev = context$1$0.next) {
                case 0:
                    context$1$0.prev = 0;
                    context$1$0.next = 3;
                    return regeneratorRuntime.awrap(this.model.sendVerifyCode());
                case 3:
                    this.view.startVerifyCodeCountdown();
                    context$1$0.next = 9;
                    break;
                case 6:
                    context$1$0.prev = 6;
                    context$1$0.t0 = context$1$0['catch'](0);
                    this.handleSendVerifyCodeError(context$1$0.t0);
                case 9:
                case 'end':
                    return context$1$0.stop();
                }
        }, null, this, [[
                0,
                6
            ]]);
    }
});
define('ssp-finance/mvc/FinanceInfo', [
    'exports',
    'module',
    'ub-ria/mvc/BaseAction'
], function (exports, module, _ubRiaMvcBaseAction) {
    var _BaseAction2 = babelHelpers.interopRequireDefault(_ubRiaMvcBaseAction);
    var FinanceInfo = function (_BaseAction) {
        babelHelpers.inherits(FinanceInfo, _BaseAction);
        function FinanceInfo() {
            babelHelpers.classCallCheck(this, FinanceInfo);
            babelHelpers.get(Object.getPrototypeOf(FinanceInfo.prototype), 'constructor', this).apply(this, arguments);
        }
        babelHelpers.createClass(FinanceInfo, [
            {
                key: 'initBehavior',
                value: function initBehavior() {
                    babelHelpers.get(Object.getPrototypeOf(FinanceInfo.prototype), 'initBehavior', this).call(this);
                    this.view.on('keepmoneymodify', modifyKeepMoney, this);
                }
            },
            {
                key: 'updateKeepMoney',
                value: function updateKeepMoney(data) {
                    return this.model.updateKeepMoney(data).then(this.view.updateKeepMoneyView.bind(this.view));
                }
            }
        ]);
        return FinanceInfo;
    }(_BaseAction2['default']);
    module.exports = FinanceInfo;
    function modifyKeepMoney(_ref) {
        var data = _ref.data;
        this.updateKeepMoney(data);
    }
});
define('ssp-credit-paradise/mvc/CreditOverviewView', [
    'require',
    'tpl!startup/template',
    'promise',
    'ub-ria/mvc/BaseView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'sspCreditOverview';
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = {
            'overview-lists:activate': onSwitchCreditListTab,
            'ssp-credit-exchange-list:action@received': onReceiveCard,
            'ssp-credit-exchange-list:action@cancelled': onCancelExchange
        };
        this.addUIEvents(uiEvents);
    };
    function onSwitchCreditListTab(e) {
        this.reflowCreditList(e.tab.panel);
    }
    function onCancelExchange(e) {
        this.fire('exchangecancelled');
    }
    function onReceiveCard(e) {
        this.fire('cardreceived');
    }
    exports.enterDocument = function () {
        this.$super(arguments);
        var targetTabIndex = +this.model.get('tabIndex') || 0;
        this.get('overview-lists').set('activeIndex', targetTabIndex);
    };
    exports.reflowCreditList = function (id) {
        var creditList = this.get(id).get('action');
        if (require('promise').isPromise(creditList)) {
            creditList.thenBind(this.reflowCreditList, this, id);
        } else {
            creditList.reflowCreditList();
        }
    };
    var BaseView = require('ub-ria/mvc/BaseView');
    var CreditOverviewView = require('eoo').create(BaseView, exports);
    return CreditOverviewView;
});
define('ssp-credit-paradise/mvc/CreditOverviewModel', [
    'require',
    'moment',
    'ub-ria/mvc/BaseModel',
    'eoo'
], function (require) {
    var moment = require('moment');
    var SHORT_DATE = 'YYYYMMDD';
    var SHORT_HYPHEN_DATE = 'YYYY-MM-DD';
    var exports = {};
    var SUMMARY = {
        summary: function (model) {
            return model.data().summary();
        }
    };
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(SUMMARY);
    };
    exports.prepare = function () {
        this.$super(arguments);
        var delayDate = this.get('summary').delayDate;
        delayDate = delayDate && moment(delayDate, SHORT_DATE).format(SHORT_HYPHEN_DATE);
        this.set('formattedDelayDate', delayDate);
    };
    var BaseModel = require('ub-ria/mvc/BaseModel');
    var CreditOverviewModel = require('eoo').create(BaseModel, exports);
    return CreditOverviewModel;
});
define('ssp-credit-paradise/mvc/CreditOverview', [
    'require',
    'ub-ria/mvc/BaseAction',
    'eoo'
], function (require) {
    var exports = {};
    exports.entityDescription = '\u6211\u7684\u79EF\u5206';
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('exchangecancelled', onRefreshExchangeList, this);
        this.view.on('cardreceived', onRefreshExchangeList, this);
    };
    function onRefreshExchangeList() {
        var creditExchangeListRedirectURL = this.model.get('creditExchangeListRedirectURL');
        if (creditExchangeListRedirectURL) {
            this.redirect(creditExchangeListRedirectURL, { force: true });
            return;
        }
        this.reload();
    }
    var BaseAction = require('ub-ria/mvc/BaseAction');
    var CreditOverview = require('eoo').create(BaseAction, exports);
    return CreditOverview;
});
define('ssp-credit-paradise/mvc/CreditMallView', [
    'require',
    'tpl!startup/template',
    'ub-ria/mvc/ListView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'sspCreditMall';
    exports.bindEvents = function () {
        this.$super(arguments);
        this.getGroup('award').on('click', onClickAward, this);
        this.getGroup('exchange').on('click', onClickExchange, this);
    };
    function onClickAward(e) {
        e.preventDefault();
        e.stopPropagation();
        var url = '' + e.target.get('href');
        if (url.charAt(0) === '#') {
            url = url.slice(1);
        }
        this.popDrawerAction({ url: url }).show();
    }
    var onClickExchange = onClickAward;
    exports.getSearchArgs = function () {
        var form = this.get('filter');
        var args = form ? form.getData() : {};
        return args;
    };
    var ListView = require('ub-ria/mvc/ListView');
    var CreditMallView = require('eoo').create(ListView, exports);
    return CreditMallView;
});
define('ssp-credit-paradise/mvc/CreditMallModel', [
    'require',
    'er/datasource',
    'ub-ria/mvc/filterHelper',
    'ub-ria/util',
    '../enum',
    'ub-ria/mvc/ListModel',
    'eoo'
], function (require) {
    var datasource = require('er/datasource');
    var filterHelper = require('ub-ria/mvc/filterHelper');
    var u = require('ub-ria/util');
    var AWARD_SCOPE = require('../enum').AwardScope;
    var exports = {};
    exports.setCreditData = function (creditData) {
        this.addData('credit', creditData);
    };
    var CREDIT_SUMMARY = {
        summary: function (model) {
            return model.data('credit').summary();
        }
    };
    var awardScropes = AWARD_SCOPE.toArray();
    awardScropes.unshift({
        text: '\u4E0D\u9650',
        value: ''
    });
    var AWARD_SCOPES = { awardScopes: datasource.constant(awardScropes) };
    var AWARD_CATEGORIES = {
        awardCategories: function (model) {
            var categories = model.data().fetchAwardCatgories().then(function (response) {
                var results = u.map(response.results, function (item) {
                    return {
                        text: item.name,
                        value: item.id
                    };
                });
                results.unshift({
                    text: '\u4E0D\u9650',
                    value: ''
                });
                return results;
            });
            return categories;
        }
    };
    exports.constructor = function () {
        this.$super(arguments);
    };
    exports.defaultArgs = { status: 'all' };
    exports.getQuery = function () {
        var query = this.$super(arguments);
        var scopeId = this.get('scopeId');
        if (scopeId) {
            query.scopeId = scopeId;
        }
        var categoryId = this.get('categoryId');
        if (categoryId) {
            query.categoryId = categoryId;
        }
        return query;
    };
    exports.getFilters = function () {
        return {
            scopeId: {
                text: filterHelper.select.getText,
                value: this.get('scopeId'),
                datasource: this.get('awardScopes')
            },
            categoryId: {
                text: filterHelper.select.getText,
                value: this.get('categoryId'),
                datasource: this.get('awardCategories')
            }
        };
    };
    var ListModel = require('ub-ria/mvc/ListModel');
    var CreditMallModel = require('eoo').create(ListModel, exports);
    return CreditMallModel;
});
define('ssp-credit-paradise/mvc/CreditMall', [
    'require',
    'ub-ria/mvc/ListAction',
    'eoo'
], function (require) {
    var exports = {};
    exports.entityDescription = '\u79EF\u5206\u5546\u57CE';
    var ListAction = require('ub-ria/mvc/ListAction');
    var CreditMall = require('eoo').create(ListAction, exports);
    return CreditMall;
});
define('ssp-credit-paradise/mvc/CreditListView', [
    'require',
    'tpl!startup/template',
    'moment',
    '../enum',
    './CreditBaseListView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var moment = require('moment');
    var SHORT_DATE = 'YYYYMMDD';
    var SHORT_HYPHEN_DATE = 'YYYY-MM-DD';
    var CreditType = require('../enum').CreditType;
    var exports = {};
    exports.template = 'sspCreditList';
    exports.tableFields = [
        {
            title: '\u7F16\u53F7',
            field: 'id',
            width: 120,
            content: 'id'
        },
        {
            title: '\u79EF\u5206',
            field: 'cent',
            width: 120,
            content: 'cent'
        },
        {
            title: '\u53EF\u7528\u79EF\u5206',
            field: 'remainCent',
            width: 120,
            content: 'remainCent'
        },
        {
            title: '\u79EF\u5206\u65E5\u671F',
            field: 'availableDate',
            width: 120,
            content: function (item) {
                return item.availableDate && moment(item.availableDate, SHORT_DATE).format(SHORT_HYPHEN_DATE);
            }
        },
        {
            title: '\u5931\u6548\u65E5\u671F',
            field: 'unavailableDate',
            width: 120,
            content: function (item) {
                return item.unavailableDate && moment(item.unavailableDate, SHORT_DATE).format(SHORT_HYPHEN_DATE);
            }
        },
        {
            title: '\u79EF\u5206\u7C7B\u578B',
            field: 'type',
            width: 100,
            content: function (item) {
                return CreditType.getTextFromValue(item.type);
            }
        },
        {
            title: '\u5907\u6CE8',
            field: 'description',
            width: 200,
            content: 'description'
        }
    ];
    var CreditBaseListView = require('./CreditBaseListView');
    var CreditListView = require('eoo').create(CreditBaseListView, exports);
    return CreditListView;
});
define('ssp-credit-paradise/mvc/CreditExchangeListView', [
    'require',
    'tpl!startup/template',
    'ub-ria/util',
    'moment',
    'esui/Table',
    '../enum',
    'er/URL',
    'eoo',
    './CreditBaseListView'
], function (require) {
    require('tpl!startup/template');
    var u = require('ub-ria/util');
    var moment = require('moment');
    var Table = require('esui/Table');
    var SHORT_DATE = 'YYYYMMDD';
    var SHORT_HYPHEN_DATE = 'YYYY-MM-DD';
    var ExchangeStatus = require('../enum').ExchangeStatus;
    var AwardCategory = require('../enum').AwardCategory;
    var exports = {};
    exports.template = 'sspCreditExchangeList';
    exports.getTableFields = function () {
        var templateEngine = this.getTemplateEngine();
        var listCommandRenderer = templateEngine.getRenderer('sspCreditExchangeListCommand');
        var fields = [
            {
                title: '\u8BA2\u5355\u53F7',
                field: 'id',
                width: 120,
                content: 'id'
            },
            {
                title: '\u5151\u6362\u5956\u54C1',
                field: 'awardName',
                width: 200,
                content: function (item) {
                    var awardName = '';
                    if (item.awardStatus === 1 && !item.exchangeType) {
                        var config = {
                            command: 'readAward',
                            args: item.awardId,
                            className: 'link-like table-detail',
                            text: item.awardName
                        };
                        awardName = Table.command(config);
                    } else {
                        awardName = u.escape(item.awardName);
                    }
                    return awardName;
                }
            },
            {
                title: '\u6570\u91CF',
                field: 'num',
                width: 100,
                content: 'num'
            },
            {
                title: '\u4F7F\u7528\u79EF\u5206',
                field: 'cent',
                width: 120,
                content: 'cent'
            },
            {
                title: '\u7533\u8BF7\u65E5\u671F',
                field: 'exchangeDate',
                width: 120,
                content: function (item) {
                    return item.exchangeDate && moment(item.exchangeDate, SHORT_DATE).format(SHORT_HYPHEN_DATE);
                }
            },
            {
                title: '\u8BA2\u5355\u72B6\u6001',
                field: 'status',
                width: 120,
                content: function (item) {
                    var statusText = ExchangeStatus.getTextFromValue(item.status);
                    if (item.categoryId === AwardCategory.NUOMI_REAL_CARD && item.status === ExchangeStatus.PROCESSING) {
                        statusText += ' <esui-tip>\u8BF7\u60A8\u6536\u5230\u8BA2\u5355\u540E\u8FDB\u884C\u6536\u8D27\u786E\u8BA4\uFF0C\u64CD\u4F5C\u5B8C\u6210\u540E\u5B9E\u4F53\u5361\u65B9\u53EF\u6B63\u5E38\u4F7F\u7528</esui-tip>';
                    }
                    return statusText;
                }
            },
            {
                title: '\u64CD\u4F5C',
                field: 'command',
                width: 120,
                content: function (item, row, col) {
                    var readDetail = '';
                    if (item.status !== ExchangeStatus.REVOCATION) {
                        var config = {
                            command: 'readDetail',
                            args: JSON.stringify({
                                id: item.id,
                                virtual: item.virtual,
                                categoryId: item.categoryId,
                                status: item.status,
                                row: row,
                                col: col
                            }),
                            text: '\u67E5\u770B\u8BE6\u60C5'
                        };
                        readDetail += listCommandRenderer({
                            idPrefix: 'read-detail',
                            row: row,
                            col: col,
                            content: Table.command(config)
                        });
                    }
                    if (item.status === ExchangeStatus.PENDING) {
                        var cancelConfig = {
                            command: 'cancel',
                            args: JSON.stringify({
                                id: item.id,
                                virtual: item.virtual,
                                categoryId: item.categoryId
                            }),
                            text: '\u64A4\u9500'
                        };
                        readDetail += listCommandRenderer({
                            idPrefix: 'cancel',
                            row: row,
                            col: col,
                            content: Table.command(cancelConfig)
                        });
                    }
                    if (item.categoryId === AwardCategory.NUOMI_REAL_CARD && item.status === ExchangeStatus.PROCESSING) {
                        var activeConfig = {
                            command: 'receive',
                            args: JSON.stringify({ id: item.id }),
                            text: '\u786E\u8BA4\u6536\u8D27'
                        };
                        readDetail += listCommandRenderer({
                            idPrefix: 'receive',
                            row: row,
                            col: col,
                            content: Table.command(activeConfig)
                        });
                    }
                    return readDetail;
                }
            }
        ];
        return fields;
    };
    exports.enterDocument = function () {
        this.$super(arguments);
        this.get('table').initChildren();
    };
    function getCommandURL(commandName, id) {
        var urlMapping = { readAward: this.model.get('creditAwardURL') };
        var url = require('er/URL').withQuery(urlMapping[commandName], { id: id });
        return url;
    }
    exports.commandHandler = function (e) {
        this.$super(arguments);
        if (e.triggerType === 'click') {
            switch (e.name) {
            case 'readAward':
                var url = getCommandURL.call(this, e.name, e.args);
                var options = { url: url };
                this.popDrawerAction(options).show();
                break;
            case 'readDetail':
                var args = JSON.parse(e.args);
                var readDetail = this.get('read-detail-' + args.row + '-' + args.col);
                this.get('detail').set('attachedDOM', readDetail.main);
                if (args.status === ExchangeStatus.PENDING) {
                    this.showPendingMessage();
                } else {
                    this.fire('readDetail', args);
                }
                break;
            case 'cancel':
                var config = {
                    title: '',
                    content: '\u60A8\u786E\u5B9A\u8981\u64A4\u9500\u8BE5\u7B14\u5151\u6362\u4EA4\u6613\u5417\uFF1F'
                };
                this.waitConfirm(config).thenBind(this.cancelExchange, this, JSON.parse(e.args));
                break;
            case 'receive':
                var config = {
                    title: '',
                    content: '\u60A8\u786E\u5B9A\u5DF2\u6536\u5230\u8BA2\u5355\uFF0C\u6B64\u64CD\u4F5C\u4E0D\u53EF\u64A4\u9500\u5E76\u4F1A\u6FC0\u6D3B\u5B9E\u4F53\u5361\uFF1F'
                };
                this.waitConfirm(config).thenBind(this.receiveCard, this, JSON.parse(e.args));
                break;
            }
        }
    };
    exports.cancelExchange = function (args) {
        this.fire('cancel', args);
    };
    exports.receiveCard = function (args) {
        this.fire('receive', args);
    };
    exports.showPendingMessage = function () {
        var templateEngine = this.getTemplateEngine();
        var pendingMessage = templateEngine.getRenderer('sspCreditExchangePendingMessage')();
        var detail = this.get('detail');
        detail.setContent(pendingMessage);
        detail.show();
    };
    exports.showDetail = function (data) {
        if (data.config.categoryId === AwardCategory.NUOMI_VIRTUAL_CARD) {
            this.showNuomiECardsDetail(data);
        } else {
            this.showRealGiftDetail(data);
        }
    };
    exports.showNuomiECardsDetail = function (data) {
        data.downloadURL = this.model.get('nuomiECardsDownloadURL');
        var templateEngine = this.getTemplateEngine();
        var cardsHTML = templateEngine.getRenderer('sspCreditExchangeNuomiECards')(data);
        var detail = this.get('detail');
        detail.setContent(cardsHTML);
        detail.show();
    };
    exports.showRealGiftDetail = function (data) {
        var templateEngine = this.getTemplateEngine();
        var cardHTML = templateEngine.getRenderer('sspCreditExchangeRealGiftDetail')(data);
        var detail = this.get('detail');
        detail.setContent(cardHTML);
        detail.show();
    };
    exports.showDonateDetail = function (data) {
        var templateEngine = this.getTemplateEngine();
        var cardHTML = templateEngine.getRenderer('sspCreditExchangeDonateDetail')(data);
        var detail = this.get('detail');
        detail.setContent(cardHTML);
        detail.show();
    };
    var eoo = require('eoo');
    eoo.defineAccessor(exports, 'templateEngine');
    var CreditBaseListView = require('./CreditBaseListView');
    var CreditExchangeListView = eoo.create(CreditBaseListView, exports);
    return CreditExchangeListView;
});
define('ssp-credit-paradise/mvc/CreditExchangeListModel', [
    'require',
    '../enum',
    './CreditBaseListModel',
    'eoo'
], function (require) {
    var AwardCategory = require('../enum').AwardCategory;
    var exports = {};
    exports.fetchDetail = function (config) {
        var loading = null;
        var categoryId = config.categoryId;
        if (categoryId === AwardCategory.NUOMI_VIRTUAL_CARD) {
            loading = this.fetchVirtualDetail(config);
        } else {
            loading = this.fetchRealDetail(config);
        }
        return loading;
    };
    exports.fetchVirtualDetail = function (config) {
        var loading = this.data().searchNuomiECardsDetail({ exchangeId: config.id }).then(function (response) {
            var data = {
                results: response.results,
                totalCount: response.totalCount,
                config: config
            };
            return data;
        });
        return loading;
    };
    exports.fetchRealDetail = function (config) {
        return this.data().searchEntityCardDetail({ exchangeId: config.id }).then(function (response) {
            response.config = config;
            return response;
        });
    };
    exports.cancelExchange = function (id) {
        return this.data().cancelExchange(id);
    };
    exports.receiveCard = function (id) {
        return this.data().receiveCard(id);
    };
    var CreditBaseListModel = require('./CreditBaseListModel');
    var CreditExchangeListModel = require('eoo').create(CreditBaseListModel, exports);
    return CreditExchangeListModel;
});
define('ssp-credit-paradise/mvc/CreditExchangeList', [
    'require',
    'ub-ria/util',
    './CreditBaseList',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var exports = {};
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('readDetail', onReadDetail, this);
        this.view.on('cancel', onCancel, this);
        this.view.on('receive', onReceive, this);
    };
    function onReadDetail(e) {
        this.readDetail({
            id: e.id,
            virtual: e.virtual,
            categoryId: e.categoryId
        });
    }
    function onCancel(e) {
        this.cancelExchange(e.id);
    }
    function onReceive(e) {
        this.receiveCard(e.id);
    }
    exports.readDetail = function (config) {
        this.model.fetchDetail(config).then(u.bind(this.view.showDetail, this.view));
    };
    exports.cancelExchange = function (id) {
        var emitter = function () {
            this.fire('cancelled');
        };
        this.model.cancelExchange(id).then(u.bind(emitter, this));
    };
    exports.receiveCard = function (id) {
        var emitter = function () {
            this.fire('received');
        };
        this.model.receiveCard(id).then(u.bind(emitter, this)).fail(u.bind(receiveCardFail, this));
    };
    function receiveCardFail(errors) {
        if (errors && errors.message) {
            this.view.alert(errors.message);
        }
    }
    var CreditBaseListAction = require('./CreditBaseList');
    var CreditExchangeList = require('eoo').create(CreditBaseListAction, exports);
    return CreditExchangeList;
});
define('ssp-credit-paradise/enum', [
    'require',
    'er/Enum'
], function (require) {
    var Enum = require('er/Enum');
    var exports = {};
    exports.CreditType = new Enum({
        alias: 'BUSINESS_TYPE_ZERO',
        text: '\u4E1A\u52A1\u79EF\u5206',
        value: 0
    }, {
        alias: 'COOPERATION',
        text: '\u5408\u4F5C\u79EF\u5206',
        value: 1
    }, {
        alias: 'AWARD',
        text: '\u5956\u52B1\u79EF\u5206',
        value: 2
    }, {
        alias: 'PUNISHMENT',
        text: '\u60E9\u7F5A\u79EF\u5206',
        value: 3
    }, {
        alias: 'BUSINESS_TYPE_FOUR',
        text: '\u4E1A\u52A1\u79EF\u5206',
        value: 4
    }, {
        alias: 'BUSINESS_TYPE_FIVE',
        text: '\u4E1A\u52A1\u79EF\u5206',
        value: 5
    }, {
        alias: 'BUSINESS_TYPE_SIX',
        text: '\u4E1A\u52A1\u79EF\u5206',
        value: 6
    }, {
        alias: 'BUSINESS',
        text: '\u4E1A\u52A1\u79EF\u5206',
        value: 7
    });
    exports.ExchangeStatus = new Enum({
        alias: 'PENDING',
        text: '\u672A\u5904\u7406',
        value: 0
    }, {
        alias: 'PROCESSING',
        text: '\u5DF2\u5904\u7406\u53D1\u8D27\u4E2D',
        value: 1
    }, {
        alias: 'EXCHANGED',
        text: '\u5151\u6362\u5B8C\u6210',
        value: 2
    }, {
        alias: 'REVOCATION',
        text: '\u64A4\u9500',
        value: 3
    });
    exports.AwardScope = new Enum({
        alias: '0_TO_500',
        text: '0-500',
        value: 1
    }, {
        alias: '500_TO_2000',
        text: '500-2000',
        value: 2
    }, {
        alias: '2000_TO_5000',
        text: '2000-5000',
        value: 3
    }, {
        alias: '5000_TO_10000',
        text: '5000-10000',
        value: 4
    }, {
        alias: '10000_TO_50000',
        text: '10000-50000',
        value: 5
    }, {
        alias: '50000_TO_100000',
        text: '50000-100000',
        value: 6
    }, {
        alias: 'MORE_THAN_100000',
        text: '100000\u4EE5\u4E0A',
        value: 7
    });
    exports.AwardCategory = new Enum({
        alias: 'NUOMI_VIRTUAL_CARD',
        text: '\u7CEF\u7C73\u7535\u5B50\u5361',
        value: 172
    }, {
        alias: 'NUOMI_REAL_CARD',
        text: '\u7CEF\u7C73\u5B9E\u4F53\u5361',
        value: 173
    });
    return exports;
});
define('ssp-credit-paradise/mvc/CreditDelayListView', [
    'require',
    'tpl!startup/template',
    'moment',
    '../enum',
    './CreditBaseListView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var moment = require('moment');
    var SHORT_DATE = 'YYYYMMDD';
    var SHORT_HYPHEN_DATE = 'YYYY-MM-DD';
    var CreditType = require('../enum').CreditType;
    var exports = {};
    exports.template = 'sspCreditDelayList';
    exports.tableFields = [
        {
            title: '\u7F16\u53F7',
            field: 'id',
            width: 120,
            content: 'id'
        },
        {
            title: '\u5373\u5C06\u53EF\u7528\u7684\u79EF\u5206',
            field: 'cent',
            width: 120,
            content: 'cent'
        },
        {
            title: '\u79EF\u5206\u65E5\u671F',
            field: 'centDate',
            width: 120,
            content: function (item) {
                return item.centDate && moment(item.centDate, SHORT_DATE).format(SHORT_HYPHEN_DATE);
            }
        },
        {
            title: '\u751F\u6548\u65E5\u671F',
            field: 'availableDate',
            width: 120,
            content: function (item) {
                return item.availableDate && moment(item.availableDate, SHORT_DATE).format(SHORT_HYPHEN_DATE);
            }
        },
        {
            title: '\u79EF\u5206\u7C7B\u578B',
            field: 'type',
            width: 100,
            content: function (item) {
                return CreditType.getTextFromValue(item.type);
            }
        },
        {
            title: '\u5907\u6CE8',
            field: 'description',
            width: 200,
            content: 'description'
        }
    ];
    var CreditBaseListView = require('./CreditBaseListView');
    var CreditDelayListView = require('eoo').create(CreditBaseListView, exports);
    return CreditDelayListView;
});
define('ssp-credit-paradise/mvc/CreditDelayListModel', [
    'require',
    './CreditBaseListModel',
    'eoo'
], function (require) {
    var exports = {};
    exports.search = function (query) {
        return this.data().searchDelayCents(query || {});
    };
    var CreditBaseListModel = require('./CreditBaseListModel');
    var CreditDelayListModel = require('eoo').create(CreditBaseListModel, exports);
    return CreditDelayListModel;
});
define('ssp-credit-paradise/mvc/CreditBaseListView', [
    'require',
    'ub-ria/mvc/ListView',
    'eoo'
], function (require) {
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        var uiProperties = { table: { followHead: false } };
        this.addUIProperties(uiProperties);
    };
    exports.reflowCreditList = function () {
        this.get('table').adjustWidth();
    };
    var ListView = require('ub-ria/mvc/ListView');
    var CreditBaseListView = require('eoo').create(ListView, exports);
    return CreditBaseListView;
});
define('ssp-credit-paradise/mvc/CreditBaseListModel', [
    'require',
    'ub-ria/mvc/ListModel',
    'eoo'
], function (require) {
    var exports = {};
    exports.getQuery = function () {
        var query = { pageNo: this.get('page') || 1 };
        return query;
    };
    var ListModel = require('ub-ria/mvc/ListModel');
    var CreditBaseListModel = require('eoo').create(ListModel, exports);
    return CreditBaseListModel;
});
define('ssp-credit-paradise/mvc/CreditBaseList', [
    'require',
    'ub-ria/mvc/ListAction',
    'eoo'
], function (require) {
    var exports = {};
    exports.reflowCreditList = function () {
        this.view.reflowCreditList();
    };
    var ListAction = require('ub-ria/mvc/ListAction');
    var CreditBaseList = require('eoo').create(ListAction, exports);
    return CreditBaseList;
});
define('ssp-credit-paradise/CreditParadiseData', [
    'require',
    'ub-ria/mvc/RequestManager',
    'eoo'
], function (require) {
    var exports = {};
    exports.summary = function () {
        throw new Error('Summary method not implemented.');
    };
    exports.searchDelayCents = function (query) {
        throw new Error('SearchDelayCents method not implemented.');
    };
    var RequestManager = require('ub-ria/mvc/RequestManager');
    var CreditParadiseData = require('eoo').create(RequestManager, exports);
    return CreditParadiseData;
});
define('ssp-credit-paradise/CreditMallData', [
    'require',
    'ub-ria/mvc/RequestManager',
    'eoo'
], function (require) {
    var exports = {};
    exports.fetchAwardCatgories = function () {
        throw new Error('FetchAwardCatgories method not implemented.');
    };
    var RequestManager = require('ub-ria/mvc/RequestManager');
    var CreditMallData = require('eoo').create(RequestManager, exports);
    return CreditMallData;
});
define('ssp-credit-paradise/CreditExchangeData', [
    'require',
    'ub-ria/mvc/RequestManager',
    'eoo'
], function (require) {
    var exports = {};
    exports.searchNuomiECardsDetail = function (query) {
        throw new Error('SearchNuomiECardsDetail method not implemented.');
    };
    exports.searchEntityCardDetail = function (query) {
        throw new Error('SearchEntityCardDetail method not implemented.');
    };
    exports.cancelExchange = function (id) {
        throw new Error('CancalExchange method not implemented.');
    };
    exports.getAddressList = function () {
        throw new Error('GetAddressList method not implemented.');
    };
    exports.deleteAddress = function () {
        throw new Error('DeleteAddress method not implemented.');
    };
    exports.saveAddress = function () {
        throw new Error('SaveAddress method not implemented.');
    };
    exports.getAreaData = function (id, type) {
        throw new Error('SaveAddress method not implemented.');
    };
    var RequestManager = require('ub-ria/mvc/RequestManager');
    var CreditExchangeData = require('eoo').create(RequestManager, exports);
    return CreditExchangeData;
});
define('ssp-account/ui/CustomTreeRichSelector', [
    'require',
    'esui/lib',
    'ub-ria/util',
    'ub-ria-ui/TreeRichSelector',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var u = require('ub-ria/util');
    var exports = {};
    exports.type = 'CustomTreeRichSelector';
    exports.initOptions = function (options) {
        var properties = {
            parentBeyondChild: true,
            parentDependChild: true
        };
        lib.extend(properties, options);
        if (properties.parentBeyondChild === 'false') {
            properties.parentBeyondChild = false;
        }
        if (properties.parentDependChild === 'false') {
            properties.parentDependChild = false;
        }
        this.$super([properties]);
    };
    function unselectCurrent(control) {
        var curId = control.currentSeletedId;
        var treeList = control.getQueryList().getChild('tree');
        treeList.unselectNode(curId);
        control.currentSeletedId = null;
    }
    function selectItem(control, id, toBeSelected) {
        var tree = control.getQueryList().getChild('tree');
        var indexData = control.indexData;
        var item = indexData[id];
        if (!item) {
            return;
        }
        if (!control.multi && toBeSelected) {
            unselectCurrent(control);
            control.currentSeletedId = id;
        }
        control.setItemState(id, 'isSelected', toBeSelected);
        if (toBeSelected) {
            tree.selectNode(id, true);
        } else {
            tree.unselectNode(id, true);
        }
    }
    exports.selectItems = function (nodes, toBeSelected) {
        var indexData = this.indexData;
        if (!indexData) {
            return;
        }
        var control = this;
        u.each(nodes, function (node) {
            var id = node.id !== undefined ? node.id : node;
            var item = indexData[id];
            if (item != null) {
                selectItem(control, id, toBeSelected);
                trySyncParentAndChildrenStates(control, item, toBeSelected);
            }
        });
    };
    exports.actionForAdd = function (item) {
        this.setItemState(item.node.id, 'isSelected', true);
        if (!this.multi) {
            if (this.currentSeletedId) {
                this.setItemState(this.currentSeletedId, 'isSelected', false);
            }
            this.currentSeletedId = item.node.id;
        } else {
            trySyncParentAndChildrenStates(this, item, true);
        }
        this.fire('add', { item: item.node });
        this.fire('change');
    };
    function trySyncParentAndChildrenStates(control, item, toBeSelected) {
        trySyncChildrenStates(control, item, toBeSelected);
        trySyncParentStates(control, item, toBeSelected);
    }
    function trySyncChildrenStates(control, item, toBeSelected) {
        var indexData = control.indexData;
        var node = item.node;
        var children = node.children || [];
        u.each(children, function (child) {
            selectItem(control, child.id, toBeSelected);
            trySyncChildrenStates(control, indexData[child.id], toBeSelected);
        });
    }
    function trySyncParentStates(control, item, toBeSelected) {
        var indexData = control.indexData;
        var parentId = item.parentId;
        var parentItem = indexData[parentId];
        if (parentItem) {
            var brothers = parentItem.node.children || [];
            var allSelected = !u.find(brothers, function (brother) {
                return !control.getItemState(brother.id, 'isSelected');
            });
            if (toBeSelected && !control.parentBeyondChild && allSelected || !toBeSelected && control.parentDependChild && !allSelected) {
                selectItem(control, parentId, toBeSelected);
                trySyncParentStates(control, parentItem, toBeSelected);
            }
        }
    }
    exports.getSelectedItems = function () {
        if (!this.allData) {
            return [];
        }
        var selectedItems = [];
        var control = this;
        var copyData = u.deepClone(this.allData);
        this.walkTree(copyData, copyData.children, function (parent, child) {
            if (control.mode === 'delete' || control.getStateNode(child.id).isSelected) {
                selectedItems.push(child);
                child.children = null;
            }
        }, { traverse: 'breathFirst' });
        return selectedItems;
    };
    function getSelectedNodesUnder(parentNode, control) {
        var children = parentNode.children;
        return u.filter(children, function (node) {
            return this.getItemState(node.id, 'isSelected') || node.children && node.children.length;
        }, control);
    }
    exports.getSelectedTree = function () {
        var control = this;
        var copyData = u.deepClone(this.allData);
        this.walkTree(copyData, copyData.children, function (parent, child) {
            var selectedChildren = getSelectedNodesUnder(parent, control);
            parent.children = selectedChildren;
        });
        copyData.children = u.filter(copyData.children, function (node) {
            return node.children || control.indexData[node.id].isSelected;
        });
        return copyData;
    };
    exports.depthFirstWalkTree = function (parent, child, callback, options) {
        this.walkTree(child, child.children, callback, options);
        callback(parent, child);
    };
    exports.breathFirstWalkTree = function (parent, child, callback, options) {
        callback(parent, child);
        this.walkTree(child, child.children, callback, options);
    };
    exports.walkTree = function (parent, children, callback, options) {
        var traverse = null;
        if (options && options.traverse === 'breathFirst') {
            traverse = this.breathFirstWalkTree;
        } else {
            traverse = this.depthFirstWalkTree;
        }
        u.each(children, function (child, key) {
            traverse.call(this, parent, child, callback, options);
        }, this);
    };
    var TreeRichSelector = require('ub-ria-ui/TreeRichSelector');
    var CustomTreeRichSelector = require('eoo').create(TreeRichSelector, exports);
    require('esui').register(CustomTreeRichSelector);
    return CustomTreeRichSelector;
});
define('ssp-account/schema', ['require'], function (require) {
    var namePattern = /^[^@#$%^&*?!+_ =~`:;"\'|\\<>,.\/\{\}\[\]\(\)]+$/;
    return {
        formalName: [
            'string',
            '\u59D3\u540D',
            {
                maxLength: 100,
                pattern: namePattern
            }
        ],
        name: [
            'string',
            '\u7528\u6237\u540D',
            {
                maxLength: 32,
                pattern: namePattern
            }
        ],
        email: [
            'string',
            '\u7535\u5B50\u90AE\u4EF6',
            {
                required: true,
                maxLength: 100,
                pattern: /^([-+.\w]+)*@\w+([-.\w]+)*\.\w+([-.\w]+)*$/
            }
        ],
        password: [
            'string',
            '\u539F\u59CB\u5BC6\u7801',
            {
                required: true,
                minLength: 6,
                maxLength: 32
            }
        ],
        description: [
            'string',
            '\u5907\u6CE8',
            { maxLength: 1000 }
        ]
    };
});
define('ssp-account/phoneSchema', ['require'], function (require) {
    return {
        cellphone: [
            'string',
            '\u65B0\u624B\u673A\u53F7',
            {
                required: true,
                pattern: /^(1(3|4|5|8)\d{9})?$/
            }
        ],
        verifyCode: [
            'string',
            '\u9A8C\u8BC1\u7801',
            {
                required: true,
                minLength: 6,
                maxLength: 6,
                pattern: /^\d{6}$/
            }
        ]
    };
});
define('ssp-account/passwordSchema', ['require'], function (require) {
    return {
        password: [
            'string',
            '\u539F\u59CB\u5BC6\u7801',
            {
                required: true,
                minLength: 6,
                maxLength: 32
            }
        ],
        newPassword: [
            'string',
            '\u65B0\u5BC6\u7801',
            {
                required: true,
                minLength: 6,
                maxLength: 32
            }
        ]
    };
});
define('ssp-account/mvc/AccountPhoneFormView', [
    'require',
    'tpl!startup/template',
    'promise',
    '../util',
    'ub-ria/mvc/FormView',
    'eoo'
], function (require) {
    var VERIFY_CODE_INTERVAL = 60;
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'sspAccountPhoneForm';
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = {
            'send-verify-code:click': 'sendVerifyCode',
            'cellphone:beforevalidate': 'formatPhone'
        };
        this.addUIEvents(uiEvents);
    };
    exports.waitCancelConfirm = function () {
        return require('promise').resolve();
    };
    exports.sendVerifyCode = function () {
        var cellphone = this.get('cellphone');
        if (cellphone.validate()) {
            this.fire('requirevc', { cellphone: cellphone.getValue() });
            var button = this.get('send-verify-code');
            button.set('text', '\u9A8C\u8BC1\u7801\u53D1\u9001\u4E2D');
            button.disable();
        }
    };
    exports.formatPhone = function () {
        var phone = this.get('cellphone');
        var formatedPhoneNumber = require('../util').formatPhone(phone.getValue());
        phone.setValue(formatedPhoneNumber);
    };
    exports.startVerifyCodeCountdown = function () {
        var button = this.get('send-verify-code');
        button.disable();
        button.set('content', VERIFY_CODE_INTERVAL + '\u79D2\u2026\u2026');
        var remainingSeconds = VERIFY_CODE_INTERVAL;
        var countdown = this.countdown = setInterval(function () {
            remainingSeconds--;
            if (remainingSeconds) {
                button.set('content', remainingSeconds + '\u79D2\u2026\u2026');
            } else {
                button.set('content', '\u83B7\u53D6\u9A8C\u8BC1\u7801');
                button.enable();
                clearInterval(countdown);
            }
        }, 1000);
    };
    exports.notifyVerifyCodeSendFail = function () {
        var button = this.get('send-verify-code');
        button.enable();
    };
    exports.dispose = function () {
        clearInterval(this.countdown);
        this.$super(arguments);
    };
    var FormView = require('ub-ria/mvc/FormView');
    var AccountPhoneFormView = require('eoo').create(FormView, exports);
    return AccountPhoneFormView;
});
define('ssp-account/mvc/AccountPhoneFormModel', [
    'require',
    '../enum',
    'promise',
    'ub-ria/mvc/FormModel',
    'eoo'
], function (require) {
    var AccountModifyTarget = require('../enum').AccountModifyTarget;
    var exports = {};
    exports.findById = function () {
    };
    exports.updateEntity = function (entity) {
        var target = +this.get('target');
        switch (target) {
        case AccountModifyTarget.SELF:
            return this.data('global').updateUserPhone(entity);
        case AccountModifyTarget.MEMBER:
            return this.data('global').updateMemberPhone(entity);
        default:
            var error = new Error('Unexpected target parameter');
            return require('promise').reject(error);
        }
    };
    exports.sendVerifyCode = function (entity) {
        return this.data('global').sendMemberPhoneModificationVerifyCode(entity);
    };
    var FormModel = require('ub-ria/mvc/FormModel');
    var AccountPhoneFormModel = require('eoo').create(FormModel, exports);
    return AccountPhoneFormModel;
});
define('ssp-account/mvc/AccountPhoneForm', [
    'require',
    'ub-ria/util',
    'er/events',
    './AccountFieldForm',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var exports = {};
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('requirevc', onRequireVerifyCode, this);
    };
    function onRequireVerifyCode(e) {
        this.sendVerifyCode({ cellphone: e.cellphone });
    }
    exports.sendVerifyCode = function (data) {
        this.model.sendVerifyCode(data).then(u.bind(this.view.startVerifyCodeCountdown, this.view)).fail(u.bind(this.handleSencVerifyCodeError, this));
    };
    exports.handleSencVerifyCodeError = function (errors) {
        var handled = this.handleSubmitError(errors);
        if (!handled) {
            require('er/events').notifyError(errors.responseText);
        }
        this.view.notifyVerifyCodeSendFail(errors);
    };
    var AccountFieldForm = require('./AccountFieldForm');
    var AccountPhoneForm = require('eoo').create(AccountFieldForm, exports);
    return AccountPhoneForm;
});
define('ssp-account/mvc/AccountPasswordFormView', [
    'require',
    'ub-ria/util',
    'tpl!startup/template',
    'promise',
    'esui/validator/ValidityState',
    '../util',
    'ub-ria/mvc/FormView',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'sspAccountPasswordForm';
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = {
            'password:aftervalidate': onPasswordFieldValidate,
            'new-password:aftervalidate': onPasswordFieldValidate,
            'confirm-password:aftervalidate': onPasswordFieldValidate
        };
        this.addUIEvents(uiEvents);
    };
    exports.getEntity = function () {
        var entity = this.$super(arguments);
        return u.omit(entity, 'confirmPassword');
    };
    exports.waitCancelConfirm = function () {
        return require('promise').resolve();
    };
    function onPasswordFieldValidate(e) {
        this.validatePasswordCharacters(e.target.getValue(), e.validity);
    }
    exports.validatePasswordCharacters = function (password, validity) {
        var ValidityState = require('esui/validator/ValidityState');
        var isValid = require('../util').validatePasswordCharacters(password);
        var message = isValid ? '' : '\u5FC5\u987B\u5305\u542B\u5C0F\u5199\u5B57\u6BCD\u3001\u5927\u5199\u5B57\u6BCD\u548C\u963F\u62C9\u4F2F\u6570\u5B57\u4E09\u79CD\u5B57\u7B26';
        var state = new ValidityState(isValid, message);
        validity.addState('character', state);
    };
    var FormView = require('ub-ria/mvc/FormView');
    var AccountPasswordFormView = require('eoo').create(FormView, exports);
    return AccountPasswordFormView;
});
define('ssp-account/util', ['require'], function (require) {
    var UPPER_CASE_CHARACTER = /[A-Z]/;
    var LOWER_CASE_CHARACTER = /[a-z]/;
    var NUMBER = /[0-9]/;
    var LONG_PHONE_FORMAT = /^\d{3}-\d{4}-\d{4}$/;
    var exports = {};
    exports.validatePasswordCharacters = function (password) {
        return UPPER_CASE_CHARACTER.test(password) && LOWER_CASE_CHARACTER.test(password) && NUMBER.test(password);
    };
    exports.formatPhone = function (phone) {
        if (phone.indexOf('+86 ') === 0) {
            phone = phone.substring(4);
        }
        if (LONG_PHONE_FORMAT.test(phone)) {
            phone = phone.replace(/-/g, '');
        }
        return phone;
    };
    return exports;
});
define('ssp-account/mvc/AccountPasswordFormModel', [
    'require',
    'ub-ria/util',
    '../enum',
    'promise',
    '../util',
    'ub-ria/mvc/FormModel',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var AccountModifyTarget = require('../enum').AccountModifyTarget;
    var exports = {};
    exports.findById = function () {
    };
    exports.updateEntity = function (entity) {
        var target = +this.get('target');
        switch (target) {
        case AccountModifyTarget.SELF:
            return this.data('global').updateUserPassword(entity);
        case AccountModifyTarget.USER:
            entity.id = +this.get('user');
            return this.data().updatePassword(entity);
        default:
            var error = new Error('Unexpected target parameter');
            return require('promise').reject(error);
        }
    };
    exports.validateEntity = function (entity) {
        var errors = this.$super(arguments);
        u.each([
            'password',
            'newPassword'
        ], function (field) {
            var isValid = require('../util').validatePasswordCharacters(entity[field]);
            if (!isValid) {
                errors.push({
                    field: field,
                    message: '\u5FC5\u987B\u5305\u542B\u5C0F\u5199\u5B57\u6BCD\u3001\u5927\u5199\u5B57\u6BCD\u548C\u963F\u62C9\u4F2F\u6570\u5B57\u4E09\u79CD\u5B57\u7B26'
                });
            }
        });
        return errors;
    };
    var FormModel = require('ub-ria/mvc/FormModel');
    var AccountPasswordFormModel = require('eoo').create(FormModel, exports);
    return AccountPasswordFormModel;
});
define('ssp-account/mvc/AccountPasswordForm', [
    'require',
    './AccountFieldForm'
], function (require) {
    return require('./AccountFieldForm');
});
define('ssp-account/mvc/AccountMailFormView', [
    'require',
    'ub-ria/util',
    'tpl!startup/template',
    'promise',
    'ub-ria/mvc/FormView',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'sspAccountMailForm';
    exports.getEntity = function () {
        var entity = this.$super(arguments);
        return u.omit(entity, 'confirmEmail');
    };
    exports.waitCancelConfirm = function () {
        return require('promise').resolve();
    };
    var FormView = require('ub-ria/mvc/FormView');
    var AccountMailFormView = require('eoo').create(FormView, exports);
    return AccountMailFormView;
});
define('ssp-account/mvc/AccountMailFormModel', [
    'require',
    '../enum',
    'promise',
    'ub-ria/mvc/FormModel',
    'eoo'
], function (require) {
    var AccountModifyTarget = require('../enum').AccountModifyTarget;
    var exports = {};
    exports.findById = function () {
    };
    exports.updateEntity = function (entity) {
        var target = +this.get('target');
        switch (target) {
        case AccountModifyTarget.SELF:
            return this.data('global').updateUserMail(entity);
        case AccountModifyTarget.USER:
            entity.id = +this.get('user');
            return this.data().updateMail(entity);
        case AccountModifyTarget.MEMBER:
            return this.data('global').updateMemberMail(entity);
        default:
            var error = new Error('Unexpected target parameter');
            return require('promise').reject(error);
        }
    };
    var FormModel = require('ub-ria/mvc/FormModel');
    var AccountMailFormModel = require('eoo').create(FormModel, exports);
    return AccountMailFormModel;
});
define('ssp-account/mvc/AccountMailForm', [
    'require',
    './AccountFieldForm'
], function (require) {
    return require('./AccountFieldForm');
});
define('ssp-account/mvc/AccountInlineEditFormView', [
    'require',
    'ub-ria/mvc/FormView',
    'eoo'
], function (require) {
    var exports = {};
    exports.registerInlineEditField = function (field, options) {
        options = options || {};
        var form = this.getSafely(field + '-form');
        var editingFormFinished = onEditingFormFinished;
        if (options.editingFormFinished) {
            editingFormFinished = typeof options.editingFormFinished === 'function' ? options.editingFormFinished : onEditingFormFinished;
        }
        form.on('action@handlefinish', editingFormFinished, this);
        if (options.updateValue) {
            form.on('action@entitysave', typeof options.updateValue === 'function' ? options.updateValue : onEditingFormSaved, this);
        }
    };
    function onEditingFormSaved(e) {
        var editingField = e.target.id.slice(0, -5);
        this.updateEditingField(editingField, e.entity);
    }
    function onEditingFormFinished(e) {
        e.preventDefault();
        this.closeEditingForm(e.target.id.slice(0, -5));
    }
    exports.updateEditingField = function (editingField, newValue) {
        this.get(editingField + '-value').set('text', newValue);
    };
    exports.openEditingForm = function (editingField, actionOptions) {
        this.get(editingField).hide();
        var childActionPanel = this.get(editingField + '-form');
        childActionPanel.reload(actionOptions);
        childActionPanel.show();
    };
    exports.closeEditingForm = function (editingField) {
        this.get(editingField + '-form').hide();
        this.get(editingField).show();
    };
    var FormView = require('ub-ria/mvc/FormView');
    var AccountInlineEditFormView = require('eoo').create(FormView, exports);
    return AccountInlineEditFormView;
});
define('ssp-account/mvc/AccountInfoView', [
    'require',
    '../enum',
    'tpl!startup/template',
    './AccountInlineEditFormView',
    'eoo'
], function (require) {
    var AccountModifyTarget = require('../enum').AccountModifyTarget;
    var DivideStatus = require('../enum').DivideStatus;
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'sspAccountInfo';
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = {
            'modify-user-mail:click': 'modifyUserMail',
            'modify-user-password:click': 'modifyUserPassword',
            'modify-user-phone:click': 'modifyUserPhone',
            'modify-member-mail:click': 'modifyMemberMail',
            'modify-member-phone:click': 'modifyMemberPhone',
            'modify-member-real-name:click': 'modifyMemberRealName',
            'modify-member-address:click': 'modifyMemberAddress',
            'go-certification:click': onGoCertificationClick
        };
        this.addUIEvents(uiEvents);
    };
    exports.bindEvents = function () {
        this.$super(arguments);
        this.registerInlineEditField('user-mail');
        this.registerInlineEditField('user-password');
        this.registerInlineEditField('user-phone', { updateValue: true });
        this.registerInlineEditField('member-mail');
        this.registerInlineEditField('member-phone', { updateValue: true });
        this.registerInlineEditField('member-real-name', { updateValue: true });
        this.registerInlineEditField('member-address', {
            updateValue: onAddressEditingFormSaved,
            editingFormFinished: onAddressEditingFormFinished
        });
    };
    function onGoCertificationClick(e) {
        var isQualified = this.checkCertification();
        if (!isQualified) {
            e.preventDefault();
        }
    }
    function onAddressEditingFormFinished(e) {
        e.preventDefault();
        this.closeEditingForm('member-address');
        this.get('member-postcode-panel').show();
    }
    function onAddressEditingFormSaved(e) {
        this.updateEditingField('member-address', e.entity.address);
        this.updateEditingField('member-postcode', e.entity.postcode);
    }
    exports.modifyUserMail = function () {
        this.openEditingForm('user-mail', { target: AccountModifyTarget.SELF });
    };
    exports.modifyUserPassword = function () {
        this.openEditingForm('user-password', { target: AccountModifyTarget.SELF });
    };
    exports.modifyUserPhone = function () {
        this.openEditingForm('user-phone', { target: AccountModifyTarget.SELF });
    };
    exports.modifyMemberRealName = function () {
        this.openEditingForm('member-real-name', { target: AccountModifyTarget.MEMBER });
    };
    exports.modifyMemberMail = function () {
        this.openEditingForm('member-mail', { target: AccountModifyTarget.MEMBER });
    };
    exports.modifyMemberPhone = function () {
        this.openEditingForm('member-phone', { target: AccountModifyTarget.MEMBER });
    };
    exports.modifyMemberAddress = function () {
        this.get('member-postcode-panel').hide();
        this.openEditingForm('member-address', {});
    };
    exports.checkCertification = function () {
        if (!this.model.get('isFinanceInfoFilled') || this.model.get('user').divideStatus !== DivideStatus.NORMAL) {
            this.alert(this.model.get('noCertificationTip'), '\u65E0\u6CD5\u8FDB\u884C\u5B9E\u540D\u8BA4\u8BC1');
            return false;
        }
        return true;
    };
    var AccountInlineEditFormView = require('./AccountInlineEditFormView');
    var AccountInfoView = require('eoo').create(AccountInlineEditFormView, exports);
    return AccountInfoView;
});
define('ssp-finance/enum', [
    'exports',
    'er/Enum'
], function (exports, _erEnum) {
    Object.defineProperty(exports, '__esModule', { value: true });
    var _Enum = babelHelpers.interopRequireDefault(_erEnum);
    var UserAccountType = new _Enum['default']({
        alias: 'INDIVIDUAL',
        text: '\u4E2A\u4EBA',
        value: 0
    }, {
        alias: 'ENTERPRISE',
        text: '\u4F01\u4E1A',
        value: 1
    });
    exports.UserAccountType = UserAccountType;
    var FinanceStatus = new _Enum['default']({
        alias: 'UNAUDITED_NON_EXISTENT',
        text: '\u672A\u751F\u6548, \u672A\u5BA1\u6838',
        value: 0
    }, {
        alias: 'UNAUDITED_EXISTENT',
        text: '\u5DF2\u751F\u6548\u672A\u5BA1\u6838',
        value: 1
    }, {
        alias: 'AUDITING_NON_EXISTENT',
        text: '\u672A\u751F\u6548\u5BA1\u6838\u4E2D',
        value: 2
    }, {
        alias: 'AUDITING_EXISTENT',
        text: '\u5DF2\u751F\u6548\u5BA1\u6838\u4E2D',
        value: 3
    });
    exports.FinanceStatus = FinanceStatus;
    var KeepMoney = new _Enum['default']({
        alias: 'OFF',
        text: '\u4E0D\u4FDD\u7559\u6211\u7684\u6309\u6708\u4ED8\u6B3E',
        value: 0
    }, {
        alias: 'ON',
        text: '\u8BF7\u4FDD\u7559\u6211\u7684\u6309\u6708\u4ED8\u6B3E',
        value: 1
    });
    exports.KeepMoney = KeepMoney;
    var PayStatus = new _Enum['default']({
        alias: 'NOTPAY',
        text: '\u672A\u652F\u4ED8',
        value: 0
    }, {
        alias: 'PAID',
        text: '\u5DF2\u652F\u4ED8',
        value: 1
    }, {
        alias: 'INVALID',
        text: '\u5DF2\u4F5C\u5E9F',
        value: 2
    });
    exports.PayStatus = PayStatus;
    var PaymentStatus = new _Enum['default']({
        alias: 'PAYED',
        text: '\u5DF2\u652F\u4ED8'
    }, {
        alias: 'FAILED',
        text: '\u4ED8\u6B3E\u5931\u8D25'
    }, {
        alias: 'BFBACCEPTFAILED',
        text: '\u4ED8\u6B3E\u5931\u8D25'
    }, {
        alias: 'REFUND',
        text: '\u5DF2\u9000\u7968'
    });
    exports.PaymentStatus = PaymentStatus;
    var RepayStatus = new _Enum['default']({
        alias: 'NONE',
        text: '\u65E0\u64CD\u4F5C',
        value: 0
    }, {
        alias: 'ALLOW',
        text: '\u5141\u8BB8\u7533\u8BF7',
        value: 1
    }, {
        alias: 'FORBIDDEN',
        text: '\u4E0D\u5141\u8BB8\u7533\u8BF7',
        value: -1
    }, {
        alias: 'APPLIED',
        text: '\u5DF2\u7533\u8BF7\u8865\u4ED8',
        value: 2
    });
    exports.RepayStatus = RepayStatus;
    var BalanceStatus = new _Enum['default']({
        alias: 'KEEP_MONEY',
        text: '\u672C\u6708\u5DF2\u8BBE\u7F6E\u4ED8\u6B3E\u4FDD\u7559${tip}\uFF0C\u53EF\u5728\u4E2A\u4EBA\u4FE1\u606F\u9875\u9762\u4FEE\u6539\u8BBE\u7F6E\uFF0C\u65B0\u8BBE\u7F6E\u5C06\u4E8E\u4E0B\u6708\u751F\u6548\u3002',
        value: 0
    }, {
        alias: 'NOT_UP_TO_STANDARD',
        text: '\u5E94\u4ED8\u6536\u5165\uFF08\u7A0E\u524D\uFF09\u672A\u8FBE\u5230\u6700\u4F4E\u4ED8\u6B3E\u6807\u51C6${tip}\u3002',
        value: 1
    }, {
        alias: 'PAYING',
        text: '\u4ED8\u6B3E\u6B63\u5728\u8FDB\u884C\u4E2D${tip}\uFF0C\u8BF7\u8010\u5FC3\u7B49\u5F85\u3002',
        value: 2
    }, {
        alias: 'PAID',
        text: '\u4ED8\u6B3E\u5DF2\u7ECF\u5B8C\u6210${tip}\uFF0C\u8BF7\u6CE8\u610F\u67E5\u770B\u94F6\u884C\u8D26\u6237\u3002',
        value: 3
    }, {
        alias: 'PAY_FAILED',
        text: '\u4ED8\u6B3E\u5931\u8D25${tip}\uFF0C\u5E76\u8BF7\u786E\u8BA4\u8D22\u52A1\u4FE1\u606F\u662F\u5426\u6B63\u786E\uFF0C\u65B0\u8BBE\u7F6E\u5C06\u4E8E\u4E0B\u6708\u751F\u6548\u3002',
        value: 4
    }, {
        alias: 'RECEIPT_ERROR',
        text: '\u53D1\u7968\u4FE1\u606F\u6709\u8BEF\uFF0C\u8BF7\u6309\u63D0\u793A\u4FE1\u606F\u5F00\u5177\u6B63\u786E\u53D1\u7968\uFF0C\u5E76\u91CD\u65B0\u63D0\u4EA4${tip}\u3002',
        value: 5
    }, {
        alias: 'ID_ERROR',
        text: '\u60A8\u7684\u8EAB\u4EFD\u8BC1\u6CA1\u6709\u901A\u8FC7\u9A8C\u8BC1\uFF0C\u8BF7\u5BF9\u60A8\u7684\u8EAB\u4EFD\u8BC1\u8FDB\u884C\u9A8C\u8BC1${tip}\u3002',
        value: 6
    }, {
        alias: 'PAY_PAUSED',
        text: '\u672C\u6B21\u4ED8\u6B3E\u88AB\u6682\u505C${tip}\u3002',
        value: 7
    });
    exports.BalanceStatus = BalanceStatus;
    var TaxType = new _Enum['default']({
        alias: 'SALE',
        text: '\u8425\u4E1A\u7A0E',
        value: 0
    }, {
        alias: 'VAT_NORMAL',
        text: '\u589E\u503C\u7A0E\u666E\u901A',
        value: 1
    }, {
        alias: 'VAT_SPEC',
        text: '\u589E\u503C\u7A0E\u4E13\u7528',
        value: 2
    }, {
        alias: 'OVERSEAS',
        text: '\u5883\u5916',
        value: 3
    });
    exports.TaxType = TaxType;
    var TaxStatus = new _Enum['default']({
        alias: 'TAXING',
        text: '\u8BA1\u7A0E\u4E2D',
        value: 0
    }, {
        alias: 'TAXED',
        text: '\u5DF2\u8BA1\u7A0E',
        value: 1
    });
    exports.TaxStatus = TaxStatus;
    var TaxRate = new _Enum['default']({
        alias: 'SIX_PERCENT',
        text: '6%',
        value: 6
    }, {
        alias: 'THREE_PERENT',
        text: '3%',
        value: 3
    });
    exports.TaxRate = TaxRate;
    var InvoiceStatus = new _Enum['default']({
        alias: 'NOT_SUBMIT',
        text: '\u672A\u63D0\u4EA4',
        value: 0
    }, {
        alias: 'PENDING',
        text: '\u5F85\u5BA1\u6838',
        value: 1
    }, {
        alias: 'ACCEPTED',
        text: '\u5BA1\u6838\u901A\u8FC7',
        value: 2
    }, {
        alias: 'DENIED',
        text: '\u5BA1\u6838\u62D2\u7EDD',
        value: 3
    }, {
        alias: 'SUBMITTED',
        text: '\u5DF2\u63D0\u4EA4',
        value: 4
    }, {
        alias: 'REJECTED',
        text: '\u8D22\u52A1\u9A73\u56DE',
        value: 5
    }, {
        alias: 'SUSPENDED',
        text: '\u6682\u505C\u4ED8\u6B3E',
        value: 6
    }, {
        alias: 'FAILURE',
        text: '\u63D0\u4EA4\u5931\u8D25',
        value: 7
    });
    exports.InvoiceStatus = InvoiceStatus;
    var IndividualToEnterpriseReason = new _Enum['default']({
        alias: 'GROW_UP',
        text: '\u56E0\u53D1\u5C55\u58EE\u5927\u9700\u4F01\u4E1A\u8FD0\u8425',
        value: 0
    }, {
        alias: 'COOPERATE',
        text: '\u56E0\u5408\u4F5C\u9700\u4E3A\u4F01\u4E1A',
        value: 1
    });
    exports.IndividualToEnterpriseReason = IndividualToEnterpriseReason;
    var EnterpriseToEnterpriseReason = new _Enum['default']({
        alias: 'NAME_CHANGE',
        text: '\u56E0\u516C\u53F8\u540D\u79F0\u53D8\u66F4',
        value: 10
    }, {
        alias: 'COMPANY_DEPOSIT',
        text: '\u8D26\u6237\u4EE3\u7406\u516C\u53F8\u6258\u7BA1',
        value: 11
    }, {
        alias: 'KEEP_SAME',
        text: '\u56E0\u5408\u540C\u56E0\u7D20\uFF0C\u7F51\u7AD9\u5907\u6848\u4E3B\u4F53\u9700\u4E0E\u8D26\u53F7\u4E00\u81F4',
        value: 12
    });
    exports.EnterpriseToEnterpriseReason = EnterpriseToEnterpriseReason;
    var BaiDuRegistrationNumber = new _Enum['default']({
        alias: 'BAIDU_SHIDAI_WANGLUO_JISHU',
        text: '\u767E\u5EA6\u65F6\u4EE3\u7F51\u7EDC\u6280\u672F\uFF08\u5317\u4EAC\uFF09\u6709\u9650\u516C\u53F8',
        value: '911101087877515792'
    }, {
        alias: 'BAIDU_ZAIXIAN_WANGLUO_JISHU',
        text: '\u767E\u5EA6\u5728\u7EBF\u7F51\u7EDC\u6280\u672F\uFF08\u5317\u4EAC\uFF09\u6709\u9650\u516C\u53F8',
        value: '91110108717743469K'
    }, {
        alias: 'BEIJING_BAIDU_WANGXUN_KEJI',
        text: '\u5317\u4EAC\u767E\u5EA6\u7F51\u8BAF\u79D1\u6280\u6709\u9650\u516C\u53F8',
        value: '91110000802100433B'
    }, {
        alias: 'BAIDU_ZHONGGUO',
        text: '\u767E\u5EA6\uFF08\u4E2D\u56FD\uFF09\u6709\u9650\u516C\u53F8',
        value: '91310000775785552L'
    });
    exports.BaiDuRegistrationNumber = BaiDuRegistrationNumber;
});
define('ssp-account/mvc/AccountInfoModel', [
    'require',
    'ub-ria/util',
    '../enum',
    'ssp-finance/enum',
    'promise',
    'ub-ria/mvc/BaseModel',
    'eoo'
], function (require) {
    var u = require('ub-ria/util');
    var Certification = require('../enum').Certification;
    var UserAccountType = require('ssp-finance/enum').UserAccountType;
    var FinanceStatus = require('../enum').FinanceStatus;
    var exports = {};
    var MEMBER_INFO = {
        member: function (model) {
            return model.getMemberInfo();
        }
    };
    var USER_INFO = {
        user: function (model) {
            return model.getUserInfo();
        }
    };
    var FINANCE_INFO = {
        finance: function (model) {
            return model.getFinanceInfo();
        }
    };
    var CERTIFICATION_URL_TEMPLATE = {
        certificationURLTemplate: function (model) {
            return model.getCertificationURLTemplate();
        }
    };
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(MEMBER_INFO, 0);
        this.putDatasource(USER_INFO, 0);
        this.putDatasource(FINANCE_INFO, 0);
        this.putDatasource(CERTIFICATION_URL_TEMPLATE, 0);
    };
    exports.setGlobalData = function (globalData) {
        this.addData('global', globalData);
    };
    exports.setFinanceData = function (financeData) {
        this.addData('finance', financeData);
    };
    exports.prepare = function () {
        this.$super(arguments);
        this.prepareMemberInfo();
        this.prepareFinanceInfo();
        this.prepareCertificationURL();
    };
    exports.prepareMemberInfo = function () {
        var member = u.deepClone(this.get('member'));
        if (u.isEmpty(member)) {
            return;
        }
        member.certificationText = Certification.getTextFromValue(member.certification);
        member.requireCertification = member.certification === Certification.INVALID || member.certification === Certification.FAILED;
        member.certificationHrefText = member.certification === Certification.INVALID ? '\u7ACB\u523B\u8BA4\u8BC1' : '\u91CD\u65B0\u8BA4\u8BC1';
        this.set('member', member);
    };
    exports.prepareFinanceInfo = function () {
        var finance = u.deepClone(this.get('finance'));
        if (u.isEmpty(finance)) {
            return;
        }
        finance.userAccountTypeText = UserAccountType.getTextFromValue(finance.userAccountType);
        this.set('finance', finance);
        var isFinanceInfoFilled = finance.flag !== FinanceStatus.UNAUDITED_NON_EXISTENT && finance.flag !== FinanceStatus.AUDITING_NON_EXISTENT;
        this.set('isFinanceInfoFilled', isFinanceInfoFilled);
        this.set('UserAccountType', UserAccountType);
    };
    exports.prepareCertificationURL = function () {
        var template = this.get('certificationURLTemplate');
        var url = template.replace('${member}', this.get('user').memberId);
        this.set('certificationURL', url);
    };
    exports.getMemberInfo = function () {
        if (this.checkPermission('canViewMemberInfo')) {
            var globalData = this.data('global');
            return globalData.getMember();
        }
        return require('promise').resolve({});
    };
    exports.getUserInfo = function () {
        return this.data('global').getUser();
    };
    exports.getFinanceInfo = function () {
        if (this.checkPermission('canViewMemberInfo') && this.checkPermission('canViewFinanceInfo')) {
            var financeData = this.data('finance');
            return financeData.getFinanceInfo();
        }
        return require('promise').resolve({});
    };
    exports.getCertificationURLTemplate = function () {
        return this.data('global').getSystemProperty('certificationURL');
    };
    var BaseModel = require('ub-ria/mvc/BaseModel');
    var AccountInfoModel = require('eoo').create(BaseModel, exports);
    return AccountInfoModel;
});
define('ssp-account/mvc/AccountInfo', [
    'require',
    'ub-ria/mvc/BaseAction'
], function (require) {
    return require('ub-ria/mvc/BaseAction');
});
define('ssp-account/mvc/AccountFieldForm', [
    'require',
    'ub-ria/mvc/FormAction',
    'eoo'
], function (require) {
    var exports = {};
    exports.enter = function (actionContext) {
        actionContext.args.formType = 'update';
        actionContext.formType = 'update';
        return this.$super(arguments);
    };
    var FormAction = require('ub-ria/mvc/FormAction');
    var AccountFieldForm = require('eoo').create(FormAction, exports);
    return AccountFieldForm;
});
define('ssp-slot/filter', ['require'], function (require) {
    function hide(value) {
        return value ? 'data-ui-hidden=true' : '';
    }
    function disable(value) {
        return value ? 'data-ui-disabled=true' : '';
    }
    return {
        formatHexColor: function (value) {
            return value.charAt(0) === '#' ? value.slice(1) : value;
        },
        hide: hide,
        show: function (value) {
            return hide(!value);
        },
        disable: disable,
        enable: function (value) {
            return disable(!value);
        }
    };
});
define('tpl', [
    'require',
    'ub-ria/tpl',
    'etpl',
    'ssp-slot/filter'
], function (require) {
    var tpl = require('ub-ria/tpl');
    var etpl = require('etpl');
    tpl.registerControl('ssp-report/ui/BaseChart');
    tpl.registerControl('ssp-report/ui/LineChart');
    tpl.registerControl('ssp-report/ui/BarChart');
    tpl.registerControl('ssp-report/ui/RegionChart');
    tpl.registerControl('ssp-report/ui/ChartSerieSelector');
    tpl.registerControl('ssp-report/ui/DimensionSelector');
    tpl.registerControl('ssp-report/ui/RangeCalendarWithContrast');
    tpl.registerControl('ssp-report/ui/CommandCrumb');
    tpl.registerControl('ssp-report/ui/ToggleSubmitableTableRichSelector');
    tpl.registerControl('ssp-finance/ui/FilePreview');
    tpl.registerControl('ssp-finance/ui/FinanceUploader');
    tpl.registerExtension('ssp-finance/ui/extension/AutoComplete');
    tpl.registerExtension('ssp-finance/ui/extension/FinanceInvalidIndicator');
    tpl.registerExtension('ui/extension/RemoveBlank');
    tpl.registerControl('ssp-account/ui/CustomTreeRichSelector');
    var slotFilter = require('ssp-slot/filter');
    etpl.addFilter('formatHexColor', slotFilter.formatHexColor);
    etpl.addFilter('hide', slotFilter.hide);
    etpl.addFilter('show', slotFilter.show);
    etpl.addFilter('disable', slotFilter.disable);
    etpl.addFilter('enable', slotFilter.enable);
    tpl.registerExtension('ssp-slot/ui/extension/ConvertToNumber');
    tpl.registerExtension('ssp-slot/ui/extension/ConvertToColorString');
    tpl.registerExtension('ssp-slot/ui/extension/FlatBoxGroupValue');
    tpl.registerExtension('ui/extension/ValidationCleaner');
    tpl.registerExtension('ui/extension/EncodeFilter');
    tpl.registerExtension('ui/extension/EventBinder');
    tpl.registerControl('slot/ui/Iframe');
    return tpl;
});
define('ssp-account/mvc/AccountCertifyDetailView', [
    'require',
    'tpl!startup/template',
    'ub-ria/mvc/BaseView',
    'eoo'
], function (require) {
    require('tpl!startup/template');
    var exports = {};
    exports.template = 'sspAccountCertifyDetail';
    exports.enterDocument = function () {
        this.$super(arguments);
        var certifyClass = this.model.get('certifyClass');
        this.getGroup('section')[certifyClass].set('expanded', true);
    };
    var BaseView = require('ub-ria/mvc/BaseView');
    var AccountCertifyDetailView = require('eoo').create(BaseView, exports);
    return AccountCertifyDetailView;
});
define('ssp-account/mvc/AccountCertifyDetailModel', [
    'require',
    '../enum',
    'ub-ria/mvc/BaseModel',
    'eoo'
], function (require) {
    var CertifyClass = require('../enum').CertifyClass;
    var exports = {};
    var MEMBER_INFO_DATASOURCE = {
        member: {
            retrieve: function (model) {
                return model.getMemberInfo();
            },
            dump: true
        }
    };
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(MEMBER_INFO_DATASOURCE, 0);
    };
    exports.setGlobalData = function (globalData) {
        this.addData('global', globalData);
    };
    exports.prepare = function () {
        this.$super(arguments);
        this.prepareCertifyClass();
    };
    exports.prepareCertifyClass = function () {
        var certifyClass = this.get('certifyClass');
        var text = CertifyClass.getTextFromValue(certifyClass);
        this.set('certifyClassText', text);
    };
    exports.getMemberInfo = function () {
        var globalData = this.data('global');
        return globalData.getMember();
    };
    var BaseModel = require('ub-ria/mvc/BaseModel');
    var AccountCertifyDetailModel = require('eoo').create(BaseModel, exports);
    return AccountCertifyDetailModel;
});
define('ssp-account/mvc/AccountCertifyDetail', [
    'require',
    'ub-ria/mvc/BaseAction'
], function (require) {
    return require('ub-ria/mvc/BaseAction');
});
define('ssp-account/mailSchema', ['require'], function (require) {
    return {
        email: [
            'string',
            '\u7535\u5B50\u90AE\u4EF6',
            {
                required: true,
                maxLength: 100,
                pattern: /^\w[-+.\w]*@\w[-\w]*(\.\w[-\w]*)+$/
            }
        ]
    };
});
define('ssp-account/enum', [
    'require',
    'er/Enum'
], function (require) {
    var Enum = require('er/Enum');
    var exports = {};
    exports.Status = new Enum({
        alias: 'REMOVED',
        text: '\u5220\u9664'
    }, {
        alias: 'INACTIVE',
        text: '\u5F85\u6FC0\u6D3B'
    }, {
        alias: 'EXPIRED',
        text: '\u5DF2\u8FC7\u671F'
    }, {
        alias: 'ACTIVATED',
        text: '\u5DF2\u6FC0\u6D3B'
    });
    exports.CertifyClass = new Enum({
        alias: 'NORMAL',
        text: '\u666E\u901A\u8BA4\u8BC1'
    }, {
        alias: 'GODEN',
        text: '\u9EC4\u91D1\u8BA4\u8BC1'
    }, {
        alias: 'PLATINUM',
        text: '\u767D\u91D1\u8BA4\u8BC1'
    }, {
        alias: 'DIAMOND',
        text: '\u94BB\u77F3\u8BA4\u8BC1'
    });
    exports.Certification = new Enum({
        alias: 'ERROR',
        text: '\u83B7\u53D6\u4FE1\u606F\u5931\u8D25',
        value: -1
    }, {
        alias: 'INVALID',
        text: '\u672A\u9A8C\u8BC1',
        value: 0
    }, {
        alias: 'AUDITED',
        text: '\u5DF2\u9A8C\u8BC1',
        value: 2
    }, {
        alias: 'FAILED',
        text: '\u5BA1\u6838\u672A\u901A\u8FC7',
        value: 4
    }, {
        alias: 'AUDITING',
        text: '\u5BA1\u6838\u4E2D',
        value: 6
    });
    exports.AccountModifyTarget = new Enum({
        alias: 'SELF',
        text: '\u5F53\u524D\u5E10\u53F7\u4FE1\u606F'
    }, {
        alias: 'USER',
        text: '\u5E10\u53F7\u4FE1\u606F'
    }, {
        alias: 'MEMBER',
        text: '\u4F1A\u5458\u4FE1\u606F'
    });
    exports.ReadWrite = new Enum({
        alias: 'CREATE',
        text: '\u8BFB\u5199'
    }, {
        alias: 'VIEW',
        text: '\u53EA\u8BFB'
    });
    exports.OrderScope = new Enum({
        alias: 'ALL',
        text: '\u5168\u90E8'
    }, {
        alias: 'SELF',
        text: '\u4EC5\u81EA\u5DF1'
    });
    exports.SlotScope = new Enum({
        alias: 'UNLIMIT',
        text: '\u4E0D\u9650'
    }, {
        alias: 'SPECIFIC',
        text: '\u4EC5\u6307\u5B9A'
    });
    exports.CreativeScope = new Enum({
        alias: 'ALL',
        text: '\u5168\u90E8'
    }, {
        alias: 'SELF',
        text: '\u4EC5\u81EA\u5DF1'
    });
    exports.HybridSlotGroupType = new Enum({
        alias: 'SLOT_GROUP',
        text: '\u4EE3\u7801\u4F4D\u5206\u7EC4'
    }, {
        alias: 'SLOT',
        text: '\u4EE3\u7801\u4F4D'
    });
    exports.WarrantStatus = new Enum({
        alias: 'APPLYING',
        text: '\u6388\u4FE1\u4E2D',
        value: 1
    }, {
        alias: 'SUCCESS',
        text: '\u6388\u4FE1\u6210\u529F',
        value: 2
    }, {
        alias: 'REFUSED',
        text: '\u6388\u4FE1\u62D2\u7EDD',
        value: 3
    });
    exports.DivideStatus = new Enum({
        alias: 'SYSTEM_CLOSED',
        text: '\u7CFB\u7EDF\u5173\u95ED',
        value: 0
    }, {
        alias: 'NORMAL',
        text: '\u53C2\u4E0E\u5206\u8D26',
        value: 1
    }, {
        alias: 'MANAGER_CLOSED',
        text: '\u7BA1\u7406\u5458\u5173\u95ED',
        value: 2
    });
    exports.FinanceStatus = new Enum({
        alias: 'UNAUDITED_NON_EXISTENT',
        text: '\u672A\u751F\u6548, \u672A\u5BA1\u6838',
        value: 0
    }, {
        alias: 'UNAUDITED_EXISTENT',
        text: '\u5DF2\u751F\u6548\u672A\u5BA1\u6838',
        value: 1
    }, {
        alias: 'AUDITING_NON_EXISTENT',
        text: '\u672A\u751F\u6548\u5BA1\u6838\u4E2D',
        value: 2
    }, {
        alias: 'AUDITING_EXISTENT',
        text: '\u5DF2\u751F\u6548\u5BA1\u6838\u4E2D',
        value: 3
    });
    return exports;
});
define('startup/biz', [], {});