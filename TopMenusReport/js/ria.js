/*! 2018 Baidu Inc. All Rights Reserved */
void function (define, undefined) {
    define('uioc/operator/Setter', [
        'require',
        '../util'
    ], function (require) {
        var u = require('../util');
        var SETTER_REGEX = /^set[A-Z]/;
        var SET_LEGTH = 'set'.length;
        function Setter(context) {
            this.context = context;
        }
        Setter.prototype.resolveDependencies = function resolveDependencies(config, instance) {
            if (config.setterDeps || !config.auto) {
                return config;
            }
            var exclude = config.properties || {};
            var deps = [];
            var context = this.context;
            var prop = null;
            if (typeof Object.getOwnPropertyNames === 'function' && typeof Object.getPrototypeOf === 'function') {
                var resultSet = Object.create(null);
                for (var proto = instance; proto; proto = Object.getPrototypeOf(proto)) {
                    var properties = Object.getOwnPropertyNames(proto);
                    for (var i = 0, len = properties.length; i < len; ++i) {
                        prop = properties[i];
                        if (!resultSet[prop]) {
                            resultSet[prop] = true;
                            prop = this.getPropertyFromSetter(instance, prop);
                            prop && !u.hasOwn(exclude, prop) && context.hasComponent(prop) && deps.push(prop);
                        }
                    }
                }
            } else {
                for (var k in instance) {
                    prop = this.getPropertyFromSetter(instance, k);
                    prop && !u.hasOwn(exclude, prop) && context.hasComponent(prop) && deps.push(prop);
                }
            }
            config.setterDeps = deps;
            return config;
        };
        Setter.prototype.has = function (obj) {
            return u.isObject(obj) && typeof obj.$setter === 'string';
        };
        Setter.prototype.getPropertyFromSetter = function (instance, name) {
            var prop = null;
            if (typeof instance[name] === 'function' && SETTER_REGEX.test(name)) {
                prop = name.charAt(SET_LEGTH).toLowerCase() + name.slice(SET_LEGTH + 1);
            }
            return prop;
        };
        Setter.prototype.setProperty = function (instance, propertyName, value, setterName) {
            if (setterName) {
                return instance[setterName](value);
            }
            var method = 'set' + propertyName.charAt(0).toUpperCase() + propertyName.slice(1);
            typeof instance[method] === 'function' ? instance[method](value) : instance[propertyName] = value;
        };
        return Setter;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

void function (define, undefined) {
    define('uioc/operator/Map', [
        'require',
        '../util'
    ], function (require) {
        var u = require('../util');
        function Map(context) {
            this.context = context;
        }
        Map.prototype.process = function process(config) {
            var args = config.args;
            for (var i = 0, len = args.length; i < len; ++i) {
                var arg = args[i];
                if (this.has(arg)) {
                    args[i] = {
                        $import: Map.MAP_COMPONENT_ID,
                        properties: arg.$map
                    };
                }
            }
            var properties = config.properties;
            for (var k in properties) {
                var property = properties[k];
                if (this.has(property)) {
                    properties[k] = {
                        $import: Map.MAP_COMPONENT_ID,
                        properties: property.$map
                    };
                }
            }
            return config;
        };
        Map.prototype.has = function (obj) {
            return u.isObject(obj) && u.isObject(obj.$map);
        };
        Map.MAP_COMPONENT_CONFIG = {
            creator: Object,
            isFactory: true
        };
        Map.MAP_COMPONENT_ID = new Date().getTime() + '_map';
        return Map;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

void function (define, undefined) {
    define('uioc/operator/List', [
        'require',
        '../util'
    ], function (require) {
        var u = require('../util');
        function List(context) {
            this.context = context;
        }
        List.prototype.process = function process(config) {
            var args = config.args;
            for (var i = 0, len = args.length; i < len; ++i) {
                var arg = args[i];
                if (this.has(arg)) {
                    args[i] = {
                        $import: List.LIST_COMPONENT_ID,
                        args: arg.$list
                    };
                }
            }
            var properties = config.properties;
            for (var k in properties) {
                var property = properties[k];
                if (this.has(property)) {
                    properties[k] = {
                        $import: List.LIST_COMPONENT_ID,
                        args: property.$list
                    };
                }
            }
            return config;
        };
        List.prototype.has = function (obj) {
            return u.isObject(obj) && obj.$list instanceof Array;
        };
        List.LIST_COMPONENT_CONFIG = {
            creator: function () {
                return [].slice.call(arguments, 0);
            },
            isFactory: true
        };
        List.LIST_COMPONENT_ID = new Date().getTime() + '_list';
        return List;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

void function (define, undefined) {
    define('uioc/operator/Import', [
        'require',
        '../util'
    ], function (require) {
        var u = require('../util');
        var ANONY_PREFIX = '^uioc-';
        function Import(context) {
            this.context = context;
        }
        Import.prototype.process = function process(config) {
            config.anonyDeps = config.anonyDeps || this.transformAnonymousComponents(config);
            return config;
        };
        Import.prototype.has = function (obj) {
            return u.isObject(obj) && typeof obj.$import === 'string';
        };
        Import.prototype.transformAnonymousComponents = function transformAnonymousComponents(config) {
            var deps = [];
            var args = config.args;
            var id = null;
            for (var i = args.length - 1; i > -1; --i) {
                if (this.has(args[i])) {
                    id = this.createAnonymousConfig(config, args[i], '$arg.' + i + '.');
                    args[i] = { $ref: id };
                    deps.push(id);
                }
            }
            var props = config.properties;
            for (var k in props) {
                if (this.has(props[k])) {
                    id = this.createAnonymousConfig(config, props[k], '$prop.' + k + '.');
                    props[k] = { $ref: id };
                    deps.push(id);
                }
            }
            return deps;
        };
        Import.prototype.createAnonymousConfig = function createAnonymousConfig(componentConfig, config, idPrefix) {
            var importId = config && config.$import;
            if (!this.context.hasComponent(importId)) {
                throw new Error('$import `%s` component, but it is not exist, please check!!', config.$import);
            }
            var refConfig = this.context.getComponentConfig(importId);
            var id = componentConfig.id + '-' + idPrefix + importId;
            config.id = id = (id.indexOf(ANONY_PREFIX) !== -1 ? '' : ANONY_PREFIX) + id;
            config.$import = null;
            this.context.addComponent(id, u.merge(refConfig, config));
            return id;
        };
        return Import;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});



void function (define, undefined) {
    define('uioc/operator/Ref', [
        'require',
        '../util'
    ], function (require) {
        var u = require('../util');
        function Ref(context) {
            this.context = context;
        }
        Ref.prototype.process = function process(config) {
            config.argDeps = config.argDeps || this.getDependenciesFromArgs(config.args);
            config.propDeps = config.propDeps || this.getDependenciesFromProperties(config.properties);
            return config;
        };
        Ref.prototype.has = function (obj) {
            return u.isObject(obj) && typeof obj.$ref === 'string';
        };
        Ref.prototype.getDependenciesFromArgs = function getDependenciesFromArgs(args) {
            var deps = [];
            for (var i = args.length - 1; i > -1; --i) {
                this.has(args[i]) && u.addToSet(deps, args[i].$ref);
            }
            return deps;
        };
        Ref.prototype.getDependenciesFromProperties = function getDependenciesFromProperties(properties) {
            var deps = [];
            for (var k in properties) {
                if (u.hasOwn(properties, k)) {
                    var prop = properties[k];
                    this.has(prop) && u.addToSet(deps, prop.$ref);
                }
            }
            return deps;
        };
        return Ref;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

void function (define, global, undefined) {
    define('uioc/main', [
        'require',
        './Injector',
        './util',
        './operator/Ref',
        './operator/Import',
        './operator/Setter',
        './operator/List',
        './operator/Map',
        './Loader'
    ], function (require) {
        var Injector = require('./Injector');
        var u = require('./util');
        var Ref = require('./operator/Ref');
        var Import = require('./operator/Import');
        var Setter = require('./operator/Setter');
        var List = require('./operator/List');
        var Map = require('./operator/Map');
        var Loader = require('./Loader');
        var globalLoader = global.require;
        function IoC(config) {
            config = config || {};
            if (!(this instanceof IoC)) {
                return new IoC(config);
            }
            this.loader = new Loader(this);
            this.setLoaderFunction(config.loader || globalLoader);
            this.components = {};
            this.operators = {
                opImport: new Import(this),
                ref: new Ref(this),
                setter: new Setter(this),
                list: new List(this),
                map: new Map(this)
            };
            this.injector = new Injector(this);
            this.addComponent(List.LIST_COMPONENT_ID, List.LIST_COMPONENT_CONFIG);
            this.addComponent(Map.MAP_COMPONENT_ID, Map.MAP_COMPONENT_CONFIG);
            this.addComponent(config.components || {});
        }
        IoC.prototype.addComponent = function (id, config) {
            if (typeof id === 'string') {
                var conf = {};
                conf[id] = config;
                this.addComponent(conf);
            } else {
                for (var k in id) {
                    if (this.hasComponent(k)) {
                        u.warn(k + ' has been add! This will be no effect');
                        continue;
                    }
                    this.components[k] = createComponent.call(this, k, id[k]);
                }
            }
        };
        IoC.prototype.getComponent = function (ids, cb) {
            ids = ids instanceof Array ? ids : [ids];
            var moduleMap = {};
            for (var i = 0, len = ids.length; i < len; ++i) {
                var id = ids[i];
                if (!this.hasComponent(id)) {
                    u.warn('`%s` has not been added to the Ioc', id);
                } else {
                    var config = this.getComponentConfig(id);
                    this.processStaticConfig(id);
                    moduleMap = this.loader.resolveDependentModules(config, moduleMap, config.argDeps);
                }
            }
            this.loader.loadModuleMap(moduleMap, u.bind(createInstances, this, ids, cb));
            return this;
        };
        IoC.prototype.hasComponent = function (id) {
            return !!this.components[id];
        };
        IoC.prototype.getComponentConfig = function (id) {
            return id ? this.components[id] : this.components;
        };
        IoC.prototype.processStaticConfig = function (id) {
            var config = this.getComponentConfig(id);
            this.operators.list.process(config);
            this.operators.map.process(config);
            this.operators.opImport.process(config);
            this.operators.ref.process(config);
        };
        IoC.prototype.setLoaderFunction = function (amdLoader) {
            this.loader.setLoaderFunction(amdLoader);
        };
        IoC.prototype.dispose = function () {
            this.injector.dispose();
            this.components = null;
        };
        function createComponent(id, config) {
            var component = {
                id: id,
                args: config.args || [],
                properties: config.properties || {},
                anonyDeps: null,
                argDeps: null,
                propDeps: null,
                setterDeps: null,
                scope: config.scope || 'transient',
                creator: config.creator || null,
                module: config.module || undefined,
                isFactory: !!config.isFactory,
                auto: !!config.auto,
                instance: null
            };
            typeof component.creator === 'function' && this.loader.wrapCreator(component);
            return component;
        }
        function createInstances(ids, cb) {
            var instances = new Array(ids.length);
            if (ids.length === 0) {
                return cb.apply(null, instances);
            }
            var injector = this.injector;
            var loader = this.loader;
            var context = this;
            var moduleMap = {};
            var count = ids.length;
            var done = function () {
                --count === 0 && cb.apply(null, instances);
            };
            var task = function (index, config) {
                return function (instance) {
                    instances[index] = instance;
                    if (config) {
                        context.operators.setter.resolveDependencies(config, instance);
                        moduleMap = loader.resolveDependentModules(config, {}, config.propDeps.concat(config.setterDeps));
                        loader.loadModuleMap(moduleMap, u.bind(injector.injectDependencies, injector, instance, config, done));
                    } else {
                        done();
                    }
                };
            };
            for (var i = ids.length - 1; i > -1; --i) {
                var component = this.hasComponent(ids[i]) ? this.getComponentConfig(ids[i]) : null;
                injector.createInstance(component, task(i, component));
            }
        }
        return IoC;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
}, this);

define('uioc', ['uioc/main'], function (main) { return main; });

void function (define, undefined) {
    define('uioc/Loader', [
        'require',
        './DependencyTree',
        './util'
    ], function (require) {
        var DependencyTree = require('./DependencyTree');
        var u = require('./util');
        function CreatorFactory(creator, args) {
            return creator.apply(this, args);
        }
        function Loader(context) {
            this.context = context;
        }
        Loader.prototype.setLoaderFunction = function (amdGlobalLoader) {
            this.amdLoader = amdGlobalLoader;
        };
        Loader.prototype.resolveDependentModules = function (componentConfig, result, deps) {
            return getDependentModules(componentConfig, this.context, result || {}, new DependencyTree(), deps);
        };
        function getDependentModules(component, context, result, depTree, deps) {
            var module = component.module;
            if (typeof component.creator !== 'function' && module) {
                result[module] = result[module] || [];
                result[module].push(component);
            }
            context.processStaticConfig(component.id);
            var circular = depTree.checkForCircular(component.id);
            if (circular) {
                var msg = component.id + ' has circular dependencies ';
                throw new u.CircularError(msg, component);
            }
            depTree.addData(component);
            var child = depTree.appendChild(new DependencyTree());
            deps = deps || component.argDeps.concat(component.propDeps).concat(component.setterDeps || []);
            for (var i = deps.length - 1; i > -1; --i) {
                if (context.hasComponent(deps[i])) {
                    getDependentModules(context.getComponentConfig(deps[i]), context, result, child);
                }
            }
            return result;
        }
        Loader.prototype.loadModuleMap = function loadModuleMap(moduleMap, cb) {
            var modules = u.keys(moduleMap);
            var me = this;
            this.amdLoader(modules, function () {
                for (var i = arguments.length - 1; i > -1; --i) {
                    var factory = arguments[i];
                    var configArray = moduleMap[modules[i]];
                    for (var j = configArray.length - 1; j > -1; --j) {
                        var config = configArray[j];
                        typeof config.creator !== 'function' && me.wrapCreator(config, factory);
                    }
                }
                cb();
            });
        };
        Loader.prototype.wrapCreator = function wrapCreator(config, factory) {
            var creator = config.creator = config.creator || factory;
            if (typeof creator === 'string') {
                var method = factory[creator];
                var moduleFactory = function () {
                    return method.apply(factory, arguments);
                };
                creator = !config.isFactory || config.scope === 'static' ? method : moduleFactory;
                config.creator = creator;
            }
            if (!config.isFactory && config.scope !== 'static') {
                config.creator = function () {
                    CreatorFactory.prototype = creator.prototype;
                    return new CreatorFactory(creator, arguments);
                };
            }
        };
        return Loader;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

void function (define, undefined) {
    define('uioc/util', [], function () {
        var nativeIndexOf = Array.prototype.indexOf;
        var slice = Array.prototype.slice;
        var nativeBind = Function.prototype.bind;
        function hasOwnProperty(object, key) {
            return Object.prototype.hasOwnProperty.call(object, key);
        }
        function indexOf(arr, el) {
            if (typeof nativeIndexOf === 'function' && arr.indexOf === nativeIndexOf) {
                return arr.indexOf(el);
            }
            for (var i = 0, len = arr.length; i < len; ++i) {
                if (arr[i] === el) {
                    return i;
                }
            }
            return -1;
        }
        function contains(arr, el) {
            return indexOf(arr, el) > -1;
        }
        function addToSet(arr, el) {
            !contains(arr, el) && arr.push(el);
        }
        function warn() {
            if (typeof console !== 'undefined') {
                Function.prototype.apply.call(console.warn, console, arguments);
            }
        }
        function isObject(obj) {
            return obj !== null && obj !== undefined && Object.prototype.toString.call(obj) === '[object Object]';
        }
        function hasReference(obj) {
            return isObject(obj) && typeof obj.$ref === 'string';
        }
        function bind(fn) {
            var args = slice.call(arguments, 1);
            if (typeof fn.bind === 'function' && fn.bind === nativeBind) {
                return fn.bind.apply(fn, args);
            }
            return function () {
                var scope = args.shift();
                args.push.apply(args, arguments);
                Function.prototype.apply.call(fn, scope, args);
            };
        }
        function merge() {
            var ret = {};
            for (var i = 0, len = arguments.length; i < len; ++i) {
                var arg = arguments[i];
                for (var k in arg) {
                    ret[k] = arg[k];
                }
            }
            return ret;
        }
        function keys(obj) {
            if (typeof Object.keys === 'function') {
                return Object.keys(obj);
            }
            var result = [];
            for (var k in obj) {
                result.push(k);
            }
            return result;
        }
        function CircularError(message, component) {
            this.message = message;
            this.component = component;
        }
        CircularError.prototype = Error.prototype;
        CircularError.prototype.print = function () {
            warn(this.message);
        };
        return {
            CircularError: CircularError,
            hasOwn: hasOwnProperty,
            contains: contains,
            addToSet: addToSet,
            merge: merge,
            isObject: isObject,
            bind: bind,
            indexOf: indexOf,
            hasReference: hasReference,
            warn: warn,
            keys: keys
        };
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

void function (define) {
    define('uioc/Injector', [
        'require',
        './util'
    ], function (require) {
        var u = require('./util');
        function Injector(context) {
            this.context = context;
            this.singletons = {};
        }
        Injector.prototype.createInstance = function (component, cb) {
            if (!component) {
                return cb(null);
            }
            var id = component.id;
            if (component.scope === 'singleton' && u.hasOwn(this.singletons, id)) {
                return cb(this.singletons[id]);
            }
            if (component.scope === 'static') {
                return cb(component.creator);
            }
            var me = this;
            this.injectArgs(component, function (args) {
                var instance = component.creator.apply(null, args);
                if (component.scope === 'singleton') {
                    me.singletons[id] = instance;
                }
                cb(instance);
            });
        };
        Injector.prototype.injectArgs = function (componentConfig, cb) {
            var argConfigs = componentConfig.args;
            var count = argConfigs.length;
            var args = new Array(count);
            var ref = this.context.operators.ref;
            if (!count) {
                return cb(args);
            }
            var done = function (index) {
                return function (instance) {
                    args[index] = instance;
                    --count === 0 && cb(args);
                };
            };
            for (var i = argConfigs.length - 1; i > -1; --i) {
                var arg = argConfigs[i];
                ref.has(arg) ? this.context.getComponent(arg.$ref, done(i)) : done(i)(arg);
            }
        };
        Injector.prototype.injectProperties = function injectProperties(instance, componentConfig, cb) {
            var deps = componentConfig.propDeps;
            var props = componentConfig.properties;
            var ref = this.context.operators.ref;
            var setter = this.context.operators.setter;
            this.context.getComponent(deps, function () {
                for (var k in props) {
                    var property = props[k];
                    var value = ref.has(property) ? arguments[u.indexOf(deps, property.$ref)] : property;
                    setter.setProperty(instance, k, value, setter.has(property) && property.$setter);
                }
                cb();
            });
        };
        Injector.prototype.injectSetters = function (instance, componentConfig, cb) {
            var deps = componentConfig.setterDeps || [];
            var setter = this.context.operators.setter;
            this.context.getComponent(deps, function () {
                for (var i = deps.length - 1; i > -1; --i) {
                    var dep = deps[i];
                    setter.setProperty(instance, dep, arguments[i]);
                }
                cb();
            });
        };
        Injector.prototype.injectDependencies = function (instance, componentConfig, cb) {
            var complete = {
                prop: false,
                setter: false
            };
            var done = function (type) {
                complete[type] = true;
                complete.prop && complete.setter && cb();
            };
            this.injectProperties(instance, componentConfig, u.bind(done, null, 'prop'));
            this.injectSetters(instance, componentConfig, u.bind(done, null, 'setter'));
        };
        Injector.prototype.dispose = function () {
            var singletons = this.singletons;
            for (var k in singletons) {
                var instance = singletons[k];
                instance && typeof instance.dispose === 'function' && instance.dispose();
            }
            this.singletons = null;
        };
        return Injector;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

void function (define) {
    define('uioc/DependencyTree', [], function () {
        var DependencyNode = function () {
            this.data = [];
            this.children = [];
            this.parent = null;
        };
        DependencyNode.prototype.appendChild = function (node) {
            node.parent = this;
            this.children.push(node);
            return node;
        };
        DependencyNode.prototype.checkForCircular = function (id) {
            var node = this.parent;
            if (node !== null) {
                var data = node.data;
                for (var i = data.length - 1; i > -1; --i) {
                    if (node.data[i].id && node.data[i].id === id) {
                        return node.data[i];
                    }
                    return node.checkForCircular(id);
                }
            }
            return null;
        };
        DependencyNode.prototype.addData = function (data, checkForCircular) {
            checkForCircular = !!checkForCircular;
            if (checkForCircular && this.checkForCircular(data.id)) {
                return false;
            }
            this.data.push(data);
            return true;
        };
        return DependencyNode;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

define('ub-ria-ui/shim', ['require'], function (require) {
    document.createElement('esui-drawer-action-panel');
});

define('ub-ria-ui/TreeRichSelector', [
    'require',
    'esui/Tree',
    'esui/main',
    'esui/lib',
    'underscore',
    './util',
    './RichSelector',
    './SelectorTreeStrategy',
    'esui/painters',
    'eoo',
    'esui'
], function (require) {
    require('esui/Tree');
    var ui = require('esui/main');
    var lib = require('esui/lib');
    var u = require('underscore');
    var util = require('./util');
    var RichSelector = require('./RichSelector');
    var TreeStrategy = require('./SelectorTreeStrategy');
    var exports = {};
    exports.type = 'TreeRichSelector';
    exports.styleType = 'RichSelector';
    exports.initOptions = function (options) {
        var properties = {
            datasource: null,
            orientExpand: false,
            wideToggleArea: false,
            onlyLeafSelect: true,
            allowUnselectNode: false,
            hideRoot: true,
            needSyncParentChild: true,
            caseSensitive: false
        };
        lib.extend(properties, options);
        if (properties.onlyLeafSelect === 'false') {
            properties.onlyLeafSelect = false;
        }
        if (properties.orientExpand === 'false') {
            properties.orientExpand = false;
        }
        if (properties.hideRoot === 'false') {
            properties.hideRoot = false;
        }
        if (properties.wideToggleArea === 'false') {
            properties.wideToggleArea = false;
        }
        if (properties.multi === 'false') {
            properties.multi = false;
        }
        if (properties.needSyncParentChild === 'false') {
            properties.needSyncParentChild = false;
        }
        if (properties.caseSensitive === 'false') {
            properties.caseSensitive = false;
        }
        this.$super([properties]);
    };
    exports.initStructure = function () {
        this.$super(arguments);
        lib.addClass(this.main, 'ui-tree-richselector');
        if (this.onlyLeafSelect) {
            this.addState('only-leaf-selectable');
        }
    };
    exports.repaint = require('esui/painters').createRepaint(RichSelector.prototype.repaint, {
        name: 'datasource',
        paint: function (control, datasource) {
            control.refresh();
        }
    }, {
        name: 'selectedData',
        paint: function (control, selectedData) {
            if (selectedData == null) {
                return;
            }
            var allData = control.allData;
            if (allData && allData.children) {
                var oldSelectedData = control.getSelectedItems();
                control.selectItems(oldSelectedData, false);
                control.selectItems(selectedData, true);
                control.fire('add');
                control.fire('change');
            }
        }
    });
    exports.adaptData = function () {
        var selectedData = [];
        this.allData = this.datasource;
        var indexData = {};
        if (this.allData && this.allData.children) {
            this.walkTree(this.allData, this.allData.children, function (parent, child) {
                indexData[child.id] = {
                    parentId: parent.id,
                    node: child,
                    isSelected: false
                };
                if (child.hasOwnProperty('isSelected')) {
                    indexData[child.id].isSelected = child.isSelected;
                }
                if (indexData[child.id].isSelected === true) {
                    selectedData.push(child);
                }
            });
        }
        this.indexData = indexData;
        return {
            indexData: indexData,
            selectedData: selectedData
        };
    };
    exports.processDataAfterRefresh = function (adaptedData) {
        if (this.mode !== 'delete') {
            this.selectItems(adaptedData.selectedData, true);
        }
    };
    exports.refreshContent = function () {
        var treeData = this.isQuery() ? this.queriedData : this.allData;
        if (!treeData || !treeData.children || !treeData.children.length) {
            this.addState('empty');
        } else {
            this.removeState('empty');
        }
        if (!treeData || !treeData.children) {
            return;
        }
        var queryList = this.getQueryList();
        var tree = queryList.getChild('tree');
        if (!tree) {
            var options = {
                childName: 'tree',
                datasource: treeData,
                allowUnselectNode: this.allowUnselectNode,
                strategy: new TreeStrategy({
                    mode: this.mode,
                    onlyLeafSelect: this.onlyLeafSelect,
                    orientExpand: this.orientExpand
                }),
                wideToggleArea: this.wideToggleArea,
                hideRoot: this.hideRoot,
                selectMode: this.multi ? 'multiple' : 'single'
            };
            if (this.getItemHTML) {
                options.getItemHTML = this.getItemHTML;
            }
            if (this.itemTemplate) {
                options.itemTemplate = this.itemTemplate;
            }
            tree = ui.create('Tree', options);
            queryList.addChild(tree);
            tree.appendTo(queryList.main);
            var control = this;
            tree.on('selectnode', function (e) {
                var node = e.node;
                control.handlerAfterClickNode(node);
            });
            tree.on('unselectnode', function (e) {
                control.setItemState(e.node.id, 'isSelected', false);
            });
        } else {
            tree.setProperties({
                datasource: util.deepClone(treeData),
                keyword: this.getKeyword()
            });
        }
    };
    exports.getStateNode = function (id) {
        return this.indexData[id];
    };
    exports.getItemState = function (id, stateName) {
        if (this.indexData[id]) {
            var stateNode = this.getStateNode(id);
            return stateNode[stateName];
        }
        return null;
    };
    exports.setItemState = function (id, stateName, stateValue) {
        if (this.indexData[id]) {
            var stateNode = this.getStateNode(id);
            stateNode[stateName] = stateValue;
        }
    };
    exports.getDatasourceWithState = function () {
        var datasource = u.deepClone(this.datasource);
        var indexData = this.indexData;
        this.walkTree(datasource, datasource.children, function (parent, child) {
            child.isSelected = indexData[child.id].isSelected;
        });
        return datasource;
    };
    exports.handlerAfterClickNode = function (node) {
        var item = this.indexData[node.id];
        if (!item) {
            return;
        }
        if (this.mode === 'add') {
            this.actionForAdd(item);
        } else if (this.mode === 'delete') {
            this.actionForDelete(item);
        } else if (this.mode === 'load') {
            this.actionForLoad(item);
        }
    };
    exports.actionForAdd = function (item) {
        this.setItemState(item.node.id, 'isSelected', true);
        if (!this.multi) {
            if (this.currentSeletedId != null) {
                this.setItemState(this.currentSeletedId, 'isSelected', false);
            }
            this.currentSeletedId = item.node.id;
        } else {
            trySyncParentAndChildrenStates(this, item, true);
        }
        this.fire('add', { item: item.node });
        this.fire('change');
    };
    function selectItem(control, id, toBeSelected) {
        var tree = control.getQueryList().getChild('tree');
        var indexData = control.indexData;
        var item = indexData[id];
        if (!item) {
            return;
        }
        if (!control.multi && toBeSelected) {
            unselectCurrent(control);
            control.currentSeletedId = id;
        }
        control.setItemState(id, 'isSelected', toBeSelected);
        if (toBeSelected) {
            tree.selectNode(id, true);
        } else {
            tree.unselectNode(id, true);
        }
    }
    function unselectCurrent(control) {
        var curId = control.currentSeletedId;
        var treeList = control.getQueryList().getChild('tree');
        treeList.unselectNode(curId);
        control.currentSeletedId = null;
    }
    exports.selectAll = function () {
        var data = this.isQuery() ? this.queriedData : this.allData;
        var children = data.children;
        var control = this;
        this.walkTree(data, children, function (parent, child) {
            selectItem(control, child.id, true);
        });
        this.fire('add');
        this.fire('change');
    };
    exports.selectItems = function (nodes, toBeSelected) {
        var indexData = this.indexData;
        if (!indexData) {
            return;
        }
        var control = this;
        u.each(nodes, function (node) {
            var id = node.id !== undefined ? node.id : node;
            var item = indexData[id];
            if (item != null && item !== undefined) {
                selectItem(control, id, toBeSelected);
                trySyncParentAndChildrenStates(control, item, toBeSelected);
            }
        });
    };
    function trySyncParentAndChildrenStates(control, item, toBeSelected) {
        if (!control.needSyncParentChild) {
            return;
        }
        trySyncParentStates(control, item, toBeSelected);
        trySyncChildrenStates(control, item, toBeSelected);
    }
    function trySyncChildrenStates(control, item, toBeSelected) {
        var indexData = control.indexData;
        var node = item.node;
        var children = node.children || [];
        u.each(children, function (child) {
            selectItem(control, child.id, toBeSelected);
            trySyncChildrenStates(control, indexData[child.id], toBeSelected);
        });
    }
    function trySyncParentStates(control, item, toBeSelected) {
        var indexData = control.indexData;
        var parentId = item.parentId;
        var parentItem = indexData[parentId];
        if (parentItem) {
            var brothers = parentItem.node.children || [];
            var allSelected = !u.find(brothers, function (brother) {
                return !control.getItemState(brother.id, 'isSelected');
            });
            selectItem(control, parentId, allSelected);
            trySyncParentStates(control, parentItem, allSelected);
        }
    }
    exports.actionForDelete = function (item) {
        var event = this.fire('delete', { items: [item.node] });
        if (!event.isDefaultPrevented()) {
            deleteItem(this, item.node.id);
            this.fire('change');
        }
    };
    function deleteItem(control, id) {
        var indexData = control.indexData;
        var item = indexData[id];
        var parentId = item.parentId;
        var parentItem = indexData[parentId];
        var node;
        if (!parentItem) {
            node = control.allData;
        } else {
            node = parentItem.node;
        }
        var children = node.children || [];
        var newChildren = u.without(children, item.node);
        if (newChildren.length === 0 && parentId !== getTopId(control)) {
            deleteItem(control, parentId);
        } else {
            node.children = newChildren;
            control.refresh();
        }
    }
    exports.deleteAll = function () {
        var event = this.fire('delete', { items: this.getSelectedItems() });
        if (!event.isDefaultPrevented()) {
            this.set('datasource', null);
            this.fire('change');
        }
    };
    exports.actionForLoad = function (item) {
        this.setItemState(item.node.id, 'isActive', true);
        if (this.currentActiveId) {
            this.setItemState(this.currentActiveId, 'isActive', false);
            if (!this.getStateNode(this.currentActiveId).isSelected) {
                var tree = this.getQueryList().getChild('tree');
                tree.unselectNode(this.currentActiveId, true);
            }
        }
        this.currentActiveId = item.node.id;
        this.fire('load', { item: item.node });
        this.fire('change');
    };
    exports.getLeafItems = function (data, isSelected) {
        data = data || this.allData && this.allData.children || [];
        var leafItems = [];
        var me = this;
        u.each(data, function (item) {
            if (isLeaf(item)) {
                var valid = isSelected === this.getItemState(item.id, 'isSelected');
                if (me.mode === 'delete' || valid) {
                    leafItems.push(item);
                }
            } else {
                leafItems = u.union(leafItems, me.getLeafItems(item.children, isSelected));
            }
        }, this);
        return leafItems;
    };
    exports.getSelectedItems = function () {
        if (!this.allData) {
            return [];
        }
        var selectedItems = [];
        var control = this;
        this.walkTree(this.allData, this.allData.children, function (parent, child) {
            if (control.mode === 'delete' || control.getStateNode(child.id).isSelected) {
                selectedItems.push(child);
            }
        });
        return selectedItems;
    };
    exports.getSelectedTree = function () {
        var control = this;
        var copyData = util.deepClone(this.allData);
        this.walkTree(copyData, copyData.children, function (parent, child) {
            var selectedChildren = getSelectedNodesUnder(child, control);
            if (selectedChildren.length) {
                child.children = selectedChildren;
            } else {
                child.children = null;
            }
        });
        copyData.children = u.filter(copyData.children, function (node) {
            return node.children || control.indexData[node.id].isSelected;
        });
        return copyData;
    };
    function getSelectedNodesUnder(parentNode, control) {
        var children = parentNode.children;
        return u.filter(children, function (node) {
            return this.getItemState(node.id, 'isSelected');
        }, control);
    }
    exports.clearQuery = function () {
        this.$super(arguments);
        if (this.mode !== 'delete') {
            var selectedData = this.getSelectedItems();
            this.selectItems(selectedData, true);
        }
        return false;
    };
    exports.clearData = function () {
        this.queriedData = {};
    };
    exports.queryItem = function (filters) {
        var keyword = filters[0].value;
        var filteredTreeData = [];
        filteredTreeData = queryFromNode.call(this, keyword, this.allData);
        this.queriedData = {
            id: getTopId(this),
            text: '\u7B26\u5408\u6761\u4EF6\u7684\u7ED3\u679C',
            children: filteredTreeData
        };
        this.addState('queried');
        this.refreshContent();
        var selectedData = this.getSelectedItems();
        if (this.mode !== 'delete') {
            this.selectItems(selectedData, true);
        }
    };
    function queryFromNode(keyword, node) {
        var filteredTreeData = [];
        var treeData = node.children;
        u.each(treeData, function (data, key) {
            var filteredData;
            var config = {
                caseSensitive: this.caseSensitive,
                isPartial: true
            };
            if (util.compare(data.text, keyword, config)) {
                filteredData = u.clone(data);
            }
            if (data.children && data.children.length) {
                var filteredChildren = queryFromNode.call(this, keyword, data);
                if (filteredChildren.length > 0) {
                    if (!filteredData) {
                        filteredData = u.clone(data);
                    }
                    filteredData.children = filteredChildren;
                }
            }
            if (filteredData) {
                filteredTreeData.push(filteredData);
            }
        }, this);
        return filteredTreeData;
    }
    exports.walkTree = function (parent, children, callback) {
        u.each(children, function (child, key) {
            callback(parent, child);
            this.walkTree(child, child.children, callback);
        }, this);
    };
    function isLeaf(node) {
        return !node.children;
    }
    exports.getFilteredItemsCount = function () {
        var node = this.isQuery() ? this.queriedData : this.allData;
        var count = getChildrenCount(this, node, true);
        return count;
    };
    exports.getCurrentStateItemsCount = function () {
        var node = this.isQuery() ? this.queriedData : this.allData;
        if (!node) {
            return 0;
        }
        var count = getChildrenCount(this, node, true);
        return count;
    };
    function getChildrenCount(control, node, onlyLeaf) {
        var count = 1;
        if (onlyLeaf) {
            if (isLeaf(node)) {
                if (!node.id || node.id === getTopId(control)) {
                    return 0;
                }
                return 1;
            }
            count = 0;
        } else {
            if (node.id === getTopId(control)) {
                count = 0;
            }
        }
        count += u.reduce(node.children, function (sum, child) {
            return sum + getChildrenCount(control, child, onlyLeaf);
        }, 0);
        return count;
    }
    function getTopId(control) {
        return control.datasource.id;
    }
    var TreeRichSelector = require('eoo').create(RichSelector, exports);
    require('esui').register(TreeRichSelector);
    return TreeRichSelector;
});

define('ub-ria-ui/ToggleSelector', [
    'require',
    'esui/lib',
    'underscore',
    './TogglePanel',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var u = require('underscore');
    var exports = {};
    exports.type = 'ToggleSelector';
    exports.styleType = 'TogglePanel';
    exports.getCategory = function () {
        return 'input';
    };
    exports.initOptions = function (options) {
        var properties = {
            textField: null,
            collapseAfterChange: true,
            defaultText: '\u8BF7\u9009\u62E9'
        };
        options = u.extend(properties, options);
        if (!options.title) {
            options.title = options.defaultText;
        }
        if (options.collapseAfterChange === 'false') {
            options.collapseAfterChange = false;
        }
        this.$super(arguments);
    };
    exports.initStructure = function () {
        this.$super(arguments);
        lib.addClass(this.main, 'ui-toggle-selector');
    };
    exports.initEvents = function () {
        this.$super(arguments);
        var target = this.viewContext.getSafely(this.targetControl);
        target.on('change', u.bind(changeHandler, this));
        target.on('add', u.bind(addHandler, this));
        this.updateDisplayText(target);
    };
    exports.toggleContent = function () {
        if (!this.isDisabled() && !this.isReadOnly()) {
            var position = this.position;
            if (position === 'fixed') {
                this.toggleState('expanded');
            } else {
                var contentLayer = this.getChild('content');
                if (this.isExpanded()) {
                    this.removeState('expanded');
                    contentLayer.hide();
                } else {
                    this.toggleState('expanded');
                    contentLayer.show();
                }
            }
        }
    };
    function changeHandler(e) {
        var event = this.fire('change');
        if (!event.isDefaultPrevented()) {
            this.updateDisplayText(e.target);
        }
    }
    function addHandler(e) {
        if (this.collapseAfterChange && this.hasState('expanded')) {
            this.toggleContent();
        }
    }
    exports.updateDisplayText = function (target) {
        var displayText = this.title;
        if (target.helper.isInStage('RENDERED')) {
            var rawValue = target.getRawValue();
            if (u.isArray(rawValue)) {
                rawValue = rawValue[0];
            }
            displayText = rawValue && rawValue[this.textField] ? rawValue[this.textField] : this.defaultText;
        }
        this.set('title', u.escape(displayText));
    };
    exports.getRawValue = function () {
        var target = this.viewContext.getSafely(this.targetControl);
        var rawValue = target.getRawValue();
        if (rawValue.length > 0) {
            return rawValue[0][this.valueField];
        }
    };
    exports.setRawValue = function (value) {
        var target = this.viewContext.getSafely(this.targetControl);
        target.setRawValue(value);
    };
    exports.getValue = function () {
        return this.getRawValue();
    };
    exports.setValue = function (value) {
        var rawValue = [{ id: value }];
        this.setRawValue(rawValue);
    };
    exports.setReadOnly = function (readOnly) {
        readOnly = !!readOnly;
        this[readOnly ? 'addState' : 'removeState']('read-only');
    };
    exports.isReadOnly = function () {
        return this.hasState('read-only');
    };
    exports.validate = function () {
        var target = this.viewContext.get(this.targetControl);
        if (!target) {
            return true;
        }
        if (typeof target.validate === 'function') {
            return target.validate();
        }
    };
    var TogglePanel = require('./TogglePanel');
    var ToggleSelector = require('eoo').create(TogglePanel, exports);
    require('esui').register(ToggleSelector);
    return ToggleSelector;
});

define('ub-ria-ui/TogglePanel', [
    'require',
    'esui/Control',
    'esui/lib',
    'esui',
    'esui/Panel',
    'esui/Overlay',
    'esui/painters',
    'eoo'
], function (require) {
    var Control = require('esui/Control');
    var lib = require('esui/lib');
    var ui = require('esui');
    require('esui/Panel');
    require('esui/Overlay');
    var exports = {};
    exports.type = 'TogglePanel';
    exports.initOptions = function (options) {
        var defaults = {
            expanded: false,
            position: 'layer'
        };
        var properties = lib.extend(defaults, options);
        this.setProperties(properties);
    };
    exports.initStructure = function () {
        var children = lib.getChildren(this.main);
        var titleElem = children[0];
        var contentElem = children[1];
        initTitle.call(this, titleElem);
        var position = this.position;
        if (position === 'fixed') {
            initContentPanel.call(this, contentElem);
        } else {
            initContentOverlay.call(this, contentElem);
        }
    };
    function initTitle(titleElem) {
        var options = {
            main: titleElem,
            childName: 'title',
            viewContext: this.viewContext,
            renderOptions: this.renderOptions
        };
        var titlePanel = ui.create('Panel', options);
        this.helper.addPartClasses('title', titlePanel.main);
        this.addChild(titlePanel, 'title');
        titlePanel.render();
        titlePanel.helper.addDOMEvent(titlePanel.main, 'click', lib.bind(onToggle, this));
    }
    function initContentPanel(contentElem) {
        var options = {
            main: contentElem,
            childName: 'content',
            viewContext: this.viewContext,
            renderOptions: this.renderOptions
        };
        var contentPanel = ui.create('Panel', options);
        this.helper.addPartClasses('content', contentPanel.main);
        this.addChild(contentPanel, 'content');
        contentPanel.render();
    }
    function initContentOverlay(contentElem) {
        var overlayMain = this.helper.createPart('layer', 'div');
        lib.addClass(overlayMain, this.helper.getPartClassName('layer'));
        var options = {
            main: contentElem,
            childName: 'content',
            attachedDOM: this.getChild('title').main,
            attachedLayout: 'bottom,left',
            autoClose: false,
            viewContext: this.viewContext,
            renderOptions: this.renderOptions
        };
        var contentLayer = ui.create('Overlay', options);
        this.helper.addPartClasses('content', contentLayer.main);
        this.addChild(contentLayer, 'content');
        contentLayer.render();
        var globalEvent = lib.bind(close, this);
        contentLayer.on('show', function () {
            this.helper.addDOMEvent(document, 'mousedown', globalEvent);
        });
        contentLayer.on('hide', function () {
            this.helper.removeDOMEvent(document, 'mousedown', globalEvent);
        });
    }
    function close(e) {
        var target = e.target;
        var layer = this.getChild('content');
        if (!layer) {
            return;
        }
        var isChild = lib.dom.contains(layer.main, target);
        if (!isChild) {
            layer.hide();
            var attachedTarget = layer.attachedTarget;
            var isAttachedTarget = lib.dom.contains(attachedTarget, target) || attachedTarget === target;
            if (!isAttachedTarget) {
                this.removeState('expanded');
            }
        }
    }
    function onToggle(e) {
        var e = this.fire('beforetoggle');
        if (e.isDefaultPrevented()) {
            return;
        }
        this.toggleContent();
    }
    exports.toggleContent = function () {
        var position = this.position;
        if (position === 'fixed') {
            this.toggleState('expanded');
        } else {
            var contentLayer = this.getChild('content');
            if (this.isExpanded()) {
                this.removeState('expanded');
                contentLayer.hide();
            } else {
                this.toggleState('expanded');
                contentLayer.show();
            }
        }
        this.fire('change');
    };
    var painters = require('esui/painters');
    exports.repaint = painters.createRepaint(Control.prototype.repaint, painters.state('expanded'), {
        name: 'title',
        paint: function (panel, title) {
            panel.getChild('title').set('content', title);
        }
    }, {
        name: 'content',
        paint: function (panel, content) {
            panel.getChild('content').set('content', content);
        }
    });
    exports.isExpanded = function () {
        return this.hasState('expanded');
    };
    var TogglePanel = require('eoo').create(Control, exports);
    ui.register(TogglePanel);
    return TogglePanel;
});

define('ub-ria-ui/SelectorTreeStrategy', [
    'require',
    'esui/lib',
    'esui/TreeStrategy',
    'eoo'
], function (require) {
    var lib = require('esui/lib');
    var exports = {};
    exports.constructor = function (options) {
        var defaults = {
            defaultExpand: true,
            orientExpand: false
        };
        lib.extend(this, defaults, options);
    };
    exports.isLeafNode = function (node) {
        return !node.children;
    };
    exports.shouldExpand = function (node) {
        if (this.orientExpand) {
            return !node.isSelected;
        }
        return this.defaultExpand;
    };
    exports.enableSelectStrategy = function (tree) {
        var treeStrategy = this;
        tree.on('select', function (e) {
            var canSelect = true;
            var isLeafNode = treeStrategy.isLeafNode(e.node);
            if (treeStrategy.mode !== 'load') {
                if (treeStrategy.onlyLeafSelect && !isLeafNode) {
                    canSelect = false;
                }
            } else {
                if (!isLeafNode) {
                    canSelect = false;
                }
            }
            if (canSelect) {
                this.selectNode(e.node.id);
            }
        });
        tree.on('unselect', function (e) {
            if (tree.get('allowUnselectNode')) {
                tree.unselectNode(e.node.id);
            }
        });
    };
    var TreeStrategy = require('esui/TreeStrategy');
    var SelectorTreeStrategy = require('eoo').create(TreeStrategy, exports);
    return SelectorTreeStrategy;
});

define('ub-ria-ui/RichSelector', [
    'require',
    'esui/Label',
    'esui/Panel',
    'esui/SearchBox',
    'esui/lib',
    'esui/InputControl',
    'underscore',
    'esui/painters',
    'eoo',
    'esui'
], function (require) {
    require('esui/Label');
    require('esui/Panel');
    require('esui/SearchBox');
    var lib = require('esui/lib');
    var InputControl = require('esui/InputControl');
    var u = require('underscore');
    var exports = {};
    exports.type = 'RichSelector';
    exports.initOptions = function (options) {
        var properties = {
            height: 340,
            width: 200,
            hasHead: true,
            needHeadCount: true,
            title: '\u6807\u9898\u540D',
            needBatchAction: false,
            batchActionLabel: '\u6279\u91CF\u64CD\u4F5C',
            hasSearchBox: true,
            hasFoot: true,
            itemName: '\u7ED3\u679C',
            emptyText: '\u6CA1\u6709\u76F8\u5E94\u7684\u641C\u7D22\u7ED3\u679C',
            holdState: false,
            mode: 'add',
            multi: true
        };
        lib.extend(properties, options);
        if (properties.hasHead === 'false') {
            properties.hasHead = false;
        }
        if (properties.hasSearchBox === 'false') {
            properties.hasSearchBox = false;
        }
        if (properties.hasFoot === 'false') {
            properties.hasFoot = false;
        }
        if (properties.holdState === 'false') {
            properties.holdState = false;
        }
        if (properties.multi === 'false') {
            properties.multi = false;
        }
        properties.width = Math.max(200, properties.width);
        this.setProperties(properties);
    };
    exports.getHeadHTML = function () {
        var helper = this.helper;
        var actionLink = '';
        var headCount = '';
        if (this.needBatchAction) {
            var linkClassName = helper.getPartClassName('batch-action-link');
            var linkId = this.helper.getId('batch-action');
            actionLink = '' + '<span class="' + linkClassName + '" id="' + linkId + '" >' + this.batchActionLabel + '</span>';
        }
        if (this.hasHead && this.needHeadCount) {
            var countClass = helper.getPartClassName('head-count');
            headCount = '<span class="' + countClass + '" data-ui="type:Label;childName:headTotalCount;title:;"></span>';
        }
        var head = [
            '<div data-ui="type:Panel;childName:head;"',
            ' class="${headClass}">',
            '<h3 data-ui="type:Label;childName:title;title:;">',
            '${title}</h3>${totalCount}',
            '${actionLink}',
            '</div>'
        ].join('\n');
        head = lib.format(head, {
            headClass: helper.getPartClassName('head'),
            title: this.title,
            actionLink: actionLink,
            totalCount: headCount
        });
        return head;
    };
    exports.getFootHTML = function () {
        return [
            '<div data-ui="type:Panel;childName:foot;"',
            ' class="' + this.helper.getPartClassName('foot') + '">',
            '<span data-ui="type:Label;childName:totalCount">',
            '</span>',
            '</div>'
        ].join('\n');
    };
    exports.initStructure = function () {
        var tpl = [
            '${head}',
            '<div data-ui="type:Panel;childName:body;"',
            ' class="${bodyClass}">',
            '    ${searchInput}',
            '    <div data-ui="type:Panel;childName:content"',
            '     class="${contentClass}">',
            '        <div data-ui="type:Label;childName:emptyText"',
            '         class="${emptyTextClass}">${emptyText}</div>',
            '        <div data-ui="type:Panel;childName:queryList"',
            '         class="${queryListClass}">',
            '        </div>',
            '    </div>',
            '</div>',
            '${footInfo}'
        ];
        var helper = this.helper;
        var head = '';
        if (this.hasHead) {
            head = this.getHeadHTML();
        }
        var searchInput = '';
        if (this.hasSearchBox) {
            var searchBoxWidth = this.width - 55;
            searchInput = [
                '<div data-ui="type:Panel;childName:searchBoxArea"',
                ' class="${searchWrapperClass}">',
                '<div data-ui="type:SearchBox;childName:itemSearch;"',
                ' data-ui-skin="magnifier"',
                ' data-ui-width="' + searchBoxWidth + '">',
                '</div>',
                '</div>',
                '<div data-ui="type:Panel;',
                'childName:generalQueryResultArea"',
                ' class="${generalQueryResultClass}"',
                ' id="${queryResultId}">',
                '<span class="${linkClass}" id="${linkId}">\u6E05\u7A7A</span>',
                '\u5171\u627E\u5230<span class="${countClass}" id="${queryResultCountId}"></span>\u4E2A',
                '</div>'
            ].join('\n');
            searchInput = lib.format(searchInput, {
                searchWrapperClass: helper.getPartClassName('search-wrapper'),
                generalQueryResultClass: helper.getPartClassName('query-result-general'),
                queryResultCountId: helper.getId('result-count'),
                linkClass: helper.getPartClassName('clear-query-link'),
                linkId: helper.getId('clear-query'),
                countClass: helper.getPartClassName('search-count')
            });
        }
        var footInfo = '';
        if (this.hasFoot) {
            footInfo = this.getFootHTML();
        }
        this.main.style.width = this.width + 'px';
        this.main.innerHTML = lib.format(tpl.join('\n'), {
            head: head,
            bodyClass: helper.getPartClassName('body'),
            searchInput: searchInput,
            contentClass: helper.getPartClassName('content-wrapper'),
            emptyTextClass: helper.getPartClassName('empty-text'),
            emptyText: this.emptyText,
            queryListClass: helper.getPartClassName('query-list'),
            footInfo: footInfo
        });
        this.initChildren();
        if (this.mode === 'load') {
            this.addState('load');
        } else if (this.mode === 'add') {
            this.addState('add');
        } else {
            this.addState('del');
        }
        var batchActionLink = helper.getPart('batch-action');
        if (batchActionLink) {
            helper.addDOMEvent(batchActionLink, 'click', u.bind(this.batchAction, this));
        }
        var clearQueryLink = helper.getPart('clear-query');
        if (clearQueryLink) {
            helper.addDOMEvent(clearQueryLink, 'click', u.bind(this.clearQuery, this));
        }
        var searchBox = this.getSearchBox();
        if (searchBox) {
            searchBox.on('search', search, this);
        }
        var queryList = this.getQueryList().main;
        helper.addDOMEvent(queryList, 'click', u.bind(this.eventDispatcher, this));
    };
    exports.eventDispatcher = function (e) {
        return false;
    };
    function search(e) {
        this.search();
    }
    exports.search = function (args) {
        var event = { filterData: [] };
        event = this.fire('search', event);
        if (!event.isDefaultPrevented()) {
            var searchBox = this.getSearchBox();
            if (searchBox) {
                var defaultFilter = { value: lib.trim(searchBox.getValue()) };
                event.filterData.push(defaultFilter);
            }
        }
        if (event.filterData.length) {
            this.queryItem(event.filterData);
            this.refreshResult();
            this.refreshFoot();
            this.refreshHead();
            this.addState('queried');
            this.adjustHeight();
        } else {
            this.clearQuery();
        }
    };
    exports.refreshResult = function () {
        var count = this.getCurrentStateItemsCount();
        var resultCount = this.helper.getPart('result-count');
        if (resultCount) {
            resultCount.innerHTML = count;
        }
    };
    function resetSearchState(control) {
        control.removeState('queried');
        var searchBox = control.getSearchBox();
        if (searchBox) {
            searchBox.set('text', '');
        }
    }
    exports.clearQuery = function () {
        resetSearchState(this);
        this.clearData();
        this.refreshResult();
        this.refreshContent();
        this.refreshFoot();
        this.refreshHead();
        this.adjustHeight();
        this.fire('clearquery');
        return false;
    };
    exports.getContent = function () {
        var body = this.getChild('body');
        if (body) {
            return body.getChild('content');
        }
        return null;
    };
    exports.getKeyword = function () {
        var searchBox = this.getSearchBox();
        var isQuery = this.isQuery();
        if (searchBox && isQuery) {
            return lib.trim(searchBox.getValue());
        }
        return null;
    };
    exports.getQueryList = function () {
        var content = this.getContent();
        if (content) {
            return content.getChild('queryList');
        }
        return null;
    };
    exports.getSearchBox = function () {
        var searchBoxArea = this.getChild('body').getChild('searchBoxArea');
        if (searchBoxArea) {
            return searchBoxArea.getChild('itemSearch');
        }
    };
    exports.getTotalCountPanel = function () {
        var foot = this.getChild('foot');
        if (!foot) {
            return null;
        }
        return foot.getChild('totalCount');
    };
    exports.getHeadTotalCountPanel = function () {
        var head = this.getChild('head');
        if (!head) {
            return null;
        }
        return head.getChild('headTotalCount');
    };
    exports.isQuery = function () {
        return this.hasState('queried');
    };
    exports.batchAction = function () {
        if (this.mode === 'delete') {
            this.deleteAll();
            this.refreshFoot();
            this.refreshHead();
        } else if (this.mode === 'add') {
            this.selectAll();
        }
        return false;
    };
    exports.deleteAll = function () {
        return false;
    };
    exports.addAll = function () {
        return false;
    };
    exports.adjustHeight = function () {
        var settingHeight = this.height;
        var headHeight = 28;
        var searchBoxHeight = this.hasSearchBox ? 45 : 0;
        var footHeight = this.hasFoot ? 25 : 0;
        var contentHeight = settingHeight - headHeight - searchBoxHeight - footHeight;
        if (this.isQuery()) {
            contentHeight -= 30;
        }
        var content = this.getContent().main;
        content.style.height = contentHeight + 'px';
    };
    exports.adaptData = function () {
    };
    exports.refresh = function () {
        var adaptedData = this.adaptData();
        var needRefreshContent = true;
        if (this.hasSearchBox && this.isQuery()) {
            if (this.holdState) {
                this.search(this.getKeyword());
                needRefreshContent = false;
            } else {
                resetSearchState(this);
            }
        }
        if (needRefreshContent) {
            this.refreshContent();
            this.processDataAfterRefresh(adaptedData);
            this.refreshFoot();
            this.refreshHead();
            this.adjustHeight();
        }
    };
    exports.processDataAfterRefresh = function (adaptedData) {
    };
    exports.refreshFoot = function () {
        if (!this.hasFoot) {
            return;
        }
        var count = this.getCurrentStateItemsCount();
        var totalCountPanel = this.getTotalCountPanel();
        if (totalCountPanel) {
            var itemName = u.escape(this.itemName);
            totalCountPanel.setText('\u5171 ' + count + ' \u4E2A' + itemName);
        }
    };
    exports.refreshHead = function () {
        if (!this.hasHead || !this.needHeadCount) {
            return;
        }
        var count = this.getCurrentStateItemsCount();
        var totalCountPanel = this.getHeadTotalCountPanel();
        if (totalCountPanel) {
            totalCountPanel.setText('\uFF08' + count + '\uFF09');
        }
    };
    exports.getCurrentStateItemsCount = function () {
        return 0;
    };
    exports.repaint = require('esui/painters').createRepaint(InputControl.prototype.repaint, {
        name: 'title',
        paint: function (control, title) {
            var head = control.getChild('head');
            var titleLabel = head && head.getChild('title');
            titleLabel && titleLabel.setText(title);
        }
    });
    exports.getSelectedItems = function () {
        return [];
    };
    exports.selectItems = function (items, toBeSelected) {
    };
    exports.setRawValue = function (selectedItems) {
        this.rawValue = selectedItems;
        this.selectItems(selectedItems, true);
    };
    exports.getRawValue = function () {
        return this.getSelectedItems();
    };
    exports.stringifyValue = function (rawValue) {
        var selectedIds = [];
        u.each(rawValue, function (item) {
            selectedIds.push(item.id);
        });
        return selectedIds.join(',');
    };
    var RichSelector = require('eoo').create(InputControl, exports);
    require('esui').register(RichSelector);
    return RichSelector;
});

define('ub-ria-ui/PagingTreeRichSelector', [
    'require',
    './PagingTree',
    'esui/main',
    'esui/lib',
    'underscore',
    './util',
    './RichSelector',
    './PagingSelectorTreeStrategy',
    'esui/painters',
    'eoo',
    'esui'
], function (require) {
    require('./PagingTree');
    var ui = require('esui/main');
    var lib = require('esui/lib');
    var u = require('underscore');
    var util = require('./util');
    var RichSelector = require('./RichSelector');
    var TreeStrategy = require('./PagingSelectorTreeStrategy');
    var exports = {};
    exports.type = 'PagingTreeRichSelector';
    exports.styleType = 'RichSelector';
    exports.initOptions = function (options) {
        var properties = {
            datasource: null,
            orientExpand: false,
            wideToggleArea: false,
            onlyLeafSelect: true,
            allowUnselectNode: false,
            hideRoot: true,
            needSyncParentChild: true
        };
        lib.extend(properties, options);
        if (properties.onlyLeafSelect === 'false') {
            properties.onlyLeafSelect = false;
        }
        if (properties.orientExpand === 'false') {
            properties.orientExpand = false;
        }
        if (properties.hideRoot === 'false') {
            properties.hideRoot = false;
        }
        if (properties.wideToggleArea === 'false') {
            properties.wideToggleArea = false;
        }
        if (properties.multi === 'false') {
            properties.multi = false;
        }
        if (properties.needSyncParentChild === 'false') {
            properties.needSyncParentChild = false;
        }
        if (properties.caseSensitive === 'false') {
            properties.caseSensitive = false;
        }
        this.$super([properties]);
    };
    exports.initStructure = function () {
        this.$super(arguments);
        lib.addClasses(this.main, [
            'ui-paging-tree-richselector',
            'ui-tree-richselector'
        ]);
        if (this.onlyLeafSelect) {
            this.addState('only-leaf-selectable');
        }
    };
    exports.repaint = require('esui/painters').createRepaint(RichSelector.prototype.repaint, {
        name: 'datasource',
        paint: function (control, datasource) {
            control.refresh();
        }
    }, {
        name: 'selectedTree',
        paint: function (control, selectedTree) {
            if (selectedTree) {
                control.walkTree(selectedTree, selectedTree.children, function (parent, child) {
                    control.indexData[child.id] = {
                        parentId: parent.id,
                        node: child
                    };
                    if (!child.children || child.children.length === 0) {
                        control.selectedData.push(child);
                    }
                });
            }
        }
    }, {
        name: 'selectedData',
        paint: function (control, selectedData) {
            if (selectedData == null) {
                return;
            }
            var allData = control.allData;
            if (allData && allData.children) {
                var oldSelectedData = control.getSelectedItems();
                control.selectItems(oldSelectedData, false);
                control.selectItems(selectedData, true);
                control.fire('add');
                control.fire('change');
            }
        }
    });
    exports.adaptData = function () {
        this.selectedData = this.selectedData || [];
        var isQuery = this.isQuery();
        var allData = this[isQuery ? 'queriedDatasource' : 'datasource'];
        this[isQuery ? 'queriedData' : 'allData'] = allData;
        this[isQuery ? 'queriedDataCount' : 'allDataCount'] = allData.children.totalCount;
        var indexData = this.indexData || {};
        if (allData && allData.children) {
            u.each(allData.children.results, function (item) {
                indexData[item.id] = {
                    parentId: allData.id,
                    node: item
                };
                if (item.hasOwnProperty('isSelected')) {
                    this.selectedData.push(item);
                }
            }, this);
        }
        this.indexData = indexData;
        return { indexData: indexData };
    };
    exports.processDataAfterRefresh = function (adaptedData) {
        if (this.mode !== 'delete') {
            this.selectItems(this.selectedData, true);
        }
    };
    exports.search = function () {
        var searchBox = this.getSearchBox();
        this.keyword = lib.trim(searchBox.getValue());
        this.queriedData = [];
        this.queriedDatasource = { results: [] };
        this.addState('queried');
        this.fire('search');
    };
    exports.refreshContent = function () {
        var treeData = this.isQuery() ? this.queriedData : this.allData;
        if (!treeData || !treeData.children || !treeData.children.results.length) {
            this.addState('empty');
        } else {
            this.removeState('empty');
        }
        if (!treeData || !treeData.children) {
            return;
        }
        var queryList = this.getQueryList();
        var tree = queryList.getChild('tree');
        if (!tree) {
            var strategyConfig = {
                mode: this.mode,
                onlyLeafSelect: this.onlyLeafSelect,
                orientExpand: this.orientExpand
            };
            if (this.isLeafNode) {
                strategyConfig.isLeafNode = this.isLeafNode;
            }
            var options = {
                childName: 'tree',
                datasource: treeData,
                allowUnselectNode: this.allowUnselectNode,
                strategy: new TreeStrategy(strategyConfig),
                wideToggleArea: this.wideToggleArea,
                hideRoot: this.hideRoot,
                selectMode: this.multi ? 'multiple' : 'single'
            };
            if (this.getItemHTML) {
                options.getItemHTML = this.getItemHTML;
            }
            if (this.itemTemplate) {
                options.itemTemplate = this.itemTemplate;
            }
            tree = ui.create('PagingTree', options);
            queryList.addChild(tree);
            tree.appendTo(queryList.main);
            var control = this;
            tree.on('selectnode', function (e) {
                var node = e.node;
                control.handlerAfterClickNode(node);
            });
            tree.on('unselectnode', function (e) {
                control.setItemState(e.node.id, 'isSelected', false);
            });
            tree.on('loadmoredata', function (e) {
                control.fire('loadmoredata', e);
            });
        } else {
            tree.setProperties({
                datasource: util.deepClone(treeData),
                keyword: this.getKeyword()
            });
        }
    };
    exports.getStateNode = function (id) {
        return this.indexData[id];
    };
    exports.getItemState = function (id, stateName) {
        if (this.indexData[id]) {
            var stateNode = this.getStateNode(id);
            return stateNode[stateName];
        }
        return null;
    };
    exports.setItemState = function (id, stateName, stateValue) {
        if (this.indexData[id]) {
            var stateNode = this.getStateNode(id);
            stateNode[stateName] = stateValue;
        }
    };
    exports.getDatasourceWithState = function () {
        var datasource = u.deepClone(this.datasource);
        var indexData = this.indexData;
        this.walkTree(datasource, datasource.children.results, function (parent, child) {
            child.isSelected = indexData[child.id].isSelected;
        });
        return datasource;
    };
    exports.handlerAfterClickNode = function (node) {
        var item = this.indexData[node.id];
        if (!item) {
            return;
        }
        if (this.mode === 'add') {
            this.actionForAdd(item);
        } else if (this.mode === 'delete') {
            this.actionForDelete(item);
        } else if (this.mode === 'load') {
            this.actionForLoad(item);
        }
    };
    exports.actionForAdd = function (item) {
        var needFire = false;
        if (!this.multi) {
            this.setItemState(item.node.id, 'isSelected', true);
            if (this.currentSeletedId != null) {
                this.setItemState(this.currentSeletedId, 'isSelected', false);
            }
            this.currentSeletedId = item.node.id;
            needFire = true;
        } else {
            var parentSelected = checkParentSelected.call(this, item);
            if (!parentSelected) {
                this.setItemState(item.node.id, 'isSelected', true);
                trySyncParentAndChildrenStates(this, item, true);
                needFire = true;
            } else {
                var tree = this.getQueryList().getChild('tree');
                tree.unselectNode(item.node.id, true);
            }
        }
        if (needFire) {
            selectItem(this, item.node.id, true);
            this.fire('add', { item: item.node });
            this.fire('change');
        }
    };
    function checkParentSelected(node) {
        var parentNode = this.indexData[node.parentId];
        if (!parentNode) {
            return false;
        }
        if (this.getItemState(node.parentId, 'isSelected')) {
            return true;
        }
        if (!this.indexData[parentNode.parentId]) {
            return false;
        }
        return checkParentSelected.call(this, parentNode);
    }
    function addExpandedStatus(control, id) {
        var isQuery = control.isQuery();
        if (!isQuery) {
            control.expandedNode = control.expandedNode || [];
            control.expandedNode.push(id);
        }
    }
    exports.getExpandedNodes = function () {
        return this.expandedNode;
    };
    function addExpandedNodeStatus(control, id) {
        var tree = control.getQueryList().getChild('tree');
        tree.addExpandedNodeStatus(id);
    }
    function selectItem(control, id, toBeSelected) {
        var tree = control.getQueryList().getChild('tree');
        var indexData = control.indexData;
        var item = indexData[id];
        if (!item) {
            return;
        }
        if (!control.multi && toBeSelected) {
            unselectCurrent(control);
            control.currentSeletedId = id;
            control.selectedData = [item.node];
        } else {
            if (toBeSelected) {
                if (!u.findWhere(control.selectedData, { id: item.node.id })) {
                    control.selectedData.push(item.node);
                }
            } else {
                control.selectedData = u.filter(control.selectedData, function (item) {
                    return item.id !== id;
                });
            }
        }
        control.setItemState(id, 'isSelected', toBeSelected);
        if (toBeSelected) {
            tree.selectNode(id, true);
        } else {
            tree.unselectNode(id, true);
        }
    }
    exports.expandDatasource = function (datasource, targetId) {
        this.adaptAppendData(datasource, targetId, 1);
        var queryList = this.getQueryList();
        var tree = queryList.getChild('tree');
        if (tree) {
            addExpandedStatus(this, targetId);
            tree.expandNode(targetId, datasource);
        }
        this.processDataAfterRefresh();
    };
    exports.appendDatasource = function (datasource, targetId) {
        if (targetId) {
            this.adaptAppendData(datasource, targetId, 0);
            var queryList = this.getQueryList();
            var tree = queryList.getChild('tree');
            if (tree) {
                tree.appendDatasource(datasource, targetId);
            }
        } else {
            this.queriedDatasource = datasource;
            this.adaptData();
            this.refreshContent();
            this.refreshResult();
        }
        this.refreshHead();
        this.refreshFoot();
        this.processDataAfterRefresh();
    };
    exports.adaptAppendData = function (datasource, targetId, searchType) {
        var isQuery = this.isQuery();
        var indexData = this.indexData;
        u.each(datasource.results, function (item, index) {
            indexData[item.id] = {
                isSelected: item.isSelected,
                node: item,
                parentId: searchType === 1 ? targetId : indexData[targetId].parentId
            };
        });
        var allData = this[isQuery ? 'queriedData' : 'allData'];
        this[isQuery ? 'queriedDataCount' : 'allDataCount'] = datasource.totalCount;
        if (targetId && allData && allData.children) {
            this.walkTree(allData, allData.children.results, function (parent, child) {
                if (child.id === targetId) {
                    if (searchType === 1) {
                        child.children = datasource;
                    } else {
                        parent.children.moreFlag = datasource.moreFlag;
                        parent.children.results = parent.children.results.concat(datasource.results);
                        return false;
                    }
                }
            });
        }
        if (!targetId) {
            this.queriedData = datasource;
        }
        this.indexData = indexData;
    };
    function unselectCurrent(control) {
        var curId = control.currentSeletedId;
        var treeList = control.getQueryList().getChild('tree');
        treeList.unselectNode(curId);
        control.currentSeletedId = null;
    }
    exports.selectAll = function () {
        var data = this.isQuery() ? this.queriedData : this.allData;
        var toBeSelectItems = [];
        function selectItemsWithoutDisabled(nodes) {
            u.each(nodes, function (node) {
                if (!node.disabled) {
                    toBeSelectItems.push(node);
                } else if (node.children) {
                    selectItemsWithoutDisabled(node.children.results);
                }
            });
        }
        selectItemsWithoutDisabled(data.children.results);
        this.selectItems(toBeSelectItems, true);
        this.fire('add');
        this.fire('change');
    };
    exports.addExpandedNodesStatus = function (nodes) {
        u.each(nodes, function (item) {
            addExpandedNodeStatus(this, item);
        }, this);
    };
    exports.selectItems = function (nodes, toBeSelected) {
        var indexData = this.indexData;
        if (!indexData) {
            return;
        }
        var control = this;
        u.each(nodes, function (node) {
            var id = node.id !== undefined ? node.id : node;
            var item = indexData[id];
            if (item != null && item !== undefined) {
                selectItem(control, id, toBeSelected);
                trySyncParentAndChildrenStates(control, item, toBeSelected);
            }
        });
    };
    function trySyncParentAndChildrenStates(control, item, toBeSelected) {
        if (!control.needSyncParentChild) {
            return;
        }
        trySyncParentStates(control, item, toBeSelected);
        trySyncChildrenStates(control, item, toBeSelected);
    }
    function trySyncChildrenStates(control, item, toBeSelected) {
        var indexData = control.indexData;
        var selectedData = control.selectedData;
        u.each(selectedData, function (node) {
            var id = node.id;
            while (indexData[id] != null) {
                if (indexData[id].parentId === item.node.id) {
                    selectItem(control, node.id, false);
                    return;
                }
                id = indexData[id].parentId;
            }
        });
    }
    function trySyncParentStates(control, item, toBeSelected) {
        return;
    }
    exports.actionForDelete = function (item) {
        var event = this.fire('delete', { items: [item.node] });
        if (!event.isDefaultPrevented()) {
            deleteItem(this, item.node.id);
            this.fire('change');
        }
    };
    function deleteItem(control, id) {
        var indexData = control.indexData;
        var item = indexData[id];
        var parentId = item.parentId;
        var parentItem = indexData[parentId];
        var node;
        if (!parentItem) {
            node = control.allData;
        } else {
            node = parentItem.node;
        }
        var children = node.children || [];
        var newChildren = u.without(children, item.node);
        if (newChildren.length === 0 && parentId !== getTopId(control)) {
            deleteItem(control, parentId);
        } else {
            node.children = newChildren;
            control.refresh();
        }
    }
    exports.deleteAll = function () {
        var event = this.fire('delete', { items: this.getSelectedItems() });
        if (!event.isDefaultPrevented()) {
            this.set('datasource', null);
            this.fire('change');
        }
    };
    exports.actionForLoad = function (item) {
        this.setItemState(item.node.id, 'isActive', true);
        if (this.currentActiveId) {
            this.setItemState(this.currentActiveId, 'isActive', false);
            if (!this.getStateNode(this.currentActiveId).isSelected) {
                var tree = this.getQueryList().getChild('tree');
                tree.unselectNode(this.currentActiveId, true);
            }
        }
        this.currentActiveId = item.node.id;
        this.fire('load', { item: item.node });
        this.fire('change');
    };
    exports.getLeafItems = function (data, isSelected) {
        data = data || this.allData && this.allData.children || [];
        var leafItems = [];
        var me = this;
        u.each(data, function (item) {
            if (isLeaf(item)) {
                var valid = isSelected === this.getItemState(item.id, 'isSelected');
                if (me.mode === 'delete' || valid) {
                    leafItems.push(item);
                }
            } else {
                leafItems = u.union(leafItems, me.getLeafItems(item.children, isSelected));
            }
        }, this);
        return leafItems;
    };
    exports.getSelectedItems = function () {
        return this.selectedData;
    };
    exports.getSelectedTree = function () {
        var indexData = util.deepClone(this.indexData);
        var selectedData = util.deepClone(this.selectedData);
        var result = [];
        u.each(selectedData, function (item) {
            var nodeArray = [];
            nodeArray.unshift(indexData[item.id].node);
            var nodeItem = indexData[item.id];
            var parentNode = indexData[nodeItem.parentId];
            while (parentNode) {
                nodeArray.unshift(parentNode.node);
                parentNode = indexData[parentNode.parentId];
            }
            var parent = result;
            for (var i = 0; i < nodeArray.length; i++) {
                var node = u.findWhere(parent, { id: nodeArray[i].id });
                if (!node) {
                    nodeArray[i].children = nodeArray[i].type === 1 ? null : [];
                    parent.push(nodeArray[i]);
                }
                parent = nodeArray[i].children;
            }
        });
        return {
            id: this.datasource.id,
            name: this.datasource.name,
            children: result
        };
    };
    exports.clearQuery = function () {
        this.$super(arguments);
        if (this.mode !== 'delete') {
            var selectedData = this.getSelectedItems();
            this.selectItems(selectedData, true);
            var expandedNodes = this.getExpandedNodes();
            this.addExpandedNodesStatus(expandedNodes);
        }
        return false;
    };
    exports.clearData = function () {
        this.queriedData = [];
        this.queriedDatasource = { results: [] };
    };
    exports.queryItem = function (filters) {
        var keyword = filters[0].value;
        var filteredTreeData = [];
        filteredTreeData = queryFromNode.call(this, keyword, this.allData);
        this.queriedData = {
            id: getTopId(this),
            text: '\u7B26\u5408\u6761\u4EF6\u7684\u7ED3\u679C',
            children: filteredTreeData
        };
        this.addState('queried');
        this.refreshContent();
        var selectedData = this.getSelectedItems();
        if (this.mode !== 'delete') {
            this.selectItems(selectedData, true);
        }
    };
    function queryFromNode(keyword, node) {
        var filteredTreeData = [];
        var treeData = node.children;
        u.each(treeData, function (data, key) {
            var filteredData;
            var config = {
                caseSensitive: this.caseSensitive,
                isPartial: true
            };
            if (util.compare(data.text, keyword, config)) {
                filteredData = u.clone(data);
            }
            if (data.children && data.children.length) {
                var filteredChildren = queryFromNode.call(this, keyword, data);
                if (filteredChildren.length > 0) {
                    if (!filteredData) {
                        filteredData = u.clone(data);
                    }
                    filteredData.children = filteredChildren;
                }
            }
            if (filteredData) {
                filteredTreeData.push(filteredData);
            }
        }, this);
        return filteredTreeData;
    }
    exports.walkTree = function (parent, children, callback) {
        u.each(children, function (child, key) {
            callback(parent, child);
            var childrenCollection = child.children;
            if (childrenCollection && childrenCollection.results) {
                childrenCollection = childrenCollection.results;
            }
            this.walkTree(child, childrenCollection, callback);
        }, this);
    };
    function isLeaf(node) {
        return !node.children;
    }
    exports.getCurrentStateItemsCount = function () {
        return this.isQuery() ? this.queriedDataCount : this.allDataCount;
    };
    function getTopId(control) {
        return control.datasource.id;
    }
    var TreeRichSelector = require('eoo').create(RichSelector, exports);
    require('esui').register(TreeRichSelector);
    return TreeRichSelector;
});

define('ub-ria-ui/PagingTree', [
    'require',
    'esui/Control',
    'esui/lib',
    'esui/controlHelper',
    'underscore',
    './PagingSelectorTreeStrategy',
    'eoo',
    'esui'
], function (require) {
    var Control = require('esui/Control');
    var lib = require('esui/lib');
    var helper = require('esui/controlHelper');
    var u = require('underscore');
    var TreeStrategy = require('./PagingSelectorTreeStrategy');
    var nullTreeStrategyExports = {};
    nullTreeStrategyExports.attachTo = function () {
    };
    var NullTreeStrategy = require('eoo').create(TreeStrategy, nullTreeStrategyExports);
    var exports = {};
    exports.type = 'PagingTree';
    exports.styleType = 'Tree';
    var defaultProperties = {
        selectMode: 'single',
        hideRoot: false
    };
    exports.initOptions = function (options) {
        var defaults = {
            datasource: {},
            strategy: new NullTreeStrategy(),
            selectedNodes: [],
            selectedNodeIndex: {}
        };
        var properties = lib.extend(defaults, defaultProperties, options);
        if (properties.allowUnselectNode == null) {
            properties.allowUnselectNode = properties.selectMode !== 'single';
        }
        this.setProperties(properties);
    };
    exports.itemTemplate = '<span>${text}</span>';
    exports.moreTemplate = '<span>\u52A0\u8F7D\u66F4\u591A</span>';
    exports.getItemHTML = function (node) {
        var data = {
            id: lib.encodeHTML(node.id),
            text: lib.encodeHTML(node.text)
        };
        return lib.format(this.itemTemplate, data);
    };
    var INDICATOR_TEXT_MAPPING = {
        collapsed: '\u5C55\u5F00',
        expanded: '\u6536\u8D77',
        busy: '\u52A0\u8F7D\u4E2D',
        empty: '\u65E0\u5185\u5BB9'
    };
    function getIndicatorHTML(tree, node, type, currentLevel, sourceLevel) {
        var diff = sourceLevel - currentLevel;
        var diffType = diff === 0 ? 'current' : diff === 1 ? 'previous' : 'far-previous';
        var classes = [].concat(helper.getPartClasses(tree, 'node-indicator'), helper.getPartClasses(tree, 'node-indicator-' + type), helper.getPartClasses(tree, 'node-indicator-level-' + currentLevel), helper.getPartClasses(tree, 'node-indicator-' + diffType));
        var text = diff === 0 ? INDICATOR_TEXT_MAPPING[type || 'collapsed'] : '\u7B2C' + currentLevel + '\u7EA7';
        var html = '<span ';
        if (diff === 0) {
            html += 'id="' + helper.getId(tree, 'indicator-' + node.id) + '" ';
        }
        html += 'class="' + classes.join(' ') + '">' + text + '</span>';
        return html;
    }
    function getNodeContentHTML(tree, node, level, expanded) {
        var wrapperClasses = helper.getPartClasses(tree, 'content-wrapper');
        if (tree.selectedNodeIndex[node.id]) {
            wrapperClasses = wrapperClasses.concat(helper.getPartClasses(tree, 'content-wrapper-selected'));
        }
        if (node.disabled) {
            wrapperClasses = wrapperClasses.concat(helper.getPartClasses(tree, 'content-wrapper-disabled'));
        }
        var wrapperId = helper.getId(tree, 'content-wrapper-' + node.id);
        var indicatorHtml = '';
        var indicatorType = tree.strategy.isLeafNode(node) ? 'empty' : expanded ? 'expanded' : 'collapsed';
        for (var i = 0; i <= level; i++) {
            indicatorHtml += getIndicatorHTML(tree, node, indicatorType, i, level);
        }
        var itemWrapperClasses = helper.getPartClasses(tree, 'item-content');
        var tpl = '<div id="${wrapperId}" class="${wrapperClasses}">' + '${indicatorHtml}<div class="${itemWrapperClasses}">${itemHtml}</div></div>';
        var html = lib.format(tpl, {
            wrapperId: wrapperId,
            wrapperClasses: wrapperClasses.join(' '),
            indicatorHtml: indicatorHtml,
            itemWrapperClasses: itemWrapperClasses.join(' '),
            itemHtml: tree.getItemHTML(node)
        });
        if (expanded && !tree.strategy.isLeafNode(node)) {
            var classes = [].concat(helper.getPartClasses(tree, 'sub-root'), helper.getPartClasses(tree, 'sub-root-' + indicatorType));
            html += '<ul class="' + classes.join(' ') + '">';
            if (node.children) {
                for (var j = 0; j < node.children.results.length; j++) {
                    var child = node.children.results[j];
                    var flag = child.children && child.children.results;
                    html += getNodeHTML(tree, child, level + 1, flag);
                }
            }
            if (tree.strategy.hasMoreFlag(node)) {
                var nodeList = node.children.results;
                var lastNode = nodeList[nodeList.length - 1];
                html += getMoreNodeHtml(tree, lastNode, i, level + 1);
            }
            html += '</ul>';
        }
        return html;
    }
    function getMoreNodeHtml(tree, node, i, level, nodeName) {
        if (!node) {
            return '';
        }
        nodeName = nodeName || 'li';
        var classes = getNodeClasses(tree, node, level, false);
        var tpl = '<${nodeName} class="${classes}" id="${id}" data-id="${nodeId}" data-level="${level}">' + '${content}</${nodeName}>';
        return lib.format(tpl, {
            nodeName: nodeName,
            classes: classes.join(' '),
            id: helper.getId(tree, 'node-row-more' + node.id),
            nodeId: node.id,
            level: level,
            content: getMoreContent(tree, node, i, level)
        });
    }
    function getMoreContent(tree, node, i, level) {
        var wrapperClasses = helper.getPartClasses(tree, 'content-wrapper');
        wrapperClasses = wrapperClasses.concat(helper.getPartClasses(tree, 'content-wrapper-row-more'));
        var wrapperId = helper.getId(tree, 'content-wrapper-' + node.id);
        var indicatorHtml = '';
        var indicatorType = 'empty';
        for (var j = 0; j <= level; j++) {
            indicatorHtml += getIndicatorHTML(tree, node, indicatorType, j, level);
        }
        var itemWrapperClasses = helper.getPartClasses(tree, 'item-content');
        var tpl = '<div id="${wrapperId}" class="${wrapperClasses}">' + '${indicatorHtml}<div class="${itemWrapperClasses}">${moreContent}</div></div>';
        return lib.format(tpl, {
            wrapperId: wrapperId,
            wrapperClasses: wrapperClasses.join(' '),
            indicatorHtml: indicatorHtml,
            itemWrapperClasses: itemWrapperClasses.join(' '),
            moreContent: tree.moreTemplate
        });
    }
    function getNodeClasses(tree, node, level, expanded) {
        var state = tree.strategy.isLeafNode(node) ? 'empty' : expanded ? 'expanded' : 'collapsed';
        var classes = [].concat(helper.getPartClasses(tree, 'node'), helper.getPartClasses(tree, 'node-' + state), helper.getPartClasses(tree, 'node-level-' + level));
        if (node === tree.datasource) {
            classes = [].concat(helper.getPartClasses(tree, 'root'), helper.getPartClasses(tree, 'root-' + state), classes);
        }
        return classes;
    }
    function getNodeHTML(tree, node, level, expanded, nodeName) {
        nodeName = nodeName || 'li';
        var flag = node.children && node.children.results;
        var classes = getNodeClasses(tree, node, level, flag);
        var tpl = '<${nodeName} class="${classes}" id="${id}" data-id="${nodeId}" data-level="${level}">' + '${nodeContent}</${nodeName}>';
        return lib.format(tpl, {
            nodeName: nodeName,
            classes: classes.join(' '),
            id: helper.getId(tree, 'node-' + node.id),
            nodeId: node.id,
            level: level,
            nodeContent: getNodeContentHTML(tree, node, level, expanded)
        });
    }
    function toggleAndSelectNode(e) {
        var target = e.target;
        var indicatorClass = helper.getPartClasses(this, 'node-indicator')[0];
        var isValidToggleEvent = lib.hasClass(target, indicatorClass);
        var isValidSelectEvent = false;
        var isValidLoadMoreEvent = false;
        var disabled = false;
        if (!isValidToggleEvent) {
            var wrapperClass = helper.getPartClasses(this, 'content-wrapper')[0];
            var loadMoreClass = helper.getPartClasses(this, 'content-wrapper-row-more');
            var disabledClass = helper.getPartClasses(this, 'content-wrapper-disabled');
            while (target && target !== this.main && !lib.hasClass(target, wrapperClass)) {
                target = target.parentNode;
            }
            if (lib.hasClass(target, disabledClass)) {
                disabled = true;
            }
            if (lib.hasClass(target, loadMoreClass)) {
                isValidLoadMoreEvent = true;
            } else if (lib.hasClass(target, wrapperClass)) {
                isValidToggleEvent = this.wideToggleArea;
                isValidSelectEvent = !isValidToggleEvent;
            }
        }
        if (!isValidToggleEvent && !isValidSelectEvent && !isValidLoadMoreEvent) {
            return;
        }
        while (target && target !== this.main && !lib.hasAttribute(target, 'data-id')) {
            target = target.parentNode;
        }
        var id = target.getAttribute('data-id');
        if (isValidLoadMoreEvent) {
            this.triggerLoadMoreEvent(id);
        }
        if (isValidToggleEvent) {
            this.triggerToggleStrategy(id);
        }
        if (isValidSelectEvent && !disabled) {
            this.triggerSelectStrategy(id);
        }
    }
    exports.addExpandedNodeStatus = function (id) {
        var nodeElement = lib.g(helper.getId(this, 'node-' + id));
        var childLoadedClass = helper.getPartClasses(this, 'node-child-loaded');
        lib.addClass(nodeElement, childLoadedClass);
    };
    exports.clickNode = function (e) {
        toggleAndSelectNode.apply(this, arguments);
    };
    exports.initStructure = function () {
        this.strategy.attachTo(this);
    };
    exports.initEvents = function () {
        helper.addDOMEvent(this, this.main, 'click', this.clickNode);
    };
    function buildNodeIndex(node, index) {
        index = index || {};
        index[node.id] = node;
        if (node.children) {
            for (var i = 0; i < node.children.results.length; i++) {
                buildNodeIndex(node.children.results[i], index);
            }
        }
        return index;
    }
    exports.removeNodeFromIndex = function (id) {
        var node = this.nodeIndex[id];
        if (!node) {
            return;
        }
        this.nodeIndex[id] = undefined;
        if (!node.children) {
            return;
        }
        u.each(node.children, this.removeNodeFromIndex, this);
    };
    exports.repaint = helper.createRepaint(Control.prototype.repaint, {
        name: 'datasource',
        paint: function (tree, datasource) {
            tree.selectedNodes = [];
            tree.selectedNodeIndex = {};
            tree.nodeIndex = buildNodeIndex(datasource);
            tree.main.innerHTML = getNodeHTML(tree, datasource, 0, true, 'div');
        }
    }, {
        name: 'hideRoot',
        paint: function (tree, hideRoot) {
            var method = hideRoot ? 'addState' : 'removeState';
            tree[method]('hide-root');
        }
    });
    exports.triggerSelectStrategy = function (id) {
        var node = this.nodeIndex[id];
        if (!node) {
            return;
        }
        if (this.selectedNodeIndex[id]) {
            this.fire('unselect', { node: node });
        } else {
            this.fire('select', { node: node });
        }
    };
    exports.getSelectedNodes = function () {
        return this.selectedNodes.slice();
    };
    function addSelectedNode(tree, node) {
        if (tree.selectedNodeIndex[node.id]) {
            return false;
        }
        tree.selectedNodes.push(node);
        tree.selectedNodeIndex[node.id] = node;
        return true;
    }
    function removeSelectedNode(tree, node) {
        if (tree.selectedNodeIndex[node.id]) {
            delete tree.selectedNodeIndex[node.id];
            for (var i = 0; i < tree.selectedNodes.length; i++) {
                if (tree.selectedNodes[i] === node) {
                    tree.selectedNodes.splice(i, 1);
                }
            }
            return true;
        }
        return false;
    }
    exports.toggleNodeSelection = function (id) {
        var method = this.selectedNodeIndex[id] ? 'unselectNode' : 'selectNode';
        this[method](id);
    };
    function unselectNode(tree, id, options) {
        if (!options.force && !tree.allowUnselectNode) {
            return;
        }
        var node = tree.nodeIndex[id];
        if (!node) {
            return;
        }
        var removed = removeSelectedNode(tree, node);
        if (removed) {
            if (options.modifyDOM) {
                var nodeElement = lib.g(helper.getId(tree, 'content-wrapper-' + id));
                helper.removePartClasses(tree, 'content-wrapper-selected', nodeElement);
            }
            if (!options.silent) {
                tree.fire('unselectnode', { node: node });
                tree.fire('selectionchange');
            }
        }
    }
    exports.selectNode = function (id, silent) {
        var node = this.nodeIndex[id];
        if (!node) {
            return;
        }
        var added = addSelectedNode(this, node);
        if (!added) {
            return;
        }
        if (this.selectMode === 'single' && this.selectedNodes.length > 1) {
            unselectNode(this, this.selectedNodes[0].id, {
                force: true,
                silent: true,
                modifyDOM: true
            });
        }
        var nodeElement = lib.g(helper.getId(this, 'content-wrapper-' + id));
        helper.addPartClasses(this, 'content-wrapper-selected', nodeElement);
        if (!silent) {
            this.fire('selectnode', { node: node });
            this.fire('selectionchange');
        }
    };
    exports.unselectNode = function (id, silent) {
        unselectNode(this, id, {
            force: true,
            silent: silent,
            modifyDOM: true
        });
    };
    exports.expandNode = function (id, children) {
        var nodeElement = lib.g(helper.getId(this, 'node-' + id));
        if (!nodeElement) {
            return;
        }
        var level = +lib.getAttribute(nodeElement, 'data-level');
        if (children || nodeElement.lastChild.nodeName.toLowerCase() !== 'ul') {
            var node = this.nodeIndex[id];
            if (!node) {
                return;
            }
            if (children) {
                if (node.children) {
                    for (var i = 0; i < node.children.length; i++) {
                        unselectNode(this, node.children[i].id, {
                            force: true,
                            silent: true,
                            modifyDOM: false
                        });
                        this.removeNodeFromIndex(node.children[i].id);
                    }
                }
                node.children = children;
                buildNodeIndex(node, this.nodeIndex);
            }
            nodeElement.innerHTML = getNodeContentHTML(this, node, level, true);
        } else {
            var indicator = lib.g(helper.getId(this, 'indicator-' + id));
            indicator.innerHTML = INDICATOR_TEXT_MAPPING.expanded;
            var indicatorClasses = [].concat(helper.getPartClasses(this, 'node-indicator'), helper.getPartClasses(this, 'node-indicator-level-' + level), helper.getPartClasses(this, 'node-indicator-current'), helper.getPartClasses(this, 'node-indicator-expanded'));
            indicator.className = indicatorClasses.join(' ');
            var rootClasses = [].concat(helper.getPartClasses(this, 'sub-root'), helper.getPartClasses(this, 'sub-root-expanded'));
            nodeElement.lastChild.className = rootClasses.join(' ');
        }
        node = this.nodeIndex[id];
        var nodeClasses = getNodeClasses(this, node, level, true);
        nodeElement.className = nodeClasses.join(' ');
    };
    exports.collapseNode = function (id, removeChild) {
        var nodeElement = lib.g(helper.getId(this, 'node-' + id));
        if (!nodeElement) {
            return;
        }
        var node = this.nodeIndex[id];
        var childRoot = nodeElement.getElementsByTagName('ul')[0];
        if (childRoot) {
            if (removeChild) {
                childRoot.parentNode.removeChild(childRoot);
                if (node.children) {
                    for (var i = 0; i < node.children.length; i++) {
                        unselectNode(this, node.children[i].id, {
                            force: true,
                            silent: false,
                            modifyDOM: false
                        });
                    }
                }
            } else {
                var rootClasses = [].concat(helper.getPartClasses(this, 'sub-root'), helper.getPartClasses(this, 'sub-root-collapsed'));
                childRoot.className = rootClasses.join(' ');
            }
        }
        var level = +lib.getAttribute(nodeElement, 'data-level');
        var nodeClasses = getNodeClasses(this, node, level, false);
        var childLoadedClass = helper.getPartClasses(this, 'node-child-loaded');
        nodeClasses.push(childLoadedClass);
        nodeElement.className = nodeClasses.join(' ');
        var indicator = lib.g(helper.getId(this, 'indicator-' + id));
        var indicatorClasses = [].concat(helper.getPartClasses(this, 'node-indicator'), helper.getPartClasses(this, 'node-indicator-level-' + level), helper.getPartClasses(this, 'node-indicator-current'), helper.getPartClasses(this, 'node-indicator-collapsed'));
        indicator.className = indicatorClasses.join(' ');
        indicator.innerHTML = INDICATOR_TEXT_MAPPING.collapsed;
    };
    function isEmpty(tree, nodeElement) {
        var className = helper.getPartClasses(tree, 'node-empty')[0];
        return lib.hasClass(nodeElement, className);
    }
    function isExpanded(tree, nodeElement) {
        var className = helper.getPartClasses(tree, 'node-expanded')[0];
        return lib.hasClass(nodeElement, className);
    }
    exports.toggleNode = function (id, children, removeChild) {
        if (!this.nodeIndex[id]) {
            return;
        }
        var nodeElement = lib.g(helper.getId(this, 'node-' + id));
        if (!nodeElement) {
            return;
        }
        if (isEmpty(this, nodeElement)) {
            return;
        }
        if (isExpanded(this, nodeElement)) {
            this.collapseNode(id, removeChild);
        } else {
            this.expandNode(id, children);
        }
    };
    exports.triggerLoadMoreEvent = function (id) {
        var node = this.nodeIndex[id];
        if (!node) {
            return;
        }
        this.fire('loadmoredata', { node: node });
    };
    exports.triggerToggleStrategy = function (id) {
        var node = this.nodeIndex[id];
        if (!node) {
            return;
        }
        var nodeElement = lib.g(helper.getId(this, 'node-' + id));
        if (!nodeElement) {
            return;
        }
        if (isEmpty(this, nodeElement)) {
            return;
        }
        if (isExpanded(this, nodeElement)) {
            this.fire('collapse', { node: node });
        } else {
            var childLoadedClass = helper.getPartClasses(this, 'node-child-loaded');
            var isRemote = !lib.hasClass(nodeElement, childLoadedClass);
            this.fire('expand', {
                node: node,
                remote: isRemote
            });
        }
    };
    exports.indicateNodeLoading = function (id) {
        var nodeElement = lib.g(helper.getId(this, 'node-' + id));
        if (!nodeElement) {
            return;
        }
        var children = lib.getChildren(nodeElement);
        var level = 0;
        while (!this.helper.isPart(children[level], 'item-content')) {
            level++;
        }
        var indicator = children[level];
        indicator.innerHTML = INDICATOR_TEXT_MAPPING.busy;
        var classes = [].concat(helper.getPartClasses(this, 'node-indicator'), helper.getPartClasses(this, 'node-indicator-level-' + level), helper.getPartClasses(this, 'node-indicator-current'), helper.getPartClasses(this, 'node-indicator-busy'));
        indicator.className = classes.join(' ');
    };
    exports.appendDatasource = function (datasource, targetId) {
        var baseId = this.helper.getId('node-row-more' + targetId);
        var moreControl = lib.g(baseId);
        var level = +lib.getAttribute(moreControl, 'data-level');
        var dom = document.createElement('ul');
        u.each(datasource.results, function (item) {
            var content = getNodeHTML(this, item, level, false);
            dom.innerHTML = content;
            var appendNode = dom.childNodes[0];
            appendNode && lib.insertBefore(appendNode, moreControl);
            buildNodeIndex(item, this.nodeIndex);
        }, this);
        if (datasource.moreFlag) {
            var lastDataId = datasource.results[datasource.results.length - 1].id;
            lib.setAttribute(moreControl, 'data-id', lastDataId);
            lib.setAttribute(moreControl, 'id', this.helper.getId('node-row-more' + lastDataId));
            var loadMoreClasses = this.helper.getPartClassName('row-loading');
            lib.removeClass(moreControl, loadMoreClasses);
        } else {
            lib.removeNode(moreControl);
        }
    };
    exports.dispose = function () {
        this.$super(arguments);
        this.nodeIndex = null;
        this.selectedNodes = null;
        this.selectedNodeIndex = null;
    };
    var Tree = require('eoo').create(Control, exports);
    require('esui').register(Tree);
    return Tree;
});

define('ub-ria-ui/PagingTableRichSelector', [
    'require',
    'esui/lib',
    'underscore',
    './util',
    './TableRichSelector',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var u = require('underscore');
    var util = require('./util');
    var TableRichSelector = require('./TableRichSelector');
    var exports = {};
    exports.type = 'PagingTableRichSelector';
    exports.initOptions = function (options) {
        var properties = {
            hasRowHead: true,
            hasIcon: true,
            firedOnIcon: false,
            datasource: {},
            selectedData: [],
            fields: [{
                    field: 'name',
                    content: 'name',
                    title: '\u540D\u79F0'
                }],
            allowUnselectNode: false
        };
        lib.extend(properties, options);
        if (properties.hasRowHead === 'false') {
            properties.hasRowHead = false;
        }
        if (properties.hasIcon === 'false') {
            properties.hasIcon = false;
        }
        if (properties.firedOnIcon === 'false') {
            properties.firedOnIcon = false;
        }
        if (properties.allowUnselectNode === 'false') {
            properties.allowUnselectNode = false;
        }
        this.$super([properties]);
    };
    exports.initStructure = function () {
        this.$super(arguments);
        lib.addClass(this.main, 'ui-paging-table-richselector');
    };
    exports.adaptData = function () {
        var allData = util.deepClone(this.datasource.results);
        var indexData = {};
        u.each(allData, function (item, index) {
            indexData[item.id] = index;
        });
        this.indexData = indexData;
        this.selectedData = this.selectedData || [];
        if (!this.multi) {
            if (!u.isArray(this.selectedData)) {
                this.currentSelectedId = this.selectedData.id;
                this.selectedData = [this.selectedData];
            } else if (this.selectedData.length) {
                this.currentSelectedId = this.selectedData[0].id;
            }
        }
        u.each(this.selectedData, function (item, index) {
            var selectedIndex = indexData[item.id];
            if (selectedIndex !== undefined) {
                allData[selectedIndex].isSelected = true;
            }
        });
        var disabledData = this.disabledData || [];
        u.each(disabledData, function (item, index) {
            var selectedIndex = indexData[item.id];
            if (selectedIndex !== undefined) {
                allData[selectedIndex].isDisabled = true;
            }
        });
        this.allData = allData;
        this.fieldsIndex = {};
        this.defaultSearchFields = [];
        u.each(this.fields, function (field) {
            this.fieldsIndex[field.field] = field;
            if (field.isDefaultSearchField) {
                this.defaultSearchFields.push(field.field);
            }
        }, this);
    };
    exports.refreshContent = function () {
        var data = this.isQuery() ? this.queriedData : this.allData;
        if (!data || data.length === 0) {
            this.addState('empty');
        } else {
            this.removeState('empty');
        }
        var htmlArray = [];
        if (this.hasRowHead) {
            htmlArray.push(createTableHead(this));
        }
        htmlArray.push(createTable(this, data));
        var queryList = this.getQueryList();
        queryList.setContent('');
        queryList.setContent(htmlArray.join(''));
    };
    function createTableHead(control) {
        var tableClass = control.helper.getPartClassName('head-table');
        var tpl = ['<table border=0 class="' + tableClass + '"><tr>'];
        var colmNum = control.fields.length;
        var thTpl = '<th class="th${i}" style="width:${width}px;">${title}</th>';
        for (var i = 0; i < colmNum; i++) {
            var field = control.fields[i];
            var data = {
                i: i,
                width: field.width,
                title: field.title
            };
            tpl.push(lib.format(thTpl, data));
        }
        tpl.push('<th style="width:30px;"></th>');
        tpl.push('</tr></table>');
        return tpl.join(' ');
    }
    function createTable(control, data) {
        var helper = control.helper;
        var tableClasses = helper.getPartClassName('content-table');
        var tpl = ['<table border=0 class="' + tableClasses + '">'];
        tpl.push(createTableContent(control, data));
        tpl.push(createMoreRow(control, data));
        tpl.push('</table>');
        return tpl.join(' ');
    }
    function createTableContent(control, data) {
        var isQuery = control.isQuery();
        var indexData = isQuery ? control.queriedIndexData : control.indexData;
        var helper = control.helper;
        var tpl = [];
        var baseRowClasses = helper.getPartClassName('row');
        var selectedRowClasses = helper.getPartClassName('row-selected');
        var disabledRowClasses = helper.getPartClassName('row-disabled');
        u.each(data, function (item, index) {
            var rowClasses = [baseRowClasses];
            if (isNodeSelected(control, item)) {
                rowClasses.push(selectedRowClasses);
            }
            if (item.isDisabled) {
                rowClasses.push(disabledRowClasses);
            }
            tpl.push(lib.format(control.rowTpl, {
                rowId: control.helper.getId('row-' + item.id),
                rowClass: rowClasses.join(' '),
                index: indexData[item.id],
                content: createRow(control, item, index)
            }));
        });
        return tpl.join(' ');
    }
    function isNodeSelected(control, node) {
        return !!u.findWhere(control.selectedData, { id: node.id });
    }
    function createMoreRow(control, data) {
        var indexData = control.isQuery() ? control.queriedIndexData : control.indexData;
        var helper = control.helper;
        var datasource = control.isQuery() ? control.queriedDatasource : control.datasource;
        var tpl = [];
        var baseRowClasses = helper.getPartClassName('row');
        var moreRowClasses = helper.getPartClassName('row-more');
        if (datasource.moreFlag) {
            var lastRowId = data[data.length - 1].id;
            var moreArea = lib.format(control.rowTpl, {
                rowId: control.helper.getId('more-row'),
                rowClass: [
                    baseRowClasses,
                    moreRowClasses
                ].join(' '),
                index: indexData[lastRowId],
                content: createMoreDataRow(control)
            });
            tpl.push(moreArea);
        }
        return tpl.join(' ');
    }
    function createMoreDataRow(control) {
        var fieldClasses = control.helper.getPartClassName('row-field');
        var arrowClasses = control.helper.getPartClassName('row-loading-icon');
        var fields = control.fields.length;
        var contentHtml = '<td colspan="${fields}" class="${fieldClasses}">\u52A0\u8F7D\u66F4\u591A</td>' + '<td style="width:30px;"><span class="${arrowClasses}"></span></td>';
        var data = {
            fields: fields,
            fieldClasses: fieldClasses,
            arrowClasses: arrowClasses
        };
        return lib.format(contentHtml, data);
    }
    function createRow(control, item, index, tr) {
        var fields = control.fields;
        var html = [];
        var fieldClasses = control.helper.getPartClassName('row-field');
        var cursor = 0;
        u.each(fields, function (field, i) {
            var content = field.content;
            var innerHTML = 'function' === typeof content ? content.call(control, item, index, i) : u.escape(item[content]);
            var contentTitle = field.contentTitle || content;
            var titleHTML = 'function' === typeof contentTitle ? u.escape(contentTitle.call(control, item, index, i)) : u.escape(item[contentTitle]);
            if (tr) {
                var td = tr.insertCell(i);
                td.style.width = field.width + 'px';
                td.title = titleHTML;
                td.innerHTML = innerHTML;
            } else {
                var data = {
                    fieldClasses: fieldClasses,
                    titleHTML: titleHTML,
                    width: field.width,
                    innerHTML: innerHTML
                };
                var contentHtml = '<td class="${fieldClasses}" title="${titleHTML}" ' + 'style="width:${width}px;">${innerHTML}</td>';
                html.push(lib.format(contentHtml, data));
            }
            cursor++;
        });
        var arrowClasses = control.helper.getPartClassName('row-action-icon');
        var arrowHTML = '<span class="' + arrowClasses + '"></span>';
        if (tr) {
            var td = tr.insertCell(cursor);
            td.style.width = '30px';
            td.innerHTML = arrowHTML;
        } else {
            html.push('<td style="width:30px;">' + arrowHTML + '</td>');
            return html.join(' ');
        }
    }
    exports.search = function () {
        var event = { filterData: [] };
        var searchBox = this.getSearchBox();
        this.keyword = lib.trim(searchBox.getValue());
        this.queriedData = [];
        this.queriedIndexData = {};
        this.queriedDatasource = { results: [] };
        this.addState('queried');
        this.fire('search', event);
    };
    exports.getKeyword = function () {
        return this.keyword;
    };
    exports.adaptAppendData = function (datasource) {
        var isQuery = this.isQuery();
        var length = isQuery ? this.queriedData.length : this.allData.length;
        var indexData = isQuery ? this.queriedIndexData : this.indexData;
        u.each(datasource.results, function (item, index) {
            indexData[item.id] = index + length;
        });
        this[isQuery ? 'queriedIndexData' : 'indexData'] = indexData;
        var thisDatasource = this[isQuery ? 'queriedDatasource' : 'datasource'];
        thisDatasource.results = thisDatasource.results.concat(datasource.results);
        thisDatasource.moreFlag = datasource.moreFlag;
        thisDatasource.totalCount = datasource.totalCount;
        this[isQuery ? 'queriedData' : 'allData'] = this[isQuery ? 'queriedData' : 'allData'].concat(datasource.results);
    };
    exports.appendDatasource = function (datasource, targetId) {
        this.adaptAppendData(datasource);
        this.refreshHead();
        this.refreshFoot();
        if (targetId) {
            var content = createTableContent(this, datasource.results);
            var baseId = this.helper.getId('more-row');
            var moreControl = lib.g(baseId);
            var dom = document.createElement('tbody');
            dom.innerHTML = content;
            var appendNode = dom.childNodes;
            u.each(appendNode, function (node) {
                node && lib.insertBefore(node, moreControl);
            });
            if (datasource.moreFlag) {
                var lastDataId = datasource.results[datasource.results.length - 1].id;
                lib.setAttribute(moreControl, 'index', this.isQuery() ? this.queriedIndexData[lastDataId] : this.indexData[lastDataId]);
                var loadMoreClasses = this.helper.getPartClassName('row-loading');
                lib.removeClass(moreControl, loadMoreClasses);
            } else {
                lib.removeNode(moreControl);
            }
        } else {
            this.refreshContent();
            this.refreshResult();
        }
    };
    exports.operateRow = function (row) {
        var disabledClasses = this.helper.getPartClassName('row-disabled');
        if (lib.hasClass(row, disabledClasses)) {
            return;
        }
        var index = parseInt(row.getAttribute('index'), 10);
        var item = this.isQuery() ? this.queriedData[index] : this.allData[index];
        if (!item) {
            return;
        }
        var rowLoadingClasses = this.helper.getPartClassName('row-loading');
        if (lib.hasClass(row, rowLoadingClasses)) {
            return;
        }
        var loadMoreClasses = this.helper.getPartClassName('row-more');
        if (lib.hasClass(row, loadMoreClasses)) {
            actionForLoadMoreData(this, row, item);
            return;
        }
        if (this.mode === 'add') {
            actionForAdd(this, row, item);
        } else if (this.mode === 'load') {
            actionForLoad(this, row, item);
        }
    };
    function actionForAdd(control, row, item) {
        var selectedClasses = control.helper.getPartClassName('row-selected');
        var fire = false;
        if (lib.hasClass(row, selectedClasses)) {
            if (!control.multi) {
                if (control.allowUnselectNode) {
                    selectItem(control, item.id, false);
                    fire = true;
                }
            }
        } else {
            selectItem(control, item.id, true);
            fire = true;
        }
        if (fire) {
            control.fire('add', { item: item });
            control.fire('change');
        }
    }
    function actionForLoadMoreData(control, row, item) {
        var loadMoreClasses = control.helper.getPartClassName('row-loading');
        lib.addClass(row, loadMoreClasses);
        var event = {
            item: item,
            filterData: []
        };
        control.fire('loadmoredata', event);
    }
    function selectItem(control, id, toBeSelected) {
        var indexData = control.isQuery() ? control.queriedIndexData : control.indexData;
        var data = control.isQuery() ? control.queriedData : control.allData;
        var index = indexData[id];
        var item = data[index];
        if (!control.multi) {
            unselectCurrent(control);
            control.currentSelectedId = toBeSelected ? id : null;
            control.selectedData = [item];
        } else {
            if (toBeSelected) {
                var notSelected = !control.selectedData.length || !u.findWhere(control.selectedData, { id: item.id });
                if (notSelected) {
                    control.selectedData.push(item);
                }
            } else {
                control.selectedData = u.filter(control.selectedData, function (item) {
                    return item.id !== id;
                });
            }
        }
        updateSingleItemStatus(control, item, toBeSelected);
    }
    function unselectCurrent(control) {
        var curId = control.currentSelectedId;
        var index = control.indexData[curId];
        var item = control.allData[index];
        updateSingleItemStatus(control, item, false);
        if (control.isQuery()) {
            index = control.queriedIndexData[curId];
            item = control.queriedData[index];
            updateSingleItemStatus(control, item, false);
        }
        control.currentSelectedId = null;
    }
    function updateSingleItemStatus(control, item, toBeSelected) {
        if (!item) {
            return;
        }
        item.isSelected = toBeSelected;
        var itemDOM = control.helper.getPart('row-' + item.id);
        var changeClass = toBeSelected ? lib.addClass : lib.removeClass;
        changeClass(itemDOM, control.helper.getPartClassName('row-selected'));
    }
    exports.getSelectedItems = function () {
        return this.selectedData;
    };
    exports.refresh = function () {
        var adaptedData = this.adaptData();
        this.refreshContent();
        this.processDataAfterRefresh(adaptedData);
        this.refreshFoot();
        this.refreshHead();
        this.adjustHeight();
    };
    function actionForLoad(control, row, item) {
        var selectedClasses = control.helper.getPartClassName('row-selected');
        if (!lib.hasClass(row, selectedClasses)) {
            selectItem(control, item.id, true);
            control.fire('load');
            control.fire('change');
        }
    }
    exports.clearData = function () {
        this.queriedData = [];
        this.queriedIndexData = {};
        this.queriedDatasource = { results: [] };
        this.keyword = '';
    };
    exports.selectAll = function () {
        var data = this.isQuery() ? this.queriedData : this.allData;
        var control = this;
        u.each(data, function (item) {
            selectItem(control, item.id, true);
        });
        this.fire('add');
        this.fire('change');
    };
    exports.selectItems = function (items, toBeSelected) {
        var allData = this.allData;
        var indexData = this.indexData;
        var control = this;
        u.each(items, function (item) {
            var id = item.id !== undefined ? item.id : item;
            var itemIndex = indexData[id];
            if (itemIndex != null) {
                var rawItem = allData[itemIndex];
                selectItem(control, rawItem.id, toBeSelected);
            } else {
                var selectedItem = u.findWhere(control.selectedData, { id: id });
                selectItem(control, selectedItem.id, toBeSelected);
            }
        });
    };
    exports.getCurrentStateItemsCount = function () {
        return this.isQuery() ? this.queriedDatasource.totalCount : this.datasource.totalCount;
    };
    var PagingTableRichSelector = require('eoo').create(TableRichSelector, exports);
    require('esui').register(PagingTableRichSelector);
    return PagingTableRichSelector;
});

define('ub-ria-ui/PagingSelectorTreeStrategy', [
    'require',
    'esui/lib',
    'esui/TreeStrategy',
    'eoo'
], function (require) {
    var lib = require('esui/lib');
    var exports = {};
    exports.constructor = function (options) {
        var defaults = { defaultExpand: false };
        lib.extend(this, defaults, options);
    };
    exports.isLeafNode = function (node) {
        return !node.children || !node.children.length;
    };
    exports.hasMoreFlag = function (node) {
        return node.children && node.children.moreFlag;
    };
    exports.shouldExpand = function (node) {
        return this.defaultExpand;
    };
    exports.enableToggleStrategy = function (tree) {
        tree.on('expand', function (e) {
            if (e.remote) {
                tree.fire('loadmoredata', e);
            } else {
                this.expandNode(e.node.id);
            }
            return;
        });
        tree.on('collapse', function (e) {
            this.collapseNode(e.node.id, false);
        });
    };
    exports.enableSelectStrategy = function (tree) {
        var treeStrategy = this;
        tree.on('select', function (e) {
            var canSelect = true;
            var isLeafNode = treeStrategy.isLeafNode(e.node);
            if (treeStrategy.mode !== 'load') {
                if (treeStrategy.onlyLeafSelect && !isLeafNode) {
                    canSelect = false;
                }
            } else {
                if (!isLeafNode) {
                    canSelect = false;
                }
            }
            if (canSelect) {
                this.selectNode(e.node.id);
            }
        });
        tree.on('unselect', function (e) {
            if (tree.get('allowUnselectNode')) {
                tree.unselectNode(e.node.id);
            }
        });
    };
    var TreeStrategy = require('esui/TreeStrategy');
    var SelectorTreeStrategy = require('eoo').create(TreeStrategy, exports);
    return SelectorTreeStrategy;
});

define('ub-ria-ui/util', [
    'require',
    'underscore'
], function (require) {
    var u = require('underscore');
    var EMPTY_OBJECT = {};
    var util = {};
    util.purify = function purify(object, defaults, deep) {
        defaults = defaults || EMPTY_OBJECT;
        var purifiedObject = {};
        u.each(object, function (value, key) {
            var isDefaultNull = value == null || value === '';
            var isInDefaults = defaults.hasOwnProperty(key) && defaults[key] === value;
            if (!isDefaultNull && !isInDefaults) {
                if (deep && typeof value === 'object') {
                    purifiedObject[key] = purify(value, defaults[key], deep);
                } else {
                    purifiedObject[key] = value;
                }
            }
        });
        return purifiedObject;
    };
    util.trim = function (s) {
        return s.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    };
    util.pascalize = function (s) {
        s = s + '';
        if (/^[A-Z\s-\/_]+$/.test(s)) {
            s = s.toLowerCase();
        }
        s = s.replace(/[\s-\/_]+(.)/g, function (w, c) {
            return c.toUpperCase();
        });
        s = s.charAt(0).toUpperCase() + s.slice(1);
        return s;
    };
    util.pascalize = u.memoize(util.pascalize);
    util.camelize = function (s) {
        s = util.pascalize(s);
        return s.charAt(0).toLowerCase() + s.slice(1);
    };
    util.camelize = u.memoize(util.camelize);
    util.dasherize = function (s) {
        s = util.pascalize(s);
        s = s.replace(/[A-Z]{2,}$/g, function (match) {
            return match.charAt(0) + match.slice(1).toLowerCase();
        });
        s = s.replace(/[A-Z]{2,}/g, function (match) {
            return match.charAt(0) + match.slice(1, -1).toLowerCase() + match.charAt(match.length - 1);
        });
        s = s.replace(/[A-Z]/g, function (match) {
            return '-' + match.toLowerCase();
        });
        if (s.charAt(0) === '-') {
            s = s.substring(1);
        }
        return s;
    };
    util.dasherize = u.memoize(util.dasherize);
    util.constlize = function (s) {
        s = util.pascalize(s);
        return s.toUpperCase();
    };
    util.constlize = u.memoize(util.constlize);
    util.pluralize = function (s) {
        return s.replace(/y$/, 'ie') + 's';
    };
    util.pluralize = u.memoize(util.pluralize);
    util.formatNumber = function (number, decimals, emptyValue, prefix) {
        if (typeof arguments[1] !== 'number') {
            prefix = arguments[2];
            emptyValue = arguments[1];
            decimals = 0;
        }
        prefix = prefix || '';
        emptyValue = emptyValue || '';
        if (number == null || isNaN(number)) {
            return prefix + emptyValue;
        }
        number = parseFloat(number).toFixed(decimals);
        var parts = number.split('.');
        var integer = parts[0];
        var decimal = parts[1];
        integer = integer.replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
        var result = prefix + integer;
        if (decimal) {
            result += '.' + decimal;
        }
        return result;
    };
    util.pad = function (s, padding, length) {
        s = s + '';
        var padLength = length - s.length;
        if (padLength > 0) {
            var left = new Array(padLength + 1).join(padding);
            return left + s;
        }
        return s;
    };
    util.padRight = function (s, padding, length) {
        s = s + '';
        var padLength = length - s.length;
        if (padLength > 0) {
            var right = new Array(padLength + 1).join(padding);
            return s + right;
        }
        return s;
    };
    util.deepClone = function (obj) {
        if (!u.isObject(obj) || u.isFunction(obj) || u.isRegExp(obj)) {
            return obj;
        }
        if (u.isArray(obj)) {
            return u.map(obj, util.deepClone);
        }
        var clone = {};
        u.each(obj, function (value, key) {
            clone[key] = util.deepClone(value);
        });
        return clone;
    };
    util.compare = function (stringA, stringB, config) {
        if (!u.isString(stringA) || !u.isString(stringB)) {
            return stringA === stringB;
        }
        config = config || {};
        if (!config.caseSensitive) {
            stringA = stringA.toLowerCase();
            stringB = stringB.toLowerCase();
        }
        if (config.isPartial) {
            return stringA.indexOf(stringB) !== -1;
        }
        return stringA === stringB;
    };
    return util;
});

define('ub-ria-ui/TableRichSelector', [
    'require',
    'esui/lib',
    'underscore',
    './util',
    './RichSelector',
    'esui/painters',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var u = require('underscore');
    var util = require('./util');
    var RichSelector = require('./RichSelector');
    var exports = {};
    exports.type = 'TableRichSelector';
    exports.styleType = 'RichSelector';
    exports.initOptions = function (options) {
        var properties = {
            hasRowHead: true,
            hasIcon: true,
            firedOnIcon: false,
            datasource: [],
            selectedData: [],
            fields: [{
                    field: 'name',
                    content: 'name',
                    title: '\u540D\u79F0',
                    searchScope: 'partial',
                    isDefaultSearchField: true,
                    caseSensitive: false
                }],
            allowUnselectNode: false
        };
        lib.extend(properties, options);
        if (properties.hasRowHead === 'false') {
            properties.hasRowHead = false;
        }
        if (properties.hasIcon === 'false') {
            properties.hasIcon = false;
        }
        if (properties.firedOnIcon === 'false') {
            properties.firedOnIcon = false;
        }
        if (properties.allowUnselectNode === 'false') {
            properties.allowUnselectNode = false;
        }
        this.$super([properties]);
    };
    exports.initStructure = function () {
        this.$super(arguments);
        lib.addClass(this.main, 'ui-table-richselector');
    };
    exports.repaint = require('esui/painters').createRepaint(RichSelector.prototype.repaint, {
        name: [
            'datasource',
            'selectedData',
            'disabledData'
        ],
        paint: function (control, datasource, selectedData, disabledData) {
            control.refresh();
            control.fire('change');
        }
    });
    exports.adaptData = function () {
        var allData = util.deepClone(this.datasource);
        var indexData = {};
        u.each(allData, function (item, index) {
            indexData[item.id] = index;
        });
        this.indexData = indexData;
        var selectedData = this.selectedData || [];
        if (!this.multi) {
            if (!u.isArray(selectedData)) {
                this.currentSelectedId = selectedData;
                selectedData = [{ id: selectedData }];
            } else if (selectedData.length) {
                this.currentSelectedId = selectedData[0].id;
            }
        }
        u.each(selectedData, function (item, index) {
            var selectedIndex = indexData[item.id];
            if (selectedIndex !== undefined) {
                allData[selectedIndex].isSelected = true;
            }
        });
        var disabledData = this.disabledData || [];
        u.each(disabledData, function (item, index) {
            var selectedIndex = indexData[item.id];
            if (selectedIndex !== undefined) {
                allData[selectedIndex].isDisabled = true;
            }
        });
        this.allData = allData;
        this.fieldsIndex = {};
        this.defaultSearchFields = [];
        u.each(this.fields, function (field) {
            this.fieldsIndex[field.field] = field;
            if (field.isDefaultSearchField) {
                this.defaultSearchFields.push(field.field);
            }
        }, this);
    };
    exports.refreshContent = function () {
        var data = this.isQuery() ? this.queriedData : this.allData;
        if (!data || data.length === 0) {
            this.addState('empty');
        } else {
            this.removeState('empty');
        }
        var htmlArray = [];
        if (this.hasRowHead) {
            htmlArray.push(createTableHead(this));
        }
        htmlArray.push(createTableContent(this, data));
        var queryList = this.getQueryList();
        queryList.setContent(htmlArray.join(''));
    };
    function createTableHead(control) {
        var tableClass = control.helper.getPartClassName('head-table');
        var tpl = ['<table border=0 class="' + tableClass + '"><tr>'];
        var colmNum = control.fields.length;
        for (var i = 0; i < colmNum; i++) {
            var field = control.fields[i];
            tpl.push('' + '<th class="th' + i + '"' + ' style="width:' + field.width + 'px;">' + field.title || '' + '</th>');
        }
        tpl.push('<th style="width:30px;"></th>');
        tpl.push('</tr></table>');
        return tpl.join(' ');
    }
    exports.rowTpl = '' + '<tr id="${rowId}" class="${rowClass}" ' + 'index="${index}">${content}</tr>';
    function createTableContent(control, data) {
        var indexData = control.indexData;
        var helper = control.helper;
        var tableClasses = helper.getPartClassName('content-table');
        var tpl = ['<table border=0 class="' + tableClasses + '">'];
        var baseRowClasses = helper.getPartClassName('row');
        var selectedRowClasses = helper.getPartClassName('row-selected');
        var disabledRowClasses = helper.getPartClassName('row-disabled');
        u.each(data, function (item, index) {
            var rowClasses = [baseRowClasses];
            if (item.isSelected) {
                rowClasses.push(selectedRowClasses);
            }
            if (item.isDisabled) {
                rowClasses.push(disabledRowClasses);
            }
            tpl.push(lib.format(control.rowTpl, {
                rowId: control.helper.getId('row-' + item.id),
                rowClass: rowClasses.join(' '),
                index: indexData[item.id],
                content: createRow(control, item, index)
            }));
        });
        tpl.push('</table>');
        return tpl.join(' ');
    }
    function createRow(control, item, index, tr) {
        var fields = control.fields;
        var html = [];
        var fieldClasses = control.helper.getPartClassName('row-field');
        var cursor = 0;
        u.each(fields, function (field, i) {
            var content = field.content;
            var innerHTML = 'function' === typeof content ? content.call(control, item, index, i) : u.escape(item[content]);
            var contentTitle = field.contentTitle || content;
            var titleHTML = 'function' === typeof contentTitle ? u.escape(contentTitle.call(control, item, index, i)) : u.escape(item[contentTitle]);
            if (tr) {
                var td = tr.insertCell(i);
                td.style.width = field.width + 'px';
                td.title = titleHTML;
                td.innerHTML = innerHTML;
            } else {
                var contentHtml = '' + '<td class="' + fieldClasses + '" title="' + titleHTML + '" style="width:' + field.width + 'px;">' + innerHTML + '</td>';
                html.push(contentHtml);
            }
            cursor++;
        });
        var arrowClasses = control.helper.getPartClassName('row-action-icon');
        var arrowHTML = '<span class="' + arrowClasses + '"></span>';
        if (tr) {
            var td = tr.insertCell(cursor);
            td.style.width = '30px';
            td.innerHTML = arrowHTML;
        } else {
            html.push('<td style="width:30px;">' + arrowHTML + '</td>');
            return html.join(' ');
        }
    }
    exports.eventDispatcher = function (e) {
        var tar = e.target;
        var helper = this.helper;
        var rowClasses = helper.getPartClassName('row');
        var actionClasses = helper.getPartClassName('row-action-icon');
        while (tar && tar !== document.body) {
            var rowDOM;
            if (this.hasIcon && this.fireOnIcon && lib.hasClass(tar, actionClasses)) {
                rowDOM = tar.parentNode;
            } else {
                if (lib.hasClass(tar, rowClasses)) {
                    rowDOM = tar;
                }
            }
            if (rowDOM) {
                this.operateRow(rowDOM);
                return;
            }
            tar = tar.parentNode;
        }
    };
    exports.operateRow = function (row) {
        var disabledClasses = this.helper.getPartClassName('row-disabled');
        if (lib.hasClass(row, disabledClasses)) {
            return;
        }
        var index = parseInt(row.getAttribute('index'), 10);
        var item = this.allData[index];
        if (!item) {
            return;
        }
        if (this.mode === 'add') {
            actionForAdd(this, row, item);
        } else if (this.mode === 'delete') {
            actionForDelete(this, row, item);
        } else if (this.mode === 'load') {
            actionForLoad(this, row, item);
        }
    };
    function actionForAdd(control, row, item) {
        var selectedClasses = control.helper.getPartClassName('row-selected');
        var fire = false;
        if (lib.hasClass(row, selectedClasses)) {
            if (!control.multi) {
                if (control.allowUnselectNode) {
                    selectItem(control, item.id, false);
                    fire = true;
                }
            }
        } else {
            selectItem(control, item.id, true);
            fire = true;
        }
        if (fire) {
            control.fire('add', { item: item });
            control.fire('change');
        }
    }
    function selectItem(control, id, toBeSelected) {
        var indexData = control.indexData;
        var data = control.allData;
        var index = indexData[id];
        var item = data[index];
        if (!control.multi) {
            unselectCurrent(control);
            control.currentSelectedId = toBeSelected ? id : null;
        }
        updateSingleItemStatus(control, item, toBeSelected);
    }
    function unselectCurrent(control) {
        var curId = control.currentSelectedId;
        var index = control.indexData[curId];
        var item = control.allData[index];
        updateSingleItemStatus(control, item, false);
        control.currentSelectedId = null;
    }
    function updateSingleItemStatus(control, item, toBeSelected) {
        if (!item) {
            return;
        }
        item.isSelected = toBeSelected;
        var itemDOM = control.helper.getPart('row-' + item.id);
        var changeClass = toBeSelected ? lib.addClass : lib.removeClass;
        changeClass(itemDOM, control.helper.getPartClassName('row-selected'));
    }
    exports.selectAll = function () {
        var data = this.isQuery() ? this.queriedData : this.allData;
        var control = this;
        u.each(data, function (item) {
            selectItem(control, item.id, true);
        });
        this.fire('add');
        this.fire('change');
    };
    exports.selectItems = function (items, toBeSelected) {
        var allData = this.allData;
        var indexData = this.indexData;
        var control = this;
        u.each(items, function (item) {
            var id = item.id !== undefined ? item.id : item;
            var itemIndex = indexData[id];
            if (itemIndex != null) {
                var rawItem = allData[itemIndex];
                selectItem(control, rawItem.id, toBeSelected);
            }
        });
    };
    function actionForDelete(control, row, item) {
        deleteItem(control, item.id);
        control.fire('delete', { items: [item] });
        control.fire('change');
    }
    function deleteItem(control, id) {
        var indexData = control.indexData;
        var index = indexData[id];
        var newData = [].slice.call(control.datasource, 0);
        newData.splice(index, 1);
        control.set('datasource', newData);
    }
    exports.deleteAll = function () {
        var items = u.clone(this.datasource);
        this.set('datasource', []);
        this.fire('delete', { items: items });
        this.fire('change');
    };
    function actionForLoad(control, row, item) {
        var selectedClasses = control.helper.getPartClassName('row-selected');
        if (!lib.hasClass(row, selectedClasses)) {
            selectItem(control, item.id, true);
            control.fire('load');
            control.fire('change');
        }
    }
    exports.queryItem = function (filters) {
        filters = filters || [];
        this.queriedData = this.findQueriedData(filters);
        this.addState('queried');
        this.refreshContent();
    };
    exports.findQueriedData = function (filters) {
        function checkHitByFilterItem(field, expectValue, data) {
            var hit = false;
            if (typeof expectValue === 'string') {
                expectValue = lib.trim(expectValue);
            }
            var config = {
                isPartial: this.fieldsIndex[field].searchScope === 'partial',
                caseSensitive: this.fieldsIndex[field].caseSensitive
            };
            if (util.compare(data[field], expectValue, config)) {
                hit = true;
            }
            return hit;
        }
        function checkRowHit(data, index) {
            return !u.any(filters, function (filter) {
                var searchFields = [];
                if (filter.keys === undefined) {
                    searchFields = this.defaultSearchFields;
                } else {
                    searchFields = filter.keys;
                }
                return !u.any(searchFields, function (searchField) {
                    return checkHitByFilterItem.call(this, searchField, filter.value, data);
                }, this);
            }, this);
        }
        return u.filter(this.allData, checkRowHit, this);
    };
    exports.clearData = function () {
        this.queriedData = [];
    };
    exports.getSelectedItems = function () {
        var rawData = this.datasource;
        var allData = this.allData;
        var mode = this.mode;
        if (mode === 'delete') {
            return allData;
        }
        var selectedData = u.filter(rawData, function (item, index) {
            return allData[index].isSelected;
        });
        return selectedData;
    };
    exports.getCurrentStateItemsCount = function () {
        var data = this.isQuery() ? this.queriedData : this.allData;
        data = data || [];
        return data.length;
    };
    var TableRichSelector = require('eoo').create(RichSelector, exports);
    require('esui').register(TableRichSelector);
    return TableRichSelector;
});

define('ub-ria-ui/CascadingTableRichSelector', [
    'require',
    'esui/Panel',
    'esui/InputControl',
    'esui/controlHelper',
    'esui/lib',
    'underscore',
    'esui',
    './TableRichSelector'
], function (require) {
    require('esui/Panel');
    var InputControl = require('esui/InputControl');
    var helper = require('esui/controlHelper');
    var lib = require('esui/lib');
    var u = require('underscore');
    var ui = require('esui');
    require('./TableRichSelector');
    function CascadingTableRichSelector(options) {
        InputControl.apply(this, arguments);
    }
    lib.inherits(CascadingTableRichSelector, InputControl);
    CascadingTableRichSelector.prototype.type = 'CascadingTableRichSelector';
    CascadingTableRichSelector.prototype.initOptions = function (options) {
        var properties = {
            height: 340,
            width: 200,
            datasource: [],
            fields: [{
                    field: 'name',
                    content: 'name',
                    width: 110,
                    searchScope: 'partial',
                    isDefaultSearchField: true
                }],
            keyField: 'id'
        };
        lib.extend(properties, options);
        properties.width = Math.max(200, properties.width);
        this.setProperties(properties);
    };
    CascadingTableRichSelector.prototype.initStructure = function () {
        var commonOption = {
            needBatchAction: true,
            hasRowHead: false,
            hasFoot: false,
            itemName: this.itemName,
            height: this.height,
            width: this.width,
            fields: this.fields,
            keyField: this.keyField
        };
        var sourceOption = {
            mode: 'add',
            hasSearchBox: this.hasSourceSearchBox,
            batchActionLabel: '\u6DFB\u52A0\u5168\u90E8',
            title: this.sourceTitle,
            emptyText: this.sourceEmptyText
        };
        var targetOption = {
            mode: 'delete',
            hasSearchBox: this.hasTargetSearchBox,
            batchActionLabel: '\u5220\u9664\u5168\u90E8',
            title: this.targetTitle,
            emptyText: this.targetEmptyText
        };
        var sourceSelector = ui.create('TableRichSelector', u.extend(sourceOption, commonOption));
        var targetSelector = ui.create('TableRichSelector', u.extend(targetOption, commonOption));
        this.helper.addPartClasses('source', sourceSelector.main);
        this.helper.addPartClasses('source', targetSelector.main);
        this.addChild(sourceSelector, 'source');
        sourceSelector.appendTo(this.main);
        this.addChild(targetSelector, 'target');
        targetSelector.appendTo(this.main);
        sourceSelector.on('add', function () {
            var newdata = this.getSelectedItems();
            targetSelector.setProperties({ datasource: newdata });
        });
        targetSelector.on('delete', function (arg) {
            var items = arg.items;
            sourceSelector.selectItems(items, false);
        });
    };
    function refresh(control, datasource, rawValue) {
        if (!datasource) {
            return;
        }
        var datasourceIndex = u.indexBy(control.datasource, control.keyField);
        var selectedData = [];
        u.each(rawValue, function (id) {
            if (datasourceIndex[id]) {
                selectedData.push(datasourceIndex[id]);
            }
        });
        var source = control.getChild('source');
        source.setProperties({
            datasource: datasource,
            selectedData: selectedData
        });
        var target = control.getChild('target');
        target.setProperties({ datasource: selectedData });
    }
    CascadingTableRichSelector.prototype.repaint = helper.createRepaint(InputControl.prototype.repaint, {
        name: [
            'datasource',
            'rawValue'
        ],
        paint: refresh
    });
    CascadingTableRichSelector.prototype.getSelectedItems = function () {
        var source = this.getChild('source');
        return source.getSelectedItems();
    };
    CascadingTableRichSelector.prototype.setRawValue = function (selectedItems) {
        this.set('rawValue', selectedItems);
    };
    CascadingTableRichSelector.prototype.getRawValue = function () {
        var control = this;
        var selectedItems = this.getSelectedItems();
        return u.map(selectedItems, function (item) {
            return item[control.keyField];
        });
    };
    CascadingTableRichSelector.prototype.stringifyValue = function (rawValue) {
        var selectedIds = [];
        u.each(rawValue, function (item) {
            selectedIds.push(item);
        });
        return selectedIds.join(',');
    };
    require('esui').register(CascadingTableRichSelector);
    return CascadingTableRichSelector;
});

define('ub-ria-ui/Carousel', [
    'require',
    'underscore',
    'esui/lib',
    'esui/painters',
    'esui/Control',
    'eoo',
    'esui/main'
], function (require) {
    var u = require('underscore');
    var lib = require('esui/lib');
    var paint = require('esui/painters');
    var Control = require('esui/Control');
    var eoo = require('eoo');
    var MAIN_TPL = [
        '<div class="${typeSelector}-main" id="${contentId}">',
        '<div class="${typeSelector}-content">',
        '<span class="${typeSelector}-pointer ${typeSelector}-pointer-active-l ${iconLeftArrow}" id="${leftId}"></span>',
        '<div class="ui-carouse-list-wrap">',
        '<ul class="${typeSelector}-list" id="${listId}"></ul>',
        '</div>',
        '<span class="${typeSelector}-pointer ${typeSelector}-pointer-active-r ${iconRightArrow}" id="${rightId}"></span>',
        '</div>',
        '<div class="${typeSelector}-toolbar">',
        '<ul id="${toolbarId}"></ul>',
        '</div>',
        '</div>'
    ].join('');
    var ITEM_TPL = [
        '<li class="${typeSelector}-item ${itemSelector}" index="${index}" style="width:${width}px;height:${height}px;">',
        '<img class="${typeSelector}-item-img" src="${imgSrc}"/>',
        '<span class="${typeSelector}-check ${iconCheck}"></span>',
        '</li>'
    ].join('');
    var PAGE_TPL = '<li index="${index}" class="${typeSelector}-page"></li>';
    function getMainHtml() {
        return lib.format(MAIN_TPL, {
            'typeSelector': this.helper.getPrimaryClassName(),
            'contentId': this.helper.getId('main'),
            'leftId': this.helper.getId('left-handler'),
            'listId': this.helper.getId('list'),
            'rightId': this.helper.getId('right-handler'),
            'toolbarId': this.helper.getId('toolbar'),
            'iconLeftArrow': this.helper.getIconClass('chevron-left'),
            'iconRightArrow': this.helper.getIconClass('chevron-right')
        });
    }
    ;
    function getItemHtml(data, itemWidth, itemHeight) {
        var html = [];
        u.each(data, function (item, index) {
            var str = lib.format(ITEM_TPL, {
                'imgSrc': item.url,
                'width': itemWidth,
                'height': itemHeight,
                'index': index,
                'typeSelector': this.helper.getPrimaryClassName(),
                'itemSelector': this.isDisabled() ? this.helper.getPartClassName('disabled') : '',
                'iconCheck': this.helper.getIconClass('check')
            });
            html.push(str);
        }, this);
        return html.join('');
    }
    ;
    function getToolbarHtml(data) {
        var html = [];
        var len = data.length;
        var divided = Math.ceil(len / this.pageSize);
        this.pageLength = divided;
        for (var i = 0; i < divided; i++) {
            var str = lib.format(PAGE_TPL, {
                'index': i,
                'typeSelector': this.helper.getPrimaryClassName()
            });
            html.push(str);
        }
        return html.join('');
    }
    ;
    function getPageByIndex() {
        if (this.selectedIndex === -1) {
            return 0;
        }
        return Math.floor(this.selectedIndex / this.pageSize);
    }
    ;
    function setPointerStyle() {
        var disableClass = this.helper.getPartClasses('pointer-disable')[0];
        if (this.pageLength === 1) {
            lib.addClass(this.helper.getId('left-handler'), disableClass);
            lib.addClass(this.helper.getId('right-handler'), disableClass);
        } else {
            if (this.currentPage === 0) {
                lib.addClass(this.helper.getId('left-handler'), disableClass);
                lib.removeClass(this.helper.getId('right-handler'), disableClass);
            } else if (this.currentPage === this.pageLength - 1) {
                lib.removeClass(this.helper.getId('left-handler'), disableClass);
                lib.addClass(this.helper.getId('right-handler'), disableClass);
            } else {
                lib.removeClass(this.helper.getId('left-handler'), disableClass);
                lib.removeClass(this.helper.getId('right-handler'), disableClass);
            }
        }
    }
    ;
    function setCarouseListPosition() {
        var pageOffset = -this.wrapWidth;
        var left = pageOffset * this.currentPage + 'px';
        this.helper.getPart('list').style.left = left;
    }
    ;
    function pointerClick(n) {
        var nextPage = this.currentPage + n;
        if (nextPage >= this.pageLength || nextPage < 0) {
            return;
        } else {
            this.setPage(nextPage);
        }
    }
    ;
    function itemClick(index, el) {
        if (this.isDisabled() || this.selectedIndex === index) {
            return;
        }
        var selectedClass = this.helper.getPrimaryClassName('selected-item');
        if (this.selectedIndex !== -1) {
            var selector = this.helper.getPart('list');
            var lis = selector.getElementsByTagName('li');
            var li = lis[this.selectedIndex];
            lib.removeClass(li, selectedClass);
        }
        lib.addClass(el, selectedClass);
        this.selectedIndex = index;
        this.selectedItem = this.getSelectedItem();
        this.value = this.selectedItem['id'];
        this.fire('change');
    }
    ;
    function pageClick(nextPage) {
        if (this.currentPage === nextPage) {
            return;
        } else {
            this.setPage(nextPage);
        }
    }
    ;
    function itemChangeHandler(e) {
        e = e || window.event;
        var target = e.target || e.srcElement;
        if (target.nodeName === 'IMG') {
            var el = target.parentNode;
            var index = parseInt(el.getAttribute('index'), 10);
            itemClick.call(this, index, el);
        }
    }
    ;
    function toolbarHandler(e) {
        e = e || window.event;
        var target = e.target || e.srcElement;
        if (target.nodeName === 'LI') {
            var index = parseInt(target.getAttribute('index'), 10);
            pageClick.call(this, index);
        }
    }
    ;
    var exports = {
        type: 'Carousel',
        initOptions: function (options) {
            var properties = {
                pageSize: 8,
                itemWidth: 80,
                itemHeight: 50,
                datasource: [],
                value: null,
                selectedIndex: -1,
                disabled: false
            };
            u.extend(properties, options);
            if (properties.value) {
                properties.value = parseInt(properties.value, 10);
                u.each(properties.datasource, function (item, index) {
                    if (item.id === properties.value) {
                        properties.selectedIndex = index;
                    }
                });
                properties.selectedItem = properties.datasource[properties.selectedIndex];
            }
            properties.itemWidth = parseFloat(properties.itemWidth, 10);
            properties.itemHeight = parseFloat(properties.itemHeight, 10);
            properties.pageSize = parseFloat(properties.pageSize, 10);
            this.setProperties(properties);
        },
        createMain: function () {
            return document.createElement('div');
        },
        initStructure: function () {
            this.main.innerHTML = getMainHtml.call(this);
        },
        initEvents: function () {
            this.helper.addDOMEvent('left-handler', 'click', u.bind(pointerClick, this, -1));
            this.helper.addDOMEvent('right-handler', 'click', u.bind(pointerClick, this, 1));
            this.helper.addDOMEvent('list', 'click', itemChangeHandler);
            this.helper.addDOMEvent('toolbar', 'click', toolbarHandler);
        },
        repaint: paint.createRepaint(Control.prototype.repaint, {
            name: [
                'datasource',
                'itemWidth',
                'itemHeight'
            ],
            paint: function (carousel, datasource, itemWidth, itemHeight) {
                var list = carousel.helper.getPart('list');
                var toolbar = carousel.helper.getPart('toolbar');
                list.innerHTML = getItemHtml.call(carousel, datasource, itemWidth, itemHeight);
                toolbar.innerHTML = getToolbarHtml.call(carousel, datasource);
                var wrapWidth = (itemWidth + 4 * 2 + 2 * 2) * carousel.pageSize;
                var wrapHeight = itemHeight + 4 * 2;
                carousel.wrapWidth = wrapWidth;
                var wrap = list.parentNode;
                wrap.style.width = wrapWidth + 'px';
                wrap.style.height = wrapHeight + 'px';
                var container = carousel.helper.getPart('main');
                container.style.width = wrapWidth + 30 * 2 + 'px';
            }
        }, {
            name: 'value',
            paint: function (carousel, value) {
                carousel.setValue(value);
            }
        }),
        setValue: function (value) {
            if (!value && value !== 0) {
                return;
            }
            this.value = parseInt(value, 10);
            this.selectedIndex = -1;
            u.each(this.datasource, function (item, index) {
                if (item.id === this.value) {
                    this.selectedIndex = index;
                }
            }, this);
            this.selectedItem = this.getSelectedItem();
            if (this.selectedIndex !== -1) {
                var selector = this.helper.getPart('list');
                var lis = selector.getElementsByTagName('li');
                var selectedClass = this.helper.getPrimaryClassName('selected-item');
                u.each(lis, function (dom, i) {
                    lib.removeClass(dom, selectedClass);
                });
                var li = lis[this.selectedIndex];
                lib.addClass(li, selectedClass);
            }
            var page = getPageByIndex.call(this);
            this.setPage(page);
        },
        setPage: function (page) {
            page = page || 0;
            page = parseInt(page, 10);
            var currentPageClass = this.helper.getPrimaryClassName('current-page');
            if (this.currentPage === null) {
                this.currentPage = 0;
            }
            if (this.currentPage !== page) {
                this.currentPage = page;
            }
            var allDom = lib.getChildren(this.helper.getPart('toolbar'));
            u.each(allDom, function (dom, i) {
                lib.removeClass(dom, currentPageClass);
                var index = parseInt(dom.getAttribute('index'), 10);
                if (this.currentPage === index) {
                    lib.addClass(dom, currentPageClass);
                }
            }, this);
            setPointerStyle.call(this);
            setCarouseListPosition.call(this);
        },
        getSelectedItem: function () {
            return this.datasource[this.selectedIndex];
        }
    };
    var Carousel = eoo.create(Control, exports);
    require('esui/main').register(Carousel);
    return Carousel;
});

define('ub-ria/update', [
    'require',
    './util'
], function (require) {
    var u = require('./util');
    var AVAILABLE_COMMANDS = {
        $set: function (oldValue, newValue) {
            return newValue;
        },
        $push: function (oldValue, newValue) {
            var result = oldValue.slice();
            result.push(newValue);
            return result;
        },
        $unshift: function (oldValue, newValue) {
            var result = oldValue.slice();
            result.unshift(newValue);
            return result;
        },
        $merge: function (oldValue, newValue) {
            return u.extend({}, oldValue, newValue);
        },
        $defaults: function (oldValue, newValue) {
            return u.defaults(u.clone(oldValue), newValue);
        },
        $invoke: function (oldValue, factory) {
            return factory(oldValue);
        }
    };
    var exports = {};
    exports.run = function (source, commands) {
        var possibleFirstLevelCommand = u.find(Object.keys(AVAILABLE_COMMANDS), function (command) {
            return commands.hasOwnProperty(command);
        });
        if (possibleFirstLevelCommand) {
            return AVAILABLE_COMMANDS[possibleFirstLevelCommand](source, commands[possibleFirstLevelCommand]);
        }
        var result = Object.keys(commands).reduce(function (result, key) {
            var propertyCommand = commands[key];
            var isCommand = u.any(AVAILABLE_COMMANDS, function (execute, command) {
                if (propertyCommand.hasOwnProperty(command)) {
                    result[key] = execute(result[key], propertyCommand[command]);
                    return true;
                }
                return false;
            });
            if (!isCommand) {
                result[key] = exports.run(result[key] || {}, propertyCommand);
            }
            return result;
        }, u.clone(source));
        return result;
    };
    function buildPathObject(path, value) {
        if (!path) {
            return value;
        }
        if (typeof path === 'string') {
            path = [path];
        }
        var result = {};
        var current = result;
        for (var i = 0; i < path.length - 1; i++) {
            current = current[path[i]] = {};
        }
        current[path[path.length - 1]] = value;
        return result;
    }
    exports.set = function (source, path, value) {
        return exports.run(source, buildPathObject(path, { $set: value }));
    };
    exports.push = function (source, path, value) {
        return exports.run(source, buildPathObject(path, { $push: value }));
    };
    exports.unshift = function (source, path, value) {
        return exports.run(source, buildPathObject(path, { $unshift: value }));
    };
    exports.merge = function (source, path, value) {
        return exports.run(source, buildPathObject(path, { $merge: value }));
    };
    exports.defaults = function (source, path, value) {
        return exports.run(source, buildPathObject(path, { $defaults: value }));
    };
    exports.invoke = function (source, path, factory) {
        return exports.run(source, buildPathObject(path, { $invoke: factory }));
    };
    return exports;
});

define('ub-ria/ui/extension/WordCount', [
    'require',
    'esui/lib',
    'esui/validator/Validity',
    'esui/Extension',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var Validity = require('esui/validator/Validity');
    var exports = {};
    exports.type = 'WordCount';
    exports.initialTemplate = '\u6700\u591A\u53EF\u8F93\u5165${available}\u4E2A\u5B57\u7B26';
    exports.remainingTemplate = '\u8FD8\u53EF\u8F93\u5165${available}\u4E2A\u5B57\u7B26';
    exports.exceededTemplate = '\u5DF2\u8D85\u51FA${available}\u4E2A\u5B57\u7B26';
    exports.getHintMessage = function (data) {
        var template;
        if (!data.current) {
            template = this.initialTemplate;
        } else if (data.available >= 0) {
            template = this.remainingTemplate;
        } else {
            template = this.exceededTemplate;
            data.available = -data.available;
        }
        return lib.format(template, data);
    };
    exports.getMaxLength = function () {
        if (+this.target.get('maxLength') === -1) {
            return this.target.get('length');
        }
        return this.target.get('maxLength');
    };
    function checkLength() {
        var maxLength = this.getMaxLength();
        var currentLength = this.target.getValue().length;
        var data = {
            max: maxLength,
            current: currentLength,
            available: maxLength - currentLength
        };
        var validState = data.available < 0 ? 'error' : 'hint';
        var message = this.getHintMessage(data);
        var validity = new Validity();
        validity.setCustomValidState(validState);
        validity.setCustomMessage(message);
        this.target.showValidity(validity);
    }
    exports.activate = function () {
        var maxLength = this.getMaxLength();
        if (maxLength) {
            this.target.on('input', checkLength, this);
            this.target.on('afterrender', checkLength, this);
        }
        this.$super(arguments);
    };
    exports.inactivate = function () {
        this.target.un('input', checkLength, this);
        this.target.un('afterrender', checkLength, this);
        this.$super(arguments);
    };
    var Extension = require('esui/Extension');
    var WordCount = require('eoo').create(Extension, exports);
    require('esui').registerExtension(WordCount);
    return WordCount;
});

define('ub-ria/ui/extension/TrimInput', [
    'require',
    'esui/lib',
    'esui/InputControl',
    'esui/main',
    'esui/Extension',
    'eoo'
], function (require) {
    var lib = require('esui/lib');
    var InputControl = require('esui/InputControl');
    var main = require('esui/main');
    var exports = {};
    exports.type = 'TrimInput';
    exports.activate = function () {
        var target = this.target;
        if (!(target instanceof InputControl)) {
            return;
        }
        target.on('afterrender', trim, this);
        target.on('change', trim, this);
        this.$super(arguments);
    };
    exports.inactivate = function () {
        var target = this.target;
        if (!(target instanceof InputControl)) {
            return;
        }
        target.un('afterrender', trim, this);
        target.un('change', trim, this);
        this.$super(arguments);
    };
    function trim() {
        var trimedValue = lib.trim(this.target.getValue());
        this.target.setValue(trimedValue);
    }
    var Extension = require('esui/Extension');
    var TrimInput = require('eoo').create(Extension, exports);
    main.registerExtension(TrimInput);
    return TrimInput;
});

define('ub-ria/ui/extension/OverrideDefaults', [
    'require',
    '../../util',
    'esui/Extension',
    'eoo',
    'esui'
], function (require) {
    var u = require('../../util');
    var exports = {};
    exports.type = 'OverrideDefaults';
    exports.activate = function () {
        this.target.on('init', onInit, this);
        this.$super(arguments);
    };
    exports.inactivate = function () {
        this.target.un('init', onInit, this);
        this.$super(arguments);
    };
    function onInit(e) {
        this.overrideDefaults(e.options);
    }
    exports.overrideDefaults = function (rawOptions) {
        var overrides = u.omit(this.overrides[this.target.type], u.keys(rawOptions || {}));
        if (overrides) {
            this.target.setProperties(overrides);
        }
    };
    var Extension = require('esui/Extension');
    var OverrideDefaults = require('eoo').create(Extension, exports);
    require('esui').registerExtension(OverrideDefaults);
    return OverrideDefaults;
});

define('ub-ria/ui/extension/ExternSelect', [
    'require',
    '../../util',
    'esui/lib',
    'esui/Extension',
    'eoo',
    'esui'
], function (require) {
    var u = require('../../util');
    var lib = require('esui/lib');
    var exports = {};
    exports.constructor = function (options) {
        options = options || {};
        this.$super(arguments);
    };
    exports.type = 'ExternSelect';
    exports.selects = null;
    exports.resolveControls = function () {
        var controls = [];
        if (this.selects) {
            var selects;
            if (u.isString(this.selects)) {
                selects = lib.splitTokenList(this.selects);
            } else {
                selects = this.selects;
            }
            if (u.isArray(selects)) {
                u.each(selects, function (select, index) {
                    select = this.target.viewContext.get(select);
                    if (select) {
                        controls.push(select);
                    } else if (this.active) {
                        throw new Error('Cannot find related select "#' + select + '" in view context');
                    }
                }, this);
            } else {
                throw new Error('selects can only be Array or String');
            }
        } else {
            throw new Error('selects cannot be null');
        }
        return controls;
    };
    exports.activate = function () {
        this.handleControls(function (select, index) {
            select.on('change', search, this);
        });
        this.target.on('clearquery', clearQuery, this);
        this.target.on('search', doSearch, this);
        this.target.on('loadmoredata', doSearch, this);
        this.$super(arguments);
    };
    function search(e) {
        this.target.search();
    }
    function doSearch(e) {
        this.handleControls(function (select, index) {
            var item = select.getSelectedItem();
            if (item.value !== '' && select.dataKey) {
                e.filterData.push({
                    keys: [select.dataKey],
                    value: item.value
                });
            }
        });
        e.preventDefault();
    }
    function clearQuery() {
        this.handleControls(function (select) {
            select.un('change', search, this);
            select.setProperties({ selectedIndex: 0 });
            select.on('change', search, this);
        });
    }
    exports.inactivate = function () {
        this.$super(arguments);
        this.handleControls(function (select) {
            select.un('change', search, this);
        }, true);
        this.target.un('clearquery', clearQuery, this);
        this.target.un('search', doSearch, this);
    };
    exports.handleControls = function (handler) {
        var controls = this.resolveControls();
        if (controls.length) {
            u.each(controls, handler, this);
        }
    };
    var Extension = require('esui/Extension');
    var ExternSelect = require('eoo').create(Extension, exports);
    require('esui').registerExtension(ExternSelect);
    return ExternSelect;
});

define('ub-ria/ui/extension/ExternSearch', [
    'require',
    'esui/lib',
    'esui/Extension',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var exports = {};
    exports.constructor = function (options) {
        options = options || {};
        this.$super(arguments);
    };
    exports.type = 'ExternSearch';
    exports.searchBox = null;
    exports.resolveControl = function () {
        var searchBox;
        if (!this.searchBox && this.searchbox) {
            this.searchBox = this.searchbox;
        }
        if (this.searchBox) {
            searchBox = this.target.viewContext.get(this.searchBox);
            if (!searchBox && this.active) {
                throw new Error('Cannot find related searchBox "#' + searchBox + '" in view context');
            }
        } else {
            throw new Error('searchBox cannot be null');
        }
        return searchBox;
    };
    exports.activate = function () {
        var searchBox = this.resolveControl();
        searchBox.on('search', search, this);
        this.target.on('clearquery', clearQuery, this);
        this.target.on('search', doSearch, this);
        this.target.on('loadmoredata', doSearch, this);
        this.$super(arguments);
    };
    function search(e) {
        this.target.search();
    }
    function doSearch(e) {
        var searchBox = this.resolveControl();
        var filter = { value: searchBox.getValue() };
        if (searchBox.dataKeys) {
            filter.keys = lib.splitTokenList(searchBox.dataKeys);
        }
        e.filterData.push(filter);
        e.preventDefault();
    }
    function clearQuery() {
        var searchBox = this.resolveControl();
        searchBox.set('text', '');
    }
    exports.inactivate = function () {
        this.$super(arguments);
        var searchBox = this.resolveControl();
        if (searchBox) {
            searchBox.un('search', search, this);
        }
        this.target.un('clearquery', clearQuery, this);
        this.target.un('search', doSearch, this);
    };
    var Extension = require('esui/Extension');
    var ExternSearch = require('eoo').create(Extension, exports);
    require('esui').registerExtension(ExternSearch);
    return ExternSearch;
});

define('ub-ria/ui/extension/AutoSubmit', [
    'require',
    '../../util',
    'esui/lib',
    'esui',
    'esui/Form',
    'esui/Extension',
    'eoo'
], function (require) {
    var u = require('../../util');
    var lib = require('esui/lib');
    var ui = require('esui');
    var Form = require('esui/Form');
    var store = {};
    var exports = {};
    exports.constructor = function (options) {
        options = options || {};
        if (typeof options.events === 'string') {
            options.events = u.map(lib.splitTokenList(options.events), lib.trim);
        }
        this.$super(arguments);
    };
    exports.type = 'AutoSubmit';
    exports.form = null;
    exports.events = [
        'click',
        'change',
        'search'
    ];
    exports.resolveForm = function () {
        if (this.form) {
            return this.target.viewContext.get(this.form);
        }
        var element = this.target && this.target.main && this.target.main.parentNode;
        while (element) {
            var control = ui.getControlByDOM(element);
            if (control && control instanceof Form) {
                return control;
            }
            element = element.parentNode;
        }
        return null;
    };
    function submit() {
        var form = this.resolveForm();
        if (form) {
            form.validateAndSubmit();
        }
    }
    exports.activate = function () {
        var handler = submit;
        if (this.form && this.debounce) {
            handler = store[this.form] || u.debounce(submit, 0);
            store[this.form] = handler;
        }
        u.each(this.events, function (eventName) {
            this.target.on(eventName, handler, this);
        }, this);
        this.$super(arguments);
    };
    exports.inactivate = function () {
        var handler = this.form && this.debounce ? store[this.form] : submit;
        u.each(this.events, function (eventName) {
            this.target.un(eventName, handler, this);
        }, this);
        this.$super(arguments);
    };
    var Extension = require('esui/Extension');
    var AutoSubmit = require('eoo').create(Extension, exports);
    require('esui').registerExtension(AutoSubmit);
    return AutoSubmit;
});

define('ub-ria/ui/Uploader', [
    'require',
    'esui/validator/Validity',
    'esui/validator/ValidityState',
    'esui/InputControl',
    '../util',
    'esui/lib',
    'esui/painters',
    'eoo',
    'esui'
], function (require) {
    var Validity = require('esui/validator/Validity');
    var ValidityState = require('esui/validator/ValidityState');
    var InputControl = require('esui/InputControl');
    var u = require('../util');
    var lib = require('esui/lib');
    var exports = {};
    exports.type = 'Uploader';
    var mimeTypes = {
        image: {
            '.jpg': true,
            '.jpeg': true,
            '.gif': true,
            '.bmp': true,
            '.tif': true,
            '.tiff': true,
            '.png': true
        },
        flash: {
            '.flv': true,
            '.swf': true
        }
    };
    exports.initOptions = function (options) {
        var properties = {};
        lib.extend(properties, this.$self.defaultProperties, options);
        if (lib.isInput(this.main)) {
            properties.accept = properties.accept || lib.getAttribute(this.main, 'accept');
            properties.name = properties.name || this.main.name;
        } else if (this.main.nodeName === 'FORM') {
            properties.action = properties.action || this.main.action;
            if (!options.method && lib.hasAttribute(this.main, 'method')) {
                properties.method = this.main.method;
            }
        }
        if (typeof properties.accept === 'string') {
            properties.accept = lib.splitTokenList(properties.accept);
        }
        if (properties.autoUpload === 'false') {
            properties.autoUpload = false;
        }
        if (!properties.hasOwnProperty('title') && this.main.title) {
            properties.title = this.main.title;
        }
        this.setProperties(properties);
    };
    exports.initStructure = function () {
        if (this.main.nodeName !== 'FORM') {
            this.helper.replaceMain();
        }
        this.callbackName = lib.getGUID('esuiShowUploadResult');
        window[this.callbackName] = lib.bind(this.showUploadResult, this);
        var indicatorClasses = this.helper.getPartClassName('indicator');
        var buttonClasses = this.helper.getPartClassName('button');
        var iframeId = this.helper.getId('iframe');
        var html = [
            '<div id="' + this.helper.getId('input-container') + '">',
            '<span id="' + this.helper.getId('button') + '" ',
            'class="' + buttonClasses + '">',
            '</span>',
            '<input type="hidden" name="callback" ',
            'value="' + this.callbackName + '" ',
            '/>',
            '<input type="file" ',
            'id="' + this.helper.getId('input') + '" ',
            this.name ? 'name="' + this.name + '" ' : ' ',
            '/>'
        ];
        u.each(this.extraArgs, function (value, name) {
            html.push('<input type="hidden" name="' + name + '" ', 'value="' + value + '"/>');
        });
        html.push('</div>', '<div id="' + this.helper.getId('indicator-wrapper') + '"', 'class="' + indicatorClasses + ' ui-progress">', '<span id="' + this.helper.getId('indicator') + '" ' + 'class="ui-progress-bar ui-progress-bar-striped ui-progress-bar-animated">', '</span>', '</div>', '<iframe id="' + iframeId + '" name="' + iframeId + '"', ' src="about:blank"></iframe>');
        this.main.innerHTML = html.join('');
        var form = this.helper.createPart('form', 'form');
        form.setAttribute('enctype', 'multipart/form-data');
        form.target = iframeId;
        document.body.appendChild(form);
        var input = this.helper.getPart('input');
        this.helper.addDOMEvent(input, 'change', lib.bind(this.receiveFile, this));
        this.fire('formcreate');
    };
    function setStateToComplete(info) {
        this.removeState('busy');
        this.addState('complete');
        this.addState('uploaded');
        var button = this.helper.getPart('button');
        button.innerHTML = u.escape(this.overrideText);
        var validity = new Validity();
        this.showValidity(validity);
        this.fire('change');
    }
    function removeFile() {
        this.removeState('busy');
        this.removeState('complete');
        this.removeState('uploaded');
        this.helper.getPart('button').innerHTML = u.escape(this.text);
        this.fileInfo = '';
        var newInput = document.createElement('input');
        newInput.type = 'file';
        newInput.id = this.helper.getId('input');
        this.name && (newInput.name = this.name);
        this.accept && (newInput.accept = this.accept);
        var input = this.helper.getPart('input');
        this.helper.removeDOMEvent(input, 'change');
        this.main.firstChild.replaceChild(newInput, input);
        this.helper.addDOMEvent(newInput, 'change', lib.bind(this.receiveFile, this));
    }
    exports.repaint = require('esui/painters').createRepaint(InputControl.prototype.repaint, {
        name: [
            'method',
            'action'
        ],
        paint: function (uploader, method, action) {
            var form = uploader.helper.getPart('form');
            form.method = method;
            form.action = action;
        }
    }, {
        name: [
            'text',
            'overrideText'
        ],
        paint: function (uploader, text, overrideText) {
            var button = uploader.helper.getPart('button');
            var html = uploader.hasState('uploaded') ? u.escape(overrideText) : u.escape(text);
            button.innerHTML = html;
        }
    }, {
        name: [
            'busyText',
            'completeText'
        ],
        paint: function (uploader, busyText, completeText) {
            var indicator = uploader.helper.getPart('indicator');
            var html = uploader.hasState('busy') ? u.escape(busyText) : u.escape(completeText);
            indicator.innerHTML = html;
        }
    }, {
        name: 'accept',
        paint: function (uploader, accept) {
            var input = uploader.helper.getPart('input');
            if (accept) {
                lib.setAttribute(input, 'accept', accept.join(','));
            } else {
                lib.removeAttribute(input, 'accept');
            }
        }
    }, {
        name: [
            'disabled',
            'readOnly'
        ],
        paint: function (uploader, disabled, readOnly) {
            var input = uploader.helper.getPart('input');
            input.disabled = disabled;
            input.readOnly = readOnly;
        }
    }, {
        name: [
            'width',
            'height'
        ],
        paint: function (uploader, width, height) {
            var widthWithUnit = width + 'px';
            var heightWithUnit = height + 'px';
            uploader.main.style.width = widthWithUnit;
            uploader.main.style.height = heightWithUnit;
            var button = uploader.helper.getPart('button');
            button.style.lineHeight = heightWithUnit;
            var indicator = uploader.helper.getPart('indicator');
            indicator.style.lineHeight = heightWithUnit;
        }
    }, {
        name: 'rawValue',
        paint: function (uploader, rawValue) {
            if (!rawValue) {
                return;
            } else if (u.isEqual(rawValue, {})) {
                removeFile.call(uploader);
            } else {
                if (!rawValue.hasOwnProperty('type')) {
                    rawValue.type = uploader.fileType;
                }
                uploader.fileInfo = rawValue;
                setStateToComplete.call(uploader, rawValue);
                uploader.removeState('complete');
            }
        }
    });
    exports.addFormField = function (name, value) {
        var div = document.createElement('div');
        div.innerHTML = '<input type="hidden" name="' + u.escape(name) + '" value="' + u.escape(value) + '" />';
        var input = div.children[0];
        var form = this.helper.getPart('form');
        form.appendChild(input);
    };
    exports.checkFileFormat = function (filename) {
        if (this.accept) {
            var extension = filename.split('.');
            extension = '.' + extension[extension.length - 1].toLowerCase();
            var isValid = false;
            for (var i = 0; i < this.accept.length; i++) {
                var acceptPattern = this.accept[i].toLowerCase();
                if (acceptPattern === extension) {
                    isValid = true;
                    break;
                }
                if (acceptPattern.slice(-1)[0] === '*') {
                    var mimeType = acceptPattern.split('/')[0];
                    var targetExtensions = this.mimeTypes[mimeType];
                    if (targetExtensions && targetExtensions.hasOwnProperty(extension)) {
                        isValid = true;
                        break;
                    }
                }
            }
            if (!isValid) {
                var message = this.acceptErrorMessage || '\u4EC5\u63A5\u53D7\u4EE5\u4E0B\u6587\u4EF6\u683C\u5F0F\uFF1A' + this.accept.join(',');
                this.notifyFail(message);
            }
            return isValid;
        }
        return true;
    };
    exports.submit = function () {
        this.showUploading();
        var inputs = this.helper.getPart('input-container');
        var form = this.helper.getPart('form');
        form.appendChild(inputs);
        form.submit();
        this.main.insertBefore(inputs, this.main.firstChild);
    };
    exports.receiveFile = function () {
        var input = this.helper.getPart('input');
        var filename = input.value;
        if (filename && this.checkFileFormat(filename)) {
            this.fire('receive');
            if (this.autoUpload) {
                this.submit();
            }
        }
    };
    exports.showUploading = function () {
        this.removeState('complete');
        this.addState('busy');
        var indicator = this.helper.getPart('indicator');
        indicator.innerHTML = u.escape(this.busyText);
    };
    exports.showUploadResult = function (options) {
        if (options.fields) {
            this.fire('fail', { fields: options.fields });
            this.notifyFail(options.fields[0].message);
        } else if (options.info) {
            if (!options.info.hasOwnProperty('type')) {
                options.info.type = this.fileType;
            }
            this.fileInfo = options.info;
            this.fire('complete');
            this.notifyComplete(options.info);
        }
    };
    exports.notifyFail = function (message) {
        message = message || '\u4E0A\u4F20\u5931\u8D25';
        var validity = new Validity();
        var state = new ValidityState(false, message);
        validity.addState('upload', state);
        this.showValidity(validity);
        this.removeState('busy');
    };
    exports.notifyComplete = function (info) {
        setStateToComplete.call(this, info);
        var indicator = this.helper.getPart('indicator');
        indicator.innerHTML = u.escape(this.completeText);
        this.timer = setTimeout(lib.bind(this.removeState, this, 'complete'), 1000);
    };
    exports.getRawValue = function () {
        return this.fileInfo || null;
    };
    exports.getRawValueProperty = exports.getRawValue;
    exports.getFileName = function () {
        return this.helper.getPart('input').value || '';
    };
    exports.dispose = function () {
        try {
            delete window[this.callbackName];
        } catch (ex) {
            window[this.callbackName] = undefined;
        }
        var form = this.helper.getPart('form');
        lib.removeNode(form);
        this.$super(arguments);
    };
    var Uploader = require('eoo').create(InputControl, exports);
    Uploader.defaultProperties = {
        width: 80,
        height: 25,
        fileType: '*',
        method: 'POST',
        text: '\u70B9\u51FB\u4E0A\u4F20',
        overrideText: '\u91CD\u65B0\u4E0A\u4F20',
        busyText: '\u6B63\u5728\u4E0A\u4F20...',
        completeText: '\u4E0A\u4F20\u5B8C\u6210',
        autoUpload: true,
        extraArgs: {},
        action: '',
        mimeTypes: mimeTypes
    };
    require('esui').register(Uploader);
    return Uploader;
});

define('ub-ria/ui/PartialForm', [
    'require',
    'esui/lib',
    'esui/Form',
    'esui/validator/Validity',
    'esui/validator/ValidityState',
    'ef/ActionPanel',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var exports = {};
    exports.type = 'PartialForm';
    function getHelperForm(action) {
        var Form = require('esui/Form');
        var properties = {
            main: lib.g(action.view.container),
            viewContext: action.view.viewContext
        };
        return new Form(properties);
    }
    exports.validate = function () {
        var action = this.get('action');
        if (!action) {
            return true;
        }
        if (typeof action.validate === 'function') {
            return action.validate();
        }
        var viewContext = action.view && action.view.viewContext;
        if (!viewContext) {
            return true;
        }
        var Validity = require('esui/validator/Validity');
        var validity = new Validity();
        var event = { validity: validity };
        this.fire('beforevalidate', event);
        var helperForm = getHelperForm(action);
        var inputs = helperForm.getInputControls();
        var isValid = true;
        for (var i = 0; i < inputs.length; i++) {
            var control = inputs[i];
            if (control.isDisabled()) {
                continue;
            }
            isValid &= control.validate();
        }
        if (!isValid) {
            this.fire('invalid', event);
        }
        this.fire('aftervalidate', event);
        return isValid;
    };
    exports.notifyErrors = function (errors) {
        var Validity = require('esui/validator/Validity');
        var ValidityState = require('esui/validator/ValidityState');
        var action = this.get('action');
        var form = getHelperForm(action);
        var inputs = form.getInputControls();
        var fields = errors.fields;
        for (var i = 0; i < inputs.length && fields.length > 0; i++) {
            var input = inputs[i];
            if (typeof input.notifyErrors === 'function') {
                fields = input.notifyErrors(errors) || fields;
                continue;
            }
            for (var j = 0; j < fields.length; j++) {
                var fail = fields[j];
                if (input.name === fail.field) {
                    var state = new ValidityState(false, fail.message);
                    var validity = new Validity();
                    validity.addState('server', state);
                    if (typeof input.showValidity === 'function') {
                        input.showValidity(validity);
                    }
                }
            }
        }
    };
    exports.getRawValue = function () {
        var action = this.get('action');
        if (!action) {
            return null;
        }
        if (typeof action.getRawValue === 'function') {
            return action.getRawValue();
        }
        if (typeof action.getValue === 'function') {
            return action.getValue();
        }
    };
    exports.getCategory = function () {
        return 'input';
    };
    var ActionPanel = require('ef/ActionPanel');
    var PartialForm = require('eoo').create(ActionPanel, exports);
    require('esui').register(PartialForm);
    return PartialForm;
});

define('ub-ria/tpl', [
    'require',
    './util',
    'er/ajax',
    'etpl'
], function (require) {
    var u = require('./util');
    var ajax = require('er/ajax');
    var etpl = require('etpl');
    var template = etpl;
    var util = require('./util');
    template.addFilter('trim', util.trim);
    template.addFilter('pascalize', util.pascalize);
    template.addFilter('camelize', util.camelize);
    template.addFilter('dasherize', util.dasherize);
    template.addFilter('constlize', util.constlize);
    template.addFilter('pluralize', util.pluralize);
    var controlModulePrefix = {
        BoxGroup: 'esui',
        Button: 'esui',
        Calendar: 'esui',
        CheckBox: 'esui',
        CommandMenu: 'esui',
        Crumb: 'esui',
        Dialog: 'esui',
        Form: 'esui',
        Frame: 'esui',
        Label: 'esui',
        Link: 'esui',
        MonthView: 'esui',
        Overlay: 'esui',
        Pager: 'esui',
        Panel: 'esui',
        RangeCalendar: 'esui',
        Region: 'esui',
        RichCalendar: 'esui',
        Schedule: 'esui',
        SearchBox: 'esui',
        Select: 'esui',
        Tab: 'esui',
        Table: 'esui',
        TextBox: 'esui',
        TextLine: 'esui',
        Tip: 'esui',
        TipLayer: 'esui',
        Tree: 'esui',
        Validity: 'esui',
        Wizard: 'esui',
        ActionPanel: 'ef',
        ActionDialog: 'ef',
        ViewPanel: 'ef',
        DrawerActionPanel: 'ub-ria-ui',
        RichSelector: 'ub-ria-ui',
        TableRichSelector: 'ub-ria-ui',
        PagingTableRichSelector: 'ub-ria-ui',
        PagingTreeRichSelector: 'ub-ria-ui',
        TogglePanel: 'ub-ria-ui',
        ToggleSelector: 'ub-ria-ui',
        TreeRichSelector: 'ub-ria-ui',
        PartialForm: 'ub-ria/ui',
        Uploader: 'ub-ria/ui',
        Warn: 'ub-ria/ui'
    };
    var extensionModulePrefix = {
        AutoSort: 'esui/extension',
        Command: 'esui/extension',
        CustomData: 'esui/extension',
        TableEdit: 'esui/extension',
        TableSubrow: 'esui/extension',
        AutoSubmit: 'ub-ria/ui/extension',
        ExternSearch: 'ub-ria/ui/extension',
        ExternSelect: 'ub-ria/ui/extension',
        TrimInput: 'ub-ria/ui/extension',
        WordCount: 'ub-ria/ui/extension'
    };
    var CONTROL_CUSTOM_ELEMENT_PREFIX = 'esui-';
    var enableCustomElementShim = function (type) {
        var customElementName = CONTROL_CUSTOM_ELEMENT_PREFIX + u.dasherize(type);
        document.createElement(customElementName);
    };
    enableCustomElementShim = u.memoize(enableCustomElementShim);
    function getControlDependencies(text) {
        var dependencies = [];
        var defined = {};
        var regex = /<\s*esui-([\w-]+)[^>]*>|data-ui-type="(\w+)"/g;
        var match = regex.exec(text);
        while (match) {
            var type = match[1] && util.pascalize(match[1]) || match[2];
            if (!defined[type]) {
                defined[type] = true;
                var prefix = (controlModulePrefix[type] || 'ui') + '/';
                dependencies.push(prefix + type);
                enableCustomElementShim(type);
            }
            match = regex.exec(text);
        }
        return dependencies;
    }
    function getExtensionDependencies(text) {
        var dependencies = [];
        var defined = {};
        var regex = /data-ui-extension-[^-]+-type="(\w+)"/g;
        var match = regex.exec(text);
        while (match) {
            var type = match[1];
            if (!defined[type]) {
                defined[type] = true;
                var prefix = (extensionModulePrefix[type] || 'ui/extension') + '/';
                dependencies.push(prefix + type);
            }
            match = regex.exec(text);
        }
        return dependencies;
    }
    var plugin = {
        setupTemplateEngine: function (engine) {
            template = engine || etpl;
        },
        load: function (resourceId, parentRequire, load) {
            function addTemplate(text) {
                template.parse(text);
                var controls = getControlDependencies(text);
                var extensions = getExtensionDependencies(text);
                var dependencies = controls.concat(extensions);
                window.require(dependencies, function () {
                    load(text);
                });
            }
            if (resourceId.indexOf('.tpl.html') >= 0) {
                var options = {
                    method: 'GET',
                    url: parentRequire.toUrl(resourceId),
                    cache: true,
                    dataType: 'text'
                };
                ajax.request(options).then(addTemplate);
            } else {
                parentRequire([resourceId], addTemplate);
            }
        },
        registerControl: function (moduleId) {
            var lastIndexOfSlash = moduleId.lastIndexOf('/');
            var prefix = moduleId.substring(0, lastIndexOfSlash);
            var type = moduleId.substring(lastIndexOfSlash + 1);
            controlModulePrefix[type] = prefix;
        },
        registerExtension: function (moduleId) {
            var lastIndexOfSlash = moduleId.lastIndexOf('/');
            var prefix = moduleId.substring(0, lastIndexOfSlash);
            var type = moduleId.substring(lastIndexOfSlash + 1);
            extensionModulePrefix[type] = prefix;
        }
    };
    return plugin;
});

define('ub-ria/mvc/rule', ['require'], function (require) {
    return {
        maxLength: 100,
        mail: {
            maxLength: 64,
            pattern: /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/
        },
        description: { maxLength: 4000 },
        phone: { pattern: /^((0\d{2,3})-)(\d{7,8})(-(\d{3,}))?$/ },
        mobile: { pattern: /^(1(3|4|5|8)\d{9})?$/ },
        url: {
            maxLength: 1000,
            pattern: /^(?:https?|ftp|wap):\/\/.+$|^(?!(?:https?|ftp|wap):\/\/).+$/
        },
        positiveInteger: { pattern: /^\d+$/ },
        money: { pattern: /^\d+(\.\d{1,2})?$/ }
    };
});

define('ub-ria/mvc/handler/ToastSubmitHandler', [
    'require',
    '../../util',
    'esui/Toast',
    './SubmitHandler',
    'eoo'
], function (require) {
    var u = require('../../util');
    var Toast = require('esui/Toast');
    var SubmitHandler = require('./SubmitHandler');
    var exports = {};
    exports.template = '';
    exports.setTemplate = function (template) {
        this.template = template;
    };
    exports.getTemplate = function () {
        return this.template;
    };
    exports.handle = function (entity, action) {
        var message = this.getToastMessage(entity, action);
        if (message) {
            var toast = Toast.success(message);
            toast.show();
        }
        this.next(entity, action);
    };
    exports.getToastMessage = function (entity, action) {
        var template = this.getTemplate();
        if (template == null) {
            return '';
        }
        if (template) {
            return u.template(template, entity || {});
        }
        var actionType = action.context.formType === 'update' ? '\u4FEE\u6539' : '\u521B\u5EFA';
        return '\u60A8' + actionType + '\u7684' + action.getEntityDescription() + '[<strong>' + u.escape(entity.name) + '</strong>]' + '\u5DF2\u7ECF\u6210\u529F\u4FDD\u5B58';
    };
    var ToastSubmitHandler = require('eoo').create(SubmitHandler, exports);
    return ToastSubmitHandler;
});

define('ub-ria/mvc/handler/SubmitHandler', [
    'require',
    'eoo'
], function (require) {
    var exports = {};
    exports.nextSubmitHandler = null;
    exports.setNextSubmitHandler = function (handler) {
        this.nextSubmitHandler = handler;
    };
    exports.getNextSubmitHandler = function () {
        return this.nextSubmitHandler;
    };
    exports.handle = function (entity, action) {
        this.next(entity, action);
    };
    exports.next = function (entity, action) {
        var nextSubmitHandler = this.getNextSubmitHandler();
        if (nextSubmitHandler) {
            nextSubmitHandler.handle(entity, action);
        }
    };
    var SubmitHandler = require('eoo').create(exports);
    return SubmitHandler;
});

define('ub-ria/mvc/handler/RedirectSubmitHandler', [
    'require',
    '../../util',
    './SubmitHandler',
    'eoo'
], function (require) {
    var u = require('../../util');
    var SubmitHandler = require('./SubmitHandler');
    var exports = {};
    exports.template = '/${entityName}/list';
    exports.redirectOptions = null;
    exports.setTemplate = function (template) {
        this.template = template;
    };
    exports.getTemplate = function () {
        return this.template;
    };
    exports.setRedirectOptions = function (options) {
        this.redirectOptions = options;
    };
    exports.getRedirectOptions = function () {
        return this.redirectOptions;
    };
    exports.handle = function (entity, action) {
        var data = this.getData(entity, action);
        var url = u.template(this.getTemplate(), data);
        this.redirect(action, url, this.getRedirectOptions());
        this.next(entity, action);
    };
    exports.redirect = function (action, url, options) {
        action.redirect(url, options);
    };
    exports.getData = function (entity, action) {
        return { entityName: action.getEntityName() };
    };
    var RedirectSubmitHandler = require('eoo').create(SubmitHandler, exports);
    return RedirectSubmitHandler;
});

define('ub-ria/mvc/filterHelper', [
    'require',
    '../util'
], function (require) {
    var u = require('../util');
    var helper = {};
    var select = helper.select = {};
    select.getText = function (filter) {
        var item = u.find(filter.datasource, function (item) {
            return item.value == filter.value;
        });
        return item && item.text || '';
    };
    var toggleSelector = helper.toggleSelector = {};
    toggleSelector.getText = function (filter) {
        var item = u.find(filter.datasource, function (item) {
            return item.id == filter.value;
        });
        return item && item.name || '';
    };
    return helper;
});

define('ub-ria/mvc/checker/typeChecker', [
    'require',
    '../../util'
], function (require) {
    var u = require('../../util');
    var checker = {
        name: 'type',
        errorMessage: '${title}\u7684\u7C7B\u578B\u4E0D\u7B26\u5408\u8981\u6C42',
        priority: 10,
        check: check
    };
    function check(value, schema) {
        var expectedType = schema[0];
        var typeMapping = {
            Undefined: true,
            Null: true,
            Array: ['array'],
            String: ['string'],
            Number: [
                'number',
                'enum'
            ],
            Boolean: ['bool'],
            Object: ['object']
        };
        var key = '';
        if (value === null) {
            key = 'Null';
        } else if (value === undefined) {
            key = 'Undefined';
        } else {
            key = Object.prototype.toString.call(value);
            key = key.substring(8, key.length - 1);
        }
        return typeMapping[key] === true || u.indexOf(typeMapping[key], expectedType) >= 0;
    }
    return checker;
});

define('ub-ria/mvc/checker/rangeLengthChecker', ['require'], function (require) {
    var checker = {
        name: 'rangeLength',
        errorMessage: {
            array: '${title}\u4E0D\u80FD\u5C0F\u4E8E${minLength}\u4E2A\uFF0C\u4E14\u4E0D\u80FD\u8D85\u8FC7${maxLength}\u4E2A',
            string: '${title}\u4E0D\u80FD\u5C0F\u4E8E${minLength}\u4E2A\u5B57\u7B26\uFF0C\u4E14\u4E0D\u80FD\u8D85\u8FC7${maxLength}\u4E2A\u5B57\u7B26'
        },
        priority: 20,
        check: check
    };
    function check(value, schema) {
        var minLength = schema[2].minLength;
        var maxLength = schema[2].maxLength;
        if (maxLength < minLength) {
            var temp = maxLength;
            maxLength = minLength;
            minLength = temp;
        }
        return !value || value.length === 0 || value.length >= minLength && value.length <= maxLength;
    }
    return checker;
});

define('ub-ria/mvc/checker/rangeChecker', ['require'], function (require) {
    var checker = {
        name: 'range',
        errorMessage: '${title}\u5FC5\u987B\u662F\u2265${min}\u4E14\u2264${max}\u7684\u6570\u5B57',
        priority: 20,
        check: check
    };
    function check(value, schema) {
        if (!value && value !== 0) {
            return true;
        }
        var min = schema[2].min;
        var max = schema[2].max;
        if (max < min) {
            var temp = max;
            max = min;
            min = temp;
        }
        return value >= min && value <= max;
    }
    return checker;
});

define('ub-ria/mvc/checker/patternChecker', ['require'], function (require) {
    var checker = {
        name: 'pattern',
        errorMessage: '${title}\u683C\u5F0F\u4E0D\u7B26\u5408\u8981\u6C42',
        priority: 30,
        check: check
    };
    function check(value, schema) {
        if (!value && value !== 0) {
            return true;
        }
        var regex = new RegExp(schema[2].pattern);
        return regex.test(value);
    }
    return checker;
});

define('ub-ria/mvc/checker/minLengthChecker', ['require'], function (require) {
    var checker = {
        name: 'minLength',
        errorMessage: {
            array: '${title}\u4E0D\u80FD\u5C0F\u4E8E${minLength}\u4E2A',
            string: '${title}\u4E0D\u80FD\u5C0F\u4E8E${minLength}\u4E2A\u5B57\u7B26'
        },
        priority: 20,
        check: check
    };
    function check(value, schema) {
        var minLength = schema[2].minLength;
        return !(value && value.length !== 0 && value.length < minLength);
    }
    return checker;
});

define('ub-ria/mvc/checker/minChecker', ['require'], function (require) {
    var checker = {
        name: 'min',
        errorMessage: '${title}\u4E0D\u80FD\u5C0F\u4E8E${min}',
        priority: 20,
        check: check
    };
    function check(value, schema) {
        if (!value && value !== 0) {
            return true;
        }
        var min = schema[2].min;
        return value >= min;
    }
    return checker;
});

define('ub-ria/mvc/checker/maxLengthChecker', ['require'], function (require) {
    var checker = {
        name: 'maxLength',
        errorMessage: {
            array: '${title}\u4E0D\u80FD\u8D85\u8FC7${maxLength}\u4E2A',
            string: '${title}\u4E0D\u80FD\u8D85\u8FC7${maxLength}\u4E2A\u5B57\u7B26'
        },
        priority: 20,
        check: check
    };
    function check(value, schema) {
        var maxLength = schema[2].maxLength;
        return !(value && value.length !== 0 && value.length > maxLength);
    }
    return checker;
});

define('ub-ria/mvc/checker/maxChecker', ['require'], function (require) {
    var checker = {
        name: 'max',
        errorMessage: '${title}\u4E0D\u80FD\u5927\u4E8E${max}',
        priority: 20,
        check: check
    };
    function check(value, schema) {
        if (!value && value !== 0) {
            return true;
        }
        var max = schema[2].max;
        return value <= max;
    }
    return checker;
});

define('ub-ria/mvc/checker/enumChecker', ['require'], function (require) {
    var checker = {
        name: 'enum',
        errorMessage: '${title}\u7684\u503C\u4E0D\u5408\u6CD5',
        priority: 20,
        check: check
    };
    function check(value, schema) {
        if (!value && value !== 0) {
            return true;
        }
        var enumObject = schema[2].datasource;
        var item = enumObject.fromValue(value);
        return !!item;
    }
    return checker;
});

define('ub-ria/mvc/StaticListData', [
    'require',
    '../util',
    'promise',
    './RequestManager',
    'eoo'
], function (require) {
    var u = require('../util');
    var STATIC_KEYS = [
        'order',
        'orderBy',
        'pageNo',
        'pageSize'
    ];
    var exports = {};
    exports.list = function (query) {
        return this.request('$entity/list', query, {
            method: 'GET',
            url: '/$entity'
        });
    };
    exports.filterData = function (query) {
        var sortData = u.clone(this.cacheList);
        var results = sortData.results;
        sortData.totalCount = results.length;
        if (query.orderBy) {
            this.sort(results, query.order, query.orderBy);
        }
        if (query.pageNo) {
            var start = (query.pageNo - 1) * query.pageSize;
            var end = Math.min(start + query.pageSize, results.length);
            results = results.slice(start, end);
            sortData.results = u.deepClone(results);
        }
        return sortData;
    };
    exports.search = function (query) {
        var isStaticKeyChanged = this.checkStaticKeyChanged(query);
        if (isStaticKeyChanged) {
            u.extend(this, u.pick(query, STATIC_KEYS));
        }
        if (!this.cacheList || !isStaticKeyChanged) {
            var cache = function (data) {
                return this.doCache(data, query);
            };
            return this.list(query).thenBind(cache, this);
        }
        return require('promise').resolve(this.filterData(query));
    };
    exports.doCache = function (data, query) {
        this.cacheList = data;
        return this.filterData(query);
    };
    exports.checkStaticKeyChanged = function (query) {
        return u.some(STATIC_KEYS, function (key) {
            return this[key] !== query[key];
        }, this);
    };
    exports.getCacheList = function () {
        return this.cacheList;
    };
    function compare(a, b, order) {
        var symbol = 1;
        if (order === 'asc') {
            symbol = -1;
        }
        if (a === b) {
            return 0;
        }
        if (a == null && b == null) {
            return 0;
        }
        if (b == null) {
            return symbol * 1;
        } else if (a == null) {
            return symbol * -1;
        }
        var aIsNumber = !isNaN(a);
        var bIsNumber = !isNaN(b);
        if (aIsNumber && bIsNumber) {
            return symbol * (parseFloat(a) - parseFloat(b));
        }
        if (aIsNumber || bIsNumber) {
            return aIsNumber ? symbol * 1 : symbol * -1;
        }
        return symbol * (a + '').localeCompare(b);
    }
    exports.sort = function (array, order, orderBy) {
        var length = array.length;
        for (var i = 0; i <= length - 2; i++) {
            for (var j = length - 1; j >= 1; j--) {
                compare('', 0, 'desc');
                var compareResult = compare(array[j][orderBy], array[j - 1][orderBy], order);
                if (compareResult > 0) {
                    var temp = array[j];
                    array[j] = array[j - 1];
                    array[j - 1] = temp;
                }
            }
        }
    };
    var RequestManager = require('./RequestManager');
    var StaticListData = require('eoo').create(RequestManager, exports);
    return StaticListData;
});

define('ub-ria/mvc/RequestStrategy', [
    'require',
    'eoo'
], function (require) {
    var exports = {};
    exports.formatName = function (name, options) {
        return name;
    };
    exports.formatURL = function (url, options) {
        return url;
    };
    exports.formatOptions = function (options) {
        if (!options.dataType) {
            options.dataType = 'json';
        }
        return options;
    };
    var RequestStrategy = require('eoo').create(exports);
    return RequestStrategy;
});

define('ub-ria/mvc/RequestManager', [
    'require',
    '../util',
    'er/ajax',
    'eoo'
], function (require) {
    var u = require('../util');
    var exports = {};
    exports.constructor = function (entityName, backendEntityName) {
        this.entityName = entityName;
        this.backendEntityName = backendEntityName;
        this.runningRequests = {};
    };
    var typeRequestConfigs = [];
    var globalRequestConfig = {};
    var globalRunningRequests = {};
    function lookupRequestConfig(instance, name) {
        if (!name) {
            return null;
        }
        var typeConfig = u.findWhere(typeRequestConfigs, { type: instance.constructor });
        return typeConfig && typeConfig.config[name] || globalRequestConfig[name] || null;
    }
    function resolveConflict(requestManager, config, options) {
        var runningRequest = requestManager.runningRequests[config.name];
        if (!runningRequest) {
            return;
        }
        var policy = config.policy;
        if (policy === 'auto') {
            var method = options.method.toUpperCase();
            policy = u.isEqual(options, runningRequest.options) ? 'reuse' : method === 'GET' || method === 'PUT' ? 'parallel' : 'abort';
        }
        switch (policy) {
        case 'reuse':
            return runningRequest.xhr;
        case 'abort':
            runningRequest.xhr.abort();
            return;
        default:
            return;
        }
    }
    function detachRunningRequest(requestManager, name, xhr) {
        if (requestManager.runningRequests && requestManager.runningRequests[name] && requestManager.runningRequests[name].xhr === xhr) {
            requestManager.runningRequests[name] = null;
        }
        if (globalRunningRequests && globalRunningRequests[name] && globalRunningRequests[name].xhr === xhr) {
            globalRunningRequests[name] = null;
        }
    }
    exports.getEntityName = function () {
        return this.entityName || '';
    };
    exports.getBackendEntityName = function () {
        return this.backendEntityName || this.getEntityName();
    };
    exports.setRequestStrategy = function (requestStrategy) {
        this.requestStrategy = requestStrategy;
    };
    exports.getRequestStrategy = function () {
        return this.requestStrategy;
    };
    exports.getRequest = function (name, data, options) {
        var strategy = this.getRequestStrategy();
        if (typeof name !== 'string') {
            options = name;
            name = null;
        }
        name = strategy.formatName(name, options);
        var config = lookupRequestConfig(this, name);
        options = u.extend({}, config && config.options, options);
        if (typeof data === 'function') {
            data = data(this, options);
        }
        if (typeof options.data === 'function') {
            options.data = options.data(this, options);
        }
        if (data) {
            options.data = u.extend({}, options.data, data);
        }
        options = strategy.formatOptions(options);
        var request = {
            name: name,
            options: options,
            config: config
        };
        if (request.options.url) {
            request.options.url = strategy.formatURL(request.options.url, request.options);
        }
        return request;
    };
    exports.request = function (name, data, options) {
        var context = this.getRequest(name, data, options);
        var ajax = this.getAjax() || require('er/ajax');
        if (!context.config) {
            return ajax.request(context.options);
        }
        var xhr = resolveConflict(this, context.config, context.options);
        if (!xhr) {
            xhr = ajax.request(context.options);
            if (name) {
                var runningRequests = context.config.scope === 'instance' ? this.runningRequests : globalRunningRequests;
                runningRequests[name] = {
                    options: context.options,
                    xhr: xhr
                };
                var detachThisRequestFromManager = u.partial(detachRunningRequest, this, context.name, xhr);
                xhr.ensure(detachThisRequestFromManager);
            }
        }
        return xhr;
    };
    exports.dispose = function () {
        u.each(this.runningRequests, function (cache) {
            cache && cache.xhr.abort();
        });
        this.runningRequests = null;
    };
    exports.search = function (query) {
        throw new Error('search method is not implemented');
    };
    exports.list = function (query) {
        throw new Error('list method is not implemented');
    };
    exports.save = function (entity) {
        throw new Error('save method is not implemented');
    };
    exports.update = function (entity) {
        throw new Error('update method is not implemented');
    };
    exports.updateStatus = function (status, ids) {
        throw new Error('updateStatus method is not implemented');
    };
    exports.remove = function (ids) {
        return this.updateStatus(0, ids);
    };
    exports.restore = function (ids) {
        return this.updateStatus(1, ids);
    };
    exports.getAdvice = function (status, ids) {
        throw new Error('getAdvice method is not implemented');
    };
    exports.getRemoveAdvice = function (ids) {
        return this.getAdvice(0, ids);
    };
    exports.getRestoreAdvice = function (ids) {
        return this.getAdvice(1, ids);
    };
    exports.findById = function (id) {
        throw new Error('findById method is not implemented');
    };
    var oo = require('eoo');
    oo.defineAccessor(exports, 'ajax');
    var RequestManager = oo.create(exports);
    RequestManager.register = function (Type, name, config) {
        var defaults = {
            name: name,
            scope: 'instance',
            policy: 'auto'
        };
        config = u.extend(defaults, config);
        if (config.scope === 'instance') {
            var typeConfig = u.findWhere(typeRequestConfigs, { type: Type });
            if (!typeConfig) {
                typeConfig = {
                    type: Type,
                    config: {}
                };
                typeRequestConfigs.push(typeConfig);
            }
            var configContainer = typeConfig.config;
            if (configContainer.hasOwnProperty(name)) {
                throw new Error('An instance request config "' + name + '" has already been registered');
            }
            configContainer[name] = config;
        } else {
            if (globalRequestConfig.hasOwnProperty(name)) {
                throw new Error('A global request config "' + name + '" has already been registered');
            }
            globalRequestConfig[name] = config;
        }
    };
    return RequestManager;
});

define('ub-ria/mvc/ReadView', [
    'require',
    'mini-event',
    './BaseView',
    'eoo'
], function (require) {
    var exports = {};
    exports.bindEvents = function () {
        this.$super(arguments);
        var returnButton = this.get('return');
        if (returnButton) {
            var delegate = require('mini-event').delegate;
            delegate(returnButton, 'click', this, 'return');
        }
    };
    var BaseView = require('./BaseView');
    var ReadView = require('eoo').create(BaseView, exports);
    return ReadView;
});

define('ub-ria/mvc/ReadModel', [
    'require',
    './SingleEntityModel',
    'eoo'
], function (require) {
    var exports = {};
    exports.defaultDisplayText = '--';
    var GLOBAL_MODEL_PROPERTIES = {
        url: true,
        referrer: true,
        isChildAction: true,
        container: true,
        entity: true
    };
    exports.get = function (name) {
        var value = this.$super(arguments);
        if (GLOBAL_MODEL_PROPERTIES.hasOwnProperty(name)) {
            return value;
        }
        return this.hasReadableValue(name) ? value : this.defaultDisplayText;
    };
    var SingleEntityModel = require('./SingleEntityModel');
    var ReadModel = require('eoo').create(SingleEntityModel, exports);
    return ReadModel;
});

define('ub-ria/mvc/ReadAction', [
    'require',
    './BaseAction',
    'eoo'
], function (require) {
    var exports = {};
    exports.category = 'read';
    exports.returnBack = function () {
        this.fire('back');
    };
    exports.initBehavior = function () {
        this.view.on('return', this.returnBack, this);
    };
    var BaseAction = require('./BaseAction');
    var ReadAction = require('eoo').create(BaseAction, exports);
    return ReadAction;
});

define('ub-ria/mvc/ListView', [
    'require',
    'ub-ria-ui/DrawerActionPanel',
    '../util',
    'er/URL',
    './BaseView',
    'eoo'
], function (require) {
    require('ub-ria-ui/DrawerActionPanel');
    var u = require('../util');
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = {
            'pager': {
                pagesizechange: onChangePageSize,
                pagechange: onChangePage
            },
            'table': {
                select: 'updateBatchButtonStatus',
                sort: onSortTable
            },
            'filter:submit': 'submitSearch',
            'filter-switch:click': toggleFilter,
            'filter-cancel:click': cancelFilter,
            'filter-modify:click': toggleFilterPanelContent,
            'table:command': 'commandHandler',
            'create:click': popDrawerActionPanel
        };
        this.addUIEvents(uiEvents);
        var commands = {
            'click:modify': u.partial(handleRowAction, 'modify'),
            'click:read': u.partial(handleRowAction, 'read'),
            'click:copy': u.partial(handleRowAction, 'copy'),
            'click:viewReport': handleViewReport
        };
        this.addCommands(commands);
    };
    exports.addCommands = function (newCommands) {
        this.commands = u.extend(this.commands || {}, newCommands);
    };
    function handleRowAction(name, args) {
        var id = args;
        var url = getActionURL.call(this, name, id);
        var options = { url: url };
        this.popDrawerAction(options).show();
    }
    function handleViewReport(args) {
        this.popDrawerAction({ url: args }).show();
    }
    function onChangePageSize(e) {
        var pageSize = e.target.get('pageSize');
        this.updatePageSize(pageSize);
    }
    exports.updatePageSize = function (pageSize) {
        this.fire('pagesizechange', { pageSize: pageSize });
    };
    function onChangePage(e) {
        this.updatePageIndex();
    }
    exports.updatePageIndex = function () {
        this.fire('pagechange');
    };
    exports.updateBatchButtonStatus = function () {
        var items = this.getSelectedItems();
        u.each(this.getGroup('batch'), function (button) {
            var status = +button.getData('status');
            var disabled = u.isEmpty(items) || !this.model.canUpdateToStatus(items, status);
            button.set('disabled', disabled);
        }, this);
    };
    exports.getSelectedItems = function () {
        var table = this.get('table');
        return table ? table.getSelectedItems() : [];
    };
    function onSortTable(e) {
        var tableProperties = {
            order: e.order,
            orderBy: e.field.field
        };
        this.sortTable(tableProperties);
    }
    exports.sortTable = function (tableProperties) {
        this.fire('tablesort', { tableProperties: tableProperties });
    };
    exports.submitSearch = function () {
        this.fire('search');
    };
    function toggleFilter() {
        var filter = this.getSafely('filter');
        var filtersInfo = this.model.get('filtersInfo');
        if (filtersInfo.isAllFiltersDefault) {
            filter.isHidden() ? showFilter.call(this) : hideFilter.call(this);
        } else {
            this.submitSearchWithoutKey();
        }
    }
    function showFilter() {
        this.getSafely('filter').show();
        this.getSafely('filter-switch').addState('expand');
    }
    function hideFilter() {
        this.getSafely('filter').hide();
        this.getSafely('filter-switch').removeState('expand');
    }
    function cancelFilter() {
        if (this.model.get('filtersInfo').isAllFiltersDefault) {
            hideFilter.call(this);
        } else {
            this.submitSearchWithoutKey();
        }
    }
    exports.submitSearchWithoutKey = function (name) {
        if (name) {
            this.clearFilterValue(name);
        } else {
            var filters = this.model.get('filtersInfo').filters;
            u.pluck(filters, 'name').forEach(this.clearFilterValue, this);
        }
        this.fire('search');
    };
    exports.clearFilterValue = function (name) {
        var value = this.model.defaultArgs[name] || '';
        this.getSafely(name).setValue(value);
    };
    function toggleFilterPanelContent() {
        this.getGroup('filter-content').toggle();
    }
    exports.commandHandler = function (e) {
        this.handleTableCommand(e.triggerType, e.name, e.args);
    };
    exports.handleTableCommand = function (triggerType, name, args) {
        var handled = this.handleStatusCommand(triggerType, name, args);
        if (!handled) {
            var handler = this.commands[triggerType + ':' + name];
            if (u.isString(handler)) {
                handler = this[handler];
            }
            if (u.isFunction(handler)) {
                handler.call(this, args);
                handled = true;
            }
        }
        return handled;
    };
    exports.handleStatusCommand = function (triggerType, name, args) {
        if (triggerType === 'click') {
            var transition = u.findWhere(this.model.getStatusTransitions(), { statusName: name });
            if (transition) {
                args = {
                    id: args,
                    status: transition.status
                };
                this.fire('modifystatus', args);
                return true;
            }
        }
        return false;
    };
    function getActionURL(actionName, id) {
        var urlParts = {
            modify: 'update',
            read: 'view',
            copy: 'copy'
        };
        var urlPart = urlParts[actionName] || '';
        var path = this.model.get('url').getPath();
        var index = path.lastIndexOf('/');
        var url = require('er/URL').withQuery(path.substring(0, index + 1) + urlPart, { id: id });
        return url;
    }
    exports.bindEvents = function () {
        this.getGroup('batch').each(function (button) {
            button.on('click', batchModify, this);
        }, this);
        this.getGroup('clear-button').each(function (button) {
            var name = button.get('name');
            button.on('click', function (e) {
                this.submitSearchWithoutKey(name);
            }, this);
        }, this);
        this.$super(arguments);
    };
    function batchModify(e) {
        var args = { status: +e.target.getData('status') };
        this.fire('batchmodify', args);
    }
    exports.tableFields = [];
    exports.getTableFields = function () {
        return this.tableFields;
    };
    exports.getUIProperties = function () {
        var properties = this.$super(arguments) || {};
        if (!properties.table) {
            properties.table = {};
        }
        properties.table.fields = this.getTableFields();
        return properties;
    };
    exports.enterDocument = function () {
        this.$super(arguments);
        this.updateBatchButtonStatus();
        this.updateFilterPanelStatus();
        this.updateSearchBoxStatus();
    };
    exports.updateFilterPanelStatus = function () {
        if (!this.model.get('filtersInfo').isAllFiltersDefault) {
            showFilter.call(this);
            toggleFilterPanelContent.call(this);
        }
    };
    exports.updateSearchBoxStatus = function () {
        if (this.model.get('keyword')) {
            this.getSafely('keyword').addState('clear');
        }
    };
    function popDrawerActionPanel(e) {
        e.stopPropagation();
        e.preventDefault();
        var url = String(e.target.get('href'));
        if (url.charAt(0) === '#') {
            url = url.slice(1);
        }
        this.popDrawerAction({ url: url }).show();
    }
    exports.popDrawerAction = function (options) {
        var drawerActionPanel = this.$super(arguments);
        drawerActionPanel.on('action@submitcancel', cancel);
        drawerActionPanel.on('action@back', back);
        drawerActionPanel.on('close', closeDrawerActionPanel, this);
        return drawerActionPanel;
    };
    function cancel(e) {
        e.preventDefault();
        this.dispose();
    }
    function back(e) {
        e.stopPropagation();
        e.preventDefault();
        this.hide();
    }
    function closeDrawerActionPanel(e) {
        this.fire('close');
    }
    exports.getSearchArgs = function () {
        var form = this.get('filter');
        var args = form ? form.getData() : {};
        args.order = this.get('table').order;
        args.orderBy = this.get('table').orderBy;
        var keyword = this.get('keyword');
        if (keyword) {
            args.keyword = u.trim(keyword.getValue());
        }
        return args;
    };
    exports.getPageIndex = function () {
        return this.getSafely('pager').get('page');
    };
    exports.adjustLayout = function () {
        var table = this.get('table');
        if (table) {
            table.adjustWidth();
        }
    };
    exports.updateItems = function (items) {
        var table = this.get('table');
        u.each(items, function (item) {
            var index = this.model.indexOf(item);
            if (index < 0) {
                throw new Error('No row found');
            }
            table.updateRowAt(index, item);
        }, this);
    };
    exports.waitModifyStatusConfirm = function (context, advice) {
        var options = {
            title: context.command + this.model.get('entityDescription'),
            content: advice.message
        };
        return this.waitConfirm(options);
    };
    var BaseView = require('./BaseView');
    var ListView = require('eoo').create(BaseView, exports);
    return ListView;
});

define('ub-ria/mvc/ListModel', [
    'require',
    '../util',
    'er/URL',
    'promise',
    './BaseModel',
    'eoo'
], function (require) {
    var u = require('../util');
    var LIST_DATASOURCE = {
        list: {
            retrieve: function (model) {
                var query = model.getQuery();
                query = u.purify(query, null, true);
                return model.search(query);
            },
            dump: true
        }
    };
    var LIST_WITHOUT_KEYWORD_URL_DATASOURCE = {
        listWithoutKeywordURL: function (model) {
            var url = model.get('url');
            var path = url.getPath();
            var query = url.getQuery();
            query = u.omit(query, 'keyword');
            var template = '#' + require('er/URL').withQuery(path, query);
            return template;
        }
    };
    var PAGE_SIZE_DATASOURCE = {
        pageSize: function (model) {
            var globalData = model.data('global');
            return globalData.getUser().thenGetProperty('pageSize');
        }
    };
    var HAS_RESULT_DATASOURCE = {
        hasResult: function (model) {
            var results = model.get('results');
            return results && results.length || !u.isEmpty(model.get('url').getQuery());
        }
    };
    var exports = {};
    exports.setGlobalData = function (data) {
        this.addData('global', data);
    };
    exports.defaultStatusValue = 1;
    exports.getDefaultStatusValue = function () {
        return this.defaultStatusValue || '';
    };
    exports.defaultArgs = {};
    exports.getDefaultArgs = function () {
        var args = this.defaultArgs || {};
        var defaultStatusValue = this.getDefaultStatusValue();
        if (!args.hasOwnProperty('status') && defaultStatusValue) {
            args.status = defaultStatusValue;
        }
        return args;
    };
    exports.constructor = function () {
        this.$super(arguments);
        u.each(this.getDefaultArgs(), function (value, key) {
            if (!this.has(key)) {
                this.set(key, value);
            }
        }, this);
        this.putDatasource(LIST_DATASOURCE, 0);
        this.putDatasource(LIST_WITHOUT_KEYWORD_URL_DATASOURCE, 0);
        this.putDatasource(PAGE_SIZE_DATASOURCE, 0);
        this.putDatasource(HAS_RESULT_DATASOURCE, 1);
    };
    exports.statusTransitions = [
        {
            status: 0,
            deny: [0],
            statusName: 'remove',
            command: '\u5220\u9664'
        },
        {
            status: 1,
            deny: [1],
            statusName: 'restore',
            command: '\u542F\u7528'
        }
    ];
    exports.getStatusTransitions = function () {
        return this.statusTransitions;
    };
    function processUIData() {
        this.prepareSelectMode();
    }
    exports.prepareSelectMode = function () {
        var canBatchModify = this.get('canBatchModify') || this.checkPermission('canBatchModify');
        this.set('selectMode', canBatchModify ? 'multi' : '');
    };
    exports.prepare = function () {
        this.set('filtersInfo', this.getFiltersInfo());
        processUIData.call(this);
    };
    exports.getQuery = function () {
        var query = {
            keyword: this.get('keyword'),
            status: this.get('status'),
            order: this.get('order'),
            orderBy: this.get('orderBy'),
            pageNo: this.get('page') || 1
        };
        if (!query.status) {
            query.status = this.getDefaultStatusValue();
        } else if (query.status === 'all') {
            query.status = '';
        }
        return query;
    };
    function checkStatusTransition(targetStatus, entity) {
        var config = u.findWhere(this.getStatusTransitions(), { status: targetStatus });
        if (config.accept) {
            var accept = u.difference(config.accept, config.deny || []);
            return u.contains(accept, entity.status);
        } else if (config.deny) {
            return !u.contains(config.deny, entity.status);
        }
        return true;
    }
    exports.canUpdateToStatus = function (items, status) {
        return u.any(items, u.bind(checkStatusTransition, this, status));
    };
    exports.updatePageSize = function (pageSize) {
        var data = this.data('global');
        if (!data) {
            throw new Error('No global data object attached to this Model');
        }
        if (typeof data.updatePageSize !== 'function') {
            throw new Error('No updatePageSize method implemented on global data object');
        }
        return data.updatePageSize(pageSize);
    };
    exports.getAllItems = function () {
        return this.get('results');
    };
    exports.getItemById = function (id) {
        var list = this.getAllItems();
        return u.find(list, function (item) {
            return item.id == id;
        });
    };
    exports.indexOf = function (item) {
        var list = this.getAllItems();
        if (!list) {
            return -1;
        }
        if (typeof item === 'object') {
            return u.indexOf(list, item);
        }
        for (var i = 0; i < list.length; i++) {
            if (list[i].id === item) {
                return i;
            }
        }
        return -1;
    };
    exports.search = function (query) {
        var data = this.data();
        if (!data) {
            throw new Error('No default data object attached to this Model');
        }
        if (typeof data.search !== 'function') {
            throw new Error('No search method implemented on default data object');
        }
        return data.search(query || {});
    };
    exports.updateStatus = function (status, ids) {
        var data = this.data();
        if (!data) {
            throw new Error('No default data object attached to this Model');
        }
        if (typeof data.updateStatus !== 'function') {
            throw new Error('No updateStatus method implemented on default data object');
        }
        return data.updateStatus(status, ids);
    };
    exports.remove = function (ids) {
        return this.updateStatus(0, ids);
    };
    exports.restore = function (ids) {
        return this.updateStatus(1, ids);
    };
    exports.getAdvice = function (status, ids) {
        var config = u.findWhere(this.getStatusTransitions(), { status: status });
        if (config && config.statusName) {
            var adviceMethod = this['get' + u.pascalize(config.statusName) + 'Advice'];
            if (adviceMethod) {
                return adviceMethod.call(this, ids);
            }
        }
        var data = this.data();
        if (!data) {
            throw new Error('No default data object attached to this Model');
        }
        if (typeof data.getAdvice !== 'function') {
            throw new Error('No getAdvice method implemented on default data object');
        }
        return data.getAdvice(status, ids);
    };
    exports.getRemoveAdvice = function (ids) {
        var count = ids.length;
        var description = this.get('entityDescription');
        var message = '\u60A8\u786E\u5B9A\u8981\u5220\u9664\u5DF2\u9009\u62E9\u7684' + count + '\u4E2A' + description + '\u5417\uFF1F';
        if (count <= 1) {
            message = '\u60A8\u786E\u5B9A\u8981\u5220\u9664\u8BE5' + description + '\u5417\uFF1F';
        }
        var advice = { message: message };
        return require('promise').resolve(advice);
    };
    exports.getFilters = function () {
        return {};
    };
    exports.getFiltersInfo = function () {
        var isAllFiltersDefault = true;
        var defaultArgs = this.getDefaultArgs();
        var filters = {};
        u.each(this.getFilters(), function (rawFilter, name) {
            var filter = {
                text: typeof rawFilter.text === 'function' ? rawFilter.text(rawFilter) : rawFilter.text,
                defaultValue: defaultArgs[name],
                name: name
            };
            u.defaults(filter, rawFilter);
            filter.isDefaultValue = filter.hasOwnProperty('isDefaultValue') ? filter.isDefaultValue : filter.defaultValue == filter.value;
            if (!filter.isDefaultValue) {
                isAllFiltersDefault = false;
            }
            filters[name] = filter;
        }, this);
        return {
            filters: filters,
            isAllFiltersDefault: isAllFiltersDefault
        };
    };
    var BaseModel = require('./BaseModel');
    var ListModel = require('eoo').create(BaseModel, exports);
    return ListModel;
});

define('ub-ria/mvc/ListAction', [
    'require',
    'eoo',
    'er/URL',
    '../util',
    './BaseAction'
], function (require) {
    var eoo = require('eoo');
    var URL = require('er/URL');
    var u = require('../util');
    var exports = {};
    exports.category = 'list';
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('search', search, this);
        this.view.on('pagesizechange', updatePageSize, this);
        this.view.on('pagechange', updatePage, this);
        this.view.on('batchmodify', batchModifyStatus, this);
        this.view.on('tablesort', updateTableSort, this);
        this.view.on('modifystatus', modifyStatus, this);
        this.getLayoutChangeNotifier().on('layoutchanged', this.adjustLayout, this);
    };
    function search() {
        this.performSearch();
    }
    exports.performSearch = function () {
        var event = this.fire('search');
        if (!event.isDefaultPrevented()) {
            var query = this.getSearchQuery();
            query.page = 1;
            this.reloadWithQueryUpdate(query);
        }
    };
    exports.getSearchQuery = function () {
        var query = this.view.getSearchArgs();
        query.page = this.view.getPageIndex();
        return query;
    };
    exports.reloadWithQueryUpdate = function (args) {
        var url = getURLForQuery.call(this, args);
        this.redirect(url, { force: true });
    };
    function updatePageSize(e) {
        this.model.updatePageSize(e.pageSize).thenBind(afterPageSizeUpdate, this, e.pageSize);
    }
    function afterPageSizeUpdate() {
        var event = this.fire('pagesizechange');
        if (!event.isDefaultPrevented()) {
            var query = this.getSearchQuery();
            query.page = 1;
            this.reloadWithQueryUpdate(query);
        }
    }
    function updatePage() {
        var event = this.fire('pagechange');
        if (!event.isDefaultPrevented()) {
            var query = this.getSearchQuery();
            this.reloadWithQueryUpdate(query);
        }
    }
    function batchModifyStatus(e) {
        var items = this.view.getSelectedItems();
        this.modifyStatus(items, e.status);
    }
    exports.modifyStatus = function (items, status) {
        var ids = u.pluck(items, 'id');
        var transitionItem = u.findWhere(this.model.getStatusTransitions(), { status: status });
        var context = {
            ids: ids,
            items: items,
            status: status,
            statusName: transitionItem.statusName,
            command: transitionItem.command,
            reload: transitionItem.reload
        };
        if (this.requireAdviceFor(context)) {
            this.model.getAdvice(status, ids).thenBind(waitConfirmForAdvice, this, context).thenBind(updateEntities, this, context);
        } else {
            updateEntities.call(this, context);
        }
    };
    exports.requireAdviceFor = function (context) {
        return context.statusName === 'remove';
    };
    function waitConfirmForAdvice(context, advice) {
        return this.view.waitModifyStatusConfirm(context, advice);
    }
    function updateEntities(context) {
        this.model[context.statusName](context.ids).thenBind(updateListStatus, this, context).fail(u.bind(this.notifyModifyFail, this, context));
    }
    function updateListStatus(context) {
        this.notifyModifySuccess(context);
        var event = this.fire('statusupdate', context);
        if (context.reload === false) {
            this.updateItems(context);
        } else if (!event.isDefaultPrevented()) {
            this.reload();
        }
    }
    exports.notifyModifySuccess = function (context) {
    };
    exports.notifyModifyFail = function (context) {
        var entityDescription = this.getEntityDescription();
        if (context.ids.length > 1) {
            this.view.alert('\u65E0\u6CD5' + context.command + '\u90E8\u5206\u6216\u5168\u90E8' + entityDescription, context.command + entityDescription);
        } else {
            this.view.alert('\u65E0\u6CD5' + context.command + '\u8BE5' + entityDescription, context.command + entityDescription);
        }
    };
    exports.updateItems = function (context) {
        var ids = context.ids;
        var targetStatus = context.status;
        var items = [];
        u.each(ids, function (id) {
            var item = this.model.getItemById(id);
            if (item) {
                item.status = targetStatus;
                items.push(item);
            }
        }, this);
        this.view.updateItems(items);
    };
    function updateTableSort(e) {
        var event = this.fire('tablesort');
        if (!event.isDefaultPrevented()) {
            var query = this.getSearchQuery();
            query.page = 1;
            this.reloadWithQueryUpdate(query);
        }
    }
    function modifyStatus(e) {
        var item = this.model.getItemById(e.id);
        this.modifyStatus([item], e.status);
    }
    exports.redirectForSearch = function (args) {
        var path = this.model.get('url').getPath();
        var url = URL.withQuery(path, args);
        this.redirect(url, { force: true });
    };
    function getURLForQuery(args) {
        var url = this.context.url;
        var path = url.getPath();
        var defaultArgs = this.model.getDefaultArgs();
        args = u.purify(args, defaultArgs);
        return URL.withQuery(path, args).toString();
    }
    exports.adjustLayout = function () {
        this.view.adjustLayout();
    };
    exports.leave = function () {
        this.getLayoutChangeNotifier().un('layoutchanged', this.adjustLayout, this);
        this.$super(arguments);
    };
    exports.getSelectItems = function () {
        return this.view.getSelectedItems();
    };
    eoo.defineAccessor(exports, 'layoutChangeNotifier');
    var BaseAction = require('./BaseAction');
    var ListAction = eoo.create(BaseAction, exports);
    return ListAction;
});

define('ub-ria/mvc/IoCActionFactory', [
    'require',
    '../util',
    'eoo',
    'promise'
], function (require) {
    var u = require('../util');
    var eoo = require('eoo');
    var exports = {};
    exports.constructor = function (actionComponent, options) {
        options = options || {};
        this.actionComponent = actionComponent;
        this.noSchema = options.noSchema || false;
    };
    exports.createRuntimeAction = function (actionContext) {
        var Promise = require('promise');
        var ioc = this.getIocContainer();
        return new Promise(u.bind(ioc.getComponent, ioc, this.actionComponent)).thenBind(this.buildAction, this, actionContext);
    };
    function getViewName(actionContext) {
        var parts = u.compact(actionContext.url.getPath().split('/'));
        var pageType = parts[parts.length - 1];
        if (pageType === 'create' || pageType === 'update') {
            parts[parts.length - 1] = 'form';
        }
        return u.map(parts, u.dasherize).join('-');
    }
    exports.buildAction = function (actionContext, action) {
        action.view.name = getViewName(actionContext);
        return action;
    };
    eoo.defineAccessor(exports, 'iocContainer');
    var IoCActionFactory = eoo.create(exports);
    return IoCActionFactory;
});

define('ub-ria/ui/Warn', [
    'require',
    'esui/lib',
    'esui/Control',
    'esui/painters',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var Control = require('esui/Control');
    var exports = {};
    exports.type = 'Warn';
    exports.initOptions = function (options) {
        var properties = {};
        lib.extend(properties, this.$self.defaultProperties, options);
        if (properties.content == null) {
            properties.content = this.main.innerHTML;
        }
        this.setProperties(properties);
    };
    var tempalte = '<i class="${iconClass} ui-icon ui-icon-question-circle"></i>' + '<div class="${contentClass}" id="${contentId}"></div>' + '<div class="${operationFieldClass}">' + '    <esui-button class="${okBtnClass}" data-ui="childName:btnOk;">${okLabel}</esui-button>' + '    <esui-button class="${cancelBtnClass}" data-ui="childName:btnCancel;">' + '    ${cancelLabel}</esui-button>' + '</div>';
    function btnClickHandler(warn, type) {
        warn.fire(type);
        if (type === 'ok') {
            warn.dispose();
        } else {
            warn.hide();
        }
    }
    exports.initStructure = function () {
        this.main.innerHTML = lib.format(tempalte, {
            iconClass: this.helper.getPartClassName('icon'),
            contentId: this.helper.getId('content'),
            contentClass: this.helper.getPartClassName('content'),
            okBtnClass: this.helper.getPartClassName('ok-btn'),
            cancelBtnClass: this.helper.getPartClassName('cancel-btn'),
            okLabel: this.okLabel,
            cancelLabel: this.cancelLabel,
            operationFieldClass: this.helper.getPartClassName('operation-field')
        });
        this.initChildren();
        this.getChild('btnOk').on('click', lib.curry(btnClickHandler, this, 'ok'));
        this.getChild('btnCancel').on('click', lib.curry(btnClickHandler, this, 'cancel'));
    };
    exports.repaint = require('esui/painters').createRepaint(Control.prototype.repaint, {
        name: 'content',
        paint: function (control, content) {
            var container = control.helper.getPart('content');
            container.innerHTML = content;
        }
    });
    exports.hide = function () {
        this.fire('hide');
        this.dispose();
    };
    exports.dispose = function () {
        if (this.helper.isInStage('DISPOSED')) {
            return;
        }
        this.$super(arguments);
        lib.removeNode(this.main);
    };
    var Warn = require('eoo').create(Control, exports);
    Warn.show = function (options) {
        var warn = new Warn(options);
        warn.appendTo(options.wrapper || document.body);
        return warn;
    };
    Warn.defaultProperties = {
        okLabel: '\u53D6\u6D88\u65B0\u5EFA',
        cancelLabel: '\u7EE7\u7EED\u65B0\u5EFA'
    };
    require('esui').register(Warn);
    return Warn;
});

define('ub-ria/mvc/FormView', [
    'require',
    'ub-ria-ui/DrawerActionPanel',
    '../util',
    'esui/validator/Validity',
    'esui/validator/ValidityState',
    'promise',
    '../ui/Warn',
    './BaseView',
    'eoo'
], function (require) {
    require('ub-ria-ui/DrawerActionPanel');
    var u = require('../util');
    var Validity = require('esui/validator/Validity');
    var ValidityState = require('esui/validator/ValidityState');
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = {
            'form:submit': submit,
            'cancel:click': cancelEdit
        };
        this.addUIEvents(uiEvents);
    };
    function submit() {
        this.fire('submit');
    }
    function cancelEdit() {
        this.fire('cancel');
    }
    exports.getUIProperties = function () {
        var uiProperties = this.$super(arguments) || {};
        uiProperties = u.deepClone(uiProperties);
        uiProperties.crumb = { linkNodeTemplate: '<a class="${classes}" href="${href}">${text}</a>' };
        return uiProperties;
    };
    exports.getEntity = function () {
        return this.getFormData();
    };
    exports.getFormData = function () {
        var form = this.get('form');
        return form ? form.getData() : {};
    };
    exports.notifyErrors = function (errors) {
        var form = this.get('form');
        for (var i = 0; i < errors.fields.length; i++) {
            var fail = errors.fields[i];
            var state = new ValidityState(false, fail.message);
            var validity = new Validity();
            validity.addState('server', state);
            var input = form.getInputControls(fail.field)[0];
            if (input && typeof input.showValidity === 'function') {
                input.showValidity(validity);
            }
        }
    };
    exports.notifyGlobalError = function (error) {
        var state = new ValidityState(false, error);
        var validity = new Validity();
        validity.addState('server', state);
        var validateLabel = this.getSafely('global-error');
        validateLabel.set('validity', validity);
    };
    exports.clearGlobalError = function () {
        var validity = new Validity();
        var validateLabel = this.getSafely('global-error');
        validateLabel.set('validity', validity);
    };
    exports.waitCancelConfirm = function (options) {
        options.okLabel = options.okLabel || '\u53D6\u6D88' + options.title;
        options.cancelLabel = options.cancelLabel || '\u7EE7\u7EED' + options.title;
        return this.waitFormConfirm(options);
    };
    exports.waitSubmitConfirm = function (options) {
        return require('promise').resolve();
    };
    exports.waitConfirmForType = function (options) {
        return this.waitFormConfirm(options);
    };
    exports.waitFormConfirm = function (options) {
        if (!options.viewContext) {
            options.viewContext = this.viewContext;
        }
        var warn = this.get('form-confirm');
        if (warn) {
            warn.hide();
        }
        var wrapper = this.get('submit-section');
        var extendedOptions = {
            wrapper: wrapper,
            id: 'form-confirm'
        };
        u.extend(options, extendedOptions);
        warn = require('../ui/Warn').show(options);
        var formViewContainer = this.get('form-page');
        formViewContainer.addState('warned');
        var formContent = this.get('form-content-main');
        formContent.on('command', function (e) {
            if (e.name === 'form-content-click') {
                warn.hide();
            }
        }, this);
        var Promise = require('promise');
        var executor = function (resolve, reject) {
            warn.on('ok', function () {
                resolve();
                formViewContainer.removeState('warned');
            });
            warn.on('cancel', function () {
                formViewContainer.removeState('warned');
            });
            warn.on('hide', function () {
                formViewContainer.removeState('warned');
            });
        };
        return new Promise(executor);
    };
    exports.disableSubmit = function () {
        if (this.viewContext) {
            this.getGroup('submit').disable();
        }
    };
    exports.enableSubmit = function () {
        if (this.viewContext) {
            this.getGroup('submit').enable();
        }
    };
    exports.popDrawerActionPanel = function (e) {
        e.preventDefault();
        e.stopPropagation();
        var url = e.target.get('href') + '';
        var targetId = e.target.get('id');
        if (url.charAt(0) === '#') {
            url = url.slice(1);
        }
        this.popDrawerAction({ url: url }, targetId).show();
    };
    exports.popDrawerAction = function (options, targetId) {
        var drawerActionPanel = this.$super(arguments);
        drawerActionPanel.on('action@entitysave', function (e) {
            saveRelatedEntity.call(this, e, targetId);
        }, this);
        drawerActionPanel.on('action@handlefinish', handleAfterRelatedEntitySaved, this);
        drawerActionPanel.on('action@submitcancel', cancel);
        drawerActionPanel.on('action@back', back, this);
        return drawerActionPanel;
    };
    function saveRelatedEntity(e, targetId) {
        e.stopPropagation();
        e.preventDefault();
        this.handleAfterRelatedEntitySaved(e.entity, targetId);
    }
    exports.handleAfterRelatedEntitySaved = function (entity, targetId) {
    };
    function handleAfterRelatedEntitySaved(e) {
        e.target.hide();
        e.target.dispose();
    }
    function cancel(e) {
        e.preventDefault();
        this.dispose();
    }
    function back(e) {
        e.stopPropagation();
        e.preventDefault();
        e.target.hide();
    }
    var BaseView = require('./BaseView');
    var FormView = require('eoo').create(BaseView, exports);
    return FormView;
});

define('ub-ria/mvc/FormModel', [
    'require',
    'promise',
    './SingleEntityModel',
    'eoo'
], function (require) {
    var Promise = require('promise');
    var exports = {};
    exports.setGlobalData = function (data) {
        this.addData('global', data);
    };
    exports.fillEntity = function (entity) {
        return entity;
    };
    exports.setValidator = function (validator) {
        if (validator && !validator.getRule()) {
            validator.setRule(this.get('rule'));
        }
        this.validator = validator;
    };
    exports.getValidator = function () {
        return this.validator;
    };
    exports.validateEntity = function (entity) {
        var validator = this.getValidator();
        if (!validator) {
            throw new Error('No validator object attached to this Model');
        }
        return validator.validate(entity);
    };
    exports.save = function (entity) {
        entity = this.fillEntity(entity);
        var validationResult = this.validateEntity(entity);
        if (validationResult.length > 0) {
            return Promise.reject({ fields: validationResult });
        }
        return this.saveEntity(entity);
    };
    exports.update = function (entity) {
        entity = this.fillEntity(entity);
        entity.id = this.get('id');
        var validationResult = this.validateEntity(entity);
        if (validationResult.length > 0) {
            return Promise.reject({ fields: validationResult });
        }
        return this.updateEntity(entity);
    };
    exports.saveEntity = function (entity) {
        var data = this.data();
        if (!data) {
            throw new Error('No default data object attached to this Model');
        }
        if (typeof data.save !== 'function') {
            throw new Error('No save method implemented on default data object');
        }
        return data.save(entity);
    };
    exports.updateEntity = function (entity) {
        var data = this.data();
        if (!data) {
            throw new Error('No default data object attached to this Model');
        }
        if (typeof data.update !== 'function') {
            throw new Error('No update method implemented on default data object');
        }
        return data.update(entity);
    };
    var SingleEntityModel = require('./SingleEntityModel');
    var FormModel = require('eoo').create(SingleEntityModel, exports);
    return FormModel;
});

define('ub-ria/mvc/FormAction', [
    'require',
    '../util',
    'promise',
    'er/util',
    'er/events',
    './BaseAction',
    'eoo'
], function (require) {
    var u = require('../util');
    var Promise = require('promise');
    var exports = {};
    exports.category = 'form';
    exports.handleSubmitError = function (errors) {
        if (errors.status === 409) {
            errors = require('er/util').parseJSON(errors.responseText);
        }
        if (errors.message) {
            this.view.notifyGlobalError(errors.message);
        }
        if (errors.fields) {
            this.view.notifyErrors(errors);
        }
        return errors.message || errors.fields;
    };
    exports.handleSubmitResult = function (entity) {
        var entitySaveEvent = this.fire('entitysave', { entity: entity });
        if (!entitySaveEvent.isDefaultPrevented()) {
            var submitHandler = this.getSubmitHandler();
            if (submitHandler) {
                submitHandler.handle(entity, this);
            }
        }
        this.fire('handlefinish');
    };
    exports.getSubmitHandler = function () {
        return this.submitHandler;
    };
    exports.setSubmitHandler = function (handler) {
        this.submitHandler = handler;
    };
    function handleError(errors) {
        var handled = this.handleSubmitError(errors);
        if (!handled) {
            require('er/events').notifyError(errors.responseText);
        }
    }
    exports.getSubmitMethod = function (formType) {
        var methodMap = {
            create: 'save',
            update: 'update',
            copy: 'save'
        };
        return methodMap[formType] || null;
    };
    exports.submitEntity = function (entity) {
        var method = this.getSubmitMethod(this.context.formType);
        try {
            if (method) {
                return this.model[method](entity).thenBind(this.handleSubmitResult, this).fail(u.bind(handleError, this));
            }
            throw new Error('Cannot find formType in methodMap');
        } catch (ex) {
            return Promise.reject(ex);
        }
    };
    exports.cancelConfirmTitle = '\u786E\u8BA4\u53D6\u6D88\u7F16\u8F91';
    exports.getCancelConfirmTitle = function () {
        var formType = this.model.get('formType');
        if (formType === 'create') {
            return '\u65B0\u5EFA';
        }
        return '\u7F16\u8F91';
    };
    exports.cancelConfirmMessage = '\u53D6\u6D88\u7F16\u8F91\u5C06\u4E0D\u4FDD\u7559\u5DF2\u7ECF\u586B\u5199\u7684\u6570\u636E\uFF0C\u786E\u5B9A\u7EE7\u7EED\u5417\uFF1F';
    exports.getCancelConfirmMessage = function () {
        return this.cancelConfirmMessage;
    };
    function cancel() {
        var submitCancelEvent = this.fire('submitcancel');
        var handleFinishEvent = this.fire('handlefinish');
        if (!submitCancelEvent.isDefaultPrevented() && !handleFinishEvent.isDefaultPrevented()) {
            this.redirectAfterCancel();
        }
    }
    exports.cancelEdit = function () {
        var initialFormData = this.model.get('initialFormData');
        if (this.isFormDataChanged(initialFormData)) {
            var options = {
                title: this.getCancelConfirmTitle(),
                content: this.getCancelConfirmMessage()
            };
            this.view.waitCancelConfirm(options).thenBind(cancel, this);
        } else {
            cancel.call(this);
        }
    };
    exports.redirectAfterCancel = function () {
        this.back('/' + this.getEntityName() + '/list');
    };
    exports.isFormDataChanged = function (initialFormData) {
        return true;
    };
    exports.submitConfirmMessage = '\u786E\u8BA4\u63D0\u4EA4\u4FEE\u6539\uFF1F';
    exports.getSubmitConfirmMessage = function () {
        return this.submitConfirmMessage;
    };
    function submit() {
        this.view.clearGlobalError();
        var entity = this.view.getEntity();
        var options = { content: this.getSubmitConfirmMessage() };
        this.view.waitSubmitConfirm(options).thenBind(this.view.disableSubmit, this.view).thenBind(this.submitEntity, this, entity).ensure(u.bind(this.view.enableSubmit, this.view));
    }
    exports.initBehavior = function () {
        this.$super(arguments);
        var initialFormData = this.view.getFormData();
        this.model.set('initialFormData', initialFormData, { silent: true });
        this.view.on('submit', submit, this);
        this.view.on('cancel', this.cancelEdit, this);
    };
    exports.isChildForm = function () {
        return !!this.model.get('returnUrl');
    };
    var BaseAction = require('./BaseAction');
    var FormAction = require('eoo').create(BaseAction, exports);
    return FormAction;
});

define('ub-ria/mvc/checker/requiredChecker', [
    'require',
    '../../util'
], function (require) {
    var u = require('../../util');
    var checker = {
        name: 'required',
        errorMessage: '${title}\u4E0D\u80FD\u4E3A\u7A7A',
        priority: 1,
        check: check
    };
    function check(value, schema) {
        return !u.isEmpty(value) || u.isNumber(value) || u.isBoolean(value);
    }
    return checker;
});

define('ub-ria/mvc/EntityValidator', [
    'require',
    '../util',
    './checker/requiredChecker',
    './checker/typeChecker',
    './checker/rangeLengthChecker',
    './checker/maxLengthChecker',
    './checker/minLengthChecker',
    './checker/rangeChecker',
    './checker/maxChecker',
    './checker/minChecker',
    './checker/enumChecker',
    './checker/patternChecker',
    'eoo'
], function (require) {
    var u = require('../util');
    var checkers = {
        'required': require('./checker/requiredChecker'),
        'type': require('./checker/typeChecker'),
        'rangeLength': require('./checker/rangeLengthChecker'),
        'maxLength': require('./checker/maxLengthChecker'),
        'minLength': require('./checker/minLengthChecker'),
        'range': require('./checker/rangeChecker'),
        'max': require('./checker/maxChecker'),
        'min': require('./checker/minChecker'),
        'enum': require('./checker/enumChecker'),
        'pattern': require('./checker/patternChecker')
    };
    var exports = {};
    exports.constructor = function () {
        this.initCheckers();
    };
    exports.initCheckers = function () {
        this.checkers = u.deepClone(checkers);
    };
    exports.setErrorMessages = function (errorMessages) {
        if (!errorMessages) {
            return;
        }
        var checkers = this.getCheckers();
        u.each(errorMessages, function (value, key) {
            var checker = checkers[key];
            if (checker) {
                checker.errorMessage = value;
            }
        });
    };
    exports.addChecker = function (checker) {
        if (checker && checker.name && checker.errorMessage && checker.check && checker.priority) {
            var checkers = this.getCheckers();
            checkers[checker.name] = checker;
            return this.checkers[checker.name];
        }
        return null;
    };
    exports.removeChecker = function (checkerName) {
        var checkers = this.getCheckers();
        return delete checkers[checkerName];
    };
    exports.getCheckers = function () {
        return this.checkers || {};
    };
    exports.setSchema = function (value) {
        this.schema = value;
    };
    exports.getSchema = function () {
        return this.schema;
    };
    exports.setRule = function (value) {
        this.rule = value;
    };
    exports.getRule = function () {
        return this.rule;
    };
    exports.validate = function (entity) {
        var schema = this.getSchema();
        var errors = [];
        var path = [];
        actualValidate.call(this, schema, entity, errors, path);
        return errors;
    };
    function actualValidate(schema, entity, errors, path) {
        for (var field in schema) {
            if (field === 'id') {
                continue;
            }
            var value = entity[field];
            var fieldSchema = schema[field];
            var fieldCheckers = this.getFieldCheckers(fieldSchema);
            var fieldPath = path.length > 0 ? path.join('.') + '.' + field : field;
            var args = {
                value: value,
                fieldPath: fieldPath,
                fieldSchema: fieldSchema
            };
            var result = this.executeCheckers(fieldCheckers, args);
            if (result) {
                errors.push(result);
                continue;
            }
            if (u.isEmpty(value)) {
                continue;
            }
            if (fieldSchema[0] === 'object') {
                path.push(field);
                actualValidate.call(this, fieldSchema[2].content, entity[field], errors, path);
                path.pop();
            } else if (fieldSchema[0] === 'array') {
                path.push(field);
                for (var i = 0; i < value.length; i++) {
                    var itemSchema = {};
                    itemSchema[i] = fieldSchema[2].item;
                    actualValidate.call(this, itemSchema, value, errors, path);
                }
                path.pop();
            }
        }
    }
    exports.executeCheckers = function (fieldCheckers, checkerOptions) {
        var value = checkerOptions.value;
        var fieldPath = checkerOptions.fieldPath;
        var fieldSchema = u.deepClone(checkerOptions.fieldSchema);
        fieldSchema = parseFieldSchema.call(this, fieldSchema);
        for (var i = 0; i < fieldCheckers.length; i++) {
            var checker = fieldCheckers[i];
            var result = checker.check(value, fieldSchema);
            if (!result) {
                var messageTemplate = checker.errorMessage;
                if (typeof messageTemplate === 'object') {
                    messageTemplate = messageTemplate[fieldSchema[0]];
                }
                if (!u.isString(messageTemplate)) {
                    throw new Error('\u672A\u627E\u5230\u5BF9\u5E94\u9519\u8BEF\u4FE1\u606F\u6A21\u677F');
                }
                var errorMessage = getErrorMessage(messageTemplate, fieldSchema);
                var error = {
                    field: fieldPath,
                    message: errorMessage
                };
                return error;
            }
        }
        return null;
    };
    function getErrorMessage(template, fieldSchema) {
        var data = {};
        var regex = /\$\{(.+?)\}/g;
        var match = regex.exec(template);
        var typeOption = fieldSchema[2] || {};
        while (match) {
            var key = match[1];
            data[key] = typeOption[key];
            if (!data[key]) {
                data[key] = fieldSchema[1];
            }
            match = regex.exec(template);
        }
        return u.template(template, data, { interpolate: regex });
    }
    function parseFieldSchema(fieldSchema) {
        var typeOption = fieldSchema[2];
        if (!typeOption) {
            return fieldSchema;
        }
        var ruleName = [
            'maxLength',
            'minLength',
            'min',
            'max',
            'pattern'
        ];
        var keys = u.keys(typeOption);
        var ruleNeedParsed = u.intersection(ruleName, keys);
        for (var i = 0; i < ruleNeedParsed.length; i++) {
            var key = ruleNeedParsed[i];
            var value = typeOption[key];
            if (!u.isString(value)) {
                continue;
            }
            var path = value.split('.');
            path = path.slice(1);
            var actualValue = this.rule[path[0]];
            actualValue = path.length > 1 ? getProperty(actualValue, path.slice(1)) : actualValue;
            typeOption[key] = actualValue;
        }
        return fieldSchema;
    }
    function getProperty(target, path) {
        var value = target;
        for (var i = 0; i < path.length; i++) {
            value = value[path[i]];
        }
        return value;
    }
    exports.getFieldCheckers = function (fieldSchema) {
        var checkerNames = getFieldCheckerNames(fieldSchema);
        var checkers = this.getCheckers();
        var fieldCheckers = [];
        for (var i = 0; i < checkerNames.length; i++) {
            if (checkers[checkerNames[i]]) {
                fieldCheckers.push(checkers[checkerNames[i]]);
            }
        }
        fieldCheckers.sort(function (x, y) {
            return x.priority - y.priority;
        });
        return fieldCheckers;
    };
    function getFieldCheckerNames(fieldSchema) {
        var keys = [
            'content',
            'item',
            'datasource'
        ];
        var checkerNames = [];
        var fieldType = fieldSchema[0];
        var typeOption = fieldSchema[2] || {};
        typeOption = u.omit(typeOption, keys);
        if (typeOption.required === false) {
            delete typeOption.required;
        }
        [].push.apply(checkerNames, u.keys(typeOption));
        if (fieldType !== 'reference' && fieldType !== 'reference-set') {
            checkerNames.push('type');
        }
        checkerNames = addRangeChecker(checkerNames, 'rangeLength', 'minLength', 'maxLength');
        checkerNames = addRangeChecker(checkerNames, 'range', 'min', 'max');
        return checkerNames;
    }
    function addRangeChecker(list, range, min, max) {
        if (u.indexOf(list, min) >= 0 && u.indexOf(list, max) >= 0) {
            list = u.without(list, min, max);
            list.push(range);
        }
        return list;
    }
    var EntityValidator = require('eoo').create(exports);
    return EntityValidator;
});

define('ub-ria-ui/DrawerActionPanel', [
    'require',
    'esui/lib',
    'ef/ActionPanel',
    'eoo',
    'esui'
], function (require) {
    var lib = require('esui/lib');
    var ActionPanel = require('ef/ActionPanel');
    function close(e) {
        if (this.helper.isPart(e.target, 'close-btn')) {
            this.hide();
            this.fire('close');
        }
    }
    var exports = {};
    exports.type = 'DrawerActionPanel';
    exports.initStructure = function () {
        this.$super(arguments);
        createCloseBtn.call(this);
        document.body.appendChild(this.main);
        this.addState('hidden');
    };
    exports.initEvents = function () {
        this.$super(arguments);
        this.helper.addDOMEvent(this.main, 'click', close);
        this.on('actionloaded', createCloseBtn);
    };
    exports.enterAction = function () {
        this.action.context.args.isInDrawerPanel = true;
        this.$super(arguments);
    };
    exports.show = function () {
        getMask(this).style.display = 'block';
        document.body.style.overflowY = 'hidden';
        this.$super(arguments);
        this.fire('panelShow');
    };
    exports.hide = function () {
        getMask(this).style.display = 'none';
        document.body.style.overflowY = '';
        this.$super(arguments);
        this.fire('panelHide');
    };
    exports.dispose = function () {
        this.hide();
        lib.removeNode(this.helper.getId('mask'));
        lib.removeNode(this.main.id);
        this.$super(arguments);
    };
    function getMask(panel) {
        return panel.helper.getPart('mask') || document.body.appendChild(panel.helper.createPart('mask'));
    }
    function createCloseBtn() {
        if (!this.helper.getPart('close-btn')) {
            var el = this.main.appendChild(this.helper.createPart('close-btn'), 'span');
            el.title = '\u5173\u95ED';
        }
    }
    var DrawerActionPanel = require('eoo').create(ActionPanel, exports);
    require('esui').register(DrawerActionPanel);
    return DrawerActionPanel;
});

define('ub-ria/mvc/DetailView', [
    'require',
    'ub-ria-ui/DrawerActionPanel',
    'mini-event',
    './BaseView',
    'eoo'
], function (require) {
    require('ub-ria-ui/DrawerActionPanel');
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        var uiEvents = {
            'create:click': popDrawerActionPanel,
            'modify:click': popDrawerActionPanel
        };
        this.addUIEvents(uiEvents);
    };
    function popDrawerActionPanel(e) {
        e.preventDefault();
        var url = e.target.get('href') + '';
        if (url.charAt(0) === '#') {
            url = url.slice(1);
        }
        this.popDrawerAction({ url: url }).show();
    }
    exports.popDrawerAction = function (options) {
        var drawerActionPanel = this.$super(arguments);
        drawerActionPanel.on('action@submitcancel', cancel);
        drawerActionPanel.on('action@back', back);
        return drawerActionPanel;
    };
    function cancel(e) {
        e.preventDefault();
        this.dispose();
    }
    function back(e) {
        e.stopPropagation();
        e.preventDefault();
        this.hide();
    }
    exports.bindEvents = function () {
        var delegate = require('mini-event').delegate;
        var listActionPanel = this.getSafely('detail-list');
        delegate(listActionPanel, 'action@search', this, 'listrefresh', {
            preserveData: true,
            syncState: true
        });
        delegate(listActionPanel, 'action@pagechange', this, 'pagechange', {
            preserveData: true,
            syncState: true
        });
        delegate(listActionPanel, 'action@statusupdate', this, 'listrefresh', {
            preserveData: true,
            syncState: true
        });
        delegate(listActionPanel, 'action@pagesizechange', this, 'listrefresh', {
            preserveData: true,
            syncState: true
        });
        delegate(listActionPanel, 'action@tablesort', this, 'listrefresh', {
            preserveData: true,
            syncState: true
        });
        this.$super(arguments);
    };
    exports.getListQuery = function () {
        var listAction = this.getSafely('detail-list').get('action');
        if (listAction) {
            return listAction.getSearchQuery();
        }
        return {};
    };
    var BaseView = require('./BaseView');
    var DetailView = require('eoo').create(BaseView, exports);
    return DetailView;
});

define('ub-ria/mvc/SingleEntityModel', [
    'require',
    './BaseModel',
    'eoo'
], function (require) {
    function fillEntityToModel(entity) {
        this.fill(entity);
        return entity;
    }
    var ENTITY_DATASOURCE = {
        entity: function (model) {
            var id = model.get('id');
            if (id) {
                var entity = model.get('entity');
                if (entity) {
                    return fillEntityToModel.call(model, entity);
                }
                return model.findById(id).thenBind(fillEntityToModel, model);
            }
            return {};
        }
    };
    var exports = {};
    exports.constructor = function () {
        this.$super(arguments);
        this.putDatasource(ENTITY_DATASOURCE);
    };
    exports.findById = function (id) {
        var data = this.data();
        if (!data) {
            throw new Error('No default data object attached to this Model');
        }
        if (typeof data.findById !== 'function') {
            throw new Error('No findById method implemented on default data object');
        }
        return data.findById(id);
    };
    var BaseModel = require('./BaseModel');
    var SingleEntityModel = require('eoo').create(BaseModel, exports);
    return SingleEntityModel;
});

define('ub-ria/mvc/DetailModel', [
    'require',
    '../util',
    'er/URL',
    './SingleEntityModel',
    'eoo'
], function (require) {
    var u = require('../util');
    var exports = {};
    exports.setGlobalData = function (data) {
        this.addData('global', data);
    };
    exports.getListActionURL = function () {
        var query = this.get('url').getQuery();
        var args = {};
        u.each(query, function (value, key) {
            if (key.indexOf('list.') === 0) {
                args[key.substring(5)] = value;
            }
        });
        if (query.id) {
            args[this.entityName + 'Id'] = query.id;
        }
        u.extend(args, this.getListExtraArgs());
        var actionURL = require('er/URL').withQuery('/' + this.getListActionName() + '/list', args);
        return actionURL + '';
    };
    exports.getListActionName = function () {
        return this.entityName;
    };
    exports.getListExtraArgs = function () {
        return {};
    };
    exports.getTreeNodeEntityName = function () {
        return this.entityName;
    };
    function setListActionURL() {
        var url = this.getListActionURL();
        this.set('listActionURL', url);
    }
    exports.load = function () {
        var loading = this.$super(arguments);
        return loading.thenBind(setListActionURL, this);
    };
    var SingleEntityModel = require('./SingleEntityModel');
    var DetailModel = require('eoo').create(SingleEntityModel, exports);
    return DetailModel;
});

define('ub-ria/mvc/DetailAction', [
    'require',
    '../util',
    'er/URL',
    './BaseAction',
    'eoo'
], function (require) {
    var u = require('../util');
    var exports = {};
    exports.category = 'detail';
    function getURLForQuery(args) {
        var url = this.context.url;
        var path = url.getPath();
        args = u.purify(args);
        return require('er/URL').withQuery(path, args).toString();
    }
    exports.reloadWithQueryUpdate = function (args) {
        var url = getURLForQuery.call(this, args);
        this.redirect(url, { force: true });
    };
    function refreshList(e, withPage) {
        e.preventDefault();
        var args = { id: this.model.get('id') };
        var query = this.view.getListQuery();
        if (!withPage) {
            query.page = 1;
        }
        u.each(query, function (value, key) {
            args['list.' + key] = value;
        });
        this.reloadWithQueryUpdate(args);
    }
    function changePage(e) {
        refreshList.call(this, e, true);
    }
    exports.initBehavior = function () {
        this.$super(arguments);
        this.view.on('listrefresh', refreshList, this);
        this.view.on('pagechange', changePage, this);
    };
    var BaseAction = require('./BaseAction');
    var DetailAction = require('eoo').create(BaseAction, exports);
    return DetailAction;
});

define('ub-ria/mvc/BaseView', [
    'require',
    '../util',
    'promise',
    'eoo',
    'ef/UIView'
], function (require) {
    var u = require('../util');
    var Promise = require('promise');
    var exports = {};
    exports.addUIEvents = function (uiEvents) {
        var extendedUIEvents = [uiEvents];
        u.each(uiEvents, function (events, key) {
            if (u.isArray(events)) {
                while (events.length > 1) {
                    var newUIEvents = {};
                    newUIEvents[key] = events.splice(-1)[0];
                    extendedUIEvents.push(newUIEvents);
                }
                if (events.length) {
                    uiEvents[key] = events.splice(-1)[0];
                }
            }
        });
        var thisEvents = this.uiEvents;
        this.uiEvents = thisEvents && [].concat(thisEvents) || [];
        this.uiEvents = this.uiEvents.concat(extendedUIEvents);
    };
    exports.getUIEventsCollection = function () {
        var events = this.uiEvents;
        return events && [].concat(events) || [];
    };
    exports.bindEvents = function () {
        u.each(this.getUIEventsCollection(), function (events) {
            u.each(events, function (handler, key) {
                this.bindUIEvent(key, handler);
            }, this);
        }, this);
    };
    exports.addUIProperties = function (newUIProperties) {
        this.uiProperties = this.uiProperties || {};
        var uiProperties = this.uiProperties;
        u.each(newUIProperties, function (properties, controlId) {
            if (uiProperties.hasOwnProperty(controlId)) {
                u.extend(uiProperties[controlId], properties);
            } else {
                uiProperties[controlId] = properties;
            }
        });
    };
    exports.getUIProperties = function () {
        return this.uiProperties || {};
    };
    exports.getTemplateName = function () {
        var templateName = this.$super(arguments);
        if (this.model && this.model.get('isChildAction') && !this.model.get('isInDrawerPanel')) {
            templateName += 'Main';
        }
        return templateName;
    };
    exports.waitDecision = function () {
        var dialog = this.confirm.apply(this, arguments);
        var executor = function (resolve, reject) {
            dialog.on('ok', u.partial(resolve, 'ok'));
            dialog.on('cancel', u.partial(resolve, 'cancel'));
        };
        return new Promise(executor);
    };
    exports.waitConfirm = function () {
        var waiting = this.waitDecision.apply(this, arguments);
        var executor = function (resolve) {
            var receiveOK = function (result) {
                if (result === 'ok') {
                    resolve();
                }
            };
            waiting.then(receiveOK);
        };
        return new Promise(executor);
    };
    exports.waitActionDialog = function () {
        var dialog = this.popActionDialog.apply(this, arguments);
        var executor = function (resolve, reject) {
            dialog.on('actionloaded', resolve);
            dialog.on('actionloadfail', reject);
            dialog.on('actionloadabort', reject);
        };
        return new Promise(executor);
    };
    exports.getRuleValue = function (path) {
        path = path.split('.');
        var value = this.model.get('rule') || this.getRule();
        for (var i = 0; i < path.length; i++) {
            value = value[path[i]];
        }
        return value;
    };
    exports.replaceValue = function (value) {
        if (typeof value !== 'string') {
            return value;
        }
        if (value.indexOf('@rule.') === 0) {
            return this.getRuleValue(value.substring(6));
        }
        return this.$super(arguments);
    };
    exports.getTemplateData = function () {
        var templateData = this.$super(arguments);
        var getProperty = templateData.get;
        var model = this.model;
        var view = this;
        templateData.get = function (path) {
            if (path.indexOf('rule.') === 0) {
                return view.getRuleValue(path.substring(5));
            }
            if (path.charAt(path.length - 1) === '?') {
                var permissionName = path.slice(0, -1);
                return model.checkPermission(permissionName);
            }
            return getProperty(path);
        };
        return templateData;
    };
    exports.popDrawerAction = function (options) {
        options.id = options.id || 'drawer-action';
        var drawerActionPanel = this.get(options.id);
        if (!drawerActionPanel) {
            drawerActionPanel = this.create('DrawerActionPanel', options);
            drawerActionPanel.render();
        } else {
            drawerActionPanel.setProperties(options);
        }
        return drawerActionPanel;
    };
    var oo = require('eoo');
    oo.defineAccessor(exports, 'rule');
    var UIView = require('ef/UIView');
    var BaseView = oo.create(UIView, exports);
    return BaseView;
});

define('ub-ria/mvc/BaseChildView', [
    'require',
    '../util',
    'esui/validator/Validity',
    'esui/validator/ValidityState',
    './BaseView',
    'eoo'
], function (require) {
    var u = require('../util');
    var exports = {};
    exports.getViewData = function () {
        var store = {};
        var inputs = this.getAllInputControls();
        for (var i = 0, length = inputs.length; i < length; i++) {
            var control = inputs[i];
            if (control.getCategory() === 'check' && !control.isChecked()) {
                continue;
            }
            if (control.isDisabled()) {
                continue;
            }
            var name = control.get('name');
            var value = control.getRawValue();
            if (store.hasOwnProperty(name)) {
                store[name] = [].concat(store[name], value);
            } else {
                store[name] = value;
            }
        }
        return store;
    };
    exports.setViewData = function (values) {
        u.each(values, function (value, key) {
            key = u.dasherize(key);
            this.get(key).set('rawValue', value);
        }, this);
    };
    exports.disableInputControls = function () {
        var inputs = this.getAllInputControls();
        u.each(inputs, function (control) {
            if (u.isFunction(control.disable)) {
                control.disable();
            }
        });
    };
    exports.enableInputControls = function () {
        var inputs = this.getAllInputControls();
        u.each(inputs, function (control) {
            if (u.isFunction(control.enable)) {
                control.enable();
            }
        });
    };
    exports.setReadOnly = function (status) {
        var inputs = this.getAllInputControls();
        u.each(inputs, function (control) {
            if (u.isFunction(control.setReadOnly)) {
                control.setReadOnly(status);
            }
        });
    };
    exports.notifyErrors = function (errors) {
        var Validity = require('esui/validator/Validity');
        var ValidityState = require('esui/validator/ValidityState');
        for (var i = 0; i < errors.length; i++) {
            var fail = errors[i];
            var state = new ValidityState(false, fail.message);
            var validity = new Validity();
            validity.addState('server', state);
            var inputId = u.dasherize(fail.field);
            var input = this.get(inputId);
            if (input) {
                input.showValidity(validity);
            }
        }
    };
    exports.validate = function () {
        var inputs = this.getAllInputControls();
        var result = true;
        for (var i = 0; i < inputs.length; i++) {
            var control = inputs[i];
            if (control.isDisabled()) {
                continue;
            }
            result &= control.validate();
        }
        return !!result;
    };
    exports.getAllInputControls = function () {
        var controls = this.viewContext.getControls();
        var inputs = [];
        u.each(controls, function (control) {
            if (isInputControl(control)) {
                inputs.push(control);
            }
        });
        return inputs;
    };
    function isInputControl(control) {
        var category = control.getCategory();
        return category === 'input' || category === 'check';
    }
    var BaseView = require('./BaseView');
    var BaseChildView = require('eoo').create(BaseView, exports);
    return BaseChildView;
});

define('ub-ria/mvc/BaseModel', [
    'require',
    '../util',
    'eoo',
    'ef/UIModel'
], function (require) {
    var u = require('../util');
    var eoo = require('eoo');
    var exports = {};
    exports.addData = function (name, instance) {
        if (!this.dataPool) {
            this.dataPool = {};
        }
        if (arguments.length < 2) {
            instance = name;
            name = 'default';
        }
        if (!name) {
            name = 'default';
        }
        if (!this.dataPool[name]) {
            this.dataPool[name] = instance;
        }
    };
    exports.setData = function (instance) {
        this.addData(instance);
    };
    exports.data = function (name) {
        if (!name) {
            name = 'default';
        }
        return this.dataPool[name] || null;
    };
    exports.putDatasource = function (item, index) {
        item = u.clone(item);
        if (!this.datasource) {
            this.datasource = [];
        } else if (!u.isArray(this.datasource)) {
            this.datasource = [this.datasource];
        }
        if (index === undefined) {
            this.datasource.push(item);
        } else {
            var originalItem = this.datasource[index] || {};
            if (u.isArray(originalItem)) {
                originalItem.push(item);
            } else {
                u.extend(originalItem, item);
            }
            this.datasource[index] = originalItem;
        }
    };
    exports.checkPermission = function (permissionName) {
        var permission = this.getPermission();
        if (!permission) {
            throw new Error('No attached permission object');
        }
        var method = permission[permissionName];
        if (!method) {
            throw new Error('No "' + method + '" method on permission object');
        }
        return method.call(permission);
    };
    exports.dispose = function () {
        this.$super(arguments);
        u.each(this.dataPool, function (data) {
            data.dispose();
        });
        this.dataPool = null;
    };
    eoo.defineAccessor(exports, 'permission');
    var UIModel = require('ef/UIModel');
    var BaseModel = eoo.create(UIModel, exports);
    return BaseModel;
});

define('ub-ria/mvc/BaseAction', [
    'require',
    '../util',
    'er/Model',
    './BaseModel',
    'eoo',
    'er/Action'
], function (require) {
    var u = require('../util');
    var exports = {};
    exports.constructor = function (entityName) {
        this.$super(arguments);
        this.entityName = entityName;
    };
    exports.getEntityName = function () {
        if (!this.entityName) {
            if (this.context) {
                var path = this.context.url.getPath();
                this.entityName = path.split('/')[1];
            }
            return '';
        }
        return this.entityName;
    };
    exports.entityDescription = '';
    exports.getEntityDescription = function () {
        return this.entityDescription || '';
    };
    exports.group = '';
    exports.getGroup = function () {
        return this.group;
    };
    exports.category = '';
    exports.getCategory = function () {
        return this.category || '';
    };
    exports.getPageCategories = function () {
        var categories = [];
        var category = u.dasherize(this.getCategory());
        var entityName = u.dasherize(this.getEntityName());
        var packageName = u.dasherize(this.getPackageName());
        if (category) {
            categories.push(category + '-page');
        }
        if (entityName) {
            categories.push(entityName + '-page');
        }
        if (category && entityName) {
            categories.push(entityName + '-' + this.category + '-page');
        }
        if (packageName) {
            categories.push(packageName + '-package');
        }
        if (packageName && category) {
            categories.push(packageName + '-package-' + category);
        }
        return categories;
    };
    exports.createModel = function (args) {
        args.entityDescription = this.getEntityDescription();
        var model = this.$super(arguments);
        var Model = require('er/Model');
        if (!(model instanceof Model) && u.isEmpty(model)) {
            var BaseModel = require('./BaseModel');
            var entityName = this.getEntityName();
            model = new BaseModel(entityName, args);
        }
        return model;
    };
    exports.setModel = function (model) {
        model.set('entityName', this.getEntityName());
        model.set('entityDescription', this.getEntityDescription());
        this.model = model;
    };
    var oo = require('eoo');
    oo.defineAccessor(exports, 'packageName');
    var Action = require('er/Action');
    var BaseAction = oo.create(Action, exports);
    return BaseAction;
});

define('ub-ria/main', [
    'require',
    './extension/mvc',
    './extension/ui',
    'er'
], function (require) {
    var main = {
        version: '2.0.0-beta.5',
        enableExtensions: function () {
            require('./extension/mvc').enable();
            require('./extension/ui').enable();
        },
        start: function () {
            main.enableExtensions();
            require('er').start();
        }
    };
    return main;
});

define('ub-ria', ['ub-ria/main'], function (main) { return main; });

define('ub-ria/extension/ui', [
    'require',
    '../util',
    'esui/lib',
    'esui/validator/MaxLengthRule',
    'esui/validator/MinLengthRule',
    'esui/validator/RequiredRule',
    'esui/validator/PatternRule',
    'esui/validator/MaxRule',
    'esui/validator/MinRule',
    'esui/validator/Rule',
    'esui/Table',
    'esui/CommandMenu',
    'esui/Tab'
], function (require) {
    var u = require('../util');
    var lib = require('esui/lib');
    function initializeValidationRules() {
        require('esui/validator/MaxLengthRule');
        require('esui/validator/MinLengthRule');
        var RequiredRule = require('esui/validator/RequiredRule');
        var PatternRule = require('esui/validator/PatternRule');
        var MaxRule = require('esui/validator/MaxRule');
        var MinRule = require('esui/validator/MinRule');
        RequiredRule.prototype.errorMessage = '\u8BF7\u586B\u5199${title}';
        var INTEGER_REGEX = {
            '^\\d+$': true,
            '/^\\d+$/': true
        };
        var FLOAT_REGEX = {
            '^\\d+(\\.\\d{1,2})?$': true,
            '/^\\d+(\\.\\d{1,2})?$/': true
        };
        var NUMBER_REGEX = u.extend({}, INTEGER_REGEX, FLOAT_REGEX);
        function getRangeErrorMessage(control) {
            var min = control.get('min');
            var max = control.get('max');
            var pattern = control.get('pattern') + '';
            if (min != null && max != null && NUMBER_REGEX.hasOwnProperty(pattern)) {
                var regex = /\B(?=(\d{3})+(?!\d))/g;
                var start = (min + '').replace(regex, ',');
                var end = (max + '').replace(regex, ',');
                if (INTEGER_REGEX.hasOwnProperty(pattern)) {
                    return u.escape(control.get('title')) + '\u8BF7\u586B\u5199' + '\u2265' + start + '\u4E14\u2264' + end + '\u7684\u6574\u6570';
                }
                return u.escape(control.get('title')) + '\u8BF7\u586B\u5199' + '\u2265' + start + '\u4E14\u2264' + end + '\u7684\u6570\u5B57\uFF0C' + '\u6700\u591A\u53EF\u4FDD\u5B58\u81F3\u5C0F\u6570\u70B9\u540E\u4E24\u4F4D';
            }
            return null;
        }
        var Rule = require('esui/validator/Rule');
        MaxRule.prototype.getErrorMessage = function (control) {
            if (control.get('maxErrorMessage')) {
                var getErrorMessage = Rule.prototype.getErrorMessage;
                return getErrorMessage.apply(this, arguments);
            }
            var rangeErrorMessage = getRangeErrorMessage(control);
            if (rangeErrorMessage) {
                return rangeErrorMessage;
            }
            return Rule.prototype.getErrorMessage.apply(this, arguments);
        };
        MinRule.prototype.getErrorMessage = function (control) {
            if (control.get('minErrorMessage')) {
                var getErrorMessage = Rule.prototype.getErrorMessage;
                return getErrorMessage.apply(this, arguments);
            }
            var rangeErrorMessage = getRangeErrorMessage(control);
            if (rangeErrorMessage) {
                return rangeErrorMessage;
            }
            return Rule.prototype.getErrorMessage.apply(this, arguments);
        };
        PatternRule.prototype.getErrorMessage = function (control) {
            var pattern = control.get('pattern') + '';
            if (control.get('patternErrorMessage') || !NUMBER_REGEX.hasOwnProperty(pattern)) {
                var getErrorMessage = Rule.prototype.getErrorMessage;
                return getErrorMessage.apply(this, arguments);
            }
            var rangeErrorMessage = getRangeErrorMessage(control);
            if (rangeErrorMessage) {
                return rangeErrorMessage;
            }
            return Rule.prototype.getErrorMessage.apply(this, arguments);
        };
    }
    function addTableCellRenderers() {
        var Table = require('esui/Table');
        Table.command = function (config) {
            var data = {
                tagName: 'span',
                text: ''
            };
            u.extend(data, config);
            var tagName = u.escape(data.tagName);
            var html = '<' + tagName;
            if (data.className) {
                html += ' class="' + u.escape(data.className) + '"';
            }
            html += ' data-command="' + u.escape(data.command) + '"';
            if (data.args) {
                html += ' data-command-args="' + u.escape(data.args) + '"';
            }
            html += '>' + u.escape(data.text) + '</' + tagName + '>';
            return html;
        };
        Table.operations = function (config) {
            var separator = '';
            var html = u.map(config, function (item) {
                if (u.isString(item)) {
                    separator = '<span class="table-operation-separator">' + u.escape(item) + '</span>';
                    return separator;
                }
                if (item.auth === false) {
                    return '';
                }
                if (item.url) {
                    var link = [];
                    link.push('<a href="' + u.escape(item.url) + '"');
                    link.push(' class="table-operation table-operation-');
                    link.push(u.escape(item.type) + '"');
                    if (item.target === '_blank') {
                        link.push(' target="_blank"');
                    }
                    if (!item.redirectOptions) {
                        link.push(' data-redirect="global">');
                    } else if (item.redirectOptions.length === 0) {
                        link.push('>');
                    } else if (u.isArray(item.redirectOptions)) {
                        link.push(' data-redirect="' + item.redirectOptions.join(' ') + '">');
                    }
                    link.push(u.escape(item.text));
                    link.push('</a>');
                    return link.join('');
                }
                var className = 'table-operation table-operation-' + u.escape(item.type);
                var options = {
                    className: className,
                    text: item.text,
                    command: item.command,
                    args: item.args
                };
                if (item.tagName) {
                    options.tagName = item.tagName;
                }
                return Table.command(options);
            });
            html = u.without(html, '');
            var i = 0;
            while (i < html.length - 1) {
                if (html[i] === separator && html[i + 1] === separator) {
                    html.splice(i, 1);
                } else {
                    i++;
                }
            }
            if (html[0] === separator) {
                html.shift();
            }
            if (html[html.length - 1] === separator) {
                html.pop();
            }
            return html.join('');
        };
        Table.slideOperations = function (config) {
            var html = Table.operations(config);
            var operationHTML = '' + '<span class="table-operation-trigger">\u64CD\u4F5C</span>' + '    <div class="table-operation-layer">' + html + '    </div>';
            return operationHTML;
        };
        Table.status = function (status) {
            return '<span class="table-status-' + u.escape(status.type) + '">' + status.text + '</span>';
        };
    }
    function addControlLinkMode() {
        var CommandMenu = require('esui/CommandMenu');
        CommandMenu.prototype.linkTemplate = '<a target="${target}" href="${href}">${text}</a>';
        CommandMenu.prototype.getItemHTML = function (item) {
            var data = {
                text: lib.encodeHTML(item.text),
                href: item.href && lib.encodeHTML(item.href),
                target: item.target || '_self'
            };
            var template = item.href ? this.linkTemplate : this.itemTemplate;
            return lib.format(template, data);
        };
        var Tab = require('esui/Tab');
        Tab.prototype.linkTemplate = '<a href="${href}">${title}</a>';
        Tab.prototype.getContentHTML = function (item) {
            var data = {
                title: lib.encodeHTML(item.title),
                href: item.href && lib.encodeHTML(item.href)
            };
            var template = item.href ? this.linkTemplate : this.contentTemplate;
            return lib.format(template, data);
        };
    }
    function enable() {
        initializeValidationRules();
        addTableCellRenderers();
        addControlLinkMode();
    }
    return { enable: u.once(enable) };
});

define('ub-ria/util', [
    'require',
    'underscore',
    'eoo'
], function (require) {
    var EMPTY_OBJECT = {};
    var underscore = require('underscore');
    var util = require('eoo').static(underscore);
    var TEMPLATE_SETTINGS = {
        interpolate: /\$\{(.+?)\}/g,
        escape: /\$\{\:(.+?)\}/g
    };
    util.template = function (template, data) {
        return underscore.template(template, data, TEMPLATE_SETTINGS);
    };
    util.purify = function purify(object, defaults, deep) {
        defaults = defaults || EMPTY_OBJECT;
        var purifiedObject = {};
        util.each(object, function (value, key) {
            var isDefaultNull = value == null || value === '';
            var isInDefaults = defaults.hasOwnProperty(key) && defaults[key] === value;
            if (!isDefaultNull && !isInDefaults) {
                if (deep && typeof value === 'object') {
                    purifiedObject[key] = purify(value, defaults[key], deep);
                } else {
                    purifiedObject[key] = value;
                }
            }
        });
        return purifiedObject;
    };
    util.trim = function (s) {
        return s.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    };
    util.pascalize = function (s) {
        if (s == null) {
            return '';
        }
        s = s + '';
        if (/^[A-Z\s-\/_]+$/.test(s)) {
            s = s.toLowerCase();
        }
        s = s.replace(/[\s-\/_]+(.)/g, function (w, c) {
            return c.toUpperCase();
        });
        s = s.charAt(0).toUpperCase() + s.slice(1);
        return s;
    };
    util.pascalize = util.memoize(util.pascalize);
    util.camelize = function (s) {
        if (s == null) {
            return '';
        }
        s = util.pascalize(s);
        return s.charAt(0).toLowerCase() + s.slice(1);
    };
    util.camelize = util.memoize(util.camelize);
    util.dasherize = function (s) {
        if (s == null) {
            return '';
        }
        s = util.pascalize(s);
        s = s.replace(/[A-Z]{2,}$/g, function (match) {
            return match.charAt(0) + match.slice(1).toLowerCase();
        });
        s = s.replace(/[A-Z]{2,}/g, function (match) {
            return match.charAt(0) + match.slice(1, -1).toLowerCase() + match.charAt(match.length - 1);
        });
        s = s.replace(/[A-Z]/g, function (match) {
            return '-' + match.toLowerCase();
        });
        if (s.charAt(0) === '-') {
            s = s.substring(1);
        }
        return s;
    };
    util.dasherize = util.memoize(util.dasherize);
    util.constlize = function (s) {
        if (s == null) {
            return '';
        }
        s = util.dasherize(s).replace(/-/g, '_');
        return s.toUpperCase();
    };
    util.constlize = util.memoize(util.constlize);
    util.pluralize = function (s) {
        if (s == null) {
            return '';
        }
        return s.replace(/y$/, 'ie') + 's';
    };
    util.pluralize = util.memoize(util.pluralize);
    util.formatNumber = function (number, decimals, emptyValue, prefix) {
        if (typeof arguments[1] !== 'number') {
            prefix = arguments[2];
            emptyValue = arguments[1];
            decimals = 0;
        }
        prefix = prefix || '';
        emptyValue = emptyValue || '';
        if (number == null || isNaN(number)) {
            return prefix + emptyValue;
        }
        number = parseFloat(number).toFixed(decimals);
        var parts = number.split('.');
        var integer = parts[0];
        var decimal = parts[1];
        integer = integer.replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
        var result = prefix + integer;
        if (decimal) {
            result += '.' + decimal;
        }
        return result;
    };
    util.pad = function (s, padding, length) {
        s = (s == null ? '' : s) + '';
        var padLength = length - s.length;
        if (padLength > 0) {
            var left = new Array(padLength + 1).join(padding);
            return left + s;
        }
        return s;
    };
    util.padRight = function (s, padding, length) {
        s = (s == null ? '' : s) + '';
        var padLength = length - s.length;
        if (padLength > 0) {
            var right = new Array(padLength + 1).join(padding);
            return s + right;
        }
        return s;
    };
    util.deepClone = function (obj) {
        if (!util.isObject(obj) || util.isFunction(obj) || util.isRegExp(obj)) {
            return obj;
        }
        if (util.isArray(obj)) {
            return util.map(obj, util.deepClone);
        }
        var clone = {};
        util.each(obj, function (value, key) {
            clone[key] = util.deepClone(value);
        });
        return clone;
    };
    return util;
});

define('ub-ria/extension/mvc', [
    'require',
    '../util',
    'er/util',
    'er/events'
], function (require) {
    var u = require('../util');
    var util = require('er/util');
    var events = require('er/events');
    function addPageClassName() {
        var add = function (e) {
            if (!e.target.getPageCategories) {
                return;
            }
            var element = util.getElement(e.target.context.container);
            if (!element) {
                return;
            }
            var pageClasses = e.target.getPageCategories();
            if (element.classList) {
                u.each(pageClasses, function (className) {
                    element.classList.add(className);
                });
            } else {
                var classes = element.className ? element.className.split(/\s+/) : [];
                classes = u.union(classes, pageClasses);
                element.className = classes.join(' ');
            }
        };
        var remove = function (e) {
            if (!e.action || !e.action.getPageCategories) {
                return;
            }
            var container = e.actionContext ? e.container : e.action.context ? e.action.context.container : null;
            var element = util.getElement(container);
            if (!element) {
                return;
            }
            var pageClasses = e.action.getPageCategories();
            if (element.classList) {
                u.each(pageClasses, function (className) {
                    element.classList.remove(className);
                });
            } else {
                var classes = element.className ? element.className.split(/\s+/) : [];
                var newClasses = u.difference(classes, pageClasses);
                if (newClasses.length !== classes.length) {
                    element.className = newClasses.join(' ');
                }
            }
        };
        events.on('enteraction', function (e) {
            e.action.on('enter', add);
        });
        events.on('leaveaction', remove);
        events.on('enteractionfail', remove);
    }
    function enable() {
        addPageClassName();
    }
    return { enable: u.once(enable) };
});

void function (define, global) {
    define('promise/then', [
        'require',
        './util'
    ], function (require) {
        var u = require('./util');
        function getProperty(propertyName) {
            return function (result) {
                return result[propertyName];
            };
        }
        function returnValue(value) {
            return function () {
                return value;
            };
        }
        function noop() {
        }
        return function (Promise) {
            Promise.prototype.thenGetProperty = function (propertyName) {
                return this.then(getProperty(propertyName));
            };
            Promise.prototype.thenReturn = function (value) {
                return this.then(returnValue(value));
            };
            Promise.prototype.thenBind = function () {
                return this.then(u.bind.apply(u, arguments));
            };
            Promise.prototype.thenSwallowException = function () {
                return this['catch'](noop);
            };
            return Promise;
        };
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
}, this);

void function (define) {
    define('promise/main', [
        'require',
        './Promise',
        './enhance',
        './then',
        './hook'
    ], function (require) {
        var Promise = require('./Promise');
        var enhance = require('./enhance');
        var then = require('./then');
        var hook = require('./hook');
        return hook(then(enhance(Promise)));
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
}, this);

define('promise', ['promise/main'], function (main) { return main; });

void function (define) {
    define('promise/hook', [
        'require',
        './PromiseCapacity'
    ], function (require) {
        var PromiseCapacity = require('./PromiseCapacity');
        return function (Promise) {
            Promise.onReject = function (handler) {
                if (typeof handler === 'function') {
                    PromiseCapacity.onReject = handler;
                }
            };
            Promise.onResolve = function (handler) {
                if (typeof handler === 'function') {
                    PromiseCapacity.onResolve = handler;
                }
            };
            return Promise;
        };
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
}, this);

void function (define, global) {
    define('promise/enhance', [
        'require',
        './util'
    ], function (require) {
        var u = require('./util');
        function isPromise(obj) {
            return typeof u.getThen(obj) === 'function';
        }
        function promiseRequire(modules) {
            var isAborted = false;
            var promise = new this(function (resolve, reject) {
                global.require(modules, function () {
                    !isAborted && resolve([].slice.call(arguments));
                });
            });
            promise.abort = function () {
                isAborted = true;
            };
            return promise;
        }
        function ensure(callback) {
            var Promise = this.constructor;
            return this.then(function (value) {
                Promise.resolve(callback()).then(function () {
                    return value;
                });
            }, function (reason) {
                Promise.resolve(callback()).then(function () {
                    throw reason;
                });
            });
        }
        function invoke(fn, thisObj, args) {
            try {
                args = [].slice.call(arguments, 2);
                var value = fn.apply(thisObj, args);
                return isPromise(value) ? value : this.resolve(value);
            } catch (e) {
                return this.reject(e);
            }
        }
        function cast(value) {
            if (value && typeof value === 'object' && value.constructor === this) {
                return value;
            }
            return new this(function (resolve) {
                resolve(value);
            });
        }
        return function (Promise) {
            Promise.isPromise = isPromise;
            Promise.require = promiseRequire;
            Promise.invoke = invoke;
            Promise.cast = cast;
            Promise.prototype['finally'] = ensure;
            Promise.prototype.ensure = ensure;
            Promise.prototype.fail = Promise.prototype['catch'];
            return Promise;
        };
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
}, this);

void function (define) {
    define('promise/setImmediate', [
        'require',
        './util'
    ], function (require) {
        var global = function () {
            return this;
        }();
        var callbackPool = {};
        var cursor = 1;
        function registerCallback(callback) {
            callbackPool[cursor] = callback;
            return cursor++;
        }
        function runCallback(tick) {
            var callback = callbackPool[tick];
            if (callback) {
                delete callbackPool[tick];
                callback();
            }
        }
        if (typeof global.setImmediate === 'function') {
            return require('./util').bind(global.setImmediate, global);
        }
        if (typeof global.nextTick === 'function') {
            return global.nextTick;
        }
        if (global.MutationObserver || global.webKitMutationObserver) {
            var ATTRIBUTE_NAME = 'data-promise-tick';
            var MutationObserver = global.MutationObserver || global.webKitMutationObserver;
            var ensureElementMutation = function (mutations, observer) {
                var item = mutations[0];
                if (item.attributeName === ATTRIBUTE_NAME) {
                    var tick = item.target.getAttribute(ATTRIBUTE_NAME);
                    runCallback(tick);
                    observer.disconnect(item.target);
                }
            };
            return function (callback) {
                var element = document.createElement('div');
                var observer = new MutationObserver(ensureElementMutation);
                observer.observe(element, { attributes: true });
                var tick = registerCallback(callback);
                element.setAttribute(ATTRIBUTE_NAME, tick);
            };
        }
        if (typeof postMessage === 'function' && typeof global.importScript !== 'function') {
            var isPostMessageAsync = true;
            var oldListener = global.onmessage;
            global.onmessage = function () {
                isPostMessageAsync = false;
            };
            global.postMessage('', '*');
            global.onmessage = oldListener;
            if (isPostMessageAsync) {
                var MESSAGE_PREFIX = 'promise-tick-';
                var ensureMessage = function (e) {
                    if (e.source === global && typeof e.data === 'string' && e.data.indexOf(MESSAGE_PREFIX) === 0) {
                        var tick = e.data.substring(MESSAGE_PREFIX.length);
                        runCallback(tick);
                    }
                };
                if (global.addEventListener) {
                    global.addEventListener('message', ensureMessage, false);
                } else {
                    global.attachEvent('onmessage', ensureMessage);
                }
                return function (callback) {
                    var tick = registerCallback(callback);
                    global.postMessage(MESSAGE_PREFIX + tick, '*');
                };
            }
        }
        if (global.MessageChannel) {
            var channel = new MessageChannel();
            channel.port1.onmessage = function (e) {
                var tick = e.data;
                runCallback(tick);
            };
            return function (callback) {
                var tick = registerCallback(callback);
                channel.port2.postMessage(tick);
            };
        }
        if ('onreadystatechange' in document.createElement('script')) {
            var documentElement = document.documentElement;
            return function (callback) {
                var script = document.createElement('script');
                script.onreadystatechange = function () {
                    callback();
                    script.onreadystatechange = null;
                    documentElement.removeChild(script);
                    script = null;
                };
                documentElement.appendChild(script);
            };
        }
        return function (callback) {
            setTimeout(callback, 0);
        };
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
}, this);

void function (define) {
    define('promise/PromiseCapacity', [
        'require',
        './util',
        './setImmediate'
    ], function (require) {
        var u = require('./util');
        var PENDING = 'pending';
        var FULFILLED = 'fulfilled';
        var REJECTED = 'rejected';
        var setImmediate = require('./setImmediate');
        var syncInvoke = function (fn) {
            fn();
        };
        function PromiseCapacity(promise) {
            this.promise = promise;
            this.status = PENDING;
            this.isResolved = false;
            this.result = undefined;
            this.fulfilledCallbacks = [];
            this.rejectedCallbacks = [];
            this.syncModeEnabled = false;
            this.invoke = setImmediate;
        }
        PromiseCapacity.onResolve = function (value) {
        };
        PromiseCapacity.onReject = function (reason) {
            typeof console !== 'undefined' && console.error(reason);
        };
        PromiseCapacity.prototype = {
            constructor: PromiseCapacity,
            resolve: function (value) {
                if (this.status !== PENDING || this.isResolved) {
                    return;
                }
                if (value === this.promise) {
                    this.reject(new TypeError('Chaining cycle detected for promise #<Promise>'));
                    return;
                }
                try {
                    var then = u.getThen(value);
                    if (typeof then === 'function') {
                        chain(u.bind(then, value), this);
                        return;
                    }
                } catch (e) {
                    this.status === PENDING && this.reject(e);
                    return;
                }
                this.result = value;
                this.status = FULFILLED;
                this.constructor.onResolve.call(this.promise, value);
                exec(this);
            },
            reject: function (obj) {
                if (this.status !== PENDING || this.isResolved) {
                    return;
                }
                this.result = obj;
                this.status = REJECTED;
                this.constructor.onReject.call(this.promise, obj);
                exec(this);
            },
            then: function (onFulfilled, onRejected) {
                var capacity = this;
                this.syncModeEnabled = this.promise.syncModeEnabled;
                this.invoke = this.syncModeEnabled ? syncInvoke : setImmediate;
                var promise = new this.promise.constructor(function (resolve, reject) {
                    capacity.fulfilledCallbacks.push(createCallback(resolve, onFulfilled, resolve, reject));
                    capacity.rejectedCallbacks.push(createCallback(reject, onRejected, resolve, reject));
                });
                promise.syncModeEnabled = this.syncModeEnabled;
                exec(this);
                return promise;
            }
        };
        function createCallback(method, callback, resolve, reject) {
            return function (value) {
                try {
                    if (typeof callback === 'function') {
                        value = callback(value);
                        method = resolve;
                    }
                    method(value);
                } catch (e) {
                    reject(e);
                }
            };
        }
        function chain(then, capacity) {
            capacity.isResolved = true;
            var chainedPromise = new capacity.promise.constructor(function (resolve, reject) {
                var called = false;
                try {
                    then(function (v) {
                        resolve(v);
                        called = true;
                    }, function (v) {
                        reject(v);
                        called = true;
                    });
                } catch (e) {
                    !called && reject(e);
                }
            });
            chainedPromise.then(function (v) {
                capacity.isResolved = false;
                capacity.resolve(v);
            }, function (v) {
                capacity.isResolved = false;
                capacity.reject(v);
            });
        }
        function exec(capacity) {
            if (capacity.status === PENDING) {
                return;
            }
            var callbacks = null;
            if (capacity.status === FULFILLED) {
                capacity.rejectedCallbacks = [];
                callbacks = capacity.fulfilledCallbacks;
            } else {
                capacity.fulfilledCallbacks = [];
                callbacks = capacity.rejectedCallbacks;
            }
            capacity.invoke(function () {
                var callback;
                var val = capacity.result;
                while (callback = callbacks.shift()) {
                    callback(val);
                }
            });
        }
        return PromiseCapacity;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
}, this);

void function (define) {
    define('promise/util', ['require'], function (require) {
        var util = {};
        var nativeBind = Function.prototype.bind;
        if (typeof nativeBind === 'function') {
            util.bind = function (fn) {
                return nativeBind.apply(fn, [].slice.call(arguments, 1));
            };
        } else {
            util.bind = function (fn, thisObject) {
                var extraArgs = [].slice.call(arguments, 2);
                return function () {
                    var args = extraArgs.concat([].slice.call(arguments));
                    return fn.apply(thisObject, args);
                };
            };
        }
        util.isArray = function (obj) {
            return Object.prototype.toString.call(obj) === '[object Array]';
        };
        util.getThen = function (promise) {
            return promise && (typeof promise === 'object' || typeof promise === 'function') && promise.then;
        };
        return util;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
}, this);

void function (define, global, undefined) {
    define('promise/Promise', [
        'require',
        './util',
        './PromiseCapacity'
    ], function (require) {
        var u = require('./util');
        var PromiseCapacity = require('./PromiseCapacity');
        function Promise(executor) {
            if (typeof executor !== 'function') {
                throw new TypeError('Promise resolver undefined is not a function');
            }
            if (!(this instanceof Promise)) {
                throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, ' + 'this object constructor cannot be called as a function.');
            }
            var capacity = new PromiseCapacity(this);
            this.then = u.bind(capacity.then, capacity);
            executor(u.bind(capacity.resolve, capacity), u.bind(capacity.reject, capacity));
        }
        Promise.prototype.then = function (onFulfilled, onReject) {
        };
        Promise.prototype['catch'] = function (onRejected) {
            return this.then(null, onRejected);
        };
        Promise.resolve = function (value) {
            return new Promise(function (resolve) {
                resolve(value);
            });
        };
        Promise.reject = function (obj) {
            return new Promise(function (resolve, reject) {
                reject(obj);
            });
        };
        Promise.all = function (promises) {
            var Promise = this;
            if (!u.isArray(promises)) {
                throw new TypeError('You must pass an array to all.');
            }
            return new Promise(function (resolve, reject) {
                var results = [];
                var remaining = promises.length;
                var promise = null;
                if (remaining === 0) {
                    resolve([]);
                }
                function resolver(index) {
                    return function (value) {
                        resolveAll(index, value);
                    };
                }
                function resolveAll(index, value) {
                    results[index] = value;
                    if (--remaining === 0) {
                        resolve(results);
                    }
                }
                for (var i = 0, len = promises.length; i < len; i++) {
                    promise = promises[i];
                    var then = u.getThen(promise);
                    if (typeof then === 'function') {
                        promise.then(resolver(i), reject);
                    } else {
                        resolveAll(i, promise);
                    }
                }
            });
        };
        Promise.race = function (promises) {
            var Promise = this;
            if (!u.isArray(promises)) {
                throw new TypeError('You must pass an array to race.');
            }
            return new Promise(function (resolve, reject) {
                for (var i = 0, len = promises.length; i < len; i++) {
                    var promise = promises[i];
                    var then = u.getThen(promise);
                    if (typeof then === 'function') {
                        then.call(promise, resolve, reject);
                    } else {
                        resolve(promise);
                    }
                }
            });
        };
        return Promise;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
}, this);

define('moment/moment', [
    'require',
    'exports',
    'module'
], function (require, exports, module) {
    (function (undefined) {
        var moment, VERSION = '2.7.0', globalScope = typeof global !== 'undefined' ? global : this, oldGlobalMoment, round = Math.round, i, YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, languages = {}, momentProperties = {
                _isAMomentObject: null,
                _i: null,
                _f: null,
                _l: null,
                _strict: null,
                _tzm: null,
                _isUTC: null,
                _offset: null,
                _pf: null,
                _lang: null
            }, hasModule = typeof module !== 'undefined' && module.exports, aspNetJsonRegex = /^\/?Date\((\-?\d+)/i, aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/, formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g, parseTokenOneOrTwoDigits = /\d\d?/, parseTokenOneToThreeDigits = /\d{1,3}/, parseTokenOneToFourDigits = /\d{1,4}/, parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, parseTokenDigits = /\d+/, parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, parseTokenT = /T/i, parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, parseTokenOrdinal = /\d{1,2}/, parseTokenOneDigit = /\d/, parseTokenTwoDigits = /\d\d/, parseTokenThreeDigits = /\d{3}/, parseTokenFourDigits = /\d{4}/, parseTokenSixDigits = /[+-]?\d{6}/, parseTokenSignedNumber = /[+-]?\d+/, isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, isoFormat = 'YYYY-MM-DDTHH:mm:ssZ', isoDates = [
                [
                    'YYYYYY-MM-DD',
                    /[+-]\d{6}-\d{2}-\d{2}/
                ],
                [
                    'YYYY-MM-DD',
                    /\d{4}-\d{2}-\d{2}/
                ],
                [
                    'GGGG-[W]WW-E',
                    /\d{4}-W\d{2}-\d/
                ],
                [
                    'GGGG-[W]WW',
                    /\d{4}-W\d{2}/
                ],
                [
                    'YYYY-DDD',
                    /\d{4}-\d{3}/
                ]
            ], isoTimes = [
                [
                    'HH:mm:ss.SSSS',
                    /(T| )\d\d:\d\d:\d\d\.\d+/
                ],
                [
                    'HH:mm:ss',
                    /(T| )\d\d:\d\d:\d\d/
                ],
                [
                    'HH:mm',
                    /(T| )\d\d:\d\d/
                ],
                [
                    'HH',
                    /(T| )\d\d/
                ]
            ], parseTimezoneChunker = /([\+\-]|\d\d)/gi, proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'), unitMillisecondFactors = {
                'Milliseconds': 1,
                'Seconds': 1000,
                'Minutes': 60000,
                'Hours': 3600000,
                'Days': 86400000,
                'Months': 2592000000,
                'Years': 31536000000
            }, unitAliases = {
                ms: 'millisecond',
                s: 'second',
                m: 'minute',
                h: 'hour',
                d: 'day',
                D: 'date',
                w: 'week',
                W: 'isoWeek',
                M: 'month',
                Q: 'quarter',
                y: 'year',
                DDD: 'dayOfYear',
                e: 'weekday',
                E: 'isoWeekday',
                gg: 'weekYear',
                GG: 'isoWeekYear'
            }, camelFunctions = {
                dayofyear: 'dayOfYear',
                isoweekday: 'isoWeekday',
                isoweek: 'isoWeek',
                weekyear: 'weekYear',
                isoweekyear: 'isoWeekYear'
            }, formatFunctions = {}, relativeTimeThresholds = {
                s: 45,
                m: 45,
                h: 22,
                dd: 25,
                dm: 45,
                dy: 345
            }, ordinalizeTokens = 'DDD w W M D d'.split(' '), paddedTokens = 'M D H h m s w W'.split(' '), formatTokenFunctions = {
                M: function () {
                    return this.month() + 1;
                },
                MMM: function (format) {
                    return this.lang().monthsShort(this, format);
                },
                MMMM: function (format) {
                    return this.lang().months(this, format);
                },
                D: function () {
                    return this.date();
                },
                DDD: function () {
                    return this.dayOfYear();
                },
                d: function () {
                    return this.day();
                },
                dd: function (format) {
                    return this.lang().weekdaysMin(this, format);
                },
                ddd: function (format) {
                    return this.lang().weekdaysShort(this, format);
                },
                dddd: function (format) {
                    return this.lang().weekdays(this, format);
                },
                w: function () {
                    return this.week();
                },
                W: function () {
                    return this.isoWeek();
                },
                YY: function () {
                    return leftZeroFill(this.year() % 100, 2);
                },
                YYYY: function () {
                    return leftZeroFill(this.year(), 4);
                },
                YYYYY: function () {
                    return leftZeroFill(this.year(), 5);
                },
                YYYYYY: function () {
                    var y = this.year(), sign = y >= 0 ? '+' : '-';
                    return sign + leftZeroFill(Math.abs(y), 6);
                },
                gg: function () {
                    return leftZeroFill(this.weekYear() % 100, 2);
                },
                gggg: function () {
                    return leftZeroFill(this.weekYear(), 4);
                },
                ggggg: function () {
                    return leftZeroFill(this.weekYear(), 5);
                },
                GG: function () {
                    return leftZeroFill(this.isoWeekYear() % 100, 2);
                },
                GGGG: function () {
                    return leftZeroFill(this.isoWeekYear(), 4);
                },
                GGGGG: function () {
                    return leftZeroFill(this.isoWeekYear(), 5);
                },
                e: function () {
                    return this.weekday();
                },
                E: function () {
                    return this.isoWeekday();
                },
                a: function () {
                    return this.lang().meridiem(this.hours(), this.minutes(), true);
                },
                A: function () {
                    return this.lang().meridiem(this.hours(), this.minutes(), false);
                },
                H: function () {
                    return this.hours();
                },
                h: function () {
                    return this.hours() % 12 || 12;
                },
                m: function () {
                    return this.minutes();
                },
                s: function () {
                    return this.seconds();
                },
                S: function () {
                    return toInt(this.milliseconds() / 100);
                },
                SS: function () {
                    return leftZeroFill(toInt(this.milliseconds() / 10), 2);
                },
                SSS: function () {
                    return leftZeroFill(this.milliseconds(), 3);
                },
                SSSS: function () {
                    return leftZeroFill(this.milliseconds(), 3);
                },
                Z: function () {
                    var a = -this.zone(), b = '+';
                    if (a < 0) {
                        a = -a;
                        b = '-';
                    }
                    return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
                },
                ZZ: function () {
                    var a = -this.zone(), b = '+';
                    if (a < 0) {
                        a = -a;
                        b = '-';
                    }
                    return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
                },
                z: function () {
                    return this.zoneAbbr();
                },
                zz: function () {
                    return this.zoneName();
                },
                X: function () {
                    return this.unix();
                },
                Q: function () {
                    return this.quarter();
                }
            }, lists = [
                'months',
                'monthsShort',
                'weekdays',
                'weekdaysShort',
                'weekdaysMin'
            ];
        function dfl(a, b, c) {
            switch (arguments.length) {
            case 2:
                return a != null ? a : b;
            case 3:
                return a != null ? a : b != null ? b : c;
            default:
                throw new Error('Implement me');
            }
        }
        function defaultParsingFlags() {
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false
            };
        }
        function deprecate(msg, fn) {
            var firstTime = true;
            function printMsg() {
                if (moment.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
                    console.warn('Deprecation warning: ' + msg);
                }
            }
            return extend(function () {
                if (firstTime) {
                    printMsg();
                    firstTime = false;
                }
                return fn.apply(this, arguments);
            }, fn);
        }
        function padToken(func, count) {
            return function (a) {
                return leftZeroFill(func.call(this, a), count);
            };
        }
        function ordinalizeToken(func, period) {
            return function (a) {
                return this.lang().ordinal(func.call(this, a), period);
            };
        }
        while (ordinalizeTokens.length) {
            i = ordinalizeTokens.pop();
            formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
        }
        while (paddedTokens.length) {
            i = paddedTokens.pop();
            formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
        }
        formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);
        function Language() {
        }
        function Moment(config) {
            checkOverflow(config);
            extend(this, config);
        }
        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
            this._milliseconds = +milliseconds + seconds * 1000 + minutes * 60000 + hours * 3600000;
            this._days = +days + weeks * 7;
            this._months = +months + quarters * 3 + years * 12;
            this._data = {};
            this._bubble();
        }
        function extend(a, b) {
            for (var i in b) {
                if (b.hasOwnProperty(i)) {
                    a[i] = b[i];
                }
            }
            if (b.hasOwnProperty('toString')) {
                a.toString = b.toString;
            }
            if (b.hasOwnProperty('valueOf')) {
                a.valueOf = b.valueOf;
            }
            return a;
        }
        function cloneMoment(m) {
            var result = {}, i;
            for (i in m) {
                if (m.hasOwnProperty(i) && momentProperties.hasOwnProperty(i)) {
                    result[i] = m[i];
                }
            }
            return result;
        }
        function absRound(number) {
            if (number < 0) {
                return Math.ceil(number);
            } else {
                return Math.floor(number);
            }
        }
        function leftZeroFill(number, targetLength, forceSign) {
            var output = '' + Math.abs(number), sign = number >= 0;
            while (output.length < targetLength) {
                output = '0' + output;
            }
            return (sign ? forceSign ? '+' : '' : '-') + output;
        }
        function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds, days = duration._days, months = duration._months;
            updateOffset = updateOffset == null ? true : updateOffset;
            if (milliseconds) {
                mom._d.setTime(+mom._d + milliseconds * isAdding);
            }
            if (days) {
                rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
            }
            if (months) {
                rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
            }
            if (updateOffset) {
                moment.updateOffset(mom, days || months);
            }
        }
        function isArray(input) {
            return Object.prototype.toString.call(input) === '[object Array]';
        }
        function isDate(input) {
            return Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;
        }
        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
            for (i = 0; i < len; i++) {
                if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                    diffs++;
                }
            }
            return diffs + lengthDiff;
        }
        function normalizeUnits(units) {
            if (units) {
                var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
                units = unitAliases[units] || camelFunctions[lowered] || lowered;
            }
            return units;
        }
        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {}, normalizedProp, prop;
            for (prop in inputObject) {
                if (inputObject.hasOwnProperty(prop)) {
                    normalizedProp = normalizeUnits(prop);
                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }
            return normalizedInput;
        }
        function makeList(field) {
            var count, setter;
            if (field.indexOf('week') === 0) {
                count = 7;
                setter = 'day';
            } else if (field.indexOf('month') === 0) {
                count = 12;
                setter = 'month';
            } else {
                return;
            }
            moment[field] = function (format, index) {
                var i, getter, method = moment.fn._lang[field], results = [];
                if (typeof format === 'number') {
                    index = format;
                    format = undefined;
                }
                getter = function (i) {
                    var m = moment().utc().set(setter, i);
                    return method.call(moment.fn._lang, m, format || '');
                };
                if (index != null) {
                    return getter(index);
                } else {
                    for (i = 0; i < count; i++) {
                        results.push(getter(i));
                    }
                    return results;
                }
            };
        }
        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion, value = 0;
            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                if (coercedNumber >= 0) {
                    value = Math.floor(coercedNumber);
                } else {
                    value = Math.ceil(coercedNumber);
                }
            }
            return value;
        }
        function daysInMonth(year, month) {
            return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
        }
        function weeksInYear(year, dow, doy) {
            return weekOfYear(moment([
                year,
                11,
                31 + dow - doy
            ]), dow, doy).week;
        }
        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }
        function isLeapYear(year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }
        function checkOverflow(m) {
            var overflow;
            if (m._a && m._pf.overflow === -2) {
                overflow = m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH : m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE : m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR : m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE : m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND : m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND : -1;
                if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                    overflow = DATE;
                }
                m._pf.overflow = overflow;
            }
        }
        function isValid(m) {
            if (m._isValid == null) {
                m._isValid = !isNaN(m._d.getTime()) && m._pf.overflow < 0 && !m._pf.empty && !m._pf.invalidMonth && !m._pf.nullInput && !m._pf.invalidFormat && !m._pf.userInvalidated;
                if (m._strict) {
                    m._isValid = m._isValid && m._pf.charsLeftOver === 0 && m._pf.unusedTokens.length === 0;
                }
            }
            return m._isValid;
        }
        function normalizeLanguage(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }
        function makeAs(input, model) {
            return model._isUTC ? moment(input).zone(model._offset || 0) : moment(input).local();
        }
        extend(Language.prototype, {
            set: function (config) {
                var prop, i;
                for (i in config) {
                    prop = config[i];
                    if (typeof prop === 'function') {
                        this[i] = prop;
                    } else {
                        this['_' + i] = prop;
                    }
                }
            },
            _months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
            months: function (m) {
                return this._months[m.month()];
            },
            _monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            monthsShort: function (m) {
                return this._monthsShort[m.month()];
            },
            monthsParse: function (monthName) {
                var i, mom, regex;
                if (!this._monthsParse) {
                    this._monthsParse = [];
                }
                for (i = 0; i < 12; i++) {
                    if (!this._monthsParse[i]) {
                        mom = moment.utc([
                            2000,
                            i
                        ]);
                        regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                    }
                    if (this._monthsParse[i].test(monthName)) {
                        return i;
                    }
                }
            },
            _weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            weekdays: function (m) {
                return this._weekdays[m.day()];
            },
            _weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            weekdaysShort: function (m) {
                return this._weekdaysShort[m.day()];
            },
            _weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            weekdaysMin: function (m) {
                return this._weekdaysMin[m.day()];
            },
            weekdaysParse: function (weekdayName) {
                var i, mom, regex;
                if (!this._weekdaysParse) {
                    this._weekdaysParse = [];
                }
                for (i = 0; i < 7; i++) {
                    if (!this._weekdaysParse[i]) {
                        mom = moment([
                            2000,
                            1
                        ]).day(i);
                        regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                    }
                    if (this._weekdaysParse[i].test(weekdayName)) {
                        return i;
                    }
                }
            },
            _longDateFormat: {
                LT: 'h:mm A',
                L: 'MM/DD/YYYY',
                LL: 'MMMM D YYYY',
                LLL: 'MMMM D YYYY LT',
                LLLL: 'dddd, MMMM D YYYY LT'
            },
            longDateFormat: function (key) {
                var output = this._longDateFormat[key];
                if (!output && this._longDateFormat[key.toUpperCase()]) {
                    output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                        return val.slice(1);
                    });
                    this._longDateFormat[key] = output;
                }
                return output;
            },
            isPM: function (input) {
                return (input + '').toLowerCase().charAt(0) === 'p';
            },
            _meridiemParse: /[ap]\.?m?\.?/i,
            meridiem: function (hours, minutes, isLower) {
                if (hours > 11) {
                    return isLower ? 'pm' : 'PM';
                } else {
                    return isLower ? 'am' : 'AM';
                }
            },
            _calendar: {
                sameDay: '[Today at] LT',
                nextDay: '[Tomorrow at] LT',
                nextWeek: 'dddd [at] LT',
                lastDay: '[Yesterday at] LT',
                lastWeek: '[Last] dddd [at] LT',
                sameElse: 'L'
            },
            calendar: function (key, mom) {
                var output = this._calendar[key];
                return typeof output === 'function' ? output.apply(mom) : output;
            },
            _relativeTime: {
                future: 'in %s',
                past: '%s ago',
                s: 'a few seconds',
                m: 'a minute',
                mm: '%d minutes',
                h: 'an hour',
                hh: '%d hours',
                d: 'a day',
                dd: '%d days',
                M: 'a month',
                MM: '%d months',
                y: 'a year',
                yy: '%d years'
            },
            relativeTime: function (number, withoutSuffix, string, isFuture) {
                var output = this._relativeTime[string];
                return typeof output === 'function' ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
            },
            pastFuture: function (diff, output) {
                var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
                return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
            },
            ordinal: function (number) {
                return this._ordinal.replace('%d', number);
            },
            _ordinal: '%d',
            preparse: function (string) {
                return string;
            },
            postformat: function (string) {
                return string;
            },
            week: function (mom) {
                return weekOfYear(mom, this._week.dow, this._week.doy).week;
            },
            _week: {
                dow: 0,
                doy: 6
            },
            _invalidDate: 'Invalid date',
            invalidDate: function () {
                return this._invalidDate;
            }
        });
        function loadLang(key, values) {
            values.abbr = key;
            if (!languages[key]) {
                languages[key] = new Language();
            }
            languages[key].set(values);
            return languages[key];
        }
        function unloadLang(key) {
            delete languages[key];
        }
        function getLangDefinition(key) {
            var i = 0, j, lang, next, split, get = function (k) {
                    if (!languages[k] && hasModule) {
                        try {
                            require('./lang/' + k);
                        } catch (e) {
                        }
                    }
                    return languages[k];
                };
            if (!key) {
                return moment.fn._lang;
            }
            if (!isArray(key)) {
                lang = get(key);
                if (lang) {
                    return lang;
                }
                key = [key];
            }
            while (i < key.length) {
                split = normalizeLanguage(key[i]).split('-');
                j = split.length;
                next = normalizeLanguage(key[i + 1]);
                next = next ? next.split('-') : null;
                while (j > 0) {
                    lang = get(split.slice(0, j).join('-'));
                    if (lang) {
                        return lang;
                    }
                    if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                        break;
                    }
                    j--;
                }
                i++;
            }
            return moment.fn._lang;
        }
        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
        }
        function makeFormatFunction(format) {
            var array = format.match(formattingTokens), i, length;
            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }
            return function (mom) {
                var output = '';
                for (i = 0; i < length; i++) {
                    output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
                }
                return output;
            };
        }
        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.lang().invalidDate();
            }
            format = expandFormat(format, m.lang());
            if (!formatFunctions[format]) {
                formatFunctions[format] = makeFormatFunction(format);
            }
            return formatFunctions[format](m);
        }
        function expandFormat(format, lang) {
            var i = 5;
            function replaceLongDateFormatTokens(input) {
                return lang.longDateFormat(input) || input;
            }
            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }
            return format;
        }
        function getParseRegexForToken(token, config) {
            var a, strict = config._strict;
            switch (token) {
            case 'Q':
                return parseTokenOneDigit;
            case 'DDDD':
                return parseTokenThreeDigits;
            case 'YYYY':
            case 'GGGG':
            case 'gggg':
                return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
            case 'Y':
            case 'G':
            case 'g':
                return parseTokenSignedNumber;
            case 'YYYYYY':
            case 'YYYYY':
            case 'GGGGG':
            case 'ggggg':
                return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
            case 'S':
                if (strict) {
                    return parseTokenOneDigit;
                }
            case 'SS':
                if (strict) {
                    return parseTokenTwoDigits;
                }
            case 'SSS':
                if (strict) {
                    return parseTokenThreeDigits;
                }
            case 'DDD':
                return parseTokenOneToThreeDigits;
            case 'MMM':
            case 'MMMM':
            case 'dd':
            case 'ddd':
            case 'dddd':
                return parseTokenWord;
            case 'a':
            case 'A':
                return getLangDefinition(config._l)._meridiemParse;
            case 'X':
                return parseTokenTimestampMs;
            case 'Z':
            case 'ZZ':
                return parseTokenTimezone;
            case 'T':
                return parseTokenT;
            case 'SSSS':
                return parseTokenDigits;
            case 'MM':
            case 'DD':
            case 'YY':
            case 'GG':
            case 'gg':
            case 'HH':
            case 'hh':
            case 'mm':
            case 'ss':
            case 'ww':
            case 'WW':
                return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
            case 'M':
            case 'D':
            case 'd':
            case 'H':
            case 'h':
            case 'm':
            case 's':
            case 'w':
            case 'W':
            case 'e':
            case 'E':
                return parseTokenOneOrTwoDigits;
            case 'Do':
                return parseTokenOrdinal;
            default:
                a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
                return a;
            }
        }
        function timezoneMinutesFromString(string) {
            string = string || '';
            var possibleTzMatches = string.match(parseTokenTimezone) || [], tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [], parts = (tzChunk + '').match(parseTimezoneChunker) || [
                    '-',
                    0,
                    0
                ], minutes = +(parts[1] * 60) + toInt(parts[2]);
            return parts[0] === '+' ? -minutes : minutes;
        }
        function addTimeToArrayFromToken(token, input, config) {
            var a, datePartArray = config._a;
            switch (token) {
            case 'Q':
                if (input != null) {
                    datePartArray[MONTH] = (toInt(input) - 1) * 3;
                }
                break;
            case 'M':
            case 'MM':
                if (input != null) {
                    datePartArray[MONTH] = toInt(input) - 1;
                }
                break;
            case 'MMM':
            case 'MMMM':
                a = getLangDefinition(config._l).monthsParse(input);
                if (a != null) {
                    datePartArray[MONTH] = a;
                } else {
                    config._pf.invalidMonth = input;
                }
                break;
            case 'D':
            case 'DD':
                if (input != null) {
                    datePartArray[DATE] = toInt(input);
                }
                break;
            case 'Do':
                if (input != null) {
                    datePartArray[DATE] = toInt(parseInt(input, 10));
                }
                break;
            case 'DDD':
            case 'DDDD':
                if (input != null) {
                    config._dayOfYear = toInt(input);
                }
                break;
            case 'YY':
                datePartArray[YEAR] = moment.parseTwoDigitYear(input);
                break;
            case 'YYYY':
            case 'YYYYY':
            case 'YYYYYY':
                datePartArray[YEAR] = toInt(input);
                break;
            case 'a':
            case 'A':
                config._isPm = getLangDefinition(config._l).isPM(input);
                break;
            case 'H':
            case 'HH':
            case 'h':
            case 'hh':
                datePartArray[HOUR] = toInt(input);
                break;
            case 'm':
            case 'mm':
                datePartArray[MINUTE] = toInt(input);
                break;
            case 's':
            case 'ss':
                datePartArray[SECOND] = toInt(input);
                break;
            case 'S':
            case 'SS':
            case 'SSS':
            case 'SSSS':
                datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
                break;
            case 'X':
                config._d = new Date(parseFloat(input) * 1000);
                break;
            case 'Z':
            case 'ZZ':
                config._useUTC = true;
                config._tzm = timezoneMinutesFromString(input);
                break;
            case 'dd':
            case 'ddd':
            case 'dddd':
                a = getLangDefinition(config._l).weekdaysParse(input);
                if (a != null) {
                    config._w = config._w || {};
                    config._w['d'] = a;
                } else {
                    config._pf.invalidWeekday = input;
                }
                break;
            case 'w':
            case 'ww':
            case 'W':
            case 'WW':
            case 'd':
            case 'e':
            case 'E':
                token = token.substr(0, 1);
            case 'gggg':
            case 'GGGG':
            case 'GGGGG':
                token = token.substr(0, 2);
                if (input) {
                    config._w = config._w || {};
                    config._w[token] = toInt(input);
                }
                break;
            case 'gg':
            case 'GG':
                config._w = config._w || {};
                config._w[token] = moment.parseTwoDigitYear(input);
            }
        }
        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, lang;
            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;
                weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
                week = dfl(w.W, 1);
                weekday = dfl(w.E, 1);
            } else {
                lang = getLangDefinition(config._l);
                dow = lang._week.dow;
                doy = lang._week.doy;
                weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
                week = dfl(w.w, 1);
                if (w.d != null) {
                    weekday = w.d;
                    if (weekday < dow) {
                        ++week;
                    }
                } else if (w.e != null) {
                    weekday = w.e + dow;
                } else {
                    weekday = dow;
                }
            }
            temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
        function dateFromConfig(config) {
            var i, date, input = [], currentDate, yearToUse;
            if (config._d) {
                return;
            }
            currentDate = currentDateArray(config);
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }
            if (config._dayOfYear) {
                yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);
                if (config._dayOfYear > daysInYear(yearToUse)) {
                    config._pf._overflowDayOfYear = true;
                }
                date = makeUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }
            for (; i < 7; i++) {
                config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
            }
            config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
            }
        }
        function dateFromObject(config) {
            var normalizedInput;
            if (config._d) {
                return;
            }
            normalizedInput = normalizeObjectUnits(config._i);
            config._a = [
                normalizedInput.year,
                normalizedInput.month,
                normalizedInput.day,
                normalizedInput.hour,
                normalizedInput.minute,
                normalizedInput.second,
                normalizedInput.millisecond
            ];
            dateFromConfig(config);
        }
        function currentDateArray(config) {
            var now = new Date();
            if (config._useUTC) {
                return [
                    now.getUTCFullYear(),
                    now.getUTCMonth(),
                    now.getUTCDate()
                ];
            } else {
                return [
                    now.getFullYear(),
                    now.getMonth(),
                    now.getDate()
                ];
            }
        }
        function makeDateFromStringAndFormat(config) {
            if (config._f === moment.ISO_8601) {
                parseISO(config);
                return;
            }
            config._a = [];
            config._pf.empty = true;
            var lang = getLangDefinition(config._l), string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
            tokens = expandFormat(config._f, lang).match(formattingTokens) || [];
            for (i = 0; i < tokens.length; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));
                    if (skipped.length > 0) {
                        config._pf.unusedInput.push(skipped);
                    }
                    string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                    totalParsedInputLength += parsedInput.length;
                }
                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        config._pf.empty = false;
                    } else {
                        config._pf.unusedTokens.push(token);
                    }
                    addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                    config._pf.unusedTokens.push(token);
                }
            }
            config._pf.charsLeftOver = stringLength - totalParsedInputLength;
            if (string.length > 0) {
                config._pf.unusedInput.push(string);
            }
            if (config._isPm && config._a[HOUR] < 12) {
                config._a[HOUR] += 12;
            }
            if (config._isPm === false && config._a[HOUR] === 12) {
                config._a[HOUR] = 0;
            }
            dateFromConfig(config);
            checkOverflow(config);
        }
        function unescapeFormat(s) {
            return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
            });
        }
        function regexpEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }
        function makeDateFromStringAndArray(config) {
            var tempConfig, bestMoment, scoreToBeat, i, currentScore;
            if (config._f.length === 0) {
                config._pf.invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }
            for (i = 0; i < config._f.length; i++) {
                currentScore = 0;
                tempConfig = extend({}, config);
                tempConfig._pf = defaultParsingFlags();
                tempConfig._f = config._f[i];
                makeDateFromStringAndFormat(tempConfig);
                if (!isValid(tempConfig)) {
                    continue;
                }
                currentScore += tempConfig._pf.charsLeftOver;
                currentScore += tempConfig._pf.unusedTokens.length * 10;
                tempConfig._pf.score = currentScore;
                if (scoreToBeat == null || currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
            extend(config, bestMoment || tempConfig);
        }
        function parseISO(config) {
            var i, l, string = config._i, match = isoRegex.exec(string);
            if (match) {
                config._pf.iso = true;
                for (i = 0, l = isoDates.length; i < l; i++) {
                    if (isoDates[i][1].exec(string)) {
                        config._f = isoDates[i][0] + (match[6] || ' ');
                        break;
                    }
                }
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(string)) {
                        config._f += isoTimes[i][0];
                        break;
                    }
                }
                if (string.match(parseTokenTimezone)) {
                    config._f += 'Z';
                }
                makeDateFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }
        function makeDateFromString(config) {
            parseISO(config);
            if (config._isValid === false) {
                delete config._isValid;
                moment.createFromInputFallback(config);
            }
        }
        function makeDateFromInput(config) {
            var input = config._i, matched = aspNetJsonRegex.exec(input);
            if (input === undefined) {
                config._d = new Date();
            } else if (matched) {
                config._d = new Date(+matched[1]);
            } else if (typeof input === 'string') {
                makeDateFromString(config);
            } else if (isArray(input)) {
                config._a = input.slice(0);
                dateFromConfig(config);
            } else if (isDate(input)) {
                config._d = new Date(+input);
            } else if (typeof input === 'object') {
                dateFromObject(config);
            } else if (typeof input === 'number') {
                config._d = new Date(input);
            } else {
                moment.createFromInputFallback(config);
            }
        }
        function makeDate(y, m, d, h, M, s, ms) {
            var date = new Date(y, m, d, h, M, s, ms);
            if (y < 1970) {
                date.setFullYear(y);
            }
            return date;
        }
        function makeUTCDate(y) {
            var date = new Date(Date.UTC.apply(null, arguments));
            if (y < 1970) {
                date.setUTCFullYear(y);
            }
            return date;
        }
        function parseWeekday(input, language) {
            if (typeof input === 'string') {
                if (!isNaN(input)) {
                    input = parseInt(input, 10);
                } else {
                    input = language.weekdaysParse(input);
                    if (typeof input !== 'number') {
                        return null;
                    }
                }
            }
            return input;
        }
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {
            return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }
        function relativeTime(milliseconds, withoutSuffix, lang) {
            var seconds = round(Math.abs(milliseconds) / 1000), minutes = round(seconds / 60), hours = round(minutes / 60), days = round(hours / 24), years = round(days / 365), args = seconds < relativeTimeThresholds.s && [
                    's',
                    seconds
                ] || minutes === 1 && ['m'] || minutes < relativeTimeThresholds.m && [
                    'mm',
                    minutes
                ] || hours === 1 && ['h'] || hours < relativeTimeThresholds.h && [
                    'hh',
                    hours
                ] || days === 1 && ['d'] || days <= relativeTimeThresholds.dd && [
                    'dd',
                    days
                ] || days <= relativeTimeThresholds.dm && ['M'] || days < relativeTimeThresholds.dy && [
                    'MM',
                    round(days / 30)
                ] || years === 1 && ['y'] || [
                    'yy',
                    years
                ];
            args[2] = withoutSuffix;
            args[3] = milliseconds > 0;
            args[4] = lang;
            return substituteTimeAgo.apply({}, args);
        }
        function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
            var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
            if (daysToDayOfWeek > end) {
                daysToDayOfWeek -= 7;
            }
            if (daysToDayOfWeek < end - 7) {
                daysToDayOfWeek += 7;
            }
            adjustedMoment = moment(mom).add('d', daysToDayOfWeek);
            return {
                week: Math.ceil(adjustedMoment.dayOfYear() / 7),
                year: adjustedMoment.year()
            };
        }
        function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
            var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;
            d = d === 0 ? 7 : d;
            weekday = weekday != null ? weekday : firstDayOfWeek;
            daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
            dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;
            return {
                year: dayOfYear > 0 ? year : year - 1,
                dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
            };
        }
        function makeMoment(config) {
            var input = config._i, format = config._f;
            if (input === null || format === undefined && input === '') {
                return moment.invalid({ nullInput: true });
            }
            if (typeof input === 'string') {
                config._i = input = getLangDefinition().preparse(input);
            }
            if (moment.isMoment(input)) {
                config = cloneMoment(input);
                config._d = new Date(+input._d);
            } else if (format) {
                if (isArray(format)) {
                    makeDateFromStringAndArray(config);
                } else {
                    makeDateFromStringAndFormat(config);
                }
            } else {
                makeDateFromInput(config);
            }
            return new Moment(config);
        }
        moment = function (input, format, lang, strict) {
            var c;
            if (typeof lang === 'boolean') {
                strict = lang;
                lang = undefined;
            }
            c = {};
            c._isAMomentObject = true;
            c._i = input;
            c._f = format;
            c._l = lang;
            c._strict = strict;
            c._isUTC = false;
            c._pf = defaultParsingFlags();
            return makeMoment(c);
        };
        moment.suppressDeprecationWarnings = false;
        moment.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) {
            config._d = new Date(config._i);
        });
        function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }
            if (!moments.length) {
                return moment();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
                if (moments[i][fn](res)) {
                    res = moments[i];
                }
            }
            return res;
        }
        moment.min = function () {
            var args = [].slice.call(arguments, 0);
            return pickBy('isBefore', args);
        };
        moment.max = function () {
            var args = [].slice.call(arguments, 0);
            return pickBy('isAfter', args);
        };
        moment.utc = function (input, format, lang, strict) {
            var c;
            if (typeof lang === 'boolean') {
                strict = lang;
                lang = undefined;
            }
            c = {};
            c._isAMomentObject = true;
            c._useUTC = true;
            c._isUTC = true;
            c._l = lang;
            c._i = input;
            c._f = format;
            c._strict = strict;
            c._pf = defaultParsingFlags();
            return makeMoment(c).utc();
        };
        moment.unix = function (input) {
            return moment(input * 1000);
        };
        moment.duration = function (input, key) {
            var duration = input, match = null, sign, ret, parseIso;
            if (moment.isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months
                };
            } else if (typeof input === 'number') {
                duration = {};
                if (key) {
                    duration[key] = input;
                } else {
                    duration.milliseconds = input;
                }
            } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(match[MILLISECOND]) * sign
                };
            } else if (!!(match = isoDurationRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                parseIso = function (inp) {
                    var res = inp && parseFloat(inp.replace(',', '.'));
                    return (isNaN(res) ? 0 : res) * sign;
                };
                duration = {
                    y: parseIso(match[2]),
                    M: parseIso(match[3]),
                    d: parseIso(match[4]),
                    h: parseIso(match[5]),
                    m: parseIso(match[6]),
                    s: parseIso(match[7]),
                    w: parseIso(match[8])
                };
            }
            ret = new Duration(duration);
            if (moment.isDuration(input) && input.hasOwnProperty('_lang')) {
                ret._lang = input._lang;
            }
            return ret;
        };
        moment.version = VERSION;
        moment.defaultFormat = isoFormat;
        moment.ISO_8601 = function () {
        };
        moment.momentProperties = momentProperties;
        moment.updateOffset = function () {
        };
        moment.relativeTimeThreshold = function (threshold, limit) {
            if (relativeTimeThresholds[threshold] === undefined) {
                return false;
            }
            relativeTimeThresholds[threshold] = limit;
            return true;
        };
        moment.lang = function (key, values) {
            var r;
            if (!key) {
                return moment.fn._lang._abbr;
            }
            if (values) {
                loadLang(normalizeLanguage(key), values);
            } else if (values === null) {
                unloadLang(key);
                key = 'en';
            } else if (!languages[key]) {
                getLangDefinition(key);
            }
            r = moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);
            return r._abbr;
        };
        moment.langData = function (key) {
            if (key && key._lang && key._lang._abbr) {
                key = key._lang._abbr;
            }
            return getLangDefinition(key);
        };
        moment.isMoment = function (obj) {
            return obj instanceof Moment || obj != null && obj.hasOwnProperty('_isAMomentObject');
        };
        moment.isDuration = function (obj) {
            return obj instanceof Duration;
        };
        for (i = lists.length - 1; i >= 0; --i) {
            makeList(lists[i]);
        }
        moment.normalizeUnits = function (units) {
            return normalizeUnits(units);
        };
        moment.invalid = function (flags) {
            var m = moment.utc(NaN);
            if (flags != null) {
                extend(m._pf, flags);
            } else {
                m._pf.userInvalidated = true;
            }
            return m;
        };
        moment.parseZone = function () {
            return moment.apply(null, arguments).parseZone();
        };
        moment.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };
        extend(moment.fn = Moment.prototype, {
            clone: function () {
                return moment(this);
            },
            valueOf: function () {
                return +this._d + (this._offset || 0) * 60000;
            },
            unix: function () {
                return Math.floor(+this / 1000);
            },
            toString: function () {
                return this.clone().lang('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
            },
            toDate: function () {
                return this._offset ? new Date(+this) : this._d;
            },
            toISOString: function () {
                var m = moment(this).utc();
                if (0 < m.year() && m.year() <= 9999) {
                    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                } else {
                    return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                }
            },
            toArray: function () {
                var m = this;
                return [
                    m.year(),
                    m.month(),
                    m.date(),
                    m.hours(),
                    m.minutes(),
                    m.seconds(),
                    m.milliseconds()
                ];
            },
            isValid: function () {
                return isValid(this);
            },
            isDSTShifted: function () {
                if (this._a) {
                    return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
                }
                return false;
            },
            parsingFlags: function () {
                return extend({}, this._pf);
            },
            invalidAt: function () {
                return this._pf.overflow;
            },
            utc: function () {
                return this.zone(0);
            },
            local: function () {
                this.zone(0);
                this._isUTC = false;
                return this;
            },
            format: function (inputString) {
                var output = formatMoment(this, inputString || moment.defaultFormat);
                return this.lang().postformat(output);
            },
            add: function (input, val) {
                var dur;
                if (typeof input === 'string' && typeof val === 'string') {
                    dur = moment.duration(isNaN(+val) ? +input : +val, isNaN(+val) ? val : input);
                } else if (typeof input === 'string') {
                    dur = moment.duration(+val, input);
                } else {
                    dur = moment.duration(input, val);
                }
                addOrSubtractDurationFromMoment(this, dur, 1);
                return this;
            },
            subtract: function (input, val) {
                var dur;
                if (typeof input === 'string' && typeof val === 'string') {
                    dur = moment.duration(isNaN(+val) ? +input : +val, isNaN(+val) ? val : input);
                } else if (typeof input === 'string') {
                    dur = moment.duration(+val, input);
                } else {
                    dur = moment.duration(input, val);
                }
                addOrSubtractDurationFromMoment(this, dur, -1);
                return this;
            },
            diff: function (input, units, asFloat) {
                var that = makeAs(input, this), zoneDiff = (this.zone() - that.zone()) * 60000, diff, output;
                units = normalizeUnits(units);
                if (units === 'year' || units === 'month') {
                    diff = (this.daysInMonth() + that.daysInMonth()) * 43200000;
                    output = (this.year() - that.year()) * 12 + (this.month() - that.month());
                    output += (this - moment(this).startOf('month') - (that - moment(that).startOf('month'))) / diff;
                    output -= (this.zone() - moment(this).startOf('month').zone() - (that.zone() - moment(that).startOf('month').zone())) * 60000 / diff;
                    if (units === 'year') {
                        output = output / 12;
                    }
                } else {
                    diff = this - that;
                    output = units === 'second' ? diff / 1000 : units === 'minute' ? diff / 60000 : units === 'hour' ? diff / 3600000 : units === 'day' ? (diff - zoneDiff) / 86400000 : units === 'week' ? (diff - zoneDiff) / 604800000 : diff;
                }
                return asFloat ? output : absRound(output);
            },
            from: function (time, withoutSuffix) {
                return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);
            },
            fromNow: function (withoutSuffix) {
                return this.from(moment(), withoutSuffix);
            },
            calendar: function (time) {
                var now = time || moment(), sod = makeAs(now, this).startOf('day'), diff = this.diff(sod, 'days', true), format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
                return this.format(this.lang().calendar(format, this));
            },
            isLeapYear: function () {
                return isLeapYear(this.year());
            },
            isDST: function () {
                return this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone();
            },
            day: function (input) {
                var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                if (input != null) {
                    input = parseWeekday(input, this.lang());
                    return this.add({ d: input - day });
                } else {
                    return day;
                }
            },
            month: makeAccessor('Month', true),
            startOf: function (units) {
                units = normalizeUnits(units);
                switch (units) {
                case 'year':
                    this.month(0);
                case 'quarter':
                case 'month':
                    this.date(1);
                case 'week':
                case 'isoWeek':
                case 'day':
                    this.hours(0);
                case 'hour':
                    this.minutes(0);
                case 'minute':
                    this.seconds(0);
                case 'second':
                    this.milliseconds(0);
                }
                if (units === 'week') {
                    this.weekday(0);
                } else if (units === 'isoWeek') {
                    this.isoWeekday(1);
                }
                if (units === 'quarter') {
                    this.month(Math.floor(this.month() / 3) * 3);
                }
                return this;
            },
            endOf: function (units) {
                units = normalizeUnits(units);
                return this.startOf(units).add(units === 'isoWeek' ? 'week' : units, 1).subtract('ms', 1);
            },
            isAfter: function (input, units) {
                units = typeof units !== 'undefined' ? units : 'millisecond';
                return +this.clone().startOf(units) > +moment(input).startOf(units);
            },
            isBefore: function (input, units) {
                units = typeof units !== 'undefined' ? units : 'millisecond';
                return +this.clone().startOf(units) < +moment(input).startOf(units);
            },
            isSame: function (input, units) {
                units = units || 'ms';
                return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
            },
            min: deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function (other) {
                other = moment.apply(null, arguments);
                return other < this ? this : other;
            }),
            max: deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function (other) {
                other = moment.apply(null, arguments);
                return other > this ? this : other;
            }),
            zone: function (input, keepTime) {
                var offset = this._offset || 0;
                if (input != null) {
                    if (typeof input === 'string') {
                        input = timezoneMinutesFromString(input);
                    }
                    if (Math.abs(input) < 16) {
                        input = input * 60;
                    }
                    this._offset = input;
                    this._isUTC = true;
                    if (offset !== input) {
                        if (!keepTime || this._changeInProgress) {
                            addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, false);
                        } else if (!this._changeInProgress) {
                            this._changeInProgress = true;
                            moment.updateOffset(this, true);
                            this._changeInProgress = null;
                        }
                    }
                } else {
                    return this._isUTC ? offset : this._d.getTimezoneOffset();
                }
                return this;
            },
            zoneAbbr: function () {
                return this._isUTC ? 'UTC' : '';
            },
            zoneName: function () {
                return this._isUTC ? 'Coordinated Universal Time' : '';
            },
            parseZone: function () {
                if (this._tzm) {
                    this.zone(this._tzm);
                } else if (typeof this._i === 'string') {
                    this.zone(this._i);
                }
                return this;
            },
            hasAlignedHourOffset: function (input) {
                if (!input) {
                    input = 0;
                } else {
                    input = moment(input).zone();
                }
                return (this.zone() - input) % 60 === 0;
            },
            daysInMonth: function () {
                return daysInMonth(this.year(), this.month());
            },
            dayOfYear: function (input) {
                var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 86400000) + 1;
                return input == null ? dayOfYear : this.add('d', input - dayOfYear);
            },
            quarter: function (input) {
                return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
            },
            weekYear: function (input) {
                var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;
                return input == null ? year : this.add('y', input - year);
            },
            isoWeekYear: function (input) {
                var year = weekOfYear(this, 1, 4).year;
                return input == null ? year : this.add('y', input - year);
            },
            week: function (input) {
                var week = this.lang().week(this);
                return input == null ? week : this.add('d', (input - week) * 7);
            },
            isoWeek: function (input) {
                var week = weekOfYear(this, 1, 4).week;
                return input == null ? week : this.add('d', (input - week) * 7);
            },
            weekday: function (input) {
                var weekday = (this.day() + 7 - this.lang()._week.dow) % 7;
                return input == null ? weekday : this.add('d', input - weekday);
            },
            isoWeekday: function (input) {
                return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
            },
            isoWeeksInYear: function () {
                return weeksInYear(this.year(), 1, 4);
            },
            weeksInYear: function () {
                var weekInfo = this._lang._week;
                return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
            },
            get: function (units) {
                units = normalizeUnits(units);
                return this[units]();
            },
            set: function (units, value) {
                units = normalizeUnits(units);
                if (typeof this[units] === 'function') {
                    this[units](value);
                }
                return this;
            },
            lang: function (key) {
                if (key === undefined) {
                    return this._lang;
                } else {
                    this._lang = getLangDefinition(key);
                    return this;
                }
            }
        });
        function rawMonthSetter(mom, value) {
            var dayOfMonth;
            if (typeof value === 'string') {
                value = mom.lang().monthsParse(value);
                if (typeof value !== 'number') {
                    return mom;
                }
            }
            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
            return mom;
        }
        function rawGetter(mom, unit) {
            return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
        }
        function rawSetter(mom, unit, value) {
            if (unit === 'Month') {
                return rawMonthSetter(mom, value);
            } else {
                return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
        function makeAccessor(unit, keepTime) {
            return function (value) {
                if (value != null) {
                    rawSetter(this, unit, value);
                    moment.updateOffset(this, keepTime);
                    return this;
                } else {
                    return rawGetter(this, unit);
                }
            };
        }
        moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
        moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
        moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
        moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
        moment.fn.date = makeAccessor('Date', true);
        moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
        moment.fn.year = makeAccessor('FullYear', true);
        moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));
        moment.fn.days = moment.fn.day;
        moment.fn.months = moment.fn.month;
        moment.fn.weeks = moment.fn.week;
        moment.fn.isoWeeks = moment.fn.isoWeek;
        moment.fn.quarters = moment.fn.quarter;
        moment.fn.toJSON = moment.fn.toISOString;
        extend(moment.duration.fn = Duration.prototype, {
            _bubble: function () {
                var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years;
                data.milliseconds = milliseconds % 1000;
                seconds = absRound(milliseconds / 1000);
                data.seconds = seconds % 60;
                minutes = absRound(seconds / 60);
                data.minutes = minutes % 60;
                hours = absRound(minutes / 60);
                data.hours = hours % 24;
                days += absRound(hours / 24);
                data.days = days % 30;
                months += absRound(days / 30);
                data.months = months % 12;
                years = absRound(months / 12);
                data.years = years;
            },
            weeks: function () {
                return absRound(this.days() / 7);
            },
            valueOf: function () {
                return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000;
            },
            humanize: function (withSuffix) {
                var difference = +this, output = relativeTime(difference, !withSuffix, this.lang());
                if (withSuffix) {
                    output = this.lang().pastFuture(difference, output);
                }
                return this.lang().postformat(output);
            },
            add: function (input, val) {
                var dur = moment.duration(input, val);
                this._milliseconds += dur._milliseconds;
                this._days += dur._days;
                this._months += dur._months;
                this._bubble();
                return this;
            },
            subtract: function (input, val) {
                var dur = moment.duration(input, val);
                this._milliseconds -= dur._milliseconds;
                this._days -= dur._days;
                this._months -= dur._months;
                this._bubble();
                return this;
            },
            get: function (units) {
                units = normalizeUnits(units);
                return this[units.toLowerCase() + 's']();
            },
            as: function (units) {
                units = normalizeUnits(units);
                return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();
            },
            lang: moment.fn.lang,
            toIsoString: function () {
                var years = Math.abs(this.years()), months = Math.abs(this.months()), days = Math.abs(this.days()), hours = Math.abs(this.hours()), minutes = Math.abs(this.minutes()), seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);
                if (!this.asSeconds()) {
                    return 'P0D';
                }
                return (this.asSeconds() < 0 ? '-' : '') + 'P' + (years ? years + 'Y' : '') + (months ? months + 'M' : '') + (days ? days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hours + 'H' : '') + (minutes ? minutes + 'M' : '') + (seconds ? seconds + 'S' : '');
            }
        });
        function makeDurationGetter(name) {
            moment.duration.fn[name] = function () {
                return this._data[name];
            };
        }
        function makeDurationAsGetter(name, factor) {
            moment.duration.fn['as' + name] = function () {
                return +this / factor;
            };
        }
        for (i in unitMillisecondFactors) {
            if (unitMillisecondFactors.hasOwnProperty(i)) {
                makeDurationAsGetter(i, unitMillisecondFactors[i]);
                makeDurationGetter(i.toLowerCase());
            }
        }
        makeDurationAsGetter('Weeks', 604800000);
        moment.duration.fn.asMonths = function () {
            return (+this - this.years() * 31536000000) / 2592000000 + this.years() * 12;
        };
        moment.lang('en', {
            ordinal: function (number) {
                var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
                return number + output;
            }
        });
        function makeGlobal(shouldDeprecate) {
            if (typeof ender !== 'undefined') {
                return;
            }
            oldGlobalMoment = globalScope.moment;
            if (shouldDeprecate) {
                globalScope.moment = deprecate('Accessing Moment through the global scope is ' + 'deprecated, and will be removed in an upcoming ' + 'release.', moment);
            } else {
                globalScope.moment = moment;
            }
        }
        if (hasModule) {
            module.exports = moment;
        }
    }.call(this));
});

define('moment', ['moment/moment'], function (main) { return main; });

define('mini-event/main', [
    'require',
    './Event'
], function (require) {
    var Event = require('./Event');
    return {
        version: '1.0.2',
        Event: Event,
        fromDOMEvent: Event.fromDOMEvent,
        fromEvent: Event.fromEvent,
        delegate: Event.delegate
    };
});

define('mini-event', ['mini-event/main'], function (main) { return main; });

define('mini-event/EventQueue', [
    'require',
    './lib'
], function (require) {
    var lib = require('./lib');
    function isContextIdentical(context, handler, thisObject) {
        return context && context.handler === handler && context.thisObject == thisObject;
    }
    function EventQueue() {
        this.queue = [];
    }
    EventQueue.prototype.add = function (handler, options) {
        if (handler !== false && typeof handler !== 'function') {
            throw new Error('event handler must be a function or const false');
        }
        var wrapper = { handler: handler };
        lib.extend(wrapper, options);
        for (var i = 0; i < this.queue.length; i++) {
            var context = this.queue[i];
            if (isContextIdentical(context, handler, wrapper.thisObject)) {
                return;
            }
        }
        this.queue.push(wrapper);
    };
    EventQueue.prototype.remove = function (handler, thisObject) {
        if (!handler) {
            this.clear();
            return;
        }
        for (var i = 0; i < this.queue.length; i++) {
            var context = this.queue[i];
            if (isContextIdentical(context, handler, thisObject)) {
                this.queue[i] = null;
                return;
            }
        }
    };
    EventQueue.prototype.clear = function () {
        this.queue.length = 0;
    };
    EventQueue.prototype.execute = function (event, thisObject) {
        var queue = this.queue;
        for (var i = 0; i < queue.length; i++) {
            if (typeof event.isImmediatePropagationStopped === 'function' && event.isImmediatePropagationStopped()) {
                return;
            }
            var context = queue[i];
            if (!context) {
                continue;
            }
            var handler = context.handler;
            if (handler === false) {
                if (typeof event.preventDefault === 'function') {
                    event.preventDefault();
                }
                if (typeof event.stopPropagation === 'function') {
                    event.stopPropagation();
                }
            } else {
                handler.call(context.thisObject || thisObject, event);
            }
            if (context.once) {
                this.remove(context.handler, context.thisObject);
            }
        }
    };
    EventQueue.prototype.getLength = function () {
        var count = 0;
        for (var i = 0; i < this.queue.length; i++) {
            if (this.queue[i]) {
                count++;
            }
        }
        return count;
    };
    EventQueue.prototype.length = EventQueue.prototype.getLength;
    EventQueue.prototype.dispose = function () {
        this.clear();
        this.queue = null;
    };
    return EventQueue;
});

define('mini-event/Event', [
    'require',
    './lib'
], function (require) {
    var lib = require('./lib');
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    function isObject(target) {
        return Object.prototype.toString.call(target) === '[object Object]';
    }
    function Event(type, args) {
        if (typeof type === 'object') {
            args = type;
            type = args.type;
        }
        if (isObject(args)) {
            lib.extend(this, args);
        } else if (args) {
            this.data = args;
        }
        if (type) {
            this.type = type;
        }
    }
    Event.prototype.isDefaultPrevented = returnFalse;
    Event.prototype.preventDefault = function () {
        this.isDefaultPrevented = returnTrue;
    };
    Event.prototype.isPropagationStopped = returnFalse;
    Event.prototype.stopPropagation = function () {
        this.isPropagationStopped = returnTrue;
    };
    Event.prototype.isImmediatePropagationStopped = returnFalse;
    Event.prototype.stopImmediatePropagation = function () {
        this.isImmediatePropagationStopped = returnTrue;
        this.stopPropagation();
    };
    var globalWindow = function () {
        return this;
    }();
    Event.fromDOMEvent = function (domEvent, type, args) {
        domEvent = domEvent || globalWindow.event;
        var event = new Event(type, args);
        event.preventDefault = function () {
            if (domEvent.preventDefault) {
                domEvent.preventDefault();
            } else {
                domEvent.returnValue = false;
            }
            Event.prototype.preventDefault.call(this);
        };
        event.stopPropagation = function () {
            if (domEvent.stopPropagation) {
                domEvent.stopPropagation();
            } else {
                domEvent.cancelBubble = true;
            }
            Event.prototype.stopPropagation.call(this);
        };
        event.stopImmediatePropagation = function () {
            if (domEvent.stopImmediatePropagation) {
                domEvent.stopImmediatePropagation();
            }
            Event.prototype.stopImmediatePropagation.call(this);
        };
        return event;
    };
    var EVENT_PROPERTY_BLACK_LIST = {
        type: true,
        target: true,
        preventDefault: true,
        isDefaultPrevented: true,
        stopPropagation: true,
        isPropagationStopped: true,
        stopImmediatePropagation: true,
        isImmediatePropagationStopped: true
    };
    Event.fromEvent = function (originalEvent, options) {
        var defaults = {
            type: originalEvent.type,
            preserveData: false,
            syncState: false
        };
        options = lib.extend(defaults, options);
        var newEvent = new Event(options.type);
        if (options.preserveData) {
            for (var key in originalEvent) {
                if (originalEvent.hasOwnProperty(key) && !EVENT_PROPERTY_BLACK_LIST.hasOwnProperty(key)) {
                    newEvent[key] = originalEvent[key];
                }
            }
        }
        if (options.extend) {
            lib.extend(newEvent, options.extend);
        }
        if (options.syncState) {
            newEvent.preventDefault = function () {
                originalEvent.preventDefault();
                Event.prototype.preventDefault.call(this);
            };
            newEvent.stopPropagation = function () {
                originalEvent.stopPropagation();
                Event.prototype.stopPropagation.call(this);
            };
            newEvent.stopImmediatePropagation = function () {
                originalEvent.stopImmediatePropagation();
                Event.prototype.stopImmediatePropagation.call(this);
            };
        }
        return newEvent;
    };
    Event.delegate = function (from, fromType, to, toType, options) {
        var useDifferentType = typeof fromType === 'string';
        var source = {
            object: from,
            type: useDifferentType ? fromType : to
        };
        var target = {
            object: useDifferentType ? to : fromType,
            type: useDifferentType ? toType : to
        };
        var config = useDifferentType ? options : toType;
        config = lib.extend({ preserveData: false }, config);
        if (typeof source.object.on !== 'function' || typeof target.object.on !== 'function' || typeof target.object.fire !== 'function') {
            return;
        }
        var delegator = function (originalEvent) {
            var event = Event.fromEvent(originalEvent, config);
            event.type = target.type;
            event.target = target.object;
            target.object.fire(target.type, event);
        };
        source.object.on(source.type, delegator);
    };
    return Event;
});

(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if (typeof define === 'function' && define.amd)
        define('fp/mapping.fp', [], factory);
    else if (typeof exports === 'object')
        exports['mapping'] = factory();
    else
        root['mapping'] = factory();
}(this, function () {
    return function (modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId])
                return installedModules[moduleId].exports;
            var module = installedModules[moduleId] = {
                exports: {},
                id: moduleId,
                loaded: false
            };
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.loaded = true;
            return module.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.p = '';
        return __webpack_require__(0);
    }([function (module, exports) {
            exports.aliasToReal = {
                'each': 'forEach',
                'eachRight': 'forEachRight',
                'entries': 'toPairs',
                'entriesIn': 'toPairsIn',
                'extend': 'assignIn',
                'extendAll': 'assignInAll',
                'extendAllWith': 'assignInAllWith',
                'extendWith': 'assignInWith',
                'first': 'head',
                'conforms': 'conformsTo',
                'matches': 'isMatch',
                'property': 'get',
                '__': 'placeholder',
                'F': 'stubFalse',
                'T': 'stubTrue',
                'all': 'every',
                'allPass': 'overEvery',
                'always': 'constant',
                'any': 'some',
                'anyPass': 'overSome',
                'apply': 'spread',
                'assoc': 'set',
                'assocPath': 'set',
                'complement': 'negate',
                'compose': 'flowRight',
                'contains': 'includes',
                'dissoc': 'unset',
                'dissocPath': 'unset',
                'dropLast': 'dropRight',
                'dropLastWhile': 'dropRightWhile',
                'equals': 'isEqual',
                'identical': 'eq',
                'indexBy': 'keyBy',
                'init': 'initial',
                'invertObj': 'invert',
                'juxt': 'over',
                'omitAll': 'omit',
                'nAry': 'ary',
                'path': 'get',
                'pathEq': 'matchesProperty',
                'pathOr': 'getOr',
                'paths': 'at',
                'pickAll': 'pick',
                'pipe': 'flow',
                'pluck': 'map',
                'prop': 'get',
                'propEq': 'matchesProperty',
                'propOr': 'getOr',
                'props': 'at',
                'symmetricDifference': 'xor',
                'symmetricDifferenceBy': 'xorBy',
                'symmetricDifferenceWith': 'xorWith',
                'takeLast': 'takeRight',
                'takeLastWhile': 'takeRightWhile',
                'unapply': 'rest',
                'unnest': 'flatten',
                'useWith': 'overArgs',
                'where': 'conformsTo',
                'whereEq': 'isMatch',
                'zipObj': 'zipObject'
            };
            exports.aryMethod = {
                '1': [
                    'assignAll',
                    'assignInAll',
                    'attempt',
                    'castArray',
                    'ceil',
                    'create',
                    'curry',
                    'curryRight',
                    'defaultsAll',
                    'defaultsDeepAll',
                    'floor',
                    'flow',
                    'flowRight',
                    'fromPairs',
                    'invert',
                    'iteratee',
                    'memoize',
                    'method',
                    'mergeAll',
                    'methodOf',
                    'mixin',
                    'nthArg',
                    'over',
                    'overEvery',
                    'overSome',
                    'rest',
                    'reverse',
                    'round',
                    'runInContext',
                    'spread',
                    'template',
                    'trim',
                    'trimEnd',
                    'trimStart',
                    'uniqueId',
                    'words',
                    'zipAll'
                ],
                '2': [
                    'add',
                    'after',
                    'ary',
                    'assign',
                    'assignAllWith',
                    'assignIn',
                    'assignInAllWith',
                    'at',
                    'before',
                    'bind',
                    'bindAll',
                    'bindKey',
                    'chunk',
                    'cloneDeepWith',
                    'cloneWith',
                    'concat',
                    'conformsTo',
                    'countBy',
                    'curryN',
                    'curryRightN',
                    'debounce',
                    'defaults',
                    'defaultsDeep',
                    'defaultTo',
                    'delay',
                    'difference',
                    'divide',
                    'drop',
                    'dropRight',
                    'dropRightWhile',
                    'dropWhile',
                    'endsWith',
                    'eq',
                    'every',
                    'filter',
                    'find',
                    'findIndex',
                    'findKey',
                    'findLast',
                    'findLastIndex',
                    'findLastKey',
                    'flatMap',
                    'flatMapDeep',
                    'flattenDepth',
                    'forEach',
                    'forEachRight',
                    'forIn',
                    'forInRight',
                    'forOwn',
                    'forOwnRight',
                    'get',
                    'groupBy',
                    'gt',
                    'gte',
                    'has',
                    'hasIn',
                    'includes',
                    'indexOf',
                    'intersection',
                    'invertBy',
                    'invoke',
                    'invokeMap',
                    'isEqual',
                    'isMatch',
                    'join',
                    'keyBy',
                    'lastIndexOf',
                    'lt',
                    'lte',
                    'map',
                    'mapKeys',
                    'mapValues',
                    'matchesProperty',
                    'maxBy',
                    'meanBy',
                    'merge',
                    'mergeAllWith',
                    'minBy',
                    'multiply',
                    'nth',
                    'omit',
                    'omitBy',
                    'overArgs',
                    'pad',
                    'padEnd',
                    'padStart',
                    'parseInt',
                    'partial',
                    'partialRight',
                    'partition',
                    'pick',
                    'pickBy',
                    'propertyOf',
                    'pull',
                    'pullAll',
                    'pullAt',
                    'random',
                    'range',
                    'rangeRight',
                    'rearg',
                    'reject',
                    'remove',
                    'repeat',
                    'restFrom',
                    'result',
                    'sampleSize',
                    'some',
                    'sortBy',
                    'sortedIndex',
                    'sortedIndexOf',
                    'sortedLastIndex',
                    'sortedLastIndexOf',
                    'sortedUniqBy',
                    'split',
                    'spreadFrom',
                    'startsWith',
                    'subtract',
                    'sumBy',
                    'take',
                    'takeRight',
                    'takeRightWhile',
                    'takeWhile',
                    'tap',
                    'throttle',
                    'thru',
                    'times',
                    'trimChars',
                    'trimCharsEnd',
                    'trimCharsStart',
                    'truncate',
                    'union',
                    'uniqBy',
                    'uniqWith',
                    'unset',
                    'unzipWith',
                    'without',
                    'wrap',
                    'xor',
                    'zip',
                    'zipObject',
                    'zipObjectDeep'
                ],
                '3': [
                    'assignInWith',
                    'assignWith',
                    'clamp',
                    'differenceBy',
                    'differenceWith',
                    'findFrom',
                    'findIndexFrom',
                    'findLastFrom',
                    'findLastIndexFrom',
                    'getOr',
                    'includesFrom',
                    'indexOfFrom',
                    'inRange',
                    'intersectionBy',
                    'intersectionWith',
                    'invokeArgs',
                    'invokeArgsMap',
                    'isEqualWith',
                    'isMatchWith',
                    'flatMapDepth',
                    'lastIndexOfFrom',
                    'mergeWith',
                    'orderBy',
                    'padChars',
                    'padCharsEnd',
                    'padCharsStart',
                    'pullAllBy',
                    'pullAllWith',
                    'rangeStep',
                    'rangeStepRight',
                    'reduce',
                    'reduceRight',
                    'replace',
                    'set',
                    'slice',
                    'sortedIndexBy',
                    'sortedLastIndexBy',
                    'transform',
                    'unionBy',
                    'unionWith',
                    'update',
                    'xorBy',
                    'xorWith',
                    'zipWith'
                ],
                '4': [
                    'fill',
                    'setWith',
                    'updateWith'
                ]
            };
            exports.aryRearg = {
                '2': [
                    1,
                    0
                ],
                '3': [
                    2,
                    0,
                    1
                ],
                '4': [
                    3,
                    2,
                    0,
                    1
                ]
            };
            exports.iterateeAry = {
                'dropRightWhile': 1,
                'dropWhile': 1,
                'every': 1,
                'filter': 1,
                'find': 1,
                'findFrom': 1,
                'findIndex': 1,
                'findIndexFrom': 1,
                'findKey': 1,
                'findLast': 1,
                'findLastFrom': 1,
                'findLastIndex': 1,
                'findLastIndexFrom': 1,
                'findLastKey': 1,
                'flatMap': 1,
                'flatMapDeep': 1,
                'flatMapDepth': 1,
                'forEach': 1,
                'forEachRight': 1,
                'forIn': 1,
                'forInRight': 1,
                'forOwn': 1,
                'forOwnRight': 1,
                'map': 1,
                'mapKeys': 1,
                'mapValues': 1,
                'partition': 1,
                'reduce': 2,
                'reduceRight': 2,
                'reject': 1,
                'remove': 1,
                'some': 1,
                'takeRightWhile': 1,
                'takeWhile': 1,
                'times': 1,
                'transform': 2
            };
            exports.iterateeRearg = {
                'mapKeys': [1],
                'reduceRight': [
                    1,
                    0
                ]
            };
            exports.methodRearg = {
                'assignInAllWith': [
                    1,
                    0
                ],
                'assignInWith': [
                    1,
                    2,
                    0
                ],
                'assignAllWith': [
                    1,
                    0
                ],
                'assignWith': [
                    1,
                    2,
                    0
                ],
                'differenceBy': [
                    1,
                    2,
                    0
                ],
                'differenceWith': [
                    1,
                    2,
                    0
                ],
                'getOr': [
                    2,
                    1,
                    0
                ],
                'intersectionBy': [
                    1,
                    2,
                    0
                ],
                'intersectionWith': [
                    1,
                    2,
                    0
                ],
                'isEqualWith': [
                    1,
                    2,
                    0
                ],
                'isMatchWith': [
                    2,
                    1,
                    0
                ],
                'mergeAllWith': [
                    1,
                    0
                ],
                'mergeWith': [
                    1,
                    2,
                    0
                ],
                'padChars': [
                    2,
                    1,
                    0
                ],
                'padCharsEnd': [
                    2,
                    1,
                    0
                ],
                'padCharsStart': [
                    2,
                    1,
                    0
                ],
                'pullAllBy': [
                    2,
                    1,
                    0
                ],
                'pullAllWith': [
                    2,
                    1,
                    0
                ],
                'rangeStep': [
                    1,
                    2,
                    0
                ],
                'rangeStepRight': [
                    1,
                    2,
                    0
                ],
                'setWith': [
                    3,
                    1,
                    2,
                    0
                ],
                'sortedIndexBy': [
                    2,
                    1,
                    0
                ],
                'sortedLastIndexBy': [
                    2,
                    1,
                    0
                ],
                'unionBy': [
                    1,
                    2,
                    0
                ],
                'unionWith': [
                    1,
                    2,
                    0
                ],
                'updateWith': [
                    3,
                    1,
                    2,
                    0
                ],
                'xorBy': [
                    1,
                    2,
                    0
                ],
                'xorWith': [
                    1,
                    2,
                    0
                ],
                'zipWith': [
                    1,
                    2,
                    0
                ]
            };
            exports.methodSpread = {
                'assignAll': { 'start': 0 },
                'assignAllWith': { 'start': 0 },
                'assignInAll': { 'start': 0 },
                'assignInAllWith': { 'start': 0 },
                'defaultsAll': { 'start': 0 },
                'defaultsDeepAll': { 'start': 0 },
                'invokeArgs': { 'start': 2 },
                'invokeArgsMap': { 'start': 2 },
                'mergeAll': { 'start': 0 },
                'mergeAllWith': { 'start': 0 },
                'partial': { 'start': 1 },
                'partialRight': { 'start': 1 },
                'without': { 'start': 1 },
                'zipAll': { 'start': 0 }
            };
            exports.mutate = {
                'array': {
                    'fill': true,
                    'pull': true,
                    'pullAll': true,
                    'pullAllBy': true,
                    'pullAllWith': true,
                    'pullAt': true,
                    'remove': true,
                    'reverse': true
                },
                'object': {
                    'assign': true,
                    'assignAll': true,
                    'assignAllWith': true,
                    'assignIn': true,
                    'assignInAll': true,
                    'assignInAllWith': true,
                    'assignInWith': true,
                    'assignWith': true,
                    'defaults': true,
                    'defaultsAll': true,
                    'defaultsDeep': true,
                    'defaultsDeepAll': true,
                    'merge': true,
                    'mergeAll': true,
                    'mergeAllWith': true,
                    'mergeWith': true
                },
                'set': {
                    'set': true,
                    'setWith': true,
                    'unset': true,
                    'update': true,
                    'updateWith': true
                }
            };
            exports.placeholder = {
                'bind': true,
                'bindKey': true,
                'curry': true,
                'curryRight': true,
                'partial': true,
                'partialRight': true
            };
            exports.realToAlias = function () {
                var hasOwnProperty = Object.prototype.hasOwnProperty, object = exports.aliasToReal, result = {};
                for (var key in object) {
                    var value = object[key];
                    if (hasOwnProperty.call(result, value)) {
                        result[value].push(key);
                    } else {
                        result[value] = [key];
                    }
                }
                return result;
            }();
            exports.remap = {
                'assignAll': 'assign',
                'assignAllWith': 'assignWith',
                'assignInAll': 'assignIn',
                'assignInAllWith': 'assignInWith',
                'curryN': 'curry',
                'curryRightN': 'curryRight',
                'defaultsAll': 'defaults',
                'defaultsDeepAll': 'defaultsDeep',
                'findFrom': 'find',
                'findIndexFrom': 'findIndex',
                'findLastFrom': 'findLast',
                'findLastIndexFrom': 'findLastIndex',
                'getOr': 'get',
                'includesFrom': 'includes',
                'indexOfFrom': 'indexOf',
                'invokeArgs': 'invoke',
                'invokeArgsMap': 'invokeMap',
                'lastIndexOfFrom': 'lastIndexOf',
                'mergeAll': 'merge',
                'mergeAllWith': 'mergeWith',
                'padChars': 'pad',
                'padCharsEnd': 'padEnd',
                'padCharsStart': 'padStart',
                'propertyOf': 'get',
                'rangeStep': 'range',
                'rangeStepRight': 'rangeRight',
                'restFrom': 'rest',
                'spreadFrom': 'spread',
                'trimChars': 'trim',
                'trimCharsEnd': 'trimEnd',
                'trimCharsStart': 'trimStart',
                'zipAll': 'zip'
            };
            exports.skipFixed = {
                'castArray': true,
                'flow': true,
                'flowRight': true,
                'iteratee': true,
                'mixin': true,
                'rearg': true,
                'runInContext': true
            };
            exports.skipRearg = {
                'add': true,
                'assign': true,
                'assignIn': true,
                'bind': true,
                'bindKey': true,
                'concat': true,
                'difference': true,
                'divide': true,
                'eq': true,
                'gt': true,
                'gte': true,
                'isEqual': true,
                'lt': true,
                'lte': true,
                'matchesProperty': true,
                'merge': true,
                'multiply': true,
                'overArgs': true,
                'partial': true,
                'partialRight': true,
                'propertyOf': true,
                'random': true,
                'range': true,
                'rangeRight': true,
                'subtract': true,
                'zip': true,
                'zipObject': true,
                'zipObjectDeep': true
            };
        }]);
}));
;

(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if (typeof define === 'function' && define.amd)
        define('lodash/mapping.fp', [], factory);
    else if (typeof exports === 'object')
        exports['mapping'] = factory();
    else
        root['mapping'] = factory();
}(this, function () {
    return function (modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId])
                return installedModules[moduleId].exports;
            var module = installedModules[moduleId] = {
                exports: {},
                id: moduleId,
                loaded: false
            };
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.loaded = true;
            return module.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.p = '';
        return __webpack_require__(0);
    }([function (module, exports) {
            exports.aliasToReal = {
                'each': 'forEach',
                'eachRight': 'forEachRight',
                'entries': 'toPairs',
                'entriesIn': 'toPairsIn',
                'extend': 'assignIn',
                'extendAll': 'assignInAll',
                'extendAllWith': 'assignInAllWith',
                'extendWith': 'assignInWith',
                'first': 'head',
                'conforms': 'conformsTo',
                'matches': 'isMatch',
                'property': 'get',
                '__': 'placeholder',
                'F': 'stubFalse',
                'T': 'stubTrue',
                'all': 'every',
                'allPass': 'overEvery',
                'always': 'constant',
                'any': 'some',
                'anyPass': 'overSome',
                'apply': 'spread',
                'assoc': 'set',
                'assocPath': 'set',
                'complement': 'negate',
                'compose': 'flowRight',
                'contains': 'includes',
                'dissoc': 'unset',
                'dissocPath': 'unset',
                'dropLast': 'dropRight',
                'dropLastWhile': 'dropRightWhile',
                'equals': 'isEqual',
                'identical': 'eq',
                'indexBy': 'keyBy',
                'init': 'initial',
                'invertObj': 'invert',
                'juxt': 'over',
                'omitAll': 'omit',
                'nAry': 'ary',
                'path': 'get',
                'pathEq': 'matchesProperty',
                'pathOr': 'getOr',
                'paths': 'at',
                'pickAll': 'pick',
                'pipe': 'flow',
                'pluck': 'map',
                'prop': 'get',
                'propEq': 'matchesProperty',
                'propOr': 'getOr',
                'props': 'at',
                'symmetricDifference': 'xor',
                'symmetricDifferenceBy': 'xorBy',
                'symmetricDifferenceWith': 'xorWith',
                'takeLast': 'takeRight',
                'takeLastWhile': 'takeRightWhile',
                'unapply': 'rest',
                'unnest': 'flatten',
                'useWith': 'overArgs',
                'where': 'conformsTo',
                'whereEq': 'isMatch',
                'zipObj': 'zipObject'
            };
            exports.aryMethod = {
                '1': [
                    'assignAll',
                    'assignInAll',
                    'attempt',
                    'castArray',
                    'ceil',
                    'create',
                    'curry',
                    'curryRight',
                    'defaultsAll',
                    'defaultsDeepAll',
                    'floor',
                    'flow',
                    'flowRight',
                    'fromPairs',
                    'invert',
                    'iteratee',
                    'memoize',
                    'method',
                    'mergeAll',
                    'methodOf',
                    'mixin',
                    'nthArg',
                    'over',
                    'overEvery',
                    'overSome',
                    'rest',
                    'reverse',
                    'round',
                    'runInContext',
                    'spread',
                    'template',
                    'trim',
                    'trimEnd',
                    'trimStart',
                    'uniqueId',
                    'words',
                    'zipAll'
                ],
                '2': [
                    'add',
                    'after',
                    'ary',
                    'assign',
                    'assignAllWith',
                    'assignIn',
                    'assignInAllWith',
                    'at',
                    'before',
                    'bind',
                    'bindAll',
                    'bindKey',
                    'chunk',
                    'cloneDeepWith',
                    'cloneWith',
                    'concat',
                    'conformsTo',
                    'countBy',
                    'curryN',
                    'curryRightN',
                    'debounce',
                    'defaults',
                    'defaultsDeep',
                    'defaultTo',
                    'delay',
                    'difference',
                    'divide',
                    'drop',
                    'dropRight',
                    'dropRightWhile',
                    'dropWhile',
                    'endsWith',
                    'eq',
                    'every',
                    'filter',
                    'find',
                    'findIndex',
                    'findKey',
                    'findLast',
                    'findLastIndex',
                    'findLastKey',
                    'flatMap',
                    'flatMapDeep',
                    'flattenDepth',
                    'forEach',
                    'forEachRight',
                    'forIn',
                    'forInRight',
                    'forOwn',
                    'forOwnRight',
                    'get',
                    'groupBy',
                    'gt',
                    'gte',
                    'has',
                    'hasIn',
                    'includes',
                    'indexOf',
                    'intersection',
                    'invertBy',
                    'invoke',
                    'invokeMap',
                    'isEqual',
                    'isMatch',
                    'join',
                    'keyBy',
                    'lastIndexOf',
                    'lt',
                    'lte',
                    'map',
                    'mapKeys',
                    'mapValues',
                    'matchesProperty',
                    'maxBy',
                    'meanBy',
                    'merge',
                    'mergeAllWith',
                    'minBy',
                    'multiply',
                    'nth',
                    'omit',
                    'omitBy',
                    'overArgs',
                    'pad',
                    'padEnd',
                    'padStart',
                    'parseInt',
                    'partial',
                    'partialRight',
                    'partition',
                    'pick',
                    'pickBy',
                    'propertyOf',
                    'pull',
                    'pullAll',
                    'pullAt',
                    'random',
                    'range',
                    'rangeRight',
                    'rearg',
                    'reject',
                    'remove',
                    'repeat',
                    'restFrom',
                    'result',
                    'sampleSize',
                    'some',
                    'sortBy',
                    'sortedIndex',
                    'sortedIndexOf',
                    'sortedLastIndex',
                    'sortedLastIndexOf',
                    'sortedUniqBy',
                    'split',
                    'spreadFrom',
                    'startsWith',
                    'subtract',
                    'sumBy',
                    'take',
                    'takeRight',
                    'takeRightWhile',
                    'takeWhile',
                    'tap',
                    'throttle',
                    'thru',
                    'times',
                    'trimChars',
                    'trimCharsEnd',
                    'trimCharsStart',
                    'truncate',
                    'union',
                    'uniqBy',
                    'uniqWith',
                    'unset',
                    'unzipWith',
                    'without',
                    'wrap',
                    'xor',
                    'zip',
                    'zipObject',
                    'zipObjectDeep'
                ],
                '3': [
                    'assignInWith',
                    'assignWith',
                    'clamp',
                    'differenceBy',
                    'differenceWith',
                    'findFrom',
                    'findIndexFrom',
                    'findLastFrom',
                    'findLastIndexFrom',
                    'getOr',
                    'includesFrom',
                    'indexOfFrom',
                    'inRange',
                    'intersectionBy',
                    'intersectionWith',
                    'invokeArgs',
                    'invokeArgsMap',
                    'isEqualWith',
                    'isMatchWith',
                    'flatMapDepth',
                    'lastIndexOfFrom',
                    'mergeWith',
                    'orderBy',
                    'padChars',
                    'padCharsEnd',
                    'padCharsStart',
                    'pullAllBy',
                    'pullAllWith',
                    'rangeStep',
                    'rangeStepRight',
                    'reduce',
                    'reduceRight',
                    'replace',
                    'set',
                    'slice',
                    'sortedIndexBy',
                    'sortedLastIndexBy',
                    'transform',
                    'unionBy',
                    'unionWith',
                    'update',
                    'xorBy',
                    'xorWith',
                    'zipWith'
                ],
                '4': [
                    'fill',
                    'setWith',
                    'updateWith'
                ]
            };
            exports.aryRearg = {
                '2': [
                    1,
                    0
                ],
                '3': [
                    2,
                    0,
                    1
                ],
                '4': [
                    3,
                    2,
                    0,
                    1
                ]
            };
            exports.iterateeAry = {
                'dropRightWhile': 1,
                'dropWhile': 1,
                'every': 1,
                'filter': 1,
                'find': 1,
                'findFrom': 1,
                'findIndex': 1,
                'findIndexFrom': 1,
                'findKey': 1,
                'findLast': 1,
                'findLastFrom': 1,
                'findLastIndex': 1,
                'findLastIndexFrom': 1,
                'findLastKey': 1,
                'flatMap': 1,
                'flatMapDeep': 1,
                'flatMapDepth': 1,
                'forEach': 1,
                'forEachRight': 1,
                'forIn': 1,
                'forInRight': 1,
                'forOwn': 1,
                'forOwnRight': 1,
                'map': 1,
                'mapKeys': 1,
                'mapValues': 1,
                'partition': 1,
                'reduce': 2,
                'reduceRight': 2,
                'reject': 1,
                'remove': 1,
                'some': 1,
                'takeRightWhile': 1,
                'takeWhile': 1,
                'times': 1,
                'transform': 2
            };
            exports.iterateeRearg = {
                'mapKeys': [1],
                'reduceRight': [
                    1,
                    0
                ]
            };
            exports.methodRearg = {
                'assignInAllWith': [
                    1,
                    0
                ],
                'assignInWith': [
                    1,
                    2,
                    0
                ],
                'assignAllWith': [
                    1,
                    0
                ],
                'assignWith': [
                    1,
                    2,
                    0
                ],
                'differenceBy': [
                    1,
                    2,
                    0
                ],
                'differenceWith': [
                    1,
                    2,
                    0
                ],
                'getOr': [
                    2,
                    1,
                    0
                ],
                'intersectionBy': [
                    1,
                    2,
                    0
                ],
                'intersectionWith': [
                    1,
                    2,
                    0
                ],
                'isEqualWith': [
                    1,
                    2,
                    0
                ],
                'isMatchWith': [
                    2,
                    1,
                    0
                ],
                'mergeAllWith': [
                    1,
                    0
                ],
                'mergeWith': [
                    1,
                    2,
                    0
                ],
                'padChars': [
                    2,
                    1,
                    0
                ],
                'padCharsEnd': [
                    2,
                    1,
                    0
                ],
                'padCharsStart': [
                    2,
                    1,
                    0
                ],
                'pullAllBy': [
                    2,
                    1,
                    0
                ],
                'pullAllWith': [
                    2,
                    1,
                    0
                ],
                'rangeStep': [
                    1,
                    2,
                    0
                ],
                'rangeStepRight': [
                    1,
                    2,
                    0
                ],
                'setWith': [
                    3,
                    1,
                    2,
                    0
                ],
                'sortedIndexBy': [
                    2,
                    1,
                    0
                ],
                'sortedLastIndexBy': [
                    2,
                    1,
                    0
                ],
                'unionBy': [
                    1,
                    2,
                    0
                ],
                'unionWith': [
                    1,
                    2,
                    0
                ],
                'updateWith': [
                    3,
                    1,
                    2,
                    0
                ],
                'xorBy': [
                    1,
                    2,
                    0
                ],
                'xorWith': [
                    1,
                    2,
                    0
                ],
                'zipWith': [
                    1,
                    2,
                    0
                ]
            };
            exports.methodSpread = {
                'assignAll': { 'start': 0 },
                'assignAllWith': { 'start': 0 },
                'assignInAll': { 'start': 0 },
                'assignInAllWith': { 'start': 0 },
                'defaultsAll': { 'start': 0 },
                'defaultsDeepAll': { 'start': 0 },
                'invokeArgs': { 'start': 2 },
                'invokeArgsMap': { 'start': 2 },
                'mergeAll': { 'start': 0 },
                'mergeAllWith': { 'start': 0 },
                'partial': { 'start': 1 },
                'partialRight': { 'start': 1 },
                'without': { 'start': 1 },
                'zipAll': { 'start': 0 }
            };
            exports.mutate = {
                'array': {
                    'fill': true,
                    'pull': true,
                    'pullAll': true,
                    'pullAllBy': true,
                    'pullAllWith': true,
                    'pullAt': true,
                    'remove': true,
                    'reverse': true
                },
                'object': {
                    'assign': true,
                    'assignAll': true,
                    'assignAllWith': true,
                    'assignIn': true,
                    'assignInAll': true,
                    'assignInAllWith': true,
                    'assignInWith': true,
                    'assignWith': true,
                    'defaults': true,
                    'defaultsAll': true,
                    'defaultsDeep': true,
                    'defaultsDeepAll': true,
                    'merge': true,
                    'mergeAll': true,
                    'mergeAllWith': true,
                    'mergeWith': true
                },
                'set': {
                    'set': true,
                    'setWith': true,
                    'unset': true,
                    'update': true,
                    'updateWith': true
                }
            };
            exports.placeholder = {
                'bind': true,
                'bindKey': true,
                'curry': true,
                'curryRight': true,
                'partial': true,
                'partialRight': true
            };
            exports.realToAlias = function () {
                var hasOwnProperty = Object.prototype.hasOwnProperty, object = exports.aliasToReal, result = {};
                for (var key in object) {
                    var value = object[key];
                    if (hasOwnProperty.call(result, value)) {
                        result[value].push(key);
                    } else {
                        result[value] = [key];
                    }
                }
                return result;
            }();
            exports.remap = {
                'assignAll': 'assign',
                'assignAllWith': 'assignWith',
                'assignInAll': 'assignIn',
                'assignInAllWith': 'assignInWith',
                'curryN': 'curry',
                'curryRightN': 'curryRight',
                'defaultsAll': 'defaults',
                'defaultsDeepAll': 'defaultsDeep',
                'findFrom': 'find',
                'findIndexFrom': 'findIndex',
                'findLastFrom': 'findLast',
                'findLastIndexFrom': 'findLastIndex',
                'getOr': 'get',
                'includesFrom': 'includes',
                'indexOfFrom': 'indexOf',
                'invokeArgs': 'invoke',
                'invokeArgsMap': 'invokeMap',
                'lastIndexOfFrom': 'lastIndexOf',
                'mergeAll': 'merge',
                'mergeAllWith': 'mergeWith',
                'padChars': 'pad',
                'padCharsEnd': 'padEnd',
                'padCharsStart': 'padStart',
                'propertyOf': 'get',
                'rangeStep': 'range',
                'rangeStepRight': 'rangeRight',
                'restFrom': 'rest',
                'spreadFrom': 'spread',
                'trimChars': 'trim',
                'trimCharsEnd': 'trimEnd',
                'trimCharsStart': 'trimStart',
                'zipAll': 'zip'
            };
            exports.skipFixed = {
                'castArray': true,
                'flow': true,
                'flowRight': true,
                'iteratee': true,
                'mixin': true,
                'rearg': true,
                'runInContext': true
            };
            exports.skipRearg = {
                'add': true,
                'assign': true,
                'assignIn': true,
                'bind': true,
                'bindKey': true,
                'concat': true,
                'difference': true,
                'divide': true,
                'eq': true,
                'gt': true,
                'gte': true,
                'isEqual': true,
                'lt': true,
                'lte': true,
                'matchesProperty': true,
                'merge': true,
                'multiply': true,
                'overArgs': true,
                'partial': true,
                'partialRight': true,
                'propertyOf': true,
                'random': true,
                'range': true,
                'rangeRight': true,
                'subtract': true,
                'zip': true,
                'zipObject': true,
                'zipObjectDeep': true
            };
        }]);
}));
;

;
(function () {
    function n(n, t) {
        return n.set(t[0], t[1]), n;
    }
    function t(n, t) {
        return n.add(t), n;
    }
    function r(n, t, r) {
        switch (r.length) {
        case 0:
            return n.call(t);
        case 1:
            return n.call(t, r[0]);
        case 2:
            return n.call(t, r[0], r[1]);
        case 3:
            return n.call(t, r[0], r[1], r[2]);
        }
        return n.apply(t, r);
    }
    function e(n, t, r, e) {
        for (var u = -1, i = null == n ? 0 : n.length; ++u < i;) {
            var o = n[u];
            t(e, o, r(o), n);
        }
        return e;
    }
    function u(n, t) {
        for (var r = -1, e = null == n ? 0 : n.length; ++r < e && false !== t(n[r], r, n););
        return n;
    }
    function i(n, t) {
        for (var r = null == n ? 0 : n.length; r-- && false !== t(n[r], r, n););
        return n;
    }
    function o(n, t) {
        for (var r = -1, e = null == n ? 0 : n.length; ++r < e;)
            if (!t(n[r], r, n))
                return false;
        return true;
    }
    function f(n, t) {
        for (var r = -1, e = null == n ? 0 : n.length, u = 0, i = []; ++r < e;) {
            var o = n[r];
            t(o, r, n) && (i[u++] = o);
        }
        return i;
    }
    function c(n, t) {
        return !(null == n || !n.length) && -1 < d(n, t, 0);
    }
    function a(n, t, r) {
        for (var e = -1, u = null == n ? 0 : n.length; ++e < u;)
            if (r(t, n[e]))
                return true;
        return false;
    }
    function l(n, t) {
        for (var r = -1, e = null == n ? 0 : n.length, u = Array(e); ++r < e;)
            u[r] = t(n[r], r, n);
        return u;
    }
    function s(n, t) {
        for (var r = -1, e = t.length, u = n.length; ++r < e;)
            n[u + r] = t[r];
        return n;
    }
    function h(n, t, r, e) {
        var u = -1, i = null == n ? 0 : n.length;
        for (e && i && (r = n[++u]); ++u < i;)
            r = t(r, n[u], u, n);
        return r;
    }
    function p(n, t, r, e) {
        var u = null == n ? 0 : n.length;
        for (e && u && (r = n[--u]); u--;)
            r = t(r, n[u], u, n);
        return r;
    }
    function _(n, t) {
        for (var r = -1, e = null == n ? 0 : n.length; ++r < e;)
            if (t(n[r], r, n))
                return true;
        return false;
    }
    function v(n, t, r) {
        var e;
        return r(n, function (n, r, u) {
            if (t(n, r, u))
                return e = r, false;
        }), e;
    }
    function g(n, t, r, e) {
        var u = n.length;
        for (r += e ? 1 : -1; e ? r-- : ++r < u;)
            if (t(n[r], r, n))
                return r;
        return -1;
    }
    function d(n, t, r) {
        if (t === t)
            n: {
                --r;
                for (var e = n.length; ++r < e;)
                    if (n[r] === t) {
                        n = r;
                        break n;
                    }
                n = -1;
            }
        else
            n = g(n, b, r);
        return n;
    }
    function y(n, t, r, e) {
        --r;
        for (var u = n.length; ++r < u;)
            if (e(n[r], t))
                return r;
        return -1;
    }
    function b(n) {
        return n !== n;
    }
    function x(n, t) {
        var r = null == n ? 0 : n.length;
        return r ? k(n, t) / r : P;
    }
    function j(n) {
        return function (t) {
            return null == t ? F : t[n];
        };
    }
    function w(n) {
        return function (t) {
            return null == n ? F : n[t];
        };
    }
    function m(n, t, r, e, u) {
        return u(n, function (n, u, i) {
            r = e ? (e = false, n) : t(r, n, u, i);
        }), r;
    }
    function A(n, t) {
        var r = n.length;
        for (n.sort(t); r--;)
            n[r] = n[r].c;
        return n;
    }
    function k(n, t) {
        for (var r, e = -1, u = n.length; ++e < u;) {
            var i = t(n[e]);
            i !== F && (r = r === F ? i : r + i);
        }
        return r;
    }
    function E(n, t) {
        for (var r = -1, e = Array(n); ++r < n;)
            e[r] = t(r);
        return e;
    }
    function O(n, t) {
        return l(t, function (t) {
            return [
                t,
                n[t]
            ];
        });
    }
    function S(n) {
        return function (t) {
            return n(t);
        };
    }
    function I(n, t) {
        return l(t, function (t) {
            return n[t];
        });
    }
    function R(n, t) {
        return n.has(t);
    }
    function z(n, t) {
        for (var r = -1, e = n.length; ++r < e && -1 < d(t, n[r], 0););
        return r;
    }
    function W(n, t) {
        for (var r = n.length; r-- && -1 < d(t, n[r], 0););
        return r;
    }
    function B(n) {
        return '\\' + Tn[n];
    }
    function L(n) {
        var t = -1, r = Array(n.size);
        return n.forEach(function (n, e) {
            r[++t] = [
                e,
                n
            ];
        }), r;
    }
    function U(n, t) {
        return function (r) {
            return n(t(r));
        };
    }
    function C(n, t) {
        for (var r = -1, e = n.length, u = 0, i = []; ++r < e;) {
            var o = n[r];
            o !== t && '__lodash_placeholder__' !== o || (n[r] = '__lodash_placeholder__', i[u++] = r);
        }
        return i;
    }
    function D(n) {
        var t = -1, r = Array(n.size);
        return n.forEach(function (n) {
            r[++t] = n;
        }), r;
    }
    function M(n) {
        var t = -1, r = Array(n.size);
        return n.forEach(function (n) {
            r[++t] = [
                n,
                n
            ];
        }), r;
    }
    function T(n) {
        if (Bn.test(n)) {
            for (var t = zn.lastIndex = 0; zn.test(n);)
                ++t;
            n = t;
        } else
            n = tt(n);
        return n;
    }
    function $(n) {
        return Bn.test(n) ? n.match(zn) || [] : n.split('');
    }
    var F, N = 1 / 0, P = NaN, Z = [
            [
                'ary',
                128
            ],
            [
                'bind',
                1
            ],
            [
                'bindKey',
                2
            ],
            [
                'curry',
                8
            ],
            [
                'curryRight',
                16
            ],
            [
                'flip',
                512
            ],
            [
                'partial',
                32
            ],
            [
                'partialRight',
                64
            ],
            [
                'rearg',
                256
            ]
        ], q = /\b__p\+='';/g, V = /\b(__p\+=)''\+/g, K = /(__e\(.*?\)|\b__t\))\+'';/g, G = /&(?:amp|lt|gt|quot|#39);/g, H = /[&<>"']/g, J = RegExp(G.source), Y = RegExp(H.source), Q = /<%-([\s\S]+?)%>/g, X = /<%([\s\S]+?)%>/g, nn = /<%=([\s\S]+?)%>/g, tn = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, rn = /^\w*$/, en = /^\./, un = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, on = /[\\^$.*+?()[\]{}|]/g, fn = RegExp(on.source), cn = /^\s+|\s+$/g, an = /^\s+/, ln = /\s+$/, sn = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, hn = /\{\n\/\* \[wrapped with (.+)\] \*/, pn = /,? & /, _n = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, vn = /\\(\\)?/g, gn = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, dn = /\w*$/, yn = /^[-+]0x[0-9a-f]+$/i, bn = /^0b[01]+$/i, xn = /^\[object .+?Constructor\]$/, jn = /^0o[0-7]+$/i, wn = /^(?:0|[1-9]\d*)$/, mn = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, An = /($^)/, kn = /['\n\r\u2028\u2029\\]/g, En = '[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?)*', On = '(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])' + En, Sn = '(?:[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]?|[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff])', In = RegExp('[\'\u2019]', 'g'), Rn = RegExp('[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]', 'g'), zn = RegExp('\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|' + Sn + En, 'g'), Wn = RegExp([
            '[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:[\'\u2019](?:d|ll|m|re|s|t|ve))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde]|$)|(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:[\'\u2019](?:D|LL|M|RE|S|T|VE))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])|$)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:[\'\u2019](?:d|ll|m|re|s|t|ve))?|[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:[\'\u2019](?:D|LL|M|RE|S|T|VE))?|\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)|\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)|\\d+',
            On
        ].join('|'), 'g'), Bn = RegExp('[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]'), Ln = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, Un = 'Array Buffer DataView Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Math Object Promise RegExp Set String Symbol TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap _ clearTimeout isFinite parseInt setTimeout'.split(' '), Cn = {};
    Cn['[object Float32Array]'] = Cn['[object Float64Array]'] = Cn['[object Int8Array]'] = Cn['[object Int16Array]'] = Cn['[object Int32Array]'] = Cn['[object Uint8Array]'] = Cn['[object Uint8ClampedArray]'] = Cn['[object Uint16Array]'] = Cn['[object Uint32Array]'] = true, Cn['[object Arguments]'] = Cn['[object Array]'] = Cn['[object ArrayBuffer]'] = Cn['[object Boolean]'] = Cn['[object DataView]'] = Cn['[object Date]'] = Cn['[object Error]'] = Cn['[object Function]'] = Cn['[object Map]'] = Cn['[object Number]'] = Cn['[object Object]'] = Cn['[object RegExp]'] = Cn['[object Set]'] = Cn['[object String]'] = Cn['[object WeakMap]'] = false;
    var Dn = {};
    Dn['[object Arguments]'] = Dn['[object Array]'] = Dn['[object ArrayBuffer]'] = Dn['[object DataView]'] = Dn['[object Boolean]'] = Dn['[object Date]'] = Dn['[object Float32Array]'] = Dn['[object Float64Array]'] = Dn['[object Int8Array]'] = Dn['[object Int16Array]'] = Dn['[object Int32Array]'] = Dn['[object Map]'] = Dn['[object Number]'] = Dn['[object Object]'] = Dn['[object RegExp]'] = Dn['[object Set]'] = Dn['[object String]'] = Dn['[object Symbol]'] = Dn['[object Uint8Array]'] = Dn['[object Uint8ClampedArray]'] = Dn['[object Uint16Array]'] = Dn['[object Uint32Array]'] = true, Dn['[object Error]'] = Dn['[object Function]'] = Dn['[object WeakMap]'] = false;
    var Mn, Tn = {
            '\\': '\\',
            '\'': '\'',
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        }, $n = parseFloat, Fn = parseInt, Nn = typeof global == 'object' && global && global.Object === Object && global, Pn = typeof self == 'object' && self && self.Object === Object && self, Zn = Nn || Pn || Function('return this')(), qn = typeof exports == 'object' && exports && !exports.nodeType && exports, Vn = qn && typeof module == 'object' && module && !module.nodeType && module, Kn = Vn && Vn.exports === qn, Gn = Kn && Nn.process;
    n: {
        try {
            Mn = Gn && Gn.binding && Gn.binding('util');
            break n;
        } catch (n) {
        }
        Mn = void 0;
    }
    var Hn = Mn && Mn.isArrayBuffer, Jn = Mn && Mn.isDate, Yn = Mn && Mn.isMap, Qn = Mn && Mn.isRegExp, Xn = Mn && Mn.isSet, nt = Mn && Mn.isTypedArray, tt = j('length'), rt = w({
            '\xC0': 'A',
            '\xC1': 'A',
            '\xC2': 'A',
            '\xC3': 'A',
            '\xC4': 'A',
            '\xC5': 'A',
            '\xE0': 'a',
            '\xE1': 'a',
            '\xE2': 'a',
            '\xE3': 'a',
            '\xE4': 'a',
            '\xE5': 'a',
            '\xC7': 'C',
            '\xE7': 'c',
            '\xD0': 'D',
            '\xF0': 'd',
            '\xC8': 'E',
            '\xC9': 'E',
            '\xCA': 'E',
            '\xCB': 'E',
            '\xE8': 'e',
            '\xE9': 'e',
            '\xEA': 'e',
            '\xEB': 'e',
            '\xCC': 'I',
            '\xCD': 'I',
            '\xCE': 'I',
            '\xCF': 'I',
            '\xEC': 'i',
            '\xED': 'i',
            '\xEE': 'i',
            '\xEF': 'i',
            '\xD1': 'N',
            '\xF1': 'n',
            '\xD2': 'O',
            '\xD3': 'O',
            '\xD4': 'O',
            '\xD5': 'O',
            '\xD6': 'O',
            '\xD8': 'O',
            '\xF2': 'o',
            '\xF3': 'o',
            '\xF4': 'o',
            '\xF5': 'o',
            '\xF6': 'o',
            '\xF8': 'o',
            '\xD9': 'U',
            '\xDA': 'U',
            '\xDB': 'U',
            '\xDC': 'U',
            '\xF9': 'u',
            '\xFA': 'u',
            '\xFB': 'u',
            '\xFC': 'u',
            '\xDD': 'Y',
            '\xFD': 'y',
            '\xFF': 'y',
            '\xC6': 'Ae',
            '\xE6': 'ae',
            '\xDE': 'Th',
            '\xFE': 'th',
            '\xDF': 'ss',
            '\u0100': 'A',
            '\u0102': 'A',
            '\u0104': 'A',
            '\u0101': 'a',
            '\u0103': 'a',
            '\u0105': 'a',
            '\u0106': 'C',
            '\u0108': 'C',
            '\u010A': 'C',
            '\u010C': 'C',
            '\u0107': 'c',
            '\u0109': 'c',
            '\u010B': 'c',
            '\u010D': 'c',
            '\u010E': 'D',
            '\u0110': 'D',
            '\u010F': 'd',
            '\u0111': 'd',
            '\u0112': 'E',
            '\u0114': 'E',
            '\u0116': 'E',
            '\u0118': 'E',
            '\u011A': 'E',
            '\u0113': 'e',
            '\u0115': 'e',
            '\u0117': 'e',
            '\u0119': 'e',
            '\u011B': 'e',
            '\u011C': 'G',
            '\u011E': 'G',
            '\u0120': 'G',
            '\u0122': 'G',
            '\u011D': 'g',
            '\u011F': 'g',
            '\u0121': 'g',
            '\u0123': 'g',
            '\u0124': 'H',
            '\u0126': 'H',
            '\u0125': 'h',
            '\u0127': 'h',
            '\u0128': 'I',
            '\u012A': 'I',
            '\u012C': 'I',
            '\u012E': 'I',
            '\u0130': 'I',
            '\u0129': 'i',
            '\u012B': 'i',
            '\u012D': 'i',
            '\u012F': 'i',
            '\u0131': 'i',
            '\u0134': 'J',
            '\u0135': 'j',
            '\u0136': 'K',
            '\u0137': 'k',
            '\u0138': 'k',
            '\u0139': 'L',
            '\u013B': 'L',
            '\u013D': 'L',
            '\u013F': 'L',
            '\u0141': 'L',
            '\u013A': 'l',
            '\u013C': 'l',
            '\u013E': 'l',
            '\u0140': 'l',
            '\u0142': 'l',
            '\u0143': 'N',
            '\u0145': 'N',
            '\u0147': 'N',
            '\u014A': 'N',
            '\u0144': 'n',
            '\u0146': 'n',
            '\u0148': 'n',
            '\u014B': 'n',
            '\u014C': 'O',
            '\u014E': 'O',
            '\u0150': 'O',
            '\u014D': 'o',
            '\u014F': 'o',
            '\u0151': 'o',
            '\u0154': 'R',
            '\u0156': 'R',
            '\u0158': 'R',
            '\u0155': 'r',
            '\u0157': 'r',
            '\u0159': 'r',
            '\u015A': 'S',
            '\u015C': 'S',
            '\u015E': 'S',
            '\u0160': 'S',
            '\u015B': 's',
            '\u015D': 's',
            '\u015F': 's',
            '\u0161': 's',
            '\u0162': 'T',
            '\u0164': 'T',
            '\u0166': 'T',
            '\u0163': 't',
            '\u0165': 't',
            '\u0167': 't',
            '\u0168': 'U',
            '\u016A': 'U',
            '\u016C': 'U',
            '\u016E': 'U',
            '\u0170': 'U',
            '\u0172': 'U',
            '\u0169': 'u',
            '\u016B': 'u',
            '\u016D': 'u',
            '\u016F': 'u',
            '\u0171': 'u',
            '\u0173': 'u',
            '\u0174': 'W',
            '\u0175': 'w',
            '\u0176': 'Y',
            '\u0177': 'y',
            '\u0178': 'Y',
            '\u0179': 'Z',
            '\u017B': 'Z',
            '\u017D': 'Z',
            '\u017A': 'z',
            '\u017C': 'z',
            '\u017E': 'z',
            '\u0132': 'IJ',
            '\u0133': 'ij',
            '\u0152': 'Oe',
            '\u0153': 'oe',
            '\u0149': '\'n',
            '\u017F': 's'
        }), et = w({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            '\'': '&#39;'
        }), ut = w({
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': '\''
        }), it = function w(En) {
            function On(n) {
                if (xu(n) && !af(n) && !(n instanceof Mn)) {
                    if (n instanceof zn)
                        return n;
                    if (ci.call(n, '__wrapped__'))
                        return Pe(n);
                }
                return new zn(n);
            }
            function Sn() {
            }
            function zn(n, t) {
                this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = F;
            }
            function Mn(n) {
                this.__wrapped__ = n, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = false, this.__iteratees__ = [], this.__takeCount__ = 4294967295, this.__views__ = [];
            }
            function Tn(n) {
                var t = -1, r = null == n ? 0 : n.length;
                for (this.clear(); ++t < r;) {
                    var e = n[t];
                    this.set(e[0], e[1]);
                }
            }
            function Nn(n) {
                var t = -1, r = null == n ? 0 : n.length;
                for (this.clear(); ++t < r;) {
                    var e = n[t];
                    this.set(e[0], e[1]);
                }
            }
            function Pn(n) {
                var t = -1, r = null == n ? 0 : n.length;
                for (this.clear(); ++t < r;) {
                    var e = n[t];
                    this.set(e[0], e[1]);
                }
            }
            function qn(n) {
                var t = -1, r = null == n ? 0 : n.length;
                for (this.__data__ = new Pn(); ++t < r;)
                    this.add(n[t]);
            }
            function Vn(n) {
                this.size = (this.__data__ = new Nn(n)).size;
            }
            function Gn(n, t) {
                var r, e = af(n), u = !e && cf(n), i = !e && !u && sf(n), o = !e && !u && !i && gf(n), u = (e = e || u || i || o) ? E(n.length, ri) : [], f = u.length;
                for (r in n)
                    !t && !ci.call(n, r) || e && ('length' == r || i && ('offset' == r || 'parent' == r) || o && ('buffer' == r || 'byteLength' == r || 'byteOffset' == r) || Re(r, f)) || u.push(r);
                return u;
            }
            function tt(n) {
                var t = n.length;
                return t ? n[cr(0, t - 1)] : F;
            }
            function ot(n, t) {
                return Te(Mr(n), gt(t, 0, n.length));
            }
            function ft(n) {
                return Te(Mr(n));
            }
            function ct(n, t, r) {
                (r === F || hu(n[t], r)) && (r !== F || t in n) || _t(n, t, r);
            }
            function at(n, t, r) {
                var e = n[t];
                ci.call(n, t) && hu(e, r) && (r !== F || t in n) || _t(n, t, r);
            }
            function lt(n, t) {
                for (var r = n.length; r--;)
                    if (hu(n[r][0], t))
                        return r;
                return -1;
            }
            function st(n, t, r, e) {
                return oo(n, function (n, u, i) {
                    t(e, n, r(n), i);
                }), e;
            }
            function ht(n, t) {
                return n && Tr(t, Lu(t), n);
            }
            function pt(n, t) {
                return n && Tr(t, Uu(t), n);
            }
            function _t(n, t, r) {
                '__proto__' == t && Ei ? Ei(n, t, {
                    configurable: true,
                    enumerable: true,
                    value: r,
                    writable: true
                }) : n[t] = r;
            }
            function vt(n, t) {
                for (var r = -1, e = t.length, u = Hu(e), i = null == n; ++r < e;)
                    u[r] = i ? F : Wu(n, t[r]);
                return u;
            }
            function gt(n, t, r) {
                return n === n && (r !== F && (n = n <= r ? n : r), t !== F && (n = n >= t ? n : t)), n;
            }
            function dt(n, t, r, e, i, o) {
                var f, c = 1 & t, a = 2 & t, l = 4 & t;
                if (r && (f = i ? r(n, e, i, o) : r(n)), f !== F)
                    return f;
                if (!bu(n))
                    return n;
                if (e = af(n)) {
                    if (f = Ee(n), !c)
                        return Mr(n, f);
                } else {
                    var s = yo(n), h = '[object Function]' == s || '[object GeneratorFunction]' == s;
                    if (sf(n))
                        return Wr(n, c);
                    if ('[object Object]' == s || '[object Arguments]' == s || h && !i) {
                        if (f = a || h ? {} : Oe(n), !c)
                            return a ? Fr(n, pt(f, n)) : $r(n, ht(f, n));
                    } else {
                        if (!Dn[s])
                            return i ? n : {};
                        f = Se(n, s, dt, c);
                    }
                }
                if (o || (o = new Vn()), i = o.get(n))
                    return i;
                o.set(n, f);
                var a = l ? a ? ye : de : a ? Uu : Lu, p = e ? F : a(n);
                return u(p || n, function (e, u) {
                    p && (u = e, e = n[u]), at(f, u, dt(e, t, r, u, n, o));
                }), f;
            }
            function yt(n) {
                var t = Lu(n);
                return function (r) {
                    return bt(r, n, t);
                };
            }
            function bt(n, t, r) {
                var e = r.length;
                if (null == n)
                    return !e;
                for (n = ni(n); e--;) {
                    var u = r[e], i = t[u], o = n[u];
                    if (o === F && !(u in n) || !i(o))
                        return false;
                }
                return true;
            }
            function xt(n, t, r) {
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return jo(function () {
                    n.apply(F, r);
                }, t);
            }
            function jt(n, t, r, e) {
                var u = -1, i = c, o = true, f = n.length, s = [], h = t.length;
                if (!f)
                    return s;
                r && (t = l(t, S(r))), e ? (i = a, o = false) : 200 <= t.length && (i = R, o = false, t = new qn(t));
                n:
                    for (; ++u < f;) {
                        var p = n[u], _ = null == r ? p : r(p), p = e || 0 !== p ? p : 0;
                        if (o && _ === _) {
                            for (var v = h; v--;)
                                if (t[v] === _)
                                    continue n;
                            s.push(p);
                        } else
                            i(t, _, e) || s.push(p);
                    }
                return s;
            }
            function wt(n, t) {
                var r = true;
                return oo(n, function (n, e, u) {
                    return r = !!t(n, e, u);
                }), r;
            }
            function mt(n, t, r) {
                for (var e = -1, u = n.length; ++e < u;) {
                    var i = n[e], o = t(i);
                    if (null != o && (f === F ? o === o && !Au(o) : r(o, f)))
                        var f = o, c = i;
                }
                return c;
            }
            function At(n, t) {
                var r = [];
                return oo(n, function (n, e, u) {
                    t(n, e, u) && r.push(n);
                }), r;
            }
            function kt(n, t, r, e, u) {
                var i = -1, o = n.length;
                for (r || (r = Ie), u || (u = []); ++i < o;) {
                    var f = n[i];
                    0 < t && r(f) ? 1 < t ? kt(f, t - 1, r, e, u) : s(u, f) : e || (u[u.length] = f);
                }
                return u;
            }
            function Et(n, t) {
                return n && co(n, t, Lu);
            }
            function Ot(n, t) {
                return n && ao(n, t, Lu);
            }
            function St(n, t) {
                return f(t, function (t) {
                    return gu(n[t]);
                });
            }
            function It(n, t) {
                t = Rr(t, n);
                for (var r = 0, e = t.length; null != n && r < e;)
                    n = n[$e(t[r++])];
                return r && r == e ? n : F;
            }
            function Rt(n, t, r) {
                return t = t(n), af(n) ? t : s(t, r(n));
            }
            function zt(n) {
                if (null == n)
                    n = n === F ? '[object Undefined]' : '[object Null]';
                else if (ki && ki in ni(n)) {
                    var t = ci.call(n, ki), r = n[ki];
                    try {
                        n[ki] = F;
                        var e = true;
                    } catch (n) {
                    }
                    var u = si.call(n);
                    e && (t ? n[ki] = r : delete n[ki]), n = u;
                } else
                    n = si.call(n);
                return n;
            }
            function Wt(n, t) {
                return n > t;
            }
            function Bt(n, t) {
                return null != n && ci.call(n, t);
            }
            function Lt(n, t) {
                return null != n && t in ni(n);
            }
            function Ut(n, t, r) {
                for (var e = r ? a : c, u = n[0].length, i = n.length, o = i, f = Hu(i), s = 1 / 0, h = []; o--;) {
                    var p = n[o];
                    o && t && (p = l(p, S(t))), s = Mi(p.length, s), f[o] = !r && (t || 120 <= u && 120 <= p.length) ? new qn(o && p) : F;
                }
                var p = n[0], _ = -1, v = f[0];
                n:
                    for (; ++_ < u && h.length < s;) {
                        var g = p[_], d = t ? t(g) : g, g = r || 0 !== g ? g : 0;
                        if (v ? !R(v, d) : !e(h, d, r)) {
                            for (o = i; --o;) {
                                var y = f[o];
                                if (y ? !R(y, d) : !e(n[o], d, r))
                                    continue n;
                            }
                            v && v.push(d), h.push(g);
                        }
                    }
                return h;
            }
            function Ct(n, t, r) {
                var e = {};
                return Et(n, function (n, u, i) {
                    t(e, r(n), u, i);
                }), e;
            }
            function Dt(n, t, e) {
                return t = Rr(t, n), n = 2 > t.length ? n : It(n, vr(t, 0, -1)), t = null == n ? n : n[$e(Ge(t))], null == t ? F : r(t, n, e);
            }
            function Mt(n) {
                return xu(n) && '[object Arguments]' == zt(n);
            }
            function Tt(n) {
                return xu(n) && '[object ArrayBuffer]' == zt(n);
            }
            function $t(n) {
                return xu(n) && '[object Date]' == zt(n);
            }
            function Ft(n, t, r, e, u) {
                if (n === t)
                    t = true;
                else if (null == n || null == t || !xu(n) && !xu(t))
                    t = n !== n && t !== t;
                else
                    n: {
                        var i = af(n), o = af(t), f = i ? '[object Array]' : yo(n), c = o ? '[object Array]' : yo(t), f = '[object Arguments]' == f ? '[object Object]' : f, c = '[object Arguments]' == c ? '[object Object]' : c, a = '[object Object]' == f, o = '[object Object]' == c;
                        if ((c = f == c) && sf(n)) {
                            if (!sf(t)) {
                                t = false;
                                break n;
                            }
                            i = true, a = false;
                        }
                        if (c && !a)
                            u || (u = new Vn()), t = i || gf(n) ? _e(n, t, r, e, Ft, u) : ve(n, t, f, r, e, Ft, u);
                        else {
                            if (!(1 & r) && (i = a && ci.call(n, '__wrapped__'), f = o && ci.call(t, '__wrapped__'), i || f)) {
                                n = i ? n.value() : n, t = f ? t.value() : t, u || (u = new Vn()), t = Ft(n, t, r, e, u);
                                break n;
                            }
                            if (c)
                                t:
                                    if (u || (u = new Vn()), i = 1 & r, f = de(n), o = f.length, c = de(t).length, o == c || i) {
                                        for (a = o; a--;) {
                                            var l = f[a];
                                            if (!(i ? l in t : ci.call(t, l))) {
                                                t = false;
                                                break t;
                                            }
                                        }
                                        if ((c = u.get(n)) && u.get(t))
                                            t = c == t;
                                        else {
                                            c = true, u.set(n, t), u.set(t, n);
                                            for (var s = i; ++a < o;) {
                                                var l = f[a], h = n[l], p = t[l];
                                                if (e)
                                                    var _ = i ? e(p, h, l, t, n, u) : e(h, p, l, n, t, u);
                                                if (_ === F ? h !== p && !Ft(h, p, r, e, u) : !_) {
                                                    c = false;
                                                    break;
                                                }
                                                s || (s = 'constructor' == l);
                                            }
                                            c && !s && (r = n.constructor, e = t.constructor, r != e && 'constructor' in n && 'constructor' in t && !(typeof r == 'function' && r instanceof r && typeof e == 'function' && e instanceof e) && (c = false)), u.delete(n), u.delete(t), t = c;
                                        }
                                    } else
                                        t = false;
                            else
                                t = false;
                        }
                    }
                return t;
            }
            function Nt(n) {
                return xu(n) && '[object Map]' == yo(n);
            }
            function Pt(n, t, r, e) {
                var u = r.length, i = u, o = !e;
                if (null == n)
                    return !i;
                for (n = ni(n); u--;) {
                    var f = r[u];
                    if (o && f[2] ? f[1] !== n[f[0]] : !(f[0] in n))
                        return false;
                }
                for (; ++u < i;) {
                    var f = r[u], c = f[0], a = n[c], l = f[1];
                    if (o && f[2]) {
                        if (a === F && !(c in n))
                            return false;
                    } else {
                        if (f = new Vn(), e)
                            var s = e(a, l, c, n, t, f);
                        if (s === F ? !Ft(l, a, 3, e, f) : !s)
                            return false;
                    }
                }
                return true;
            }
            function Zt(n) {
                return !(!bu(n) || li && li in n) && (gu(n) ? _i : xn).test(Fe(n));
            }
            function qt(n) {
                return xu(n) && '[object RegExp]' == zt(n);
            }
            function Vt(n) {
                return xu(n) && '[object Set]' == yo(n);
            }
            function Kt(n) {
                return xu(n) && yu(n.length) && !!Cn[zt(n)];
            }
            function Gt(n) {
                return typeof n == 'function' ? n : null == n ? Nu : typeof n == 'object' ? af(n) ? Xt(n[0], n[1]) : Qt(n) : Vu(n);
            }
            function Ht(n) {
                if (!Le(n))
                    return Ci(n);
                var t, r = [];
                for (t in ni(n))
                    ci.call(n, t) && 'constructor' != t && r.push(t);
                return r;
            }
            function Jt(n, t) {
                return n < t;
            }
            function Yt(n, t) {
                var r = -1, e = pu(n) ? Hu(n.length) : [];
                return oo(n, function (n, u, i) {
                    e[++r] = t(n, u, i);
                }), e;
            }
            function Qt(n) {
                var t = me(n);
                return 1 == t.length && t[0][2] ? Ue(t[0][0], t[0][1]) : function (r) {
                    return r === n || Pt(r, n, t);
                };
            }
            function Xt(n, t) {
                return We(n) && t === t && !bu(t) ? Ue($e(n), t) : function (r) {
                    var e = Wu(r, n);
                    return e === F && e === t ? Bu(r, n) : Ft(t, e, 3);
                };
            }
            function nr(n, t, r, e, u) {
                n !== t && co(t, function (i, o) {
                    if (bu(i)) {
                        u || (u = new Vn());
                        var f = u, c = n[o], a = t[o], l = f.get(a);
                        if (l)
                            ct(n, o, l);
                        else {
                            var l = e ? e(c, a, o + '', n, t, f) : F, s = l === F;
                            if (s) {
                                var h = af(a), p = !h && sf(a), _ = !h && !p && gf(a), l = a;
                                h || p || _ ? af(c) ? l = c : _u(c) ? l = Mr(c) : p ? (s = false, l = Wr(a, true)) : _ ? (s = false, l = Lr(a, true)) : l = [] : wu(a) || cf(a) ? (l = c, cf(c) ? l = Ru(c) : (!bu(c) || r && gu(c)) && (l = Oe(a))) : s = false;
                            }
                            s && (f.set(a, l), nr(l, a, r, e, f), f.delete(a)), ct(n, o, l);
                        }
                    } else
                        f = e ? e(n[o], i, o + '', n, t, u) : F, f === F && (f = i), ct(n, o, f);
                }, Uu);
            }
            function tr(n, t) {
                var r = n.length;
                if (r)
                    return t += 0 > t ? r : 0, Re(t, r) ? n[t] : F;
            }
            function rr(n, t, r) {
                var e = -1;
                return t = l(t.length ? t : [Nu], S(je())), n = Yt(n, function (n) {
                    return {
                        a: l(t, function (t) {
                            return t(n);
                        }),
                        b: ++e,
                        c: n
                    };
                }), A(n, function (n, t) {
                    var e;
                    n: {
                        e = -1;
                        for (var u = n.a, i = t.a, o = u.length, f = r.length; ++e < o;) {
                            var c = Ur(u[e], i[e]);
                            if (c) {
                                e = e >= f ? c : c * ('desc' == r[e] ? -1 : 1);
                                break n;
                            }
                        }
                        e = n.b - t.b;
                    }
                    return e;
                });
            }
            function er(n, t) {
                return ur(n, t, function (t, r) {
                    return Bu(n, r);
                });
            }
            function ur(n, t, r) {
                for (var e = -1, u = t.length, i = {}; ++e < u;) {
                    var o = t[e], f = It(n, o);
                    r(f, o) && pr(i, Rr(o, n), f);
                }
                return i;
            }
            function ir(n) {
                return function (t) {
                    return It(t, n);
                };
            }
            function or(n, t, r, e) {
                var u = e ? y : d, i = -1, o = t.length, f = n;
                for (n === t && (t = Mr(t)), r && (f = l(n, S(r))); ++i < o;)
                    for (var c = 0, a = t[i], a = r ? r(a) : a; -1 < (c = u(f, a, c, e));)
                        f !== n && wi.call(f, c, 1), wi.call(n, c, 1);
                return n;
            }
            function fr(n, t) {
                for (var r = n ? t.length : 0, e = r - 1; r--;) {
                    var u = t[r];
                    if (r == e || u !== i) {
                        var i = u;
                        Re(u) ? wi.call(n, u, 1) : mr(n, u);
                    }
                }
            }
            function cr(n, t) {
                return n + zi(Fi() * (t - n + 1));
            }
            function ar(n, t) {
                var r = '';
                if (!n || 1 > t || 9007199254740991 < t)
                    return r;
                do
                    t % 2 && (r += n), (t = zi(t / 2)) && (n += n);
                while (t);
                return r;
            }
            function lr(n, t) {
                return wo(Ce(n, t, Nu), n + '');
            }
            function sr(n) {
                return tt(Du(n));
            }
            function hr(n, t) {
                var r = Du(n);
                return Te(r, gt(t, 0, r.length));
            }
            function pr(n, t, r, e) {
                if (!bu(n))
                    return n;
                t = Rr(t, n);
                for (var u = -1, i = t.length, o = i - 1, f = n; null != f && ++u < i;) {
                    var c = $e(t[u]), a = r;
                    if (u != o) {
                        var l = f[c], a = e ? e(l, c, f) : F;
                        a === F && (a = bu(l) ? l : Re(t[u + 1]) ? [] : {});
                    }
                    at(f, c, a), f = f[c];
                }
                return n;
            }
            function _r(n) {
                return Te(Du(n));
            }
            function vr(n, t, r) {
                var e = -1, u = n.length;
                for (0 > t && (t = -t > u ? 0 : u + t), r = r > u ? u : r, 0 > r && (r += u), u = t > r ? 0 : r - t >>> 0, t >>>= 0, r = Hu(u); ++e < u;)
                    r[e] = n[e + t];
                return r;
            }
            function gr(n, t) {
                var r;
                return oo(n, function (n, e, u) {
                    return r = t(n, e, u), !r;
                }), !!r;
            }
            function dr(n, t, r) {
                var e = 0, u = null == n ? e : n.length;
                if (typeof t == 'number' && t === t && 2147483647 >= u) {
                    for (; e < u;) {
                        var i = e + u >>> 1, o = n[i];
                        null !== o && !Au(o) && (r ? o <= t : o < t) ? e = i + 1 : u = i;
                    }
                    return u;
                }
                return yr(n, t, Nu, r);
            }
            function yr(n, t, r, e) {
                t = r(t);
                for (var u = 0, i = null == n ? 0 : n.length, o = t !== t, f = null === t, c = Au(t), a = t === F; u < i;) {
                    var l = zi((u + i) / 2), s = r(n[l]), h = s !== F, p = null === s, _ = s === s, v = Au(s);
                    (o ? e || _ : a ? _ && (e || h) : f ? _ && h && (e || !p) : c ? _ && h && !p && (e || !v) : p || v ? 0 : e ? s <= t : s < t) ? u = l + 1 : i = l;
                }
                return Mi(i, 4294967294);
            }
            function br(n, t) {
                for (var r = -1, e = n.length, u = 0, i = []; ++r < e;) {
                    var o = n[r], f = t ? t(o) : o;
                    if (!r || !hu(f, c)) {
                        var c = f;
                        i[u++] = 0 === o ? 0 : o;
                    }
                }
                return i;
            }
            function xr(n) {
                return typeof n == 'number' ? n : Au(n) ? P : +n;
            }
            function jr(n) {
                if (typeof n == 'string')
                    return n;
                if (af(n))
                    return l(n, jr) + '';
                if (Au(n))
                    return uo ? uo.call(n) : '';
                var t = n + '';
                return '0' == t && 1 / n == -N ? '-0' : t;
            }
            function wr(n, t, r) {
                var e = -1, u = c, i = n.length, o = true, f = [], l = f;
                if (r)
                    o = false, u = a;
                else if (200 <= i) {
                    if (u = t ? null : po(n))
                        return D(u);
                    o = false, u = R, l = new qn();
                } else
                    l = t ? [] : f;
                n:
                    for (; ++e < i;) {
                        var s = n[e], h = t ? t(s) : s, s = r || 0 !== s ? s : 0;
                        if (o && h === h) {
                            for (var p = l.length; p--;)
                                if (l[p] === h)
                                    continue n;
                            t && l.push(h), f.push(s);
                        } else
                            u(l, h, r) || (l !== f && l.push(h), f.push(s));
                    }
                return f;
            }
            function mr(n, t) {
                return t = Rr(t, n), n = 2 > t.length ? n : It(n, vr(t, 0, -1)), null == n || delete n[$e(Ge(t))];
            }
            function Ar(n, t, r, e) {
                for (var u = n.length, i = e ? u : -1; (e ? i-- : ++i < u) && t(n[i], i, n););
                return r ? vr(n, e ? 0 : i, e ? i + 1 : u) : vr(n, e ? i + 1 : 0, e ? u : i);
            }
            function kr(n, t) {
                var r = n;
                return r instanceof Mn && (r = r.value()), h(t, function (n, t) {
                    return t.func.apply(t.thisArg, s([n], t.args));
                }, r);
            }
            function Er(n, t, r) {
                var e = n.length;
                if (2 > e)
                    return e ? wr(n[0]) : [];
                for (var u = -1, i = Hu(e); ++u < e;)
                    for (var o = n[u], f = -1; ++f < e;)
                        f != u && (i[u] = jt(i[u] || o, n[f], t, r));
                return wr(kt(i, 1), t, r);
            }
            function Or(n, t, r) {
                for (var e = -1, u = n.length, i = t.length, o = {}; ++e < u;)
                    r(o, n[e], e < i ? t[e] : F);
                return o;
            }
            function Sr(n) {
                return _u(n) ? n : [];
            }
            function Ir(n) {
                return typeof n == 'function' ? n : Nu;
            }
            function Rr(n, t) {
                return af(n) ? n : We(n, t) ? [n] : mo(zu(n));
            }
            function zr(n, t, r) {
                var e = n.length;
                return r = r === F ? e : r, !t && r >= e ? n : vr(n, t, r);
            }
            function Wr(n, t) {
                if (t)
                    return n.slice();
                var r = n.length, r = yi ? yi(r) : new n.constructor(r);
                return n.copy(r), r;
            }
            function Br(n) {
                var t = new n.constructor(n.byteLength);
                return new di(t).set(new di(n)), t;
            }
            function Lr(n, t) {
                return new n.constructor(t ? Br(n.buffer) : n.buffer, n.byteOffset, n.length);
            }
            function Ur(n, t) {
                if (n !== t) {
                    var r = n !== F, e = null === n, u = n === n, i = Au(n), o = t !== F, f = null === t, c = t === t, a = Au(t);
                    if (!f && !a && !i && n > t || i && o && c && !f && !a || e && o && c || !r && c || !u)
                        return 1;
                    if (!e && !i && !a && n < t || a && r && u && !e && !i || f && r && u || !o && u || !c)
                        return -1;
                }
                return 0;
            }
            function Cr(n, t, r, e) {
                var u = -1, i = n.length, o = r.length, f = -1, c = t.length, a = Di(i - o, 0), l = Hu(c + a);
                for (e = !e; ++f < c;)
                    l[f] = t[f];
                for (; ++u < o;)
                    (e || u < i) && (l[r[u]] = n[u]);
                for (; a--;)
                    l[f++] = n[u++];
                return l;
            }
            function Dr(n, t, r, e) {
                var u = -1, i = n.length, o = -1, f = r.length, c = -1, a = t.length, l = Di(i - f, 0), s = Hu(l + a);
                for (e = !e; ++u < l;)
                    s[u] = n[u];
                for (l = u; ++c < a;)
                    s[l + c] = t[c];
                for (; ++o < f;)
                    (e || u < i) && (s[l + r[o]] = n[u++]);
                return s;
            }
            function Mr(n, t) {
                var r = -1, e = n.length;
                for (t || (t = Hu(e)); ++r < e;)
                    t[r] = n[r];
                return t;
            }
            function Tr(n, t, r, e) {
                var u = !r;
                r || (r = {});
                for (var i = -1, o = t.length; ++i < o;) {
                    var f = t[i], c = e ? e(r[f], n[f], f, r, n) : F;
                    c === F && (c = n[f]), u ? _t(r, f, c) : at(r, f, c);
                }
                return r;
            }
            function $r(n, t) {
                return Tr(n, vo(n), t);
            }
            function Fr(n, t) {
                return Tr(n, go(n), t);
            }
            function Nr(n, t) {
                return function (r, u) {
                    var i = af(r) ? e : st, o = t ? t() : {};
                    return i(r, n, je(u, 2), o);
                };
            }
            function Pr(n) {
                return lr(function (t, r) {
                    var e = -1, u = r.length, i = 1 < u ? r[u - 1] : F, o = 2 < u ? r[2] : F, i = 3 < n.length && typeof i == 'function' ? (u--, i) : F;
                    for (o && ze(r[0], r[1], o) && (i = 3 > u ? F : i, u = 1), t = ni(t); ++e < u;)
                        (o = r[e]) && n(t, o, e, i);
                    return t;
                });
            }
            function Zr(n, t) {
                return function (r, e) {
                    if (null == r)
                        return r;
                    if (!pu(r))
                        return n(r, e);
                    for (var u = r.length, i = t ? u : -1, o = ni(r); (t ? i-- : ++i < u) && false !== e(o[i], i, o););
                    return r;
                };
            }
            function qr(n) {
                return function (t, r, e) {
                    var u = -1, i = ni(t);
                    e = e(t);
                    for (var o = e.length; o--;) {
                        var f = e[n ? o : ++u];
                        if (false === r(i[f], f, i))
                            break;
                    }
                    return t;
                };
            }
            function Vr(n, t, r) {
                function e() {
                    return (this && this !== Zn && this instanceof e ? i : n).apply(u ? r : this, arguments);
                }
                var u = 1 & t, i = Hr(n);
                return e;
            }
            function Kr(n) {
                return function (t) {
                    t = zu(t);
                    var r = Bn.test(t) ? $(t) : F, e = r ? r[0] : t.charAt(0);
                    return t = r ? zr(r, 1).join('') : t.slice(1), e[n]() + t;
                };
            }
            function Gr(n) {
                return function (t) {
                    return h($u(Tu(t).replace(In, '')), n, '');
                };
            }
            function Hr(n) {
                return function () {
                    var t = arguments;
                    switch (t.length) {
                    case 0:
                        return new n();
                    case 1:
                        return new n(t[0]);
                    case 2:
                        return new n(t[0], t[1]);
                    case 3:
                        return new n(t[0], t[1], t[2]);
                    case 4:
                        return new n(t[0], t[1], t[2], t[3]);
                    case 5:
                        return new n(t[0], t[1], t[2], t[3], t[4]);
                    case 6:
                        return new n(t[0], t[1], t[2], t[3], t[4], t[5]);
                    case 7:
                        return new n(t[0], t[1], t[2], t[3], t[4], t[5], t[6]);
                    }
                    var r = io(n.prototype), t = n.apply(r, t);
                    return bu(t) ? t : r;
                };
            }
            function Jr(n, t, e) {
                function u() {
                    for (var o = arguments.length, f = Hu(o), c = o, a = xe(u); c--;)
                        f[c] = arguments[c];
                    return c = 3 > o && f[0] !== a && f[o - 1] !== a ? [] : C(f, a), o -= c.length, o < e ? fe(n, t, Xr, u.placeholder, F, f, c, F, F, e - o) : r(this && this !== Zn && this instanceof u ? i : n, this, f);
                }
                var i = Hr(n);
                return u;
            }
            function Yr(n) {
                return function (t, r, e) {
                    var u = ni(t);
                    if (!pu(t)) {
                        var i = je(r, 3);
                        t = Lu(t), r = function (n) {
                            return i(u[n], n, u);
                        };
                    }
                    return r = n(t, r, e), -1 < r ? u[i ? t[r] : r] : F;
                };
            }
            function Qr(n) {
                return ge(function (t) {
                    var r = t.length, e = r, u = zn.prototype.thru;
                    for (n && t.reverse(); e--;) {
                        var i = t[e];
                        if (typeof i != 'function')
                            throw new ei('Expected a function');
                        if (u && !o && 'wrapper' == be(i))
                            var o = new zn([], true);
                    }
                    for (e = o ? e : r; ++e < r;)
                        var i = t[e], u = be(i), f = 'wrapper' == u ? _o(i) : F, o = f && Be(f[0]) && 424 == f[1] && !f[4].length && 1 == f[9] ? o[be(f[0])].apply(o, f[3]) : 1 == i.length && Be(i) ? o[u]() : o.thru(i);
                    return function () {
                        var n = arguments, e = n[0];
                        if (o && 1 == n.length && af(e))
                            return o.plant(e).value();
                        for (var u = 0, n = r ? t[u].apply(this, n) : e; ++u < r;)
                            n = t[u].call(this, n);
                        return n;
                    };
                });
            }
            function Xr(n, t, r, e, u, i, o, f, c, a) {
                function l() {
                    for (var d = arguments.length, y = Hu(d), b = d; b--;)
                        y[b] = arguments[b];
                    if (_) {
                        var x, j = xe(l), b = y.length;
                        for (x = 0; b--;)
                            y[b] === j && ++x;
                    }
                    if (e && (y = Cr(y, e, u, _)), i && (y = Dr(y, i, o, _)), d -= x, _ && d < a)
                        return j = C(y, j), fe(n, t, Xr, l.placeholder, r, y, j, f, c, a - d);
                    if (j = h ? r : this, b = p ? j[n] : n, d = y.length, f) {
                        x = y.length;
                        for (var w = Mi(f.length, x), m = Mr(y); w--;) {
                            var A = f[w];
                            y[w] = Re(A, x) ? m[A] : F;
                        }
                    } else
                        v && 1 < d && y.reverse();
                    return s && c < d && (y.length = c), this && this !== Zn && this instanceof l && (b = g || Hr(b)), b.apply(j, y);
                }
                var s = 128 & t, h = 1 & t, p = 2 & t, _ = 24 & t, v = 512 & t, g = p ? F : Hr(n);
                return l;
            }
            function ne(n, t) {
                return function (r, e) {
                    return Ct(r, n, t(e));
                };
            }
            function te(n, t) {
                return function (r, e) {
                    var u;
                    if (r === F && e === F)
                        return t;
                    if (r !== F && (u = r), e !== F) {
                        if (u === F)
                            return e;
                        typeof r == 'string' || typeof e == 'string' ? (r = jr(r), e = jr(e)) : (r = xr(r), e = xr(e)), u = n(r, e);
                    }
                    return u;
                };
            }
            function re(n) {
                return ge(function (t) {
                    return t = l(t, S(je())), lr(function (e) {
                        var u = this;
                        return n(t, function (n) {
                            return r(n, u, e);
                        });
                    });
                });
            }
            function ee(n, t) {
                t = t === F ? ' ' : jr(t);
                var r = t.length;
                return 2 > r ? r ? ar(t, n) : t : (r = ar(t, Ri(n / T(t))), Bn.test(t) ? zr($(r), 0, n).join('') : r.slice(0, n));
            }
            function ue(n, t, e, u) {
                function i() {
                    for (var t = -1, c = arguments.length, a = -1, l = u.length, s = Hu(l + c), h = this && this !== Zn && this instanceof i ? f : n; ++a < l;)
                        s[a] = u[a];
                    for (; c--;)
                        s[a++] = arguments[++t];
                    return r(h, o ? e : this, s);
                }
                var o = 1 & t, f = Hr(n);
                return i;
            }
            function ie(n) {
                return function (t, r, e) {
                    e && typeof e != 'number' && ze(t, r, e) && (r = e = F), t = Eu(t), r === F ? (r = t, t = 0) : r = Eu(r), e = e === F ? t < r ? 1 : -1 : Eu(e);
                    var u = -1;
                    r = Di(Ri((r - t) / (e || 1)), 0);
                    for (var i = Hu(r); r--;)
                        i[n ? r : ++u] = t, t += e;
                    return i;
                };
            }
            function oe(n) {
                return function (t, r) {
                    return typeof t == 'string' && typeof r == 'string' || (t = Iu(t), r = Iu(r)), n(t, r);
                };
            }
            function fe(n, t, r, e, u, i, o, f, c, a) {
                var l = 8 & t, s = l ? o : F;
                o = l ? F : o;
                var h = l ? i : F;
                return i = l ? F : i, t = (t | (l ? 32 : 64)) & ~(l ? 64 : 32), 4 & t || (t &= -4), u = [
                    n,
                    t,
                    u,
                    h,
                    s,
                    i,
                    o,
                    f,
                    c,
                    a
                ], r = r.apply(F, u), Be(n) && xo(r, u), r.placeholder = e, De(r, n, t);
            }
            function ce(n) {
                var t = Xu[n];
                return function (n, r) {
                    if (n = Iu(n), r = Mi(Ou(r), 292)) {
                        var e = (zu(n) + 'e').split('e'), e = t(e[0] + 'e' + (+e[1] + r)), e = (zu(e) + 'e').split('e');
                        return +(e[0] + 'e' + (+e[1] - r));
                    }
                    return t(n);
                };
            }
            function ae(n) {
                return function (t) {
                    var r = yo(t);
                    return '[object Map]' == r ? L(t) : '[object Set]' == r ? M(t) : O(t, n(t));
                };
            }
            function le(n, t, r, e, u, i, o, f) {
                var c = 2 & t;
                if (!c && typeof n != 'function')
                    throw new ei('Expected a function');
                var a = e ? e.length : 0;
                if (a || (t &= -97, e = u = F), o = o === F ? o : Di(Ou(o), 0), f = f === F ? f : Ou(f), a -= u ? u.length : 0, 64 & t) {
                    var l = e, s = u;
                    e = u = F;
                }
                var h = c ? F : _o(n);
                return i = [
                    n,
                    t,
                    r,
                    e,
                    u,
                    l,
                    s,
                    i,
                    o,
                    f
                ], h && (r = i[1], n = h[1], t = r | n, e = 128 == n && 8 == r || 128 == n && 256 == r && i[7].length <= h[8] || 384 == n && h[7].length <= h[8] && 8 == r, 131 > t || e) && (1 & n && (i[2] = h[2], t |= 1 & r ? 0 : 4), (r = h[3]) && (e = i[3], i[3] = e ? Cr(e, r, h[4]) : r, i[4] = e ? C(i[3], '__lodash_placeholder__') : h[4]), (r = h[5]) && (e = i[5], i[5] = e ? Dr(e, r, h[6]) : r, i[6] = e ? C(i[5], '__lodash_placeholder__') : h[6]), (r = h[7]) && (i[7] = r), 128 & n && (i[8] = null == i[8] ? h[8] : Mi(i[8], h[8])), null == i[9] && (i[9] = h[9]), i[0] = h[0], i[1] = t), n = i[0], t = i[1], r = i[2], e = i[3], u = i[4], f = i[9] = null == i[9] ? c ? 0 : n.length : Di(i[9] - a, 0), !f && 24 & t && (t &= -25), De((h ? lo : xo)(t && 1 != t ? 8 == t || 16 == t ? Jr(n, t, f) : 32 != t && 33 != t || u.length ? Xr.apply(F, i) : ue(n, t, r, e) : Vr(n, t, r), i), n, t);
            }
            function se(n, t, r, e) {
                return n === F || hu(n, ii[r]) && !ci.call(e, r) ? t : n;
            }
            function he(n, t, r, e, u, i) {
                return bu(n) && bu(t) && (i.set(t, n), nr(n, t, F, he, i), i.delete(t)), n;
            }
            function pe(n, t) {
                return t !== F && wu(n) ? F : n;
            }
            function _e(n, t, r, e, u, i) {
                var o = 1 & r, f = n.length, c = t.length;
                if (f != c && !(o && c > f))
                    return false;
                if ((c = i.get(n)) && i.get(t))
                    return c == t;
                var c = -1, a = true, l = 2 & r ? new qn() : F;
                for (i.set(n, t), i.set(t, n); ++c < f;) {
                    var s = n[c], h = t[c];
                    if (e)
                        var p = o ? e(h, s, c, t, n, i) : e(s, h, c, n, t, i);
                    if (p !== F) {
                        if (p)
                            continue;
                        a = false;
                        break;
                    }
                    if (l) {
                        if (!_(t, function (n, t) {
                                if (!R(l, t) && (s === n || u(s, n, r, e, i)))
                                    return l.push(t);
                            })) {
                            a = false;
                            break;
                        }
                    } else if (s !== h && !u(s, h, r, e, i)) {
                        a = false;
                        break;
                    }
                }
                return i.delete(n), i.delete(t), a;
            }
            function ve(n, t, r, e, u, i, o) {
                switch (r) {
                case '[object DataView]':
                    if (n.byteLength != t.byteLength || n.byteOffset != t.byteOffset)
                        break;
                    n = n.buffer, t = t.buffer;
                case '[object ArrayBuffer]':
                    if (n.byteLength != t.byteLength || !i(new di(n), new di(t)))
                        break;
                    return true;
                case '[object Boolean]':
                case '[object Date]':
                case '[object Number]':
                    return hu(+n, +t);
                case '[object Error]':
                    return n.name == t.name && n.message == t.message;
                case '[object RegExp]':
                case '[object String]':
                    return n == t + '';
                case '[object Map]':
                    var f = L;
                case '[object Set]':
                    if (f || (f = D), n.size != t.size && !(1 & e))
                        break;
                    return (r = o.get(n)) ? r == t : (e |= 2, o.set(n, t), t = _e(f(n), f(t), e, u, i, o), o.delete(n), t);
                case '[object Symbol]':
                    if (eo)
                        return eo.call(n) == eo.call(t);
                }
                return false;
            }
            function ge(n) {
                return wo(Ce(n, F, Ve), n + '');
            }
            function de(n) {
                return Rt(n, Lu, vo);
            }
            function ye(n) {
                return Rt(n, Uu, go);
            }
            function be(n) {
                for (var t = n.name + '', r = Ji[t], e = ci.call(Ji, t) ? r.length : 0; e--;) {
                    var u = r[e], i = u.func;
                    if (null == i || i == n)
                        return u.name;
                }
                return t;
            }
            function xe(n) {
                return (ci.call(On, 'placeholder') ? On : n).placeholder;
            }
            function je() {
                var n = On.iteratee || Pu, n = n === Pu ? Gt : n;
                return arguments.length ? n(arguments[0], arguments[1]) : n;
            }
            function we(n, t) {
                var r = n.__data__, e = typeof t;
                return ('string' == e || 'number' == e || 'symbol' == e || 'boolean' == e ? '__proto__' !== t : null === t) ? r[typeof t == 'string' ? 'string' : 'hash'] : r.map;
            }
            function me(n) {
                for (var t = Lu(n), r = t.length; r--;) {
                    var e = t[r], u = n[e];
                    t[r] = [
                        e,
                        u,
                        u === u && !bu(u)
                    ];
                }
                return t;
            }
            function Ae(n, t) {
                var r = null == n ? F : n[t];
                return Zt(r) ? r : F;
            }
            function ke(n, t, r) {
                t = Rr(t, n);
                for (var e = -1, u = t.length, i = false; ++e < u;) {
                    var o = $e(t[e]);
                    if (!(i = null != n && r(n, o)))
                        break;
                    n = n[o];
                }
                return i || ++e != u ? i : (u = null == n ? 0 : n.length, !!u && yu(u) && Re(o, u) && (af(n) || cf(n)));
            }
            function Ee(n) {
                var t = n.length, r = n.constructor(t);
                return t && 'string' == typeof n[0] && ci.call(n, 'index') && (r.index = n.index, r.input = n.input), r;
            }
            function Oe(n) {
                return typeof n.constructor != 'function' || Le(n) ? {} : io(bi(n));
            }
            function Se(r, e, u, i) {
                var o = r.constructor;
                switch (e) {
                case '[object ArrayBuffer]':
                    return Br(r);
                case '[object Boolean]':
                case '[object Date]':
                    return new o(+r);
                case '[object DataView]':
                    return e = i ? Br(r.buffer) : r.buffer, new r.constructor(e, r.byteOffset, r.byteLength);
                case '[object Float32Array]':
                case '[object Float64Array]':
                case '[object Int8Array]':
                case '[object Int16Array]':
                case '[object Int32Array]':
                case '[object Uint8Array]':
                case '[object Uint8ClampedArray]':
                case '[object Uint16Array]':
                case '[object Uint32Array]':
                    return Lr(r, i);
                case '[object Map]':
                    return e = i ? u(L(r), 1) : L(r), h(e, n, new r.constructor());
                case '[object Number]':
                case '[object String]':
                    return new o(r);
                case '[object RegExp]':
                    return e = new r.constructor(r.source, dn.exec(r)), e.lastIndex = r.lastIndex, e;
                case '[object Set]':
                    return e = i ? u(D(r), 1) : D(r), h(e, t, new r.constructor());
                case '[object Symbol]':
                    return eo ? ni(eo.call(r)) : {};
                }
            }
            function Ie(n) {
                return af(n) || cf(n) || !!(mi && n && n[mi]);
            }
            function Re(n, t) {
                return t = null == t ? 9007199254740991 : t, !!t && (typeof n == 'number' || wn.test(n)) && -1 < n && 0 == n % 1 && n < t;
            }
            function ze(n, t, r) {
                if (!bu(r))
                    return false;
                var e = typeof t;
                return !!('number' == e ? pu(r) && Re(t, r.length) : 'string' == e && t in r) && hu(r[t], n);
            }
            function We(n, t) {
                if (af(n))
                    return false;
                var r = typeof n;
                return !('number' != r && 'symbol' != r && 'boolean' != r && null != n && !Au(n)) || (rn.test(n) || !tn.test(n) || null != t && n in ni(t));
            }
            function Be(n) {
                var t = be(n), r = On[t];
                return typeof r == 'function' && t in Mn.prototype && (n === r || (t = _o(r), !!t && n === t[0]));
            }
            function Le(n) {
                var t = n && n.constructor;
                return n === (typeof t == 'function' && t.prototype || ii);
            }
            function Ue(n, t) {
                return function (r) {
                    return null != r && (r[n] === t && (t !== F || n in ni(r)));
                };
            }
            function Ce(n, t, e) {
                return t = Di(t === F ? n.length - 1 : t, 0), function () {
                    for (var u = arguments, i = -1, o = Di(u.length - t, 0), f = Hu(o); ++i < o;)
                        f[i] = u[t + i];
                    for (i = -1, o = Hu(t + 1); ++i < t;)
                        o[i] = u[i];
                    return o[t] = e(f), r(n, this, o);
                };
            }
            function De(n, t, r) {
                var e = t + '';
                t = wo;
                var u, i = Ne;
                return u = (u = e.match(hn)) ? u[1].split(pn) : [], r = i(u, r), (i = r.length) && (u = i - 1, r[u] = (1 < i ? '& ' : '') + r[u], r = r.join(2 < i ? ', ' : ' '), e = e.replace(sn, '{\n/* [wrapped with ' + r + '] */\n')), t(n, e);
            }
            function Me(n) {
                var t = 0, r = 0;
                return function () {
                    var e = Ti(), u = 16 - (e - r);
                    if (r = e, 0 < u) {
                        if (800 <= ++t)
                            return arguments[0];
                    } else
                        t = 0;
                    return n.apply(F, arguments);
                };
            }
            function Te(n, t) {
                var r = -1, e = n.length, u = e - 1;
                for (t = t === F ? e : t; ++r < t;) {
                    var e = cr(r, u), i = n[e];
                    n[e] = n[r], n[r] = i;
                }
                return n.length = t, n;
            }
            function $e(n) {
                if (typeof n == 'string' || Au(n))
                    return n;
                var t = n + '';
                return '0' == t && 1 / n == -N ? '-0' : t;
            }
            function Fe(n) {
                if (null != n) {
                    try {
                        return fi.call(n);
                    } catch (n) {
                    }
                    return n + '';
                }
                return '';
            }
            function Ne(n, t) {
                return u(Z, function (r) {
                    var e = '_.' + r[0];
                    t & r[1] && !c(n, e) && n.push(e);
                }), n.sort();
            }
            function Pe(n) {
                if (n instanceof Mn)
                    return n.clone();
                var t = new zn(n.__wrapped__, n.__chain__);
                return t.__actions__ = Mr(n.__actions__), t.__index__ = n.__index__, t.__values__ = n.__values__, t;
            }
            function Ze(n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (r = null == r ? 0 : Ou(r), 0 > r && (r = Di(e + r, 0)), g(n, je(t, 3), r)) : -1;
            }
            function qe(n, t, r) {
                var e = null == n ? 0 : n.length;
                if (!e)
                    return -1;
                var u = e - 1;
                return r !== F && (u = Ou(r), u = 0 > r ? Di(e + u, 0) : Mi(u, e - 1)), g(n, je(t, 3), u, true);
            }
            function Ve(n) {
                return (null == n ? 0 : n.length) ? kt(n, 1) : [];
            }
            function Ke(n) {
                return n && n.length ? n[0] : F;
            }
            function Ge(n) {
                var t = null == n ? 0 : n.length;
                return t ? n[t - 1] : F;
            }
            function He(n, t) {
                return n && n.length && t && t.length ? or(n, t) : n;
            }
            function Je(n) {
                return null == n ? n : Ni.call(n);
            }
            function Ye(n) {
                if (!n || !n.length)
                    return [];
                var t = 0;
                return n = f(n, function (n) {
                    if (_u(n))
                        return t = Di(n.length, t), true;
                }), E(t, function (t) {
                    return l(n, j(t));
                });
            }
            function Qe(n, t) {
                if (!n || !n.length)
                    return [];
                var e = Ye(n);
                return null == t ? e : l(e, function (n) {
                    return r(t, F, n);
                });
            }
            function Xe(n) {
                return n = On(n), n.__chain__ = true, n;
            }
            function nu(n, t) {
                return t(n);
            }
            function tu() {
                return this;
            }
            function ru(n, t) {
                return (af(n) ? u : oo)(n, je(t, 3));
            }
            function eu(n, t) {
                return (af(n) ? i : fo)(n, je(t, 3));
            }
            function uu(n, t) {
                return (af(n) ? l : Yt)(n, je(t, 3));
            }
            function iu(n, t, r) {
                return t = r ? F : t, t = n && null == t ? n.length : t, le(n, 128, F, F, F, F, t);
            }
            function ou(n, t) {
                var r;
                if (typeof t != 'function')
                    throw new ei('Expected a function');
                return n = Ou(n), function () {
                    return 0 < --n && (r = t.apply(this, arguments)), 1 >= n && (t = F), r;
                };
            }
            function fu(n, t, r) {
                return t = r ? F : t, n = le(n, 8, F, F, F, F, F, t), n.placeholder = fu.placeholder, n;
            }
            function cu(n, t, r) {
                return t = r ? F : t, n = le(n, 16, F, F, F, F, F, t), n.placeholder = cu.placeholder, n;
            }
            function au(n, t, r) {
                function e(t) {
                    var r = c, e = a;
                    return c = a = F, _ = t, s = n.apply(e, r);
                }
                function u(n) {
                    var r = n - p;
                    return n -= _, p === F || r >= t || 0 > r || g && n >= l;
                }
                function i() {
                    var n = Jo();
                    if (u(n))
                        return o(n);
                    var r, e = jo;
                    r = n - _, n = t - (n - p), r = g ? Mi(n, l - r) : n, h = e(i, r);
                }
                function o(n) {
                    return h = F, d && c ? e(n) : (c = a = F, s);
                }
                function f() {
                    var n = Jo(), r = u(n);
                    if (c = arguments, a = this, p = n, r) {
                        if (h === F)
                            return _ = n = p, h = jo(i, t), v ? e(n) : s;
                        if (g)
                            return h = jo(i, t), e(p);
                    }
                    return h === F && (h = jo(i, t)), s;
                }
                var c, a, l, s, h, p, _ = 0, v = false, g = false, d = true;
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return t = Iu(t) || 0, bu(r) && (v = !!r.leading, l = (g = 'maxWait' in r) ? Di(Iu(r.maxWait) || 0, t) : l, d = 'trailing' in r ? !!r.trailing : d), f.cancel = function () {
                    h !== F && ho(h), _ = 0, c = p = a = h = F;
                }, f.flush = function () {
                    return h === F ? s : o(Jo());
                }, f;
            }
            function lu(n, t) {
                function r() {
                    var e = arguments, u = t ? t.apply(this, e) : e[0], i = r.cache;
                    return i.has(u) ? i.get(u) : (e = n.apply(this, e), r.cache = i.set(u, e) || i, e);
                }
                if (typeof n != 'function' || null != t && typeof t != 'function')
                    throw new ei('Expected a function');
                return r.cache = new (lu.Cache || Pn)(), r;
            }
            function su(n) {
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return function () {
                    var t = arguments;
                    switch (t.length) {
                    case 0:
                        return !n.call(this);
                    case 1:
                        return !n.call(this, t[0]);
                    case 2:
                        return !n.call(this, t[0], t[1]);
                    case 3:
                        return !n.call(this, t[0], t[1], t[2]);
                    }
                    return !n.apply(this, t);
                };
            }
            function hu(n, t) {
                return n === t || n !== n && t !== t;
            }
            function pu(n) {
                return null != n && yu(n.length) && !gu(n);
            }
            function _u(n) {
                return xu(n) && pu(n);
            }
            function vu(n) {
                if (!xu(n))
                    return false;
                var t = zt(n);
                return '[object Error]' == t || '[object DOMException]' == t || typeof n.message == 'string' && typeof n.name == 'string' && !wu(n);
            }
            function gu(n) {
                return !!bu(n) && (n = zt(n), '[object Function]' == n || '[object GeneratorFunction]' == n || '[object AsyncFunction]' == n || '[object Proxy]' == n);
            }
            function du(n) {
                return typeof n == 'number' && n == Ou(n);
            }
            function yu(n) {
                return typeof n == 'number' && -1 < n && 0 == n % 1 && 9007199254740991 >= n;
            }
            function bu(n) {
                var t = typeof n;
                return null != n && ('object' == t || 'function' == t);
            }
            function xu(n) {
                return null != n && typeof n == 'object';
            }
            function ju(n) {
                return typeof n == 'number' || xu(n) && '[object Number]' == zt(n);
            }
            function wu(n) {
                return !(!xu(n) || '[object Object]' != zt(n)) && (n = bi(n), null === n || (n = ci.call(n, 'constructor') && n.constructor, typeof n == 'function' && n instanceof n && fi.call(n) == hi));
            }
            function mu(n) {
                return typeof n == 'string' || !af(n) && xu(n) && '[object String]' == zt(n);
            }
            function Au(n) {
                return typeof n == 'symbol' || xu(n) && '[object Symbol]' == zt(n);
            }
            function ku(n) {
                if (!n)
                    return [];
                if (pu(n))
                    return mu(n) ? $(n) : Mr(n);
                if (Ai && n[Ai]) {
                    n = n[Ai]();
                    for (var t, r = []; !(t = n.next()).done;)
                        r.push(t.value);
                    return r;
                }
                return t = yo(n), ('[object Map]' == t ? L : '[object Set]' == t ? D : Du)(n);
            }
            function Eu(n) {
                return n ? (n = Iu(n), n === N || n === -N ? 1.7976931348623157e+308 * (0 > n ? -1 : 1) : n === n ? n : 0) : 0 === n ? n : 0;
            }
            function Ou(n) {
                n = Eu(n);
                var t = n % 1;
                return n === n ? t ? n - t : n : 0;
            }
            function Su(n) {
                return n ? gt(Ou(n), 0, 4294967295) : 0;
            }
            function Iu(n) {
                if (typeof n == 'number')
                    return n;
                if (Au(n))
                    return P;
                if (bu(n) && (n = typeof n.valueOf == 'function' ? n.valueOf() : n, n = bu(n) ? n + '' : n), typeof n != 'string')
                    return 0 === n ? n : +n;
                n = n.replace(cn, '');
                var t = bn.test(n);
                return t || jn.test(n) ? Fn(n.slice(2), t ? 2 : 8) : yn.test(n) ? P : +n;
            }
            function Ru(n) {
                return Tr(n, Uu(n));
            }
            function zu(n) {
                return null == n ? '' : jr(n);
            }
            function Wu(n, t, r) {
                return n = null == n ? F : It(n, t), n === F ? r : n;
            }
            function Bu(n, t) {
                return null != n && ke(n, t, Lt);
            }
            function Lu(n) {
                return pu(n) ? Gn(n) : Ht(n);
            }
            function Uu(n) {
                if (pu(n))
                    n = Gn(n, true);
                else if (bu(n)) {
                    var t, r = Le(n), e = [];
                    for (t in n)
                        ('constructor' != t || !r && ci.call(n, t)) && e.push(t);
                    n = e;
                } else {
                    if (t = [], null != n)
                        for (r in ni(n))
                            t.push(r);
                    n = t;
                }
                return n;
            }
            function Cu(n, t) {
                if (null == n)
                    return {};
                var r = l(ye(n), function (n) {
                    return [n];
                });
                return t = je(t), ur(n, r, function (n, r) {
                    return t(n, r[0]);
                });
            }
            function Du(n) {
                return null == n ? [] : I(n, Lu(n));
            }
            function Mu(n) {
                return Nf(zu(n).toLowerCase());
            }
            function Tu(n) {
                return (n = zu(n)) && n.replace(mn, rt).replace(Rn, '');
            }
            function $u(n, t, r) {
                return n = zu(n), t = r ? F : t, t === F ? Ln.test(n) ? n.match(Wn) || [] : n.match(_n) || [] : n.match(t) || [];
            }
            function Fu(n) {
                return function () {
                    return n;
                };
            }
            function Nu(n) {
                return n;
            }
            function Pu(n) {
                return Gt(typeof n == 'function' ? n : dt(n, 1));
            }
            function Zu(n, t, r) {
                var e = Lu(t), i = St(t, e);
                null != r || bu(t) && (i.length || !e.length) || (r = t, t = n, n = this, i = St(t, Lu(t)));
                var o = !(bu(r) && 'chain' in r && !r.chain), f = gu(n);
                return u(i, function (r) {
                    var e = t[r];
                    n[r] = e, f && (n.prototype[r] = function () {
                        var t = this.__chain__;
                        if (o || t) {
                            var r = n(this.__wrapped__);
                            return (r.__actions__ = Mr(this.__actions__)).push({
                                func: e,
                                args: arguments,
                                thisArg: n
                            }), r.__chain__ = t, r;
                        }
                        return e.apply(n, s([this.value()], arguments));
                    });
                }), n;
            }
            function qu() {
            }
            function Vu(n) {
                return We(n) ? j($e(n)) : ir(n);
            }
            function Ku() {
                return [];
            }
            function Gu() {
                return false;
            }
            En = null == En ? Zn : it.defaults(Zn.Object(), En, it.pick(Zn, Un));
            var Hu = En.Array, Ju = En.Date, Yu = En.Error, Qu = En.Function, Xu = En.Math, ni = En.Object, ti = En.RegExp, ri = En.String, ei = En.TypeError, ui = Hu.prototype, ii = ni.prototype, oi = En['__core-js_shared__'], fi = Qu.prototype.toString, ci = ii.hasOwnProperty, ai = 0, li = function () {
                    var n = /[^.]+$/.exec(oi && oi.keys && oi.keys.IE_PROTO || '');
                    return n ? 'Symbol(src)_1.' + n : '';
                }(), si = ii.toString, hi = fi.call(ni), pi = Zn._, _i = ti('^' + fi.call(ci).replace(on, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'), vi = Kn ? En.Buffer : F, gi = En.Symbol, di = En.Uint8Array, yi = vi ? vi.f : F, bi = U(ni.getPrototypeOf, ni), xi = ni.create, ji = ii.propertyIsEnumerable, wi = ui.splice, mi = gi ? gi.isConcatSpreadable : F, Ai = gi ? gi.iterator : F, ki = gi ? gi.toStringTag : F, Ei = function () {
                    try {
                        var n = Ae(ni, 'defineProperty');
                        return n({}, '', {}), n;
                    } catch (n) {
                    }
                }(), Oi = En.clearTimeout !== Zn.clearTimeout && En.clearTimeout, Si = Ju && Ju.now !== Zn.Date.now && Ju.now, Ii = En.setTimeout !== Zn.setTimeout && En.setTimeout, Ri = Xu.ceil, zi = Xu.floor, Wi = ni.getOwnPropertySymbols, Bi = vi ? vi.isBuffer : F, Li = En.isFinite, Ui = ui.join, Ci = U(ni.keys, ni), Di = Xu.max, Mi = Xu.min, Ti = Ju.now, $i = En.parseInt, Fi = Xu.random, Ni = ui.reverse, Pi = Ae(En, 'DataView'), Zi = Ae(En, 'Map'), qi = Ae(En, 'Promise'), Vi = Ae(En, 'Set'), Ki = Ae(En, 'WeakMap'), Gi = Ae(ni, 'create'), Hi = Ki && new Ki(), Ji = {}, Yi = Fe(Pi), Qi = Fe(Zi), Xi = Fe(qi), no = Fe(Vi), to = Fe(Ki), ro = gi ? gi.prototype : F, eo = ro ? ro.valueOf : F, uo = ro ? ro.toString : F, io = function () {
                    function n() {
                    }
                    return function (t) {
                        return bu(t) ? xi ? xi(t) : (n.prototype = t, t = new n(), n.prototype = F, t) : {};
                    };
                }();
            On.templateSettings = {
                escape: Q,
                evaluate: X,
                interpolate: nn,
                variable: '',
                imports: { _: On }
            }, On.prototype = Sn.prototype, On.prototype.constructor = On, zn.prototype = io(Sn.prototype), zn.prototype.constructor = zn, Mn.prototype = io(Sn.prototype), Mn.prototype.constructor = Mn, Tn.prototype.clear = function () {
                this.__data__ = Gi ? Gi(null) : {}, this.size = 0;
            }, Tn.prototype.delete = function (n) {
                return n = this.has(n) && delete this.__data__[n], this.size -= n ? 1 : 0, n;
            }, Tn.prototype.get = function (n) {
                var t = this.__data__;
                return Gi ? (n = t[n], '__lodash_hash_undefined__' === n ? F : n) : ci.call(t, n) ? t[n] : F;
            }, Tn.prototype.has = function (n) {
                var t = this.__data__;
                return Gi ? t[n] !== F : ci.call(t, n);
            }, Tn.prototype.set = function (n, t) {
                var r = this.__data__;
                return this.size += this.has(n) ? 0 : 1, r[n] = Gi && t === F ? '__lodash_hash_undefined__' : t, this;
            }, Nn.prototype.clear = function () {
                this.__data__ = [], this.size = 0;
            }, Nn.prototype.delete = function (n) {
                var t = this.__data__;
                return n = lt(t, n), !(0 > n) && (n == t.length - 1 ? t.pop() : wi.call(t, n, 1), --this.size, true);
            }, Nn.prototype.get = function (n) {
                var t = this.__data__;
                return n = lt(t, n), 0 > n ? F : t[n][1];
            }, Nn.prototype.has = function (n) {
                return -1 < lt(this.__data__, n);
            }, Nn.prototype.set = function (n, t) {
                var r = this.__data__, e = lt(r, n);
                return 0 > e ? (++this.size, r.push([
                    n,
                    t
                ])) : r[e][1] = t, this;
            }, Pn.prototype.clear = function () {
                this.size = 0, this.__data__ = {
                    hash: new Tn(),
                    map: new (Zi || Nn)(),
                    string: new Tn()
                };
            }, Pn.prototype.delete = function (n) {
                return n = we(this, n).delete(n), this.size -= n ? 1 : 0, n;
            }, Pn.prototype.get = function (n) {
                return we(this, n).get(n);
            }, Pn.prototype.has = function (n) {
                return we(this, n).has(n);
            }, Pn.prototype.set = function (n, t) {
                var r = we(this, n), e = r.size;
                return r.set(n, t), this.size += r.size == e ? 0 : 1, this;
            }, qn.prototype.add = qn.prototype.push = function (n) {
                return this.__data__.set(n, '__lodash_hash_undefined__'), this;
            }, qn.prototype.has = function (n) {
                return this.__data__.has(n);
            }, Vn.prototype.clear = function () {
                this.__data__ = new Nn(), this.size = 0;
            }, Vn.prototype.delete = function (n) {
                var t = this.__data__;
                return n = t.delete(n), this.size = t.size, n;
            }, Vn.prototype.get = function (n) {
                return this.__data__.get(n);
            }, Vn.prototype.has = function (n) {
                return this.__data__.has(n);
            }, Vn.prototype.set = function (n, t) {
                var r = this.__data__;
                if (r instanceof Nn) {
                    var e = r.__data__;
                    if (!Zi || 199 > e.length)
                        return e.push([
                            n,
                            t
                        ]), this.size = ++r.size, this;
                    r = this.__data__ = new Pn(e);
                }
                return r.set(n, t), this.size = r.size, this;
            };
            var oo = Zr(Et), fo = Zr(Ot, true), co = qr(), ao = qr(true), lo = Hi ? function (n, t) {
                    return Hi.set(n, t), n;
                } : Nu, so = Ei ? function (n, t) {
                    return Ei(n, 'toString', {
                        configurable: true,
                        enumerable: false,
                        value: Fu(t),
                        writable: true
                    });
                } : Nu, ho = Oi || function (n) {
                    return Zn.clearTimeout(n);
                }, po = Vi && 1 / D(new Vi([
                    ,
                    -0
                ]))[1] == N ? function (n) {
                    return new Vi(n);
                } : qu, _o = Hi ? function (n) {
                    return Hi.get(n);
                } : qu, vo = Wi ? function (n) {
                    return null == n ? [] : (n = ni(n), f(Wi(n), function (t) {
                        return ji.call(n, t);
                    }));
                } : Ku, go = Wi ? function (n) {
                    for (var t = []; n;)
                        s(t, vo(n)), n = bi(n);
                    return t;
                } : Ku, yo = zt;
            (Pi && '[object DataView]' != yo(new Pi(new ArrayBuffer(1))) || Zi && '[object Map]' != yo(new Zi()) || qi && '[object Promise]' != yo(qi.resolve()) || Vi && '[object Set]' != yo(new Vi()) || Ki && '[object WeakMap]' != yo(new Ki())) && (yo = function (n) {
                var t = zt(n);
                if (n = (n = '[object Object]' == t ? n.constructor : F) ? Fe(n) : '')
                    switch (n) {
                    case Yi:
                        return '[object DataView]';
                    case Qi:
                        return '[object Map]';
                    case Xi:
                        return '[object Promise]';
                    case no:
                        return '[object Set]';
                    case to:
                        return '[object WeakMap]';
                    }
                return t;
            });
            var bo = oi ? gu : Gu, xo = Me(lo), jo = Ii || function (n, t) {
                    return Zn.setTimeout(n, t);
                }, wo = Me(so), mo = function (n) {
                    n = lu(n, function (n) {
                        return 500 === t.size && t.clear(), n;
                    });
                    var t = n.cache;
                    return n;
                }(function (n) {
                    var t = [];
                    return en.test(n) && t.push(''), n.replace(un, function (n, r, e, u) {
                        t.push(e ? u.replace(vn, '$1') : r || n);
                    }), t;
                }), Ao = lr(function (n, t) {
                    return _u(n) ? jt(n, kt(t, 1, _u, true)) : [];
                }), ko = lr(function (n, t) {
                    var r = Ge(t);
                    return _u(r) && (r = F), _u(n) ? jt(n, kt(t, 1, _u, true), je(r, 2)) : [];
                }), Eo = lr(function (n, t) {
                    var r = Ge(t);
                    return _u(r) && (r = F), _u(n) ? jt(n, kt(t, 1, _u, true), F, r) : [];
                }), Oo = lr(function (n) {
                    var t = l(n, Sr);
                    return t.length && t[0] === n[0] ? Ut(t) : [];
                }), So = lr(function (n) {
                    var t = Ge(n), r = l(n, Sr);
                    return t === Ge(r) ? t = F : r.pop(), r.length && r[0] === n[0] ? Ut(r, je(t, 2)) : [];
                }), Io = lr(function (n) {
                    var t = Ge(n), r = l(n, Sr);
                    return (t = typeof t == 'function' ? t : F) && r.pop(), r.length && r[0] === n[0] ? Ut(r, F, t) : [];
                }), Ro = lr(He), zo = ge(function (n, t) {
                    var r = null == n ? 0 : n.length, e = vt(n, t);
                    return fr(n, l(t, function (n) {
                        return Re(n, r) ? +n : n;
                    }).sort(Ur)), e;
                }), Wo = lr(function (n) {
                    return wr(kt(n, 1, _u, true));
                }), Bo = lr(function (n) {
                    var t = Ge(n);
                    return _u(t) && (t = F), wr(kt(n, 1, _u, true), je(t, 2));
                }), Lo = lr(function (n) {
                    var t = Ge(n), t = typeof t == 'function' ? t : F;
                    return wr(kt(n, 1, _u, true), F, t);
                }), Uo = lr(function (n, t) {
                    return _u(n) ? jt(n, t) : [];
                }), Co = lr(function (n) {
                    return Er(f(n, _u));
                }), Do = lr(function (n) {
                    var t = Ge(n);
                    return _u(t) && (t = F), Er(f(n, _u), je(t, 2));
                }), Mo = lr(function (n) {
                    var t = Ge(n), t = typeof t == 'function' ? t : F;
                    return Er(f(n, _u), F, t);
                }), To = lr(Ye), $o = lr(function (n) {
                    var t = n.length, t = 1 < t ? n[t - 1] : F, t = typeof t == 'function' ? (n.pop(), t) : F;
                    return Qe(n, t);
                }), Fo = ge(function (n) {
                    function t(t) {
                        return vt(t, n);
                    }
                    var r = n.length, e = r ? n[0] : 0, u = this.__wrapped__;
                    return !(1 < r || this.__actions__.length) && u instanceof Mn && Re(e) ? (u = u.slice(e, +e + (r ? 1 : 0)), u.__actions__.push({
                        func: nu,
                        args: [t],
                        thisArg: F
                    }), new zn(u, this.__chain__).thru(function (n) {
                        return r && !n.length && n.push(F), n;
                    })) : this.thru(t);
                }), No = Nr(function (n, t, r) {
                    ci.call(n, r) ? ++n[r] : _t(n, r, 1);
                }), Po = Yr(Ze), Zo = Yr(qe), qo = Nr(function (n, t, r) {
                    ci.call(n, r) ? n[r].push(t) : _t(n, r, [t]);
                }), Vo = lr(function (n, t, e) {
                    var u = -1, i = typeof t == 'function', o = pu(n) ? Hu(n.length) : [];
                    return oo(n, function (n) {
                        o[++u] = i ? r(t, n, e) : Dt(n, t, e);
                    }), o;
                }), Ko = Nr(function (n, t, r) {
                    _t(n, r, t);
                }), Go = Nr(function (n, t, r) {
                    n[r ? 0 : 1].push(t);
                }, function () {
                    return [
                        [],
                        []
                    ];
                }), Ho = lr(function (n, t) {
                    if (null == n)
                        return [];
                    var r = t.length;
                    return 1 < r && ze(n, t[0], t[1]) ? t = [] : 2 < r && ze(t[0], t[1], t[2]) && (t = [t[0]]), rr(n, kt(t, 1), []);
                }), Jo = Si || function () {
                    return Zn.Date.now();
                }, Yo = lr(function (n, t, r) {
                    var e = 1;
                    if (r.length)
                        var u = C(r, xe(Yo)), e = 32 | e;
                    return le(n, e, t, r, u);
                }), Qo = lr(function (n, t, r) {
                    var e = 3;
                    if (r.length)
                        var u = C(r, xe(Qo)), e = 32 | e;
                    return le(t, e, n, r, u);
                }), Xo = lr(function (n, t) {
                    return xt(n, 1, t);
                }), nf = lr(function (n, t, r) {
                    return xt(n, Iu(t) || 0, r);
                });
            lu.Cache = Pn;
            var tf = lr(function (n, t) {
                    t = 1 == t.length && af(t[0]) ? l(t[0], S(je())) : l(kt(t, 1), S(je()));
                    var e = t.length;
                    return lr(function (u) {
                        for (var i = -1, o = Mi(u.length, e); ++i < o;)
                            u[i] = t[i].call(this, u[i]);
                        return r(n, this, u);
                    });
                }), rf = lr(function (n, t) {
                    return le(n, 32, F, t, C(t, xe(rf)));
                }), ef = lr(function (n, t) {
                    return le(n, 64, F, t, C(t, xe(ef)));
                }), uf = ge(function (n, t) {
                    return le(n, 256, F, F, F, t);
                }), of = oe(Wt), ff = oe(function (n, t) {
                    return n >= t;
                }), cf = Mt(function () {
                    return arguments;
                }()) ? Mt : function (n) {
                    return xu(n) && ci.call(n, 'callee') && !ji.call(n, 'callee');
                }, af = Hu.isArray, lf = Hn ? S(Hn) : Tt, sf = Bi || Gu, hf = Jn ? S(Jn) : $t, pf = Yn ? S(Yn) : Nt, _f = Qn ? S(Qn) : qt, vf = Xn ? S(Xn) : Vt, gf = nt ? S(nt) : Kt, df = oe(Jt), yf = oe(function (n, t) {
                    return n <= t;
                }), bf = Pr(function (n, t) {
                    if (Le(t) || pu(t))
                        Tr(t, Lu(t), n);
                    else
                        for (var r in t)
                            ci.call(t, r) && at(n, r, t[r]);
                }), xf = Pr(function (n, t) {
                    Tr(t, Uu(t), n);
                }), jf = Pr(function (n, t, r, e) {
                    Tr(t, Uu(t), n, e);
                }), wf = Pr(function (n, t, r, e) {
                    Tr(t, Lu(t), n, e);
                }), mf = ge(vt), Af = lr(function (n) {
                    return n.push(F, se), r(jf, F, n);
                }), kf = lr(function (n) {
                    return n.push(F, he), r(Rf, F, n);
                }), Ef = ne(function (n, t, r) {
                    n[t] = r;
                }, Fu(Nu)), Of = ne(function (n, t, r) {
                    ci.call(n, t) ? n[t].push(r) : n[t] = [r];
                }, je), Sf = lr(Dt), If = Pr(function (n, t, r) {
                    nr(n, t, r);
                }), Rf = Pr(function (n, t, r, e) {
                    nr(n, t, r, e);
                }), zf = ge(function (n, t) {
                    var r = {};
                    if (null == n)
                        return r;
                    var e = false;
                    t = l(t, function (t) {
                        return t = Rr(t, n), e || (e = 1 < t.length), t;
                    }), Tr(n, ye(n), r), e && (r = dt(r, 7, pe));
                    for (var u = t.length; u--;)
                        mr(r, t[u]);
                    return r;
                }), Wf = ge(function (n, t) {
                    return null == n ? {} : er(n, t);
                }), Bf = ae(Lu), Lf = ae(Uu), Uf = Gr(function (n, t, r) {
                    return t = t.toLowerCase(), n + (r ? Mu(t) : t);
                }), Cf = Gr(function (n, t, r) {
                    return n + (r ? '-' : '') + t.toLowerCase();
                }), Df = Gr(function (n, t, r) {
                    return n + (r ? ' ' : '') + t.toLowerCase();
                }), Mf = Kr('toLowerCase'), Tf = Gr(function (n, t, r) {
                    return n + (r ? '_' : '') + t.toLowerCase();
                }), $f = Gr(function (n, t, r) {
                    return n + (r ? ' ' : '') + Nf(t);
                }), Ff = Gr(function (n, t, r) {
                    return n + (r ? ' ' : '') + t.toUpperCase();
                }), Nf = Kr('toUpperCase'), Pf = lr(function (n, t) {
                    try {
                        return r(n, F, t);
                    } catch (n) {
                        return vu(n) ? n : new Yu(n);
                    }
                }), Zf = ge(function (n, t) {
                    return u(t, function (t) {
                        t = $e(t), _t(n, t, Yo(n[t], n));
                    }), n;
                }), qf = Qr(), Vf = Qr(true), Kf = lr(function (n, t) {
                    return function (r) {
                        return Dt(r, n, t);
                    };
                }), Gf = lr(function (n, t) {
                    return function (r) {
                        return Dt(n, r, t);
                    };
                }), Hf = re(l), Jf = re(o), Yf = re(_), Qf = ie(), Xf = ie(true), nc = te(function (n, t) {
                    return n + t;
                }, 0), tc = ce('ceil'), rc = te(function (n, t) {
                    return n / t;
                }, 1), ec = ce('floor'), uc = te(function (n, t) {
                    return n * t;
                }, 1), ic = ce('round'), oc = te(function (n, t) {
                    return n - t;
                }, 0);
            return On.after = function (n, t) {
                if (typeof t != 'function')
                    throw new ei('Expected a function');
                return n = Ou(n), function () {
                    if (1 > --n)
                        return t.apply(this, arguments);
                };
            }, On.ary = iu, On.assign = bf, On.assignIn = xf, On.assignInWith = jf, On.assignWith = wf, On.at = mf, On.before = ou, On.bind = Yo, On.bindAll = Zf, On.bindKey = Qo, On.castArray = function () {
                if (!arguments.length)
                    return [];
                var n = arguments[0];
                return af(n) ? n : [n];
            }, On.chain = Xe, On.chunk = function (n, t, r) {
                if (t = (r ? ze(n, t, r) : t === F) ? 1 : Di(Ou(t), 0), r = null == n ? 0 : n.length, !r || 1 > t)
                    return [];
                for (var e = 0, u = 0, i = Hu(Ri(r / t)); e < r;)
                    i[u++] = vr(n, e, e += t);
                return i;
            }, On.compact = function (n) {
                for (var t = -1, r = null == n ? 0 : n.length, e = 0, u = []; ++t < r;) {
                    var i = n[t];
                    i && (u[e++] = i);
                }
                return u;
            }, On.concat = function () {
                var n = arguments.length;
                if (!n)
                    return [];
                for (var t = Hu(n - 1), r = arguments[0]; n--;)
                    t[n - 1] = arguments[n];
                return s(af(r) ? Mr(r) : [r], kt(t, 1));
            }, On.cond = function (n) {
                var t = null == n ? 0 : n.length, e = je();
                return n = t ? l(n, function (n) {
                    if ('function' != typeof n[1])
                        throw new ei('Expected a function');
                    return [
                        e(n[0]),
                        n[1]
                    ];
                }) : [], lr(function (e) {
                    for (var u = -1; ++u < t;) {
                        var i = n[u];
                        if (r(i[0], this, e))
                            return r(i[1], this, e);
                    }
                });
            }, On.conforms = function (n) {
                return yt(dt(n, 1));
            }, On.constant = Fu, On.countBy = No, On.create = function (n, t) {
                var r = io(n);
                return null == t ? r : ht(r, t);
            }, On.curry = fu, On.curryRight = cu, On.debounce = au, On.defaults = Af, On.defaultsDeep = kf, On.defer = Xo, On.delay = nf, On.difference = Ao, On.differenceBy = ko, On.differenceWith = Eo, On.drop = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (t = r || t === F ? 1 : Ou(t), vr(n, 0 > t ? 0 : t, e)) : [];
            }, On.dropRight = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (t = r || t === F ? 1 : Ou(t), t = e - t, vr(n, 0, 0 > t ? 0 : t)) : [];
            }, On.dropRightWhile = function (n, t) {
                return n && n.length ? Ar(n, je(t, 3), true, true) : [];
            }, On.dropWhile = function (n, t) {
                return n && n.length ? Ar(n, je(t, 3), true) : [];
            }, On.fill = function (n, t, r, e) {
                var u = null == n ? 0 : n.length;
                if (!u)
                    return [];
                for (r && typeof r != 'number' && ze(n, t, r) && (r = 0, e = u), u = n.length, r = Ou(r), 0 > r && (r = -r > u ? 0 : u + r), e = e === F || e > u ? u : Ou(e), 0 > e && (e += u), e = r > e ? 0 : Su(e); r < e;)
                    n[r++] = t;
                return n;
            }, On.filter = function (n, t) {
                return (af(n) ? f : At)(n, je(t, 3));
            }, On.flatMap = function (n, t) {
                return kt(uu(n, t), 1);
            }, On.flatMapDeep = function (n, t) {
                return kt(uu(n, t), N);
            }, On.flatMapDepth = function (n, t, r) {
                return r = r === F ? 1 : Ou(r), kt(uu(n, t), r);
            }, On.flatten = Ve, On.flattenDeep = function (n) {
                return (null == n ? 0 : n.length) ? kt(n, N) : [];
            }, On.flattenDepth = function (n, t) {
                return null != n && n.length ? (t = t === F ? 1 : Ou(t), kt(n, t)) : [];
            }, On.flip = function (n) {
                return le(n, 512);
            }, On.flow = qf, On.flowRight = Vf, On.fromPairs = function (n) {
                for (var t = -1, r = null == n ? 0 : n.length, e = {}; ++t < r;) {
                    var u = n[t];
                    e[u[0]] = u[1];
                }
                return e;
            }, On.functions = function (n) {
                return null == n ? [] : St(n, Lu(n));
            }, On.functionsIn = function (n) {
                return null == n ? [] : St(n, Uu(n));
            }, On.groupBy = qo, On.initial = function (n) {
                return (null == n ? 0 : n.length) ? vr(n, 0, -1) : [];
            }, On.intersection = Oo, On.intersectionBy = So, On.intersectionWith = Io, On.invert = Ef, On.invertBy = Of, On.invokeMap = Vo, On.iteratee = Pu, On.keyBy = Ko, On.keys = Lu, On.keysIn = Uu, On.map = uu, On.mapKeys = function (n, t) {
                var r = {};
                return t = je(t, 3), Et(n, function (n, e, u) {
                    _t(r, t(n, e, u), n);
                }), r;
            }, On.mapValues = function (n, t) {
                var r = {};
                return t = je(t, 3), Et(n, function (n, e, u) {
                    _t(r, e, t(n, e, u));
                }), r;
            }, On.matches = function (n) {
                return Qt(dt(n, 1));
            }, On.matchesProperty = function (n, t) {
                return Xt(n, dt(t, 1));
            }, On.memoize = lu, On.merge = If, On.mergeWith = Rf, On.method = Kf, On.methodOf = Gf, On.mixin = Zu, On.negate = su, On.nthArg = function (n) {
                return n = Ou(n), lr(function (t) {
                    return tr(t, n);
                });
            }, On.omit = zf, On.omitBy = function (n, t) {
                return Cu(n, su(je(t)));
            }, On.once = function (n) {
                return ou(2, n);
            }, On.orderBy = function (n, t, r, e) {
                return null == n ? [] : (af(t) || (t = null == t ? [] : [t]), r = e ? F : r, af(r) || (r = null == r ? [] : [r]), rr(n, t, r));
            }, On.over = Hf, On.overArgs = tf, On.overEvery = Jf, On.overSome = Yf, On.partial = rf, On.partialRight = ef, On.partition = Go, On.pick = Wf, On.pickBy = Cu, On.property = Vu, On.propertyOf = function (n) {
                return function (t) {
                    return null == n ? F : It(n, t);
                };
            }, On.pull = Ro, On.pullAll = He, On.pullAllBy = function (n, t, r) {
                return n && n.length && t && t.length ? or(n, t, je(r, 2)) : n;
            }, On.pullAllWith = function (n, t, r) {
                return n && n.length && t && t.length ? or(n, t, F, r) : n;
            }, On.pullAt = zo, On.range = Qf, On.rangeRight = Xf, On.rearg = uf, On.reject = function (n, t) {
                return (af(n) ? f : At)(n, su(je(t, 3)));
            }, On.remove = function (n, t) {
                var r = [];
                if (!n || !n.length)
                    return r;
                var e = -1, u = [], i = n.length;
                for (t = je(t, 3); ++e < i;) {
                    var o = n[e];
                    t(o, e, n) && (r.push(o), u.push(e));
                }
                return fr(n, u), r;
            }, On.rest = function (n, t) {
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return t = t === F ? t : Ou(t), lr(n, t);
            }, On.reverse = Je, On.sampleSize = function (n, t, r) {
                return t = (r ? ze(n, t, r) : t === F) ? 1 : Ou(t), (af(n) ? ot : hr)(n, t);
            }, On.set = function (n, t, r) {
                return null == n ? n : pr(n, t, r);
            }, On.setWith = function (n, t, r, e) {
                return e = typeof e == 'function' ? e : F, null == n ? n : pr(n, t, r, e);
            }, On.shuffle = function (n) {
                return (af(n) ? ft : _r)(n);
            }, On.slice = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (r && typeof r != 'number' && ze(n, t, r) ? (t = 0, r = e) : (t = null == t ? 0 : Ou(t), r = r === F ? e : Ou(r)), vr(n, t, r)) : [];
            }, On.sortBy = Ho, On.sortedUniq = function (n) {
                return n && n.length ? br(n) : [];
            }, On.sortedUniqBy = function (n, t) {
                return n && n.length ? br(n, je(t, 2)) : [];
            }, On.split = function (n, t, r) {
                return r && typeof r != 'number' && ze(n, t, r) && (t = r = F), r = r === F ? 4294967295 : r >>> 0, r ? (n = zu(n)) && (typeof t == 'string' || null != t && !_f(t)) && (t = jr(t), !t && Bn.test(n)) ? zr($(n), 0, r) : n.split(t, r) : [];
            }, On.spread = function (n, t) {
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return t = t === F ? 0 : Di(Ou(t), 0), lr(function (e) {
                    var u = e[t];
                    return e = zr(e, 0, t), u && s(e, u), r(n, this, e);
                });
            }, On.tail = function (n) {
                var t = null == n ? 0 : n.length;
                return t ? vr(n, 1, t) : [];
            }, On.take = function (n, t, r) {
                return n && n.length ? (t = r || t === F ? 1 : Ou(t), vr(n, 0, 0 > t ? 0 : t)) : [];
            }, On.takeRight = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (t = r || t === F ? 1 : Ou(t), t = e - t, vr(n, 0 > t ? 0 : t, e)) : [];
            }, On.takeRightWhile = function (n, t) {
                return n && n.length ? Ar(n, je(t, 3), false, true) : [];
            }, On.takeWhile = function (n, t) {
                return n && n.length ? Ar(n, je(t, 3)) : [];
            }, On.tap = function (n, t) {
                return t(n), n;
            }, On.throttle = function (n, t, r) {
                var e = true, u = true;
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return bu(r) && (e = 'leading' in r ? !!r.leading : e, u = 'trailing' in r ? !!r.trailing : u), au(n, t, {
                    leading: e,
                    maxWait: t,
                    trailing: u
                });
            }, On.thru = nu, On.toArray = ku, On.toPairs = Bf, On.toPairsIn = Lf, On.toPath = function (n) {
                return af(n) ? l(n, $e) : Au(n) ? [n] : Mr(mo(zu(n)));
            }, On.toPlainObject = Ru, On.transform = function (n, t, r) {
                var e = af(n), i = e || sf(n) || gf(n);
                if (t = je(t, 4), null == r) {
                    var o = n && n.constructor;
                    r = i ? e ? new o() : [] : bu(n) && gu(o) ? io(bi(n)) : {};
                }
                return (i ? u : Et)(n, function (n, e, u) {
                    return t(r, n, e, u);
                }), r;
            }, On.unary = function (n) {
                return iu(n, 1);
            }, On.union = Wo, On.unionBy = Bo, On.unionWith = Lo, On.uniq = function (n) {
                return n && n.length ? wr(n) : [];
            }, On.uniqBy = function (n, t) {
                return n && n.length ? wr(n, je(t, 2)) : [];
            }, On.uniqWith = function (n, t) {
                return t = typeof t == 'function' ? t : F, n && n.length ? wr(n, F, t) : [];
            }, On.unset = function (n, t) {
                return null == n || mr(n, t);
            }, On.unzip = Ye, On.unzipWith = Qe, On.update = function (n, t, r) {
                return null == n ? n : pr(n, t, Ir(r)(It(n, t)), void 0);
            }, On.updateWith = function (n, t, r, e) {
                return e = typeof e == 'function' ? e : F, null != n && (n = pr(n, t, Ir(r)(It(n, t)), e)), n;
            }, On.values = Du, On.valuesIn = function (n) {
                return null == n ? [] : I(n, Uu(n));
            }, On.without = Uo, On.words = $u, On.wrap = function (n, t) {
                return rf(Ir(t), n);
            }, On.xor = Co, On.xorBy = Do, On.xorWith = Mo, On.zip = To, On.zipObject = function (n, t) {
                return Or(n || [], t || [], at);
            }, On.zipObjectDeep = function (n, t) {
                return Or(n || [], t || [], pr);
            }, On.zipWith = $o, On.entries = Bf, On.entriesIn = Lf, On.extend = xf, On.extendWith = jf, Zu(On, On), On.add = nc, On.attempt = Pf, On.camelCase = Uf, On.capitalize = Mu, On.ceil = tc, On.clamp = function (n, t, r) {
                return r === F && (r = t, t = F), r !== F && (r = Iu(r), r = r === r ? r : 0), t !== F && (t = Iu(t), t = t === t ? t : 0), gt(Iu(n), t, r);
            }, On.clone = function (n) {
                return dt(n, 4);
            }, On.cloneDeep = function (n) {
                return dt(n, 5);
            }, On.cloneDeepWith = function (n, t) {
                return t = typeof t == 'function' ? t : F, dt(n, 5, t);
            }, On.cloneWith = function (n, t) {
                return t = typeof t == 'function' ? t : F, dt(n, 4, t);
            }, On.conformsTo = function (n, t) {
                return null == t || bt(n, t, Lu(t));
            }, On.deburr = Tu, On.defaultTo = function (n, t) {
                return null == n || n !== n ? t : n;
            }, On.divide = rc, On.endsWith = function (n, t, r) {
                n = zu(n), t = jr(t);
                var e = n.length, e = r = r === F ? e : gt(Ou(r), 0, e);
                return r -= t.length, 0 <= r && n.slice(r, e) == t;
            }, On.eq = hu, On.escape = function (n) {
                return (n = zu(n)) && Y.test(n) ? n.replace(H, et) : n;
            }, On.escapeRegExp = function (n) {
                return (n = zu(n)) && fn.test(n) ? n.replace(on, '\\$&') : n;
            }, On.every = function (n, t, r) {
                var e = af(n) ? o : wt;
                return r && ze(n, t, r) && (t = F), e(n, je(t, 3));
            }, On.find = Po, On.findIndex = Ze, On.findKey = function (n, t) {
                return v(n, je(t, 3), Et);
            }, On.findLast = Zo, On.findLastIndex = qe, On.findLastKey = function (n, t) {
                return v(n, je(t, 3), Ot);
            }, On.floor = ec, On.forEach = ru, On.forEachRight = eu, On.forIn = function (n, t) {
                return null == n ? n : co(n, je(t, 3), Uu);
            }, On.forInRight = function (n, t) {
                return null == n ? n : ao(n, je(t, 3), Uu);
            }, On.forOwn = function (n, t) {
                return n && Et(n, je(t, 3));
            }, On.forOwnRight = function (n, t) {
                return n && Ot(n, je(t, 3));
            }, On.get = Wu, On.gt = of, On.gte = ff, On.has = function (n, t) {
                return null != n && ke(n, t, Bt);
            }, On.hasIn = Bu, On.head = Ke, On.identity = Nu, On.includes = function (n, t, r, e) {
                return n = pu(n) ? n : Du(n), r = r && !e ? Ou(r) : 0, e = n.length, 0 > r && (r = Di(e + r, 0)), mu(n) ? r <= e && -1 < n.indexOf(t, r) : !!e && -1 < d(n, t, r);
            }, On.indexOf = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (r = null == r ? 0 : Ou(r), 0 > r && (r = Di(e + r, 0)), d(n, t, r)) : -1;
            }, On.inRange = function (n, t, r) {
                return t = Eu(t), r === F ? (r = t, t = 0) : r = Eu(r), n = Iu(n), n >= Mi(t, r) && n < Di(t, r);
            }, On.invoke = Sf, On.isArguments = cf, On.isArray = af, On.isArrayBuffer = lf, On.isArrayLike = pu, On.isArrayLikeObject = _u, On.isBoolean = function (n) {
                return true === n || false === n || xu(n) && '[object Boolean]' == zt(n);
            }, On.isBuffer = sf, On.isDate = hf, On.isElement = function (n) {
                return xu(n) && 1 === n.nodeType && !wu(n);
            }, On.isEmpty = function (n) {
                if (null == n)
                    return true;
                if (pu(n) && (af(n) || typeof n == 'string' || typeof n.splice == 'function' || sf(n) || gf(n) || cf(n)))
                    return !n.length;
                var t = yo(n);
                if ('[object Map]' == t || '[object Set]' == t)
                    return !n.size;
                if (Le(n))
                    return !Ht(n).length;
                for (var r in n)
                    if (ci.call(n, r))
                        return false;
                return true;
            }, On.isEqual = function (n, t) {
                return Ft(n, t);
            }, On.isEqualWith = function (n, t, r) {
                var e = (r = typeof r == 'function' ? r : F) ? r(n, t) : F;
                return e === F ? Ft(n, t, F, r) : !!e;
            }, On.isError = vu, On.isFinite = function (n) {
                return typeof n == 'number' && Li(n);
            }, On.isFunction = gu, On.isInteger = du, On.isLength = yu, On.isMap = pf, On.isMatch = function (n, t) {
                return n === t || Pt(n, t, me(t));
            }, On.isMatchWith = function (n, t, r) {
                return r = typeof r == 'function' ? r : F, Pt(n, t, me(t), r);
            }, On.isNaN = function (n) {
                return ju(n) && n != +n;
            }, On.isNative = function (n) {
                if (bo(n))
                    throw new Yu('Unsupported core-js use. Try https://npms.io/search?q=ponyfill.');
                return Zt(n);
            }, On.isNil = function (n) {
                return null == n;
            }, On.isNull = function (n) {
                return null === n;
            }, On.isNumber = ju, On.isObject = bu, On.isObjectLike = xu, On.isPlainObject = wu, On.isRegExp = _f, On.isSafeInteger = function (n) {
                return du(n) && -9007199254740991 <= n && 9007199254740991 >= n;
            }, On.isSet = vf, On.isString = mu, On.isSymbol = Au, On.isTypedArray = gf, On.isUndefined = function (n) {
                return n === F;
            }, On.isWeakMap = function (n) {
                return xu(n) && '[object WeakMap]' == yo(n);
            }, On.isWeakSet = function (n) {
                return xu(n) && '[object WeakSet]' == zt(n);
            }, On.join = function (n, t) {
                return null == n ? '' : Ui.call(n, t);
            }, On.kebabCase = Cf, On.last = Ge, On.lastIndexOf = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                if (!e)
                    return -1;
                var u = e;
                if (r !== F && (u = Ou(r), u = 0 > u ? Di(e + u, 0) : Mi(u, e - 1)), t === t) {
                    for (r = u + 1; r-- && n[r] !== t;);
                    n = r;
                } else
                    n = g(n, b, u, true);
                return n;
            }, On.lowerCase = Df, On.lowerFirst = Mf, On.lt = df, On.lte = yf, On.max = function (n) {
                return n && n.length ? mt(n, Nu, Wt) : F;
            }, On.maxBy = function (n, t) {
                return n && n.length ? mt(n, je(t, 2), Wt) : F;
            }, On.mean = function (n) {
                return x(n, Nu);
            }, On.meanBy = function (n, t) {
                return x(n, je(t, 2));
            }, On.min = function (n) {
                return n && n.length ? mt(n, Nu, Jt) : F;
            }, On.minBy = function (n, t) {
                return n && n.length ? mt(n, je(t, 2), Jt) : F;
            }, On.stubArray = Ku, On.stubFalse = Gu, On.stubObject = function () {
                return {};
            }, On.stubString = function () {
                return '';
            }, On.stubTrue = function () {
                return true;
            }, On.multiply = uc, On.nth = function (n, t) {
                return n && n.length ? tr(n, Ou(t)) : F;
            }, On.noConflict = function () {
                return Zn._ === this && (Zn._ = pi), this;
            }, On.noop = qu, On.now = Jo, On.pad = function (n, t, r) {
                n = zu(n);
                var e = (t = Ou(t)) ? T(n) : 0;
                return !t || e >= t ? n : (t = (t - e) / 2, ee(zi(t), r) + n + ee(Ri(t), r));
            }, On.padEnd = function (n, t, r) {
                n = zu(n);
                var e = (t = Ou(t)) ? T(n) : 0;
                return t && e < t ? n + ee(t - e, r) : n;
            }, On.padStart = function (n, t, r) {
                n = zu(n);
                var e = (t = Ou(t)) ? T(n) : 0;
                return t && e < t ? ee(t - e, r) + n : n;
            }, On.parseInt = function (n, t, r) {
                return r || null == t ? t = 0 : t && (t = +t), $i(zu(n).replace(an, ''), t || 0);
            }, On.random = function (n, t, r) {
                if (r && typeof r != 'boolean' && ze(n, t, r) && (t = r = F), r === F && (typeof t == 'boolean' ? (r = t, t = F) : typeof n == 'boolean' && (r = n, n = F)), n === F && t === F ? (n = 0, t = 1) : (n = Eu(n), t === F ? (t = n, n = 0) : t = Eu(t)), n > t) {
                    var e = n;
                    n = t, t = e;
                }
                return r || n % 1 || t % 1 ? (r = Fi(), Mi(n + r * (t - n + $n('1e-' + ((r + '').length - 1))), t)) : cr(n, t);
            }, On.reduce = function (n, t, r) {
                var e = af(n) ? h : m, u = 3 > arguments.length;
                return e(n, je(t, 4), r, u, oo);
            }, On.reduceRight = function (n, t, r) {
                var e = af(n) ? p : m, u = 3 > arguments.length;
                return e(n, je(t, 4), r, u, fo);
            }, On.repeat = function (n, t, r) {
                return t = (r ? ze(n, t, r) : t === F) ? 1 : Ou(t), ar(zu(n), t);
            }, On.replace = function () {
                var n = arguments, t = zu(n[0]);
                return 3 > n.length ? t : t.replace(n[1], n[2]);
            }, On.result = function (n, t, r) {
                t = Rr(t, n);
                var e = -1, u = t.length;
                for (u || (u = 1, n = F); ++e < u;) {
                    var i = null == n ? F : n[$e(t[e])];
                    i === F && (e = u, i = r), n = gu(i) ? i.call(n) : i;
                }
                return n;
            }, On.round = ic, On.runInContext = w, On.sample = function (n) {
                return (af(n) ? tt : sr)(n);
            }, On.size = function (n) {
                if (null == n)
                    return 0;
                if (pu(n))
                    return mu(n) ? T(n) : n.length;
                var t = yo(n);
                return '[object Map]' == t || '[object Set]' == t ? n.size : Ht(n).length;
            }, On.snakeCase = Tf, On.some = function (n, t, r) {
                var e = af(n) ? _ : gr;
                return r && ze(n, t, r) && (t = F), e(n, je(t, 3));
            }, On.sortedIndex = function (n, t) {
                return dr(n, t);
            }, On.sortedIndexBy = function (n, t, r) {
                return yr(n, t, je(r, 2));
            }, On.sortedIndexOf = function (n, t) {
                var r = null == n ? 0 : n.length;
                if (r) {
                    var e = dr(n, t);
                    if (e < r && hu(n[e], t))
                        return e;
                }
                return -1;
            }, On.sortedLastIndex = function (n, t) {
                return dr(n, t, true);
            }, On.sortedLastIndexBy = function (n, t, r) {
                return yr(n, t, je(r, 2), true);
            }, On.sortedLastIndexOf = function (n, t) {
                if (null == n ? 0 : n.length) {
                    var r = dr(n, t, true) - 1;
                    if (hu(n[r], t))
                        return r;
                }
                return -1;
            }, On.startCase = $f, On.startsWith = function (n, t, r) {
                return n = zu(n), r = gt(Ou(r), 0, n.length), t = jr(t), n.slice(r, r + t.length) == t;
            }, On.subtract = oc, On.sum = function (n) {
                return n && n.length ? k(n, Nu) : 0;
            }, On.sumBy = function (n, t) {
                return n && n.length ? k(n, je(t, 2)) : 0;
            }, On.template = function (n, t, r) {
                var e = On.templateSettings;
                r && ze(n, t, r) && (t = F), n = zu(n), t = jf({}, t, e, se), r = jf({}, t.imports, e.imports, se);
                var u, i, o = Lu(r), f = I(r, o), c = 0;
                r = t.interpolate || An;
                var a = '__p+=\'';
                r = ti((t.escape || An).source + '|' + r.source + '|' + (r === nn ? gn : An).source + '|' + (t.evaluate || An).source + '|$', 'g');
                var l = 'sourceURL' in t ? '//# sourceURL=' + t.sourceURL + '\n' : '';
                if (n.replace(r, function (t, r, e, o, f, l) {
                        return e || (e = o), a += n.slice(c, l).replace(kn, B), r && (u = true, a += '\'+__e(' + r + ')+\''), f && (i = true, a += '\';' + f + ';\n__p+=\''), e && (a += '\'+((__t=(' + e + '))==null?\'\':__t)+\''), c = l + t.length, t;
                    }), a += '\';', (t = t.variable) || (a = 'with(obj){' + a + '}'), a = (i ? a.replace(q, '') : a).replace(V, '$1').replace(K, '$1;'), a = 'function(' + (t || 'obj') + '){' + (t ? '' : 'obj||(obj={});') + 'var __t,__p=\'\'' + (u ? ',__e=_.escape' : '') + (i ? ',__j=Array.prototype.join;function print(){__p+=__j.call(arguments,\'\')}' : ';') + a + 'return __p}', t = Pf(function () {
                        return Qu(o, l + 'return ' + a).apply(F, f);
                    }), t.source = a, vu(t))
                    throw t;
                return t;
            }, On.times = function (n, t) {
                if (n = Ou(n), 1 > n || 9007199254740991 < n)
                    return [];
                var r = 4294967295, e = Mi(n, 4294967295);
                for (t = je(t), n -= 4294967295, e = E(e, t); ++r < n;)
                    t(r);
                return e;
            }, On.toFinite = Eu, On.toInteger = Ou, On.toLength = Su, On.toLower = function (n) {
                return zu(n).toLowerCase();
            }, On.toNumber = Iu, On.toSafeInteger = function (n) {
                return gt(Ou(n), -9007199254740991, 9007199254740991);
            }, On.toString = zu, On.toUpper = function (n) {
                return zu(n).toUpperCase();
            }, On.trim = function (n, t, r) {
                return (n = zu(n)) && (r || t === F) ? n.replace(cn, '') : n && (t = jr(t)) ? (n = $(n), r = $(t), t = z(n, r), r = W(n, r) + 1, zr(n, t, r).join('')) : n;
            }, On.trimEnd = function (n, t, r) {
                return (n = zu(n)) && (r || t === F) ? n.replace(ln, '') : n && (t = jr(t)) ? (n = $(n), t = W(n, $(t)) + 1, zr(n, 0, t).join('')) : n;
            }, On.trimStart = function (n, t, r) {
                return (n = zu(n)) && (r || t === F) ? n.replace(an, '') : n && (t = jr(t)) ? (n = $(n), t = z(n, $(t)), zr(n, t).join('')) : n;
            }, On.truncate = function (n, t) {
                var r = 30, e = '...';
                if (bu(t))
                    var u = 'separator' in t ? t.separator : u, r = 'length' in t ? Ou(t.length) : r, e = 'omission' in t ? jr(t.omission) : e;
                n = zu(n);
                var i = n.length;
                if (Bn.test(n))
                    var o = $(n), i = o.length;
                if (r >= i)
                    return n;
                if (i = r - T(e), 1 > i)
                    return e;
                if (r = o ? zr(o, 0, i).join('') : n.slice(0, i), u === F)
                    return r + e;
                if (o && (i += r.length - i), _f(u)) {
                    if (n.slice(i).search(u)) {
                        var f = r;
                        for (u.global || (u = ti(u.source, zu(dn.exec(u)) + 'g')), u.lastIndex = 0; o = u.exec(f);)
                            var c = o.index;
                        r = r.slice(0, c === F ? i : c);
                    }
                } else
                    n.indexOf(jr(u), i) != i && (u = r.lastIndexOf(u), -1 < u && (r = r.slice(0, u)));
                return r + e;
            }, On.unescape = function (n) {
                return (n = zu(n)) && J.test(n) ? n.replace(G, ut) : n;
            }, On.uniqueId = function (n) {
                var t = ++ai;
                return zu(n) + t;
            }, On.upperCase = Ff, On.upperFirst = Nf, On.each = ru, On.eachRight = eu, On.first = Ke, Zu(On, function () {
                var n = {};
                return Et(On, function (t, r) {
                    ci.call(On.prototype, r) || (n[r] = t);
                }), n;
            }(), { chain: false }), On.VERSION = '4.17.3', u('bind bindKey curry curryRight partial partialRight'.split(' '), function (n) {
                On[n].placeholder = On;
            }), u([
                'drop',
                'take'
            ], function (n, t) {
                Mn.prototype[n] = function (r) {
                    r = r === F ? 1 : Di(Ou(r), 0);
                    var e = this.__filtered__ && !t ? new Mn(this) : this.clone();
                    return e.__filtered__ ? e.__takeCount__ = Mi(r, e.__takeCount__) : e.__views__.push({
                        size: Mi(r, 4294967295),
                        type: n + (0 > e.__dir__ ? 'Right' : '')
                    }), e;
                }, Mn.prototype[n + 'Right'] = function (t) {
                    return this.reverse()[n](t).reverse();
                };
            }), u([
                'filter',
                'map',
                'takeWhile'
            ], function (n, t) {
                var r = t + 1, e = 1 == r || 3 == r;
                Mn.prototype[n] = function (n) {
                    var t = this.clone();
                    return t.__iteratees__.push({
                        iteratee: je(n, 3),
                        type: r
                    }), t.__filtered__ = t.__filtered__ || e, t;
                };
            }), u([
                'head',
                'last'
            ], function (n, t) {
                var r = 'take' + (t ? 'Right' : '');
                Mn.prototype[n] = function () {
                    return this[r](1).value()[0];
                };
            }), u([
                'initial',
                'tail'
            ], function (n, t) {
                var r = 'drop' + (t ? '' : 'Right');
                Mn.prototype[n] = function () {
                    return this.__filtered__ ? new Mn(this) : this[r](1);
                };
            }), Mn.prototype.compact = function () {
                return this.filter(Nu);
            }, Mn.prototype.find = function (n) {
                return this.filter(n).head();
            }, Mn.prototype.findLast = function (n) {
                return this.reverse().find(n);
            }, Mn.prototype.invokeMap = lr(function (n, t) {
                return typeof n == 'function' ? new Mn(this) : this.map(function (r) {
                    return Dt(r, n, t);
                });
            }), Mn.prototype.reject = function (n) {
                return this.filter(su(je(n)));
            }, Mn.prototype.slice = function (n, t) {
                n = Ou(n);
                var r = this;
                return r.__filtered__ && (0 < n || 0 > t) ? new Mn(r) : (0 > n ? r = r.takeRight(-n) : n && (r = r.drop(n)), t !== F && (t = Ou(t), r = 0 > t ? r.dropRight(-t) : r.take(t - n)), r);
            }, Mn.prototype.takeRightWhile = function (n) {
                return this.reverse().takeWhile(n).reverse();
            }, Mn.prototype.toArray = function () {
                return this.take(4294967295);
            }, Et(Mn.prototype, function (n, t) {
                var r = /^(?:filter|find|map|reject)|While$/.test(t), e = /^(?:head|last)$/.test(t), u = On[e ? 'take' + ('last' == t ? 'Right' : '') : t], i = e || /^find/.test(t);
                u && (On.prototype[t] = function () {
                    function t(n) {
                        return n = u.apply(On, s([n], f)), e && h ? n[0] : n;
                    }
                    var o = this.__wrapped__, f = e ? [1] : arguments, c = o instanceof Mn, a = f[0], l = c || af(o);
                    l && r && typeof a == 'function' && 1 != a.length && (c = l = false);
                    var h = this.__chain__, p = !!this.__actions__.length, a = i && !h, c = c && !p;
                    return !i && l ? (o = c ? o : new Mn(this), o = n.apply(o, f), o.__actions__.push({
                        func: nu,
                        args: [t],
                        thisArg: F
                    }), new zn(o, h)) : a && c ? n.apply(this, f) : (o = this.thru(t), a ? e ? o.value()[0] : o.value() : o);
                });
            }), u('pop push shift sort splice unshift'.split(' '), function (n) {
                var t = ui[n], r = /^(?:push|sort|unshift)$/.test(n) ? 'tap' : 'thru', e = /^(?:pop|shift)$/.test(n);
                On.prototype[n] = function () {
                    var n = arguments;
                    if (e && !this.__chain__) {
                        var u = this.value();
                        return t.apply(af(u) ? u : [], n);
                    }
                    return this[r](function (r) {
                        return t.apply(af(r) ? r : [], n);
                    });
                };
            }), Et(Mn.prototype, function (n, t) {
                var r = On[t];
                if (r) {
                    var e = r.name + '';
                    (Ji[e] || (Ji[e] = [])).push({
                        name: t,
                        func: r
                    });
                }
            }), Ji[Xr(F, 2).name] = [{
                    name: 'wrapper',
                    func: F
                }], Mn.prototype.clone = function () {
                var n = new Mn(this.__wrapped__);
                return n.__actions__ = Mr(this.__actions__), n.__dir__ = this.__dir__, n.__filtered__ = this.__filtered__, n.__iteratees__ = Mr(this.__iteratees__), n.__takeCount__ = this.__takeCount__, n.__views__ = Mr(this.__views__), n;
            }, Mn.prototype.reverse = function () {
                if (this.__filtered__) {
                    var n = new Mn(this);
                    n.__dir__ = -1, n.__filtered__ = true;
                } else
                    n = this.clone(), n.__dir__ *= -1;
                return n;
            }, Mn.prototype.value = function () {
                var n, t = this.__wrapped__.value(), r = this.__dir__, e = af(t), u = 0 > r, i = e ? t.length : 0;
                n = i;
                for (var o = this.__views__, f = 0, c = -1, a = o.length; ++c < a;) {
                    var l = o[c], s = l.size;
                    switch (l.type) {
                    case 'drop':
                        f += s;
                        break;
                    case 'dropRight':
                        n -= s;
                        break;
                    case 'take':
                        n = Mi(n, f + s);
                        break;
                    case 'takeRight':
                        f = Di(f, n - s);
                    }
                }
                if (n = {
                        start: f,
                        end: n
                    }, o = n.start, f = n.end, n = f - o, o = u ? f : o - 1, f = this.__iteratees__, c = f.length, a = 0, l = Mi(n, this.__takeCount__), !e || !u && i == n && l == n)
                    return kr(t, this.__actions__);
                e = [];
                n:
                    for (; n-- && a < l;) {
                        for (o += r, u = -1, i = t[o]; ++u < c;) {
                            var h = f[u], s = h.type, h = (0, h.iteratee)(i);
                            if (2 == s)
                                i = h;
                            else if (!h) {
                                if (1 == s)
                                    continue n;
                                break n;
                            }
                        }
                        e[a++] = i;
                    }
                return e;
            }, On.prototype.at = Fo, On.prototype.chain = function () {
                return Xe(this);
            }, On.prototype.commit = function () {
                return new zn(this.value(), this.__chain__);
            }, On.prototype.next = function () {
                this.__values__ === F && (this.__values__ = ku(this.value()));
                var n = this.__index__ >= this.__values__.length;
                return {
                    done: n,
                    value: n ? F : this.__values__[this.__index__++]
                };
            }, On.prototype.plant = function (n) {
                for (var t, r = this; r instanceof Sn;) {
                    var e = Pe(r);
                    e.__index__ = 0, e.__values__ = F, t ? u.__wrapped__ = e : t = e;
                    var u = e, r = r.__wrapped__;
                }
                return u.__wrapped__ = n, t;
            }, On.prototype.reverse = function () {
                var n = this.__wrapped__;
                return n instanceof Mn ? (this.__actions__.length && (n = new Mn(this)), n = n.reverse(), n.__actions__.push({
                    func: nu,
                    args: [Je],
                    thisArg: F
                }), new zn(n, this.__chain__)) : this.thru(Je);
            }, On.prototype.toJSON = On.prototype.valueOf = On.prototype.value = function () {
                return kr(this.__wrapped__, this.__actions__);
            }, On.prototype.first = On.prototype.head, Ai && (On.prototype[Ai] = tu), On;
        }();
    typeof define == 'function' && typeof define.amd == 'object' && define.amd ? (Zn._ = it, define('fp/lodash.min', [], function () {
        return it;
    })) : Vn ? ((Vn.exports = it)._ = it, qn._ = it) : Zn._ = it;
}.call(this));

;
(function () {
    function n(n, t) {
        return n.set(t[0], t[1]), n;
    }
    function t(n, t) {
        return n.add(t), n;
    }
    function r(n, t, r) {
        switch (r.length) {
        case 0:
            return n.call(t);
        case 1:
            return n.call(t, r[0]);
        case 2:
            return n.call(t, r[0], r[1]);
        case 3:
            return n.call(t, r[0], r[1], r[2]);
        }
        return n.apply(t, r);
    }
    function e(n, t, r, e) {
        for (var u = -1, i = null == n ? 0 : n.length; ++u < i;) {
            var o = n[u];
            t(e, o, r(o), n);
        }
        return e;
    }
    function u(n, t) {
        for (var r = -1, e = null == n ? 0 : n.length; ++r < e && false !== t(n[r], r, n););
        return n;
    }
    function i(n, t) {
        for (var r = null == n ? 0 : n.length; r-- && false !== t(n[r], r, n););
        return n;
    }
    function o(n, t) {
        for (var r = -1, e = null == n ? 0 : n.length; ++r < e;)
            if (!t(n[r], r, n))
                return false;
        return true;
    }
    function f(n, t) {
        for (var r = -1, e = null == n ? 0 : n.length, u = 0, i = []; ++r < e;) {
            var o = n[r];
            t(o, r, n) && (i[u++] = o);
        }
        return i;
    }
    function c(n, t) {
        return !(null == n || !n.length) && -1 < d(n, t, 0);
    }
    function a(n, t, r) {
        for (var e = -1, u = null == n ? 0 : n.length; ++e < u;)
            if (r(t, n[e]))
                return true;
        return false;
    }
    function l(n, t) {
        for (var r = -1, e = null == n ? 0 : n.length, u = Array(e); ++r < e;)
            u[r] = t(n[r], r, n);
        return u;
    }
    function s(n, t) {
        for (var r = -1, e = t.length, u = n.length; ++r < e;)
            n[u + r] = t[r];
        return n;
    }
    function h(n, t, r, e) {
        var u = -1, i = null == n ? 0 : n.length;
        for (e && i && (r = n[++u]); ++u < i;)
            r = t(r, n[u], u, n);
        return r;
    }
    function p(n, t, r, e) {
        var u = null == n ? 0 : n.length;
        for (e && u && (r = n[--u]); u--;)
            r = t(r, n[u], u, n);
        return r;
    }
    function _(n, t) {
        for (var r = -1, e = null == n ? 0 : n.length; ++r < e;)
            if (t(n[r], r, n))
                return true;
        return false;
    }
    function v(n, t, r) {
        var e;
        return r(n, function (n, r, u) {
            if (t(n, r, u))
                return e = r, false;
        }), e;
    }
    function g(n, t, r, e) {
        var u = n.length;
        for (r += e ? 1 : -1; e ? r-- : ++r < u;)
            if (t(n[r], r, n))
                return r;
        return -1;
    }
    function d(n, t, r) {
        if (t === t)
            n: {
                --r;
                for (var e = n.length; ++r < e;)
                    if (n[r] === t) {
                        n = r;
                        break n;
                    }
                n = -1;
            }
        else
            n = g(n, b, r);
        return n;
    }
    function y(n, t, r, e) {
        --r;
        for (var u = n.length; ++r < u;)
            if (e(n[r], t))
                return r;
        return -1;
    }
    function b(n) {
        return n !== n;
    }
    function x(n, t) {
        var r = null == n ? 0 : n.length;
        return r ? k(n, t) / r : P;
    }
    function j(n) {
        return function (t) {
            return null == t ? F : t[n];
        };
    }
    function w(n) {
        return function (t) {
            return null == n ? F : n[t];
        };
    }
    function m(n, t, r, e, u) {
        return u(n, function (n, u, i) {
            r = e ? (e = false, n) : t(r, n, u, i);
        }), r;
    }
    function A(n, t) {
        var r = n.length;
        for (n.sort(t); r--;)
            n[r] = n[r].c;
        return n;
    }
    function k(n, t) {
        for (var r, e = -1, u = n.length; ++e < u;) {
            var i = t(n[e]);
            i !== F && (r = r === F ? i : r + i);
        }
        return r;
    }
    function E(n, t) {
        for (var r = -1, e = Array(n); ++r < n;)
            e[r] = t(r);
        return e;
    }
    function O(n, t) {
        return l(t, function (t) {
            return [
                t,
                n[t]
            ];
        });
    }
    function S(n) {
        return function (t) {
            return n(t);
        };
    }
    function I(n, t) {
        return l(t, function (t) {
            return n[t];
        });
    }
    function R(n, t) {
        return n.has(t);
    }
    function z(n, t) {
        for (var r = -1, e = n.length; ++r < e && -1 < d(t, n[r], 0););
        return r;
    }
    function W(n, t) {
        for (var r = n.length; r-- && -1 < d(t, n[r], 0););
        return r;
    }
    function B(n) {
        return '\\' + Tn[n];
    }
    function L(n) {
        var t = -1, r = Array(n.size);
        return n.forEach(function (n, e) {
            r[++t] = [
                e,
                n
            ];
        }), r;
    }
    function U(n, t) {
        return function (r) {
            return n(t(r));
        };
    }
    function C(n, t) {
        for (var r = -1, e = n.length, u = 0, i = []; ++r < e;) {
            var o = n[r];
            o !== t && '__lodash_placeholder__' !== o || (n[r] = '__lodash_placeholder__', i[u++] = r);
        }
        return i;
    }
    function D(n) {
        var t = -1, r = Array(n.size);
        return n.forEach(function (n) {
            r[++t] = n;
        }), r;
    }
    function M(n) {
        var t = -1, r = Array(n.size);
        return n.forEach(function (n) {
            r[++t] = [
                n,
                n
            ];
        }), r;
    }
    function T(n) {
        if (Bn.test(n)) {
            for (var t = zn.lastIndex = 0; zn.test(n);)
                ++t;
            n = t;
        } else
            n = tt(n);
        return n;
    }
    function $(n) {
        return Bn.test(n) ? n.match(zn) || [] : n.split('');
    }
    var F, N = 1 / 0, P = NaN, Z = [
            [
                'ary',
                128
            ],
            [
                'bind',
                1
            ],
            [
                'bindKey',
                2
            ],
            [
                'curry',
                8
            ],
            [
                'curryRight',
                16
            ],
            [
                'flip',
                512
            ],
            [
                'partial',
                32
            ],
            [
                'partialRight',
                64
            ],
            [
                'rearg',
                256
            ]
        ], q = /\b__p\+='';/g, V = /\b(__p\+=)''\+/g, K = /(__e\(.*?\)|\b__t\))\+'';/g, G = /&(?:amp|lt|gt|quot|#39);/g, H = /[&<>"']/g, J = RegExp(G.source), Y = RegExp(H.source), Q = /<%-([\s\S]+?)%>/g, X = /<%([\s\S]+?)%>/g, nn = /<%=([\s\S]+?)%>/g, tn = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, rn = /^\w*$/, en = /^\./, un = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, on = /[\\^$.*+?()[\]{}|]/g, fn = RegExp(on.source), cn = /^\s+|\s+$/g, an = /^\s+/, ln = /\s+$/, sn = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, hn = /\{\n\/\* \[wrapped with (.+)\] \*/, pn = /,? & /, _n = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, vn = /\\(\\)?/g, gn = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, dn = /\w*$/, yn = /^[-+]0x[0-9a-f]+$/i, bn = /^0b[01]+$/i, xn = /^\[object .+?Constructor\]$/, jn = /^0o[0-7]+$/i, wn = /^(?:0|[1-9]\d*)$/, mn = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, An = /($^)/, kn = /['\n\r\u2028\u2029\\]/g, En = '[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?(?:\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?)*', On = '(?:[\\u2700-\\u27bf]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])' + En, Sn = '(?:[^\\ud800-\\udfff][\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]?|[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff])', In = RegExp('[\'\u2019]', 'g'), Rn = RegExp('[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]', 'g'), zn = RegExp('\\ud83c[\\udffb-\\udfff](?=\\ud83c[\\udffb-\\udfff])|' + Sn + En, 'g'), Wn = RegExp([
            '[A-Z\\xc0-\\xd6\\xd8-\\xde]?[a-z\\xdf-\\xf6\\xf8-\\xff]+(?:[\'\u2019](?:d|ll|m|re|s|t|ve))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde]|$)|(?:[A-Z\\xc0-\\xd6\\xd8-\\xde]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:[\'\u2019](?:D|LL|M|RE|S|T|VE))?(?=[\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000]|[A-Z\\xc0-\\xd6\\xd8-\\xde](?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])|$)|[A-Z\\xc0-\\xd6\\xd8-\\xde]?(?:[a-z\\xdf-\\xf6\\xf8-\\xff]|[^\\ud800-\\udfff\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde])+(?:[\'\u2019](?:d|ll|m|re|s|t|ve))?|[A-Z\\xc0-\\xd6\\xd8-\\xde]+(?:[\'\u2019](?:D|LL|M|RE|S|T|VE))?|\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)|\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)|\\d+',
            On
        ].join('|'), 'g'), Bn = RegExp('[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]'), Ln = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, Un = 'Array Buffer DataView Date Error Float32Array Float64Array Function Int8Array Int16Array Int32Array Map Math Object Promise RegExp Set String Symbol TypeError Uint8Array Uint8ClampedArray Uint16Array Uint32Array WeakMap _ clearTimeout isFinite parseInt setTimeout'.split(' '), Cn = {};
    Cn['[object Float32Array]'] = Cn['[object Float64Array]'] = Cn['[object Int8Array]'] = Cn['[object Int16Array]'] = Cn['[object Int32Array]'] = Cn['[object Uint8Array]'] = Cn['[object Uint8ClampedArray]'] = Cn['[object Uint16Array]'] = Cn['[object Uint32Array]'] = true, Cn['[object Arguments]'] = Cn['[object Array]'] = Cn['[object ArrayBuffer]'] = Cn['[object Boolean]'] = Cn['[object DataView]'] = Cn['[object Date]'] = Cn['[object Error]'] = Cn['[object Function]'] = Cn['[object Map]'] = Cn['[object Number]'] = Cn['[object Object]'] = Cn['[object RegExp]'] = Cn['[object Set]'] = Cn['[object String]'] = Cn['[object WeakMap]'] = false;
    var Dn = {};
    Dn['[object Arguments]'] = Dn['[object Array]'] = Dn['[object ArrayBuffer]'] = Dn['[object DataView]'] = Dn['[object Boolean]'] = Dn['[object Date]'] = Dn['[object Float32Array]'] = Dn['[object Float64Array]'] = Dn['[object Int8Array]'] = Dn['[object Int16Array]'] = Dn['[object Int32Array]'] = Dn['[object Map]'] = Dn['[object Number]'] = Dn['[object Object]'] = Dn['[object RegExp]'] = Dn['[object Set]'] = Dn['[object String]'] = Dn['[object Symbol]'] = Dn['[object Uint8Array]'] = Dn['[object Uint8ClampedArray]'] = Dn['[object Uint16Array]'] = Dn['[object Uint32Array]'] = true, Dn['[object Error]'] = Dn['[object Function]'] = Dn['[object WeakMap]'] = false;
    var Mn, Tn = {
            '\\': '\\',
            '\'': '\'',
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        }, $n = parseFloat, Fn = parseInt, Nn = typeof global == 'object' && global && global.Object === Object && global, Pn = typeof self == 'object' && self && self.Object === Object && self, Zn = Nn || Pn || Function('return this')(), qn = typeof exports == 'object' && exports && !exports.nodeType && exports, Vn = qn && typeof module == 'object' && module && !module.nodeType && module, Kn = Vn && Vn.exports === qn, Gn = Kn && Nn.process;
    n: {
        try {
            Mn = Gn && Gn.binding && Gn.binding('util');
            break n;
        } catch (n) {
        }
        Mn = void 0;
    }
    var Hn = Mn && Mn.isArrayBuffer, Jn = Mn && Mn.isDate, Yn = Mn && Mn.isMap, Qn = Mn && Mn.isRegExp, Xn = Mn && Mn.isSet, nt = Mn && Mn.isTypedArray, tt = j('length'), rt = w({
            '\xC0': 'A',
            '\xC1': 'A',
            '\xC2': 'A',
            '\xC3': 'A',
            '\xC4': 'A',
            '\xC5': 'A',
            '\xE0': 'a',
            '\xE1': 'a',
            '\xE2': 'a',
            '\xE3': 'a',
            '\xE4': 'a',
            '\xE5': 'a',
            '\xC7': 'C',
            '\xE7': 'c',
            '\xD0': 'D',
            '\xF0': 'd',
            '\xC8': 'E',
            '\xC9': 'E',
            '\xCA': 'E',
            '\xCB': 'E',
            '\xE8': 'e',
            '\xE9': 'e',
            '\xEA': 'e',
            '\xEB': 'e',
            '\xCC': 'I',
            '\xCD': 'I',
            '\xCE': 'I',
            '\xCF': 'I',
            '\xEC': 'i',
            '\xED': 'i',
            '\xEE': 'i',
            '\xEF': 'i',
            '\xD1': 'N',
            '\xF1': 'n',
            '\xD2': 'O',
            '\xD3': 'O',
            '\xD4': 'O',
            '\xD5': 'O',
            '\xD6': 'O',
            '\xD8': 'O',
            '\xF2': 'o',
            '\xF3': 'o',
            '\xF4': 'o',
            '\xF5': 'o',
            '\xF6': 'o',
            '\xF8': 'o',
            '\xD9': 'U',
            '\xDA': 'U',
            '\xDB': 'U',
            '\xDC': 'U',
            '\xF9': 'u',
            '\xFA': 'u',
            '\xFB': 'u',
            '\xFC': 'u',
            '\xDD': 'Y',
            '\xFD': 'y',
            '\xFF': 'y',
            '\xC6': 'Ae',
            '\xE6': 'ae',
            '\xDE': 'Th',
            '\xFE': 'th',
            '\xDF': 'ss',
            '\u0100': 'A',
            '\u0102': 'A',
            '\u0104': 'A',
            '\u0101': 'a',
            '\u0103': 'a',
            '\u0105': 'a',
            '\u0106': 'C',
            '\u0108': 'C',
            '\u010A': 'C',
            '\u010C': 'C',
            '\u0107': 'c',
            '\u0109': 'c',
            '\u010B': 'c',
            '\u010D': 'c',
            '\u010E': 'D',
            '\u0110': 'D',
            '\u010F': 'd',
            '\u0111': 'd',
            '\u0112': 'E',
            '\u0114': 'E',
            '\u0116': 'E',
            '\u0118': 'E',
            '\u011A': 'E',
            '\u0113': 'e',
            '\u0115': 'e',
            '\u0117': 'e',
            '\u0119': 'e',
            '\u011B': 'e',
            '\u011C': 'G',
            '\u011E': 'G',
            '\u0120': 'G',
            '\u0122': 'G',
            '\u011D': 'g',
            '\u011F': 'g',
            '\u0121': 'g',
            '\u0123': 'g',
            '\u0124': 'H',
            '\u0126': 'H',
            '\u0125': 'h',
            '\u0127': 'h',
            '\u0128': 'I',
            '\u012A': 'I',
            '\u012C': 'I',
            '\u012E': 'I',
            '\u0130': 'I',
            '\u0129': 'i',
            '\u012B': 'i',
            '\u012D': 'i',
            '\u012F': 'i',
            '\u0131': 'i',
            '\u0134': 'J',
            '\u0135': 'j',
            '\u0136': 'K',
            '\u0137': 'k',
            '\u0138': 'k',
            '\u0139': 'L',
            '\u013B': 'L',
            '\u013D': 'L',
            '\u013F': 'L',
            '\u0141': 'L',
            '\u013A': 'l',
            '\u013C': 'l',
            '\u013E': 'l',
            '\u0140': 'l',
            '\u0142': 'l',
            '\u0143': 'N',
            '\u0145': 'N',
            '\u0147': 'N',
            '\u014A': 'N',
            '\u0144': 'n',
            '\u0146': 'n',
            '\u0148': 'n',
            '\u014B': 'n',
            '\u014C': 'O',
            '\u014E': 'O',
            '\u0150': 'O',
            '\u014D': 'o',
            '\u014F': 'o',
            '\u0151': 'o',
            '\u0154': 'R',
            '\u0156': 'R',
            '\u0158': 'R',
            '\u0155': 'r',
            '\u0157': 'r',
            '\u0159': 'r',
            '\u015A': 'S',
            '\u015C': 'S',
            '\u015E': 'S',
            '\u0160': 'S',
            '\u015B': 's',
            '\u015D': 's',
            '\u015F': 's',
            '\u0161': 's',
            '\u0162': 'T',
            '\u0164': 'T',
            '\u0166': 'T',
            '\u0163': 't',
            '\u0165': 't',
            '\u0167': 't',
            '\u0168': 'U',
            '\u016A': 'U',
            '\u016C': 'U',
            '\u016E': 'U',
            '\u0170': 'U',
            '\u0172': 'U',
            '\u0169': 'u',
            '\u016B': 'u',
            '\u016D': 'u',
            '\u016F': 'u',
            '\u0171': 'u',
            '\u0173': 'u',
            '\u0174': 'W',
            '\u0175': 'w',
            '\u0176': 'Y',
            '\u0177': 'y',
            '\u0178': 'Y',
            '\u0179': 'Z',
            '\u017B': 'Z',
            '\u017D': 'Z',
            '\u017A': 'z',
            '\u017C': 'z',
            '\u017E': 'z',
            '\u0132': 'IJ',
            '\u0133': 'ij',
            '\u0152': 'Oe',
            '\u0153': 'oe',
            '\u0149': '\'n',
            '\u017F': 's'
        }), et = w({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            '\'': '&#39;'
        }), ut = w({
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#39;': '\''
        }), it = function w(En) {
            function On(n) {
                if (xu(n) && !af(n) && !(n instanceof Mn)) {
                    if (n instanceof zn)
                        return n;
                    if (ci.call(n, '__wrapped__'))
                        return Pe(n);
                }
                return new zn(n);
            }
            function Sn() {
            }
            function zn(n, t) {
                this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = F;
            }
            function Mn(n) {
                this.__wrapped__ = n, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = false, this.__iteratees__ = [], this.__takeCount__ = 4294967295, this.__views__ = [];
            }
            function Tn(n) {
                var t = -1, r = null == n ? 0 : n.length;
                for (this.clear(); ++t < r;) {
                    var e = n[t];
                    this.set(e[0], e[1]);
                }
            }
            function Nn(n) {
                var t = -1, r = null == n ? 0 : n.length;
                for (this.clear(); ++t < r;) {
                    var e = n[t];
                    this.set(e[0], e[1]);
                }
            }
            function Pn(n) {
                var t = -1, r = null == n ? 0 : n.length;
                for (this.clear(); ++t < r;) {
                    var e = n[t];
                    this.set(e[0], e[1]);
                }
            }
            function qn(n) {
                var t = -1, r = null == n ? 0 : n.length;
                for (this.__data__ = new Pn(); ++t < r;)
                    this.add(n[t]);
            }
            function Vn(n) {
                this.size = (this.__data__ = new Nn(n)).size;
            }
            function Gn(n, t) {
                var r, e = af(n), u = !e && cf(n), i = !e && !u && sf(n), o = !e && !u && !i && gf(n), u = (e = e || u || i || o) ? E(n.length, ri) : [], f = u.length;
                for (r in n)
                    !t && !ci.call(n, r) || e && ('length' == r || i && ('offset' == r || 'parent' == r) || o && ('buffer' == r || 'byteLength' == r || 'byteOffset' == r) || Re(r, f)) || u.push(r);
                return u;
            }
            function tt(n) {
                var t = n.length;
                return t ? n[cr(0, t - 1)] : F;
            }
            function ot(n, t) {
                return Te(Mr(n), gt(t, 0, n.length));
            }
            function ft(n) {
                return Te(Mr(n));
            }
            function ct(n, t, r) {
                (r === F || hu(n[t], r)) && (r !== F || t in n) || _t(n, t, r);
            }
            function at(n, t, r) {
                var e = n[t];
                ci.call(n, t) && hu(e, r) && (r !== F || t in n) || _t(n, t, r);
            }
            function lt(n, t) {
                for (var r = n.length; r--;)
                    if (hu(n[r][0], t))
                        return r;
                return -1;
            }
            function st(n, t, r, e) {
                return oo(n, function (n, u, i) {
                    t(e, n, r(n), i);
                }), e;
            }
            function ht(n, t) {
                return n && Tr(t, Lu(t), n);
            }
            function pt(n, t) {
                return n && Tr(t, Uu(t), n);
            }
            function _t(n, t, r) {
                '__proto__' == t && Ei ? Ei(n, t, {
                    configurable: true,
                    enumerable: true,
                    value: r,
                    writable: true
                }) : n[t] = r;
            }
            function vt(n, t) {
                for (var r = -1, e = t.length, u = Hu(e), i = null == n; ++r < e;)
                    u[r] = i ? F : Wu(n, t[r]);
                return u;
            }
            function gt(n, t, r) {
                return n === n && (r !== F && (n = n <= r ? n : r), t !== F && (n = n >= t ? n : t)), n;
            }
            function dt(n, t, r, e, i, o) {
                var f, c = 1 & t, a = 2 & t, l = 4 & t;
                if (r && (f = i ? r(n, e, i, o) : r(n)), f !== F)
                    return f;
                if (!bu(n))
                    return n;
                if (e = af(n)) {
                    if (f = Ee(n), !c)
                        return Mr(n, f);
                } else {
                    var s = yo(n), h = '[object Function]' == s || '[object GeneratorFunction]' == s;
                    if (sf(n))
                        return Wr(n, c);
                    if ('[object Object]' == s || '[object Arguments]' == s || h && !i) {
                        if (f = a || h ? {} : Oe(n), !c)
                            return a ? Fr(n, pt(f, n)) : $r(n, ht(f, n));
                    } else {
                        if (!Dn[s])
                            return i ? n : {};
                        f = Se(n, s, dt, c);
                    }
                }
                if (o || (o = new Vn()), i = o.get(n))
                    return i;
                o.set(n, f);
                var a = l ? a ? ye : de : a ? Uu : Lu, p = e ? F : a(n);
                return u(p || n, function (e, u) {
                    p && (u = e, e = n[u]), at(f, u, dt(e, t, r, u, n, o));
                }), f;
            }
            function yt(n) {
                var t = Lu(n);
                return function (r) {
                    return bt(r, n, t);
                };
            }
            function bt(n, t, r) {
                var e = r.length;
                if (null == n)
                    return !e;
                for (n = ni(n); e--;) {
                    var u = r[e], i = t[u], o = n[u];
                    if (o === F && !(u in n) || !i(o))
                        return false;
                }
                return true;
            }
            function xt(n, t, r) {
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return jo(function () {
                    n.apply(F, r);
                }, t);
            }
            function jt(n, t, r, e) {
                var u = -1, i = c, o = true, f = n.length, s = [], h = t.length;
                if (!f)
                    return s;
                r && (t = l(t, S(r))), e ? (i = a, o = false) : 200 <= t.length && (i = R, o = false, t = new qn(t));
                n:
                    for (; ++u < f;) {
                        var p = n[u], _ = null == r ? p : r(p), p = e || 0 !== p ? p : 0;
                        if (o && _ === _) {
                            for (var v = h; v--;)
                                if (t[v] === _)
                                    continue n;
                            s.push(p);
                        } else
                            i(t, _, e) || s.push(p);
                    }
                return s;
            }
            function wt(n, t) {
                var r = true;
                return oo(n, function (n, e, u) {
                    return r = !!t(n, e, u);
                }), r;
            }
            function mt(n, t, r) {
                for (var e = -1, u = n.length; ++e < u;) {
                    var i = n[e], o = t(i);
                    if (null != o && (f === F ? o === o && !Au(o) : r(o, f)))
                        var f = o, c = i;
                }
                return c;
            }
            function At(n, t) {
                var r = [];
                return oo(n, function (n, e, u) {
                    t(n, e, u) && r.push(n);
                }), r;
            }
            function kt(n, t, r, e, u) {
                var i = -1, o = n.length;
                for (r || (r = Ie), u || (u = []); ++i < o;) {
                    var f = n[i];
                    0 < t && r(f) ? 1 < t ? kt(f, t - 1, r, e, u) : s(u, f) : e || (u[u.length] = f);
                }
                return u;
            }
            function Et(n, t) {
                return n && co(n, t, Lu);
            }
            function Ot(n, t) {
                return n && ao(n, t, Lu);
            }
            function St(n, t) {
                return f(t, function (t) {
                    return gu(n[t]);
                });
            }
            function It(n, t) {
                t = Rr(t, n);
                for (var r = 0, e = t.length; null != n && r < e;)
                    n = n[$e(t[r++])];
                return r && r == e ? n : F;
            }
            function Rt(n, t, r) {
                return t = t(n), af(n) ? t : s(t, r(n));
            }
            function zt(n) {
                if (null == n)
                    n = n === F ? '[object Undefined]' : '[object Null]';
                else if (ki && ki in ni(n)) {
                    var t = ci.call(n, ki), r = n[ki];
                    try {
                        n[ki] = F;
                        var e = true;
                    } catch (n) {
                    }
                    var u = si.call(n);
                    e && (t ? n[ki] = r : delete n[ki]), n = u;
                } else
                    n = si.call(n);
                return n;
            }
            function Wt(n, t) {
                return n > t;
            }
            function Bt(n, t) {
                return null != n && ci.call(n, t);
            }
            function Lt(n, t) {
                return null != n && t in ni(n);
            }
            function Ut(n, t, r) {
                for (var e = r ? a : c, u = n[0].length, i = n.length, o = i, f = Hu(i), s = 1 / 0, h = []; o--;) {
                    var p = n[o];
                    o && t && (p = l(p, S(t))), s = Mi(p.length, s), f[o] = !r && (t || 120 <= u && 120 <= p.length) ? new qn(o && p) : F;
                }
                var p = n[0], _ = -1, v = f[0];
                n:
                    for (; ++_ < u && h.length < s;) {
                        var g = p[_], d = t ? t(g) : g, g = r || 0 !== g ? g : 0;
                        if (v ? !R(v, d) : !e(h, d, r)) {
                            for (o = i; --o;) {
                                var y = f[o];
                                if (y ? !R(y, d) : !e(n[o], d, r))
                                    continue n;
                            }
                            v && v.push(d), h.push(g);
                        }
                    }
                return h;
            }
            function Ct(n, t, r) {
                var e = {};
                return Et(n, function (n, u, i) {
                    t(e, r(n), u, i);
                }), e;
            }
            function Dt(n, t, e) {
                return t = Rr(t, n), n = 2 > t.length ? n : It(n, vr(t, 0, -1)), t = null == n ? n : n[$e(Ge(t))], null == t ? F : r(t, n, e);
            }
            function Mt(n) {
                return xu(n) && '[object Arguments]' == zt(n);
            }
            function Tt(n) {
                return xu(n) && '[object ArrayBuffer]' == zt(n);
            }
            function $t(n) {
                return xu(n) && '[object Date]' == zt(n);
            }
            function Ft(n, t, r, e, u) {
                if (n === t)
                    t = true;
                else if (null == n || null == t || !xu(n) && !xu(t))
                    t = n !== n && t !== t;
                else
                    n: {
                        var i = af(n), o = af(t), f = i ? '[object Array]' : yo(n), c = o ? '[object Array]' : yo(t), f = '[object Arguments]' == f ? '[object Object]' : f, c = '[object Arguments]' == c ? '[object Object]' : c, a = '[object Object]' == f, o = '[object Object]' == c;
                        if ((c = f == c) && sf(n)) {
                            if (!sf(t)) {
                                t = false;
                                break n;
                            }
                            i = true, a = false;
                        }
                        if (c && !a)
                            u || (u = new Vn()), t = i || gf(n) ? _e(n, t, r, e, Ft, u) : ve(n, t, f, r, e, Ft, u);
                        else {
                            if (!(1 & r) && (i = a && ci.call(n, '__wrapped__'), f = o && ci.call(t, '__wrapped__'), i || f)) {
                                n = i ? n.value() : n, t = f ? t.value() : t, u || (u = new Vn()), t = Ft(n, t, r, e, u);
                                break n;
                            }
                            if (c)
                                t:
                                    if (u || (u = new Vn()), i = 1 & r, f = de(n), o = f.length, c = de(t).length, o == c || i) {
                                        for (a = o; a--;) {
                                            var l = f[a];
                                            if (!(i ? l in t : ci.call(t, l))) {
                                                t = false;
                                                break t;
                                            }
                                        }
                                        if ((c = u.get(n)) && u.get(t))
                                            t = c == t;
                                        else {
                                            c = true, u.set(n, t), u.set(t, n);
                                            for (var s = i; ++a < o;) {
                                                var l = f[a], h = n[l], p = t[l];
                                                if (e)
                                                    var _ = i ? e(p, h, l, t, n, u) : e(h, p, l, n, t, u);
                                                if (_ === F ? h !== p && !Ft(h, p, r, e, u) : !_) {
                                                    c = false;
                                                    break;
                                                }
                                                s || (s = 'constructor' == l);
                                            }
                                            c && !s && (r = n.constructor, e = t.constructor, r != e && 'constructor' in n && 'constructor' in t && !(typeof r == 'function' && r instanceof r && typeof e == 'function' && e instanceof e) && (c = false)), u.delete(n), u.delete(t), t = c;
                                        }
                                    } else
                                        t = false;
                            else
                                t = false;
                        }
                    }
                return t;
            }
            function Nt(n) {
                return xu(n) && '[object Map]' == yo(n);
            }
            function Pt(n, t, r, e) {
                var u = r.length, i = u, o = !e;
                if (null == n)
                    return !i;
                for (n = ni(n); u--;) {
                    var f = r[u];
                    if (o && f[2] ? f[1] !== n[f[0]] : !(f[0] in n))
                        return false;
                }
                for (; ++u < i;) {
                    var f = r[u], c = f[0], a = n[c], l = f[1];
                    if (o && f[2]) {
                        if (a === F && !(c in n))
                            return false;
                    } else {
                        if (f = new Vn(), e)
                            var s = e(a, l, c, n, t, f);
                        if (s === F ? !Ft(l, a, 3, e, f) : !s)
                            return false;
                    }
                }
                return true;
            }
            function Zt(n) {
                return !(!bu(n) || li && li in n) && (gu(n) ? _i : xn).test(Fe(n));
            }
            function qt(n) {
                return xu(n) && '[object RegExp]' == zt(n);
            }
            function Vt(n) {
                return xu(n) && '[object Set]' == yo(n);
            }
            function Kt(n) {
                return xu(n) && yu(n.length) && !!Cn[zt(n)];
            }
            function Gt(n) {
                return typeof n == 'function' ? n : null == n ? Nu : typeof n == 'object' ? af(n) ? Xt(n[0], n[1]) : Qt(n) : Vu(n);
            }
            function Ht(n) {
                if (!Le(n))
                    return Ci(n);
                var t, r = [];
                for (t in ni(n))
                    ci.call(n, t) && 'constructor' != t && r.push(t);
                return r;
            }
            function Jt(n, t) {
                return n < t;
            }
            function Yt(n, t) {
                var r = -1, e = pu(n) ? Hu(n.length) : [];
                return oo(n, function (n, u, i) {
                    e[++r] = t(n, u, i);
                }), e;
            }
            function Qt(n) {
                var t = me(n);
                return 1 == t.length && t[0][2] ? Ue(t[0][0], t[0][1]) : function (r) {
                    return r === n || Pt(r, n, t);
                };
            }
            function Xt(n, t) {
                return We(n) && t === t && !bu(t) ? Ue($e(n), t) : function (r) {
                    var e = Wu(r, n);
                    return e === F && e === t ? Bu(r, n) : Ft(t, e, 3);
                };
            }
            function nr(n, t, r, e, u) {
                n !== t && co(t, function (i, o) {
                    if (bu(i)) {
                        u || (u = new Vn());
                        var f = u, c = n[o], a = t[o], l = f.get(a);
                        if (l)
                            ct(n, o, l);
                        else {
                            var l = e ? e(c, a, o + '', n, t, f) : F, s = l === F;
                            if (s) {
                                var h = af(a), p = !h && sf(a), _ = !h && !p && gf(a), l = a;
                                h || p || _ ? af(c) ? l = c : _u(c) ? l = Mr(c) : p ? (s = false, l = Wr(a, true)) : _ ? (s = false, l = Lr(a, true)) : l = [] : wu(a) || cf(a) ? (l = c, cf(c) ? l = Ru(c) : (!bu(c) || r && gu(c)) && (l = Oe(a))) : s = false;
                            }
                            s && (f.set(a, l), nr(l, a, r, e, f), f.delete(a)), ct(n, o, l);
                        }
                    } else
                        f = e ? e(n[o], i, o + '', n, t, u) : F, f === F && (f = i), ct(n, o, f);
                }, Uu);
            }
            function tr(n, t) {
                var r = n.length;
                if (r)
                    return t += 0 > t ? r : 0, Re(t, r) ? n[t] : F;
            }
            function rr(n, t, r) {
                var e = -1;
                return t = l(t.length ? t : [Nu], S(je())), n = Yt(n, function (n) {
                    return {
                        a: l(t, function (t) {
                            return t(n);
                        }),
                        b: ++e,
                        c: n
                    };
                }), A(n, function (n, t) {
                    var e;
                    n: {
                        e = -1;
                        for (var u = n.a, i = t.a, o = u.length, f = r.length; ++e < o;) {
                            var c = Ur(u[e], i[e]);
                            if (c) {
                                e = e >= f ? c : c * ('desc' == r[e] ? -1 : 1);
                                break n;
                            }
                        }
                        e = n.b - t.b;
                    }
                    return e;
                });
            }
            function er(n, t) {
                return ur(n, t, function (t, r) {
                    return Bu(n, r);
                });
            }
            function ur(n, t, r) {
                for (var e = -1, u = t.length, i = {}; ++e < u;) {
                    var o = t[e], f = It(n, o);
                    r(f, o) && pr(i, Rr(o, n), f);
                }
                return i;
            }
            function ir(n) {
                return function (t) {
                    return It(t, n);
                };
            }
            function or(n, t, r, e) {
                var u = e ? y : d, i = -1, o = t.length, f = n;
                for (n === t && (t = Mr(t)), r && (f = l(n, S(r))); ++i < o;)
                    for (var c = 0, a = t[i], a = r ? r(a) : a; -1 < (c = u(f, a, c, e));)
                        f !== n && wi.call(f, c, 1), wi.call(n, c, 1);
                return n;
            }
            function fr(n, t) {
                for (var r = n ? t.length : 0, e = r - 1; r--;) {
                    var u = t[r];
                    if (r == e || u !== i) {
                        var i = u;
                        Re(u) ? wi.call(n, u, 1) : mr(n, u);
                    }
                }
            }
            function cr(n, t) {
                return n + zi(Fi() * (t - n + 1));
            }
            function ar(n, t) {
                var r = '';
                if (!n || 1 > t || 9007199254740991 < t)
                    return r;
                do
                    t % 2 && (r += n), (t = zi(t / 2)) && (n += n);
                while (t);
                return r;
            }
            function lr(n, t) {
                return wo(Ce(n, t, Nu), n + '');
            }
            function sr(n) {
                return tt(Du(n));
            }
            function hr(n, t) {
                var r = Du(n);
                return Te(r, gt(t, 0, r.length));
            }
            function pr(n, t, r, e) {
                if (!bu(n))
                    return n;
                t = Rr(t, n);
                for (var u = -1, i = t.length, o = i - 1, f = n; null != f && ++u < i;) {
                    var c = $e(t[u]), a = r;
                    if (u != o) {
                        var l = f[c], a = e ? e(l, c, f) : F;
                        a === F && (a = bu(l) ? l : Re(t[u + 1]) ? [] : {});
                    }
                    at(f, c, a), f = f[c];
                }
                return n;
            }
            function _r(n) {
                return Te(Du(n));
            }
            function vr(n, t, r) {
                var e = -1, u = n.length;
                for (0 > t && (t = -t > u ? 0 : u + t), r = r > u ? u : r, 0 > r && (r += u), u = t > r ? 0 : r - t >>> 0, t >>>= 0, r = Hu(u); ++e < u;)
                    r[e] = n[e + t];
                return r;
            }
            function gr(n, t) {
                var r;
                return oo(n, function (n, e, u) {
                    return r = t(n, e, u), !r;
                }), !!r;
            }
            function dr(n, t, r) {
                var e = 0, u = null == n ? e : n.length;
                if (typeof t == 'number' && t === t && 2147483647 >= u) {
                    for (; e < u;) {
                        var i = e + u >>> 1, o = n[i];
                        null !== o && !Au(o) && (r ? o <= t : o < t) ? e = i + 1 : u = i;
                    }
                    return u;
                }
                return yr(n, t, Nu, r);
            }
            function yr(n, t, r, e) {
                t = r(t);
                for (var u = 0, i = null == n ? 0 : n.length, o = t !== t, f = null === t, c = Au(t), a = t === F; u < i;) {
                    var l = zi((u + i) / 2), s = r(n[l]), h = s !== F, p = null === s, _ = s === s, v = Au(s);
                    (o ? e || _ : a ? _ && (e || h) : f ? _ && h && (e || !p) : c ? _ && h && !p && (e || !v) : p || v ? 0 : e ? s <= t : s < t) ? u = l + 1 : i = l;
                }
                return Mi(i, 4294967294);
            }
            function br(n, t) {
                for (var r = -1, e = n.length, u = 0, i = []; ++r < e;) {
                    var o = n[r], f = t ? t(o) : o;
                    if (!r || !hu(f, c)) {
                        var c = f;
                        i[u++] = 0 === o ? 0 : o;
                    }
                }
                return i;
            }
            function xr(n) {
                return typeof n == 'number' ? n : Au(n) ? P : +n;
            }
            function jr(n) {
                if (typeof n == 'string')
                    return n;
                if (af(n))
                    return l(n, jr) + '';
                if (Au(n))
                    return uo ? uo.call(n) : '';
                var t = n + '';
                return '0' == t && 1 / n == -N ? '-0' : t;
            }
            function wr(n, t, r) {
                var e = -1, u = c, i = n.length, o = true, f = [], l = f;
                if (r)
                    o = false, u = a;
                else if (200 <= i) {
                    if (u = t ? null : po(n))
                        return D(u);
                    o = false, u = R, l = new qn();
                } else
                    l = t ? [] : f;
                n:
                    for (; ++e < i;) {
                        var s = n[e], h = t ? t(s) : s, s = r || 0 !== s ? s : 0;
                        if (o && h === h) {
                            for (var p = l.length; p--;)
                                if (l[p] === h)
                                    continue n;
                            t && l.push(h), f.push(s);
                        } else
                            u(l, h, r) || (l !== f && l.push(h), f.push(s));
                    }
                return f;
            }
            function mr(n, t) {
                return t = Rr(t, n), n = 2 > t.length ? n : It(n, vr(t, 0, -1)), null == n || delete n[$e(Ge(t))];
            }
            function Ar(n, t, r, e) {
                for (var u = n.length, i = e ? u : -1; (e ? i-- : ++i < u) && t(n[i], i, n););
                return r ? vr(n, e ? 0 : i, e ? i + 1 : u) : vr(n, e ? i + 1 : 0, e ? u : i);
            }
            function kr(n, t) {
                var r = n;
                return r instanceof Mn && (r = r.value()), h(t, function (n, t) {
                    return t.func.apply(t.thisArg, s([n], t.args));
                }, r);
            }
            function Er(n, t, r) {
                var e = n.length;
                if (2 > e)
                    return e ? wr(n[0]) : [];
                for (var u = -1, i = Hu(e); ++u < e;)
                    for (var o = n[u], f = -1; ++f < e;)
                        f != u && (i[u] = jt(i[u] || o, n[f], t, r));
                return wr(kt(i, 1), t, r);
            }
            function Or(n, t, r) {
                for (var e = -1, u = n.length, i = t.length, o = {}; ++e < u;)
                    r(o, n[e], e < i ? t[e] : F);
                return o;
            }
            function Sr(n) {
                return _u(n) ? n : [];
            }
            function Ir(n) {
                return typeof n == 'function' ? n : Nu;
            }
            function Rr(n, t) {
                return af(n) ? n : We(n, t) ? [n] : mo(zu(n));
            }
            function zr(n, t, r) {
                var e = n.length;
                return r = r === F ? e : r, !t && r >= e ? n : vr(n, t, r);
            }
            function Wr(n, t) {
                if (t)
                    return n.slice();
                var r = n.length, r = yi ? yi(r) : new n.constructor(r);
                return n.copy(r), r;
            }
            function Br(n) {
                var t = new n.constructor(n.byteLength);
                return new di(t).set(new di(n)), t;
            }
            function Lr(n, t) {
                return new n.constructor(t ? Br(n.buffer) : n.buffer, n.byteOffset, n.length);
            }
            function Ur(n, t) {
                if (n !== t) {
                    var r = n !== F, e = null === n, u = n === n, i = Au(n), o = t !== F, f = null === t, c = t === t, a = Au(t);
                    if (!f && !a && !i && n > t || i && o && c && !f && !a || e && o && c || !r && c || !u)
                        return 1;
                    if (!e && !i && !a && n < t || a && r && u && !e && !i || f && r && u || !o && u || !c)
                        return -1;
                }
                return 0;
            }
            function Cr(n, t, r, e) {
                var u = -1, i = n.length, o = r.length, f = -1, c = t.length, a = Di(i - o, 0), l = Hu(c + a);
                for (e = !e; ++f < c;)
                    l[f] = t[f];
                for (; ++u < o;)
                    (e || u < i) && (l[r[u]] = n[u]);
                for (; a--;)
                    l[f++] = n[u++];
                return l;
            }
            function Dr(n, t, r, e) {
                var u = -1, i = n.length, o = -1, f = r.length, c = -1, a = t.length, l = Di(i - f, 0), s = Hu(l + a);
                for (e = !e; ++u < l;)
                    s[u] = n[u];
                for (l = u; ++c < a;)
                    s[l + c] = t[c];
                for (; ++o < f;)
                    (e || u < i) && (s[l + r[o]] = n[u++]);
                return s;
            }
            function Mr(n, t) {
                var r = -1, e = n.length;
                for (t || (t = Hu(e)); ++r < e;)
                    t[r] = n[r];
                return t;
            }
            function Tr(n, t, r, e) {
                var u = !r;
                r || (r = {});
                for (var i = -1, o = t.length; ++i < o;) {
                    var f = t[i], c = e ? e(r[f], n[f], f, r, n) : F;
                    c === F && (c = n[f]), u ? _t(r, f, c) : at(r, f, c);
                }
                return r;
            }
            function $r(n, t) {
                return Tr(n, vo(n), t);
            }
            function Fr(n, t) {
                return Tr(n, go(n), t);
            }
            function Nr(n, t) {
                return function (r, u) {
                    var i = af(r) ? e : st, o = t ? t() : {};
                    return i(r, n, je(u, 2), o);
                };
            }
            function Pr(n) {
                return lr(function (t, r) {
                    var e = -1, u = r.length, i = 1 < u ? r[u - 1] : F, o = 2 < u ? r[2] : F, i = 3 < n.length && typeof i == 'function' ? (u--, i) : F;
                    for (o && ze(r[0], r[1], o) && (i = 3 > u ? F : i, u = 1), t = ni(t); ++e < u;)
                        (o = r[e]) && n(t, o, e, i);
                    return t;
                });
            }
            function Zr(n, t) {
                return function (r, e) {
                    if (null == r)
                        return r;
                    if (!pu(r))
                        return n(r, e);
                    for (var u = r.length, i = t ? u : -1, o = ni(r); (t ? i-- : ++i < u) && false !== e(o[i], i, o););
                    return r;
                };
            }
            function qr(n) {
                return function (t, r, e) {
                    var u = -1, i = ni(t);
                    e = e(t);
                    for (var o = e.length; o--;) {
                        var f = e[n ? o : ++u];
                        if (false === r(i[f], f, i))
                            break;
                    }
                    return t;
                };
            }
            function Vr(n, t, r) {
                function e() {
                    return (this && this !== Zn && this instanceof e ? i : n).apply(u ? r : this, arguments);
                }
                var u = 1 & t, i = Hr(n);
                return e;
            }
            function Kr(n) {
                return function (t) {
                    t = zu(t);
                    var r = Bn.test(t) ? $(t) : F, e = r ? r[0] : t.charAt(0);
                    return t = r ? zr(r, 1).join('') : t.slice(1), e[n]() + t;
                };
            }
            function Gr(n) {
                return function (t) {
                    return h($u(Tu(t).replace(In, '')), n, '');
                };
            }
            function Hr(n) {
                return function () {
                    var t = arguments;
                    switch (t.length) {
                    case 0:
                        return new n();
                    case 1:
                        return new n(t[0]);
                    case 2:
                        return new n(t[0], t[1]);
                    case 3:
                        return new n(t[0], t[1], t[2]);
                    case 4:
                        return new n(t[0], t[1], t[2], t[3]);
                    case 5:
                        return new n(t[0], t[1], t[2], t[3], t[4]);
                    case 6:
                        return new n(t[0], t[1], t[2], t[3], t[4], t[5]);
                    case 7:
                        return new n(t[0], t[1], t[2], t[3], t[4], t[5], t[6]);
                    }
                    var r = io(n.prototype), t = n.apply(r, t);
                    return bu(t) ? t : r;
                };
            }
            function Jr(n, t, e) {
                function u() {
                    for (var o = arguments.length, f = Hu(o), c = o, a = xe(u); c--;)
                        f[c] = arguments[c];
                    return c = 3 > o && f[0] !== a && f[o - 1] !== a ? [] : C(f, a), o -= c.length, o < e ? fe(n, t, Xr, u.placeholder, F, f, c, F, F, e - o) : r(this && this !== Zn && this instanceof u ? i : n, this, f);
                }
                var i = Hr(n);
                return u;
            }
            function Yr(n) {
                return function (t, r, e) {
                    var u = ni(t);
                    if (!pu(t)) {
                        var i = je(r, 3);
                        t = Lu(t), r = function (n) {
                            return i(u[n], n, u);
                        };
                    }
                    return r = n(t, r, e), -1 < r ? u[i ? t[r] : r] : F;
                };
            }
            function Qr(n) {
                return ge(function (t) {
                    var r = t.length, e = r, u = zn.prototype.thru;
                    for (n && t.reverse(); e--;) {
                        var i = t[e];
                        if (typeof i != 'function')
                            throw new ei('Expected a function');
                        if (u && !o && 'wrapper' == be(i))
                            var o = new zn([], true);
                    }
                    for (e = o ? e : r; ++e < r;)
                        var i = t[e], u = be(i), f = 'wrapper' == u ? _o(i) : F, o = f && Be(f[0]) && 424 == f[1] && !f[4].length && 1 == f[9] ? o[be(f[0])].apply(o, f[3]) : 1 == i.length && Be(i) ? o[u]() : o.thru(i);
                    return function () {
                        var n = arguments, e = n[0];
                        if (o && 1 == n.length && af(e))
                            return o.plant(e).value();
                        for (var u = 0, n = r ? t[u].apply(this, n) : e; ++u < r;)
                            n = t[u].call(this, n);
                        return n;
                    };
                });
            }
            function Xr(n, t, r, e, u, i, o, f, c, a) {
                function l() {
                    for (var d = arguments.length, y = Hu(d), b = d; b--;)
                        y[b] = arguments[b];
                    if (_) {
                        var x, j = xe(l), b = y.length;
                        for (x = 0; b--;)
                            y[b] === j && ++x;
                    }
                    if (e && (y = Cr(y, e, u, _)), i && (y = Dr(y, i, o, _)), d -= x, _ && d < a)
                        return j = C(y, j), fe(n, t, Xr, l.placeholder, r, y, j, f, c, a - d);
                    if (j = h ? r : this, b = p ? j[n] : n, d = y.length, f) {
                        x = y.length;
                        for (var w = Mi(f.length, x), m = Mr(y); w--;) {
                            var A = f[w];
                            y[w] = Re(A, x) ? m[A] : F;
                        }
                    } else
                        v && 1 < d && y.reverse();
                    return s && c < d && (y.length = c), this && this !== Zn && this instanceof l && (b = g || Hr(b)), b.apply(j, y);
                }
                var s = 128 & t, h = 1 & t, p = 2 & t, _ = 24 & t, v = 512 & t, g = p ? F : Hr(n);
                return l;
            }
            function ne(n, t) {
                return function (r, e) {
                    return Ct(r, n, t(e));
                };
            }
            function te(n, t) {
                return function (r, e) {
                    var u;
                    if (r === F && e === F)
                        return t;
                    if (r !== F && (u = r), e !== F) {
                        if (u === F)
                            return e;
                        typeof r == 'string' || typeof e == 'string' ? (r = jr(r), e = jr(e)) : (r = xr(r), e = xr(e)), u = n(r, e);
                    }
                    return u;
                };
            }
            function re(n) {
                return ge(function (t) {
                    return t = l(t, S(je())), lr(function (e) {
                        var u = this;
                        return n(t, function (n) {
                            return r(n, u, e);
                        });
                    });
                });
            }
            function ee(n, t) {
                t = t === F ? ' ' : jr(t);
                var r = t.length;
                return 2 > r ? r ? ar(t, n) : t : (r = ar(t, Ri(n / T(t))), Bn.test(t) ? zr($(r), 0, n).join('') : r.slice(0, n));
            }
            function ue(n, t, e, u) {
                function i() {
                    for (var t = -1, c = arguments.length, a = -1, l = u.length, s = Hu(l + c), h = this && this !== Zn && this instanceof i ? f : n; ++a < l;)
                        s[a] = u[a];
                    for (; c--;)
                        s[a++] = arguments[++t];
                    return r(h, o ? e : this, s);
                }
                var o = 1 & t, f = Hr(n);
                return i;
            }
            function ie(n) {
                return function (t, r, e) {
                    e && typeof e != 'number' && ze(t, r, e) && (r = e = F), t = Eu(t), r === F ? (r = t, t = 0) : r = Eu(r), e = e === F ? t < r ? 1 : -1 : Eu(e);
                    var u = -1;
                    r = Di(Ri((r - t) / (e || 1)), 0);
                    for (var i = Hu(r); r--;)
                        i[n ? r : ++u] = t, t += e;
                    return i;
                };
            }
            function oe(n) {
                return function (t, r) {
                    return typeof t == 'string' && typeof r == 'string' || (t = Iu(t), r = Iu(r)), n(t, r);
                };
            }
            function fe(n, t, r, e, u, i, o, f, c, a) {
                var l = 8 & t, s = l ? o : F;
                o = l ? F : o;
                var h = l ? i : F;
                return i = l ? F : i, t = (t | (l ? 32 : 64)) & ~(l ? 64 : 32), 4 & t || (t &= -4), u = [
                    n,
                    t,
                    u,
                    h,
                    s,
                    i,
                    o,
                    f,
                    c,
                    a
                ], r = r.apply(F, u), Be(n) && xo(r, u), r.placeholder = e, De(r, n, t);
            }
            function ce(n) {
                var t = Xu[n];
                return function (n, r) {
                    if (n = Iu(n), r = Mi(Ou(r), 292)) {
                        var e = (zu(n) + 'e').split('e'), e = t(e[0] + 'e' + (+e[1] + r)), e = (zu(e) + 'e').split('e');
                        return +(e[0] + 'e' + (+e[1] - r));
                    }
                    return t(n);
                };
            }
            function ae(n) {
                return function (t) {
                    var r = yo(t);
                    return '[object Map]' == r ? L(t) : '[object Set]' == r ? M(t) : O(t, n(t));
                };
            }
            function le(n, t, r, e, u, i, o, f) {
                var c = 2 & t;
                if (!c && typeof n != 'function')
                    throw new ei('Expected a function');
                var a = e ? e.length : 0;
                if (a || (t &= -97, e = u = F), o = o === F ? o : Di(Ou(o), 0), f = f === F ? f : Ou(f), a -= u ? u.length : 0, 64 & t) {
                    var l = e, s = u;
                    e = u = F;
                }
                var h = c ? F : _o(n);
                return i = [
                    n,
                    t,
                    r,
                    e,
                    u,
                    l,
                    s,
                    i,
                    o,
                    f
                ], h && (r = i[1], n = h[1], t = r | n, e = 128 == n && 8 == r || 128 == n && 256 == r && i[7].length <= h[8] || 384 == n && h[7].length <= h[8] && 8 == r, 131 > t || e) && (1 & n && (i[2] = h[2], t |= 1 & r ? 0 : 4), (r = h[3]) && (e = i[3], i[3] = e ? Cr(e, r, h[4]) : r, i[4] = e ? C(i[3], '__lodash_placeholder__') : h[4]), (r = h[5]) && (e = i[5], i[5] = e ? Dr(e, r, h[6]) : r, i[6] = e ? C(i[5], '__lodash_placeholder__') : h[6]), (r = h[7]) && (i[7] = r), 128 & n && (i[8] = null == i[8] ? h[8] : Mi(i[8], h[8])), null == i[9] && (i[9] = h[9]), i[0] = h[0], i[1] = t), n = i[0], t = i[1], r = i[2], e = i[3], u = i[4], f = i[9] = null == i[9] ? c ? 0 : n.length : Di(i[9] - a, 0), !f && 24 & t && (t &= -25), De((h ? lo : xo)(t && 1 != t ? 8 == t || 16 == t ? Jr(n, t, f) : 32 != t && 33 != t || u.length ? Xr.apply(F, i) : ue(n, t, r, e) : Vr(n, t, r), i), n, t);
            }
            function se(n, t, r, e) {
                return n === F || hu(n, ii[r]) && !ci.call(e, r) ? t : n;
            }
            function he(n, t, r, e, u, i) {
                return bu(n) && bu(t) && (i.set(t, n), nr(n, t, F, he, i), i.delete(t)), n;
            }
            function pe(n, t) {
                return t !== F && wu(n) ? F : n;
            }
            function _e(n, t, r, e, u, i) {
                var o = 1 & r, f = n.length, c = t.length;
                if (f != c && !(o && c > f))
                    return false;
                if ((c = i.get(n)) && i.get(t))
                    return c == t;
                var c = -1, a = true, l = 2 & r ? new qn() : F;
                for (i.set(n, t), i.set(t, n); ++c < f;) {
                    var s = n[c], h = t[c];
                    if (e)
                        var p = o ? e(h, s, c, t, n, i) : e(s, h, c, n, t, i);
                    if (p !== F) {
                        if (p)
                            continue;
                        a = false;
                        break;
                    }
                    if (l) {
                        if (!_(t, function (n, t) {
                                if (!R(l, t) && (s === n || u(s, n, r, e, i)))
                                    return l.push(t);
                            })) {
                            a = false;
                            break;
                        }
                    } else if (s !== h && !u(s, h, r, e, i)) {
                        a = false;
                        break;
                    }
                }
                return i.delete(n), i.delete(t), a;
            }
            function ve(n, t, r, e, u, i, o) {
                switch (r) {
                case '[object DataView]':
                    if (n.byteLength != t.byteLength || n.byteOffset != t.byteOffset)
                        break;
                    n = n.buffer, t = t.buffer;
                case '[object ArrayBuffer]':
                    if (n.byteLength != t.byteLength || !i(new di(n), new di(t)))
                        break;
                    return true;
                case '[object Boolean]':
                case '[object Date]':
                case '[object Number]':
                    return hu(+n, +t);
                case '[object Error]':
                    return n.name == t.name && n.message == t.message;
                case '[object RegExp]':
                case '[object String]':
                    return n == t + '';
                case '[object Map]':
                    var f = L;
                case '[object Set]':
                    if (f || (f = D), n.size != t.size && !(1 & e))
                        break;
                    return (r = o.get(n)) ? r == t : (e |= 2, o.set(n, t), t = _e(f(n), f(t), e, u, i, o), o.delete(n), t);
                case '[object Symbol]':
                    if (eo)
                        return eo.call(n) == eo.call(t);
                }
                return false;
            }
            function ge(n) {
                return wo(Ce(n, F, Ve), n + '');
            }
            function de(n) {
                return Rt(n, Lu, vo);
            }
            function ye(n) {
                return Rt(n, Uu, go);
            }
            function be(n) {
                for (var t = n.name + '', r = Ji[t], e = ci.call(Ji, t) ? r.length : 0; e--;) {
                    var u = r[e], i = u.func;
                    if (null == i || i == n)
                        return u.name;
                }
                return t;
            }
            function xe(n) {
                return (ci.call(On, 'placeholder') ? On : n).placeholder;
            }
            function je() {
                var n = On.iteratee || Pu, n = n === Pu ? Gt : n;
                return arguments.length ? n(arguments[0], arguments[1]) : n;
            }
            function we(n, t) {
                var r = n.__data__, e = typeof t;
                return ('string' == e || 'number' == e || 'symbol' == e || 'boolean' == e ? '__proto__' !== t : null === t) ? r[typeof t == 'string' ? 'string' : 'hash'] : r.map;
            }
            function me(n) {
                for (var t = Lu(n), r = t.length; r--;) {
                    var e = t[r], u = n[e];
                    t[r] = [
                        e,
                        u,
                        u === u && !bu(u)
                    ];
                }
                return t;
            }
            function Ae(n, t) {
                var r = null == n ? F : n[t];
                return Zt(r) ? r : F;
            }
            function ke(n, t, r) {
                t = Rr(t, n);
                for (var e = -1, u = t.length, i = false; ++e < u;) {
                    var o = $e(t[e]);
                    if (!(i = null != n && r(n, o)))
                        break;
                    n = n[o];
                }
                return i || ++e != u ? i : (u = null == n ? 0 : n.length, !!u && yu(u) && Re(o, u) && (af(n) || cf(n)));
            }
            function Ee(n) {
                var t = n.length, r = n.constructor(t);
                return t && 'string' == typeof n[0] && ci.call(n, 'index') && (r.index = n.index, r.input = n.input), r;
            }
            function Oe(n) {
                return typeof n.constructor != 'function' || Le(n) ? {} : io(bi(n));
            }
            function Se(r, e, u, i) {
                var o = r.constructor;
                switch (e) {
                case '[object ArrayBuffer]':
                    return Br(r);
                case '[object Boolean]':
                case '[object Date]':
                    return new o(+r);
                case '[object DataView]':
                    return e = i ? Br(r.buffer) : r.buffer, new r.constructor(e, r.byteOffset, r.byteLength);
                case '[object Float32Array]':
                case '[object Float64Array]':
                case '[object Int8Array]':
                case '[object Int16Array]':
                case '[object Int32Array]':
                case '[object Uint8Array]':
                case '[object Uint8ClampedArray]':
                case '[object Uint16Array]':
                case '[object Uint32Array]':
                    return Lr(r, i);
                case '[object Map]':
                    return e = i ? u(L(r), 1) : L(r), h(e, n, new r.constructor());
                case '[object Number]':
                case '[object String]':
                    return new o(r);
                case '[object RegExp]':
                    return e = new r.constructor(r.source, dn.exec(r)), e.lastIndex = r.lastIndex, e;
                case '[object Set]':
                    return e = i ? u(D(r), 1) : D(r), h(e, t, new r.constructor());
                case '[object Symbol]':
                    return eo ? ni(eo.call(r)) : {};
                }
            }
            function Ie(n) {
                return af(n) || cf(n) || !!(mi && n && n[mi]);
            }
            function Re(n, t) {
                return t = null == t ? 9007199254740991 : t, !!t && (typeof n == 'number' || wn.test(n)) && -1 < n && 0 == n % 1 && n < t;
            }
            function ze(n, t, r) {
                if (!bu(r))
                    return false;
                var e = typeof t;
                return !!('number' == e ? pu(r) && Re(t, r.length) : 'string' == e && t in r) && hu(r[t], n);
            }
            function We(n, t) {
                if (af(n))
                    return false;
                var r = typeof n;
                return !('number' != r && 'symbol' != r && 'boolean' != r && null != n && !Au(n)) || (rn.test(n) || !tn.test(n) || null != t && n in ni(t));
            }
            function Be(n) {
                var t = be(n), r = On[t];
                return typeof r == 'function' && t in Mn.prototype && (n === r || (t = _o(r), !!t && n === t[0]));
            }
            function Le(n) {
                var t = n && n.constructor;
                return n === (typeof t == 'function' && t.prototype || ii);
            }
            function Ue(n, t) {
                return function (r) {
                    return null != r && (r[n] === t && (t !== F || n in ni(r)));
                };
            }
            function Ce(n, t, e) {
                return t = Di(t === F ? n.length - 1 : t, 0), function () {
                    for (var u = arguments, i = -1, o = Di(u.length - t, 0), f = Hu(o); ++i < o;)
                        f[i] = u[t + i];
                    for (i = -1, o = Hu(t + 1); ++i < t;)
                        o[i] = u[i];
                    return o[t] = e(f), r(n, this, o);
                };
            }
            function De(n, t, r) {
                var e = t + '';
                t = wo;
                var u, i = Ne;
                return u = (u = e.match(hn)) ? u[1].split(pn) : [], r = i(u, r), (i = r.length) && (u = i - 1, r[u] = (1 < i ? '& ' : '') + r[u], r = r.join(2 < i ? ', ' : ' '), e = e.replace(sn, '{\n/* [wrapped with ' + r + '] */\n')), t(n, e);
            }
            function Me(n) {
                var t = 0, r = 0;
                return function () {
                    var e = Ti(), u = 16 - (e - r);
                    if (r = e, 0 < u) {
                        if (800 <= ++t)
                            return arguments[0];
                    } else
                        t = 0;
                    return n.apply(F, arguments);
                };
            }
            function Te(n, t) {
                var r = -1, e = n.length, u = e - 1;
                for (t = t === F ? e : t; ++r < t;) {
                    var e = cr(r, u), i = n[e];
                    n[e] = n[r], n[r] = i;
                }
                return n.length = t, n;
            }
            function $e(n) {
                if (typeof n == 'string' || Au(n))
                    return n;
                var t = n + '';
                return '0' == t && 1 / n == -N ? '-0' : t;
            }
            function Fe(n) {
                if (null != n) {
                    try {
                        return fi.call(n);
                    } catch (n) {
                    }
                    return n + '';
                }
                return '';
            }
            function Ne(n, t) {
                return u(Z, function (r) {
                    var e = '_.' + r[0];
                    t & r[1] && !c(n, e) && n.push(e);
                }), n.sort();
            }
            function Pe(n) {
                if (n instanceof Mn)
                    return n.clone();
                var t = new zn(n.__wrapped__, n.__chain__);
                return t.__actions__ = Mr(n.__actions__), t.__index__ = n.__index__, t.__values__ = n.__values__, t;
            }
            function Ze(n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (r = null == r ? 0 : Ou(r), 0 > r && (r = Di(e + r, 0)), g(n, je(t, 3), r)) : -1;
            }
            function qe(n, t, r) {
                var e = null == n ? 0 : n.length;
                if (!e)
                    return -1;
                var u = e - 1;
                return r !== F && (u = Ou(r), u = 0 > r ? Di(e + u, 0) : Mi(u, e - 1)), g(n, je(t, 3), u, true);
            }
            function Ve(n) {
                return (null == n ? 0 : n.length) ? kt(n, 1) : [];
            }
            function Ke(n) {
                return n && n.length ? n[0] : F;
            }
            function Ge(n) {
                var t = null == n ? 0 : n.length;
                return t ? n[t - 1] : F;
            }
            function He(n, t) {
                return n && n.length && t && t.length ? or(n, t) : n;
            }
            function Je(n) {
                return null == n ? n : Ni.call(n);
            }
            function Ye(n) {
                if (!n || !n.length)
                    return [];
                var t = 0;
                return n = f(n, function (n) {
                    if (_u(n))
                        return t = Di(n.length, t), true;
                }), E(t, function (t) {
                    return l(n, j(t));
                });
            }
            function Qe(n, t) {
                if (!n || !n.length)
                    return [];
                var e = Ye(n);
                return null == t ? e : l(e, function (n) {
                    return r(t, F, n);
                });
            }
            function Xe(n) {
                return n = On(n), n.__chain__ = true, n;
            }
            function nu(n, t) {
                return t(n);
            }
            function tu() {
                return this;
            }
            function ru(n, t) {
                return (af(n) ? u : oo)(n, je(t, 3));
            }
            function eu(n, t) {
                return (af(n) ? i : fo)(n, je(t, 3));
            }
            function uu(n, t) {
                return (af(n) ? l : Yt)(n, je(t, 3));
            }
            function iu(n, t, r) {
                return t = r ? F : t, t = n && null == t ? n.length : t, le(n, 128, F, F, F, F, t);
            }
            function ou(n, t) {
                var r;
                if (typeof t != 'function')
                    throw new ei('Expected a function');
                return n = Ou(n), function () {
                    return 0 < --n && (r = t.apply(this, arguments)), 1 >= n && (t = F), r;
                };
            }
            function fu(n, t, r) {
                return t = r ? F : t, n = le(n, 8, F, F, F, F, F, t), n.placeholder = fu.placeholder, n;
            }
            function cu(n, t, r) {
                return t = r ? F : t, n = le(n, 16, F, F, F, F, F, t), n.placeholder = cu.placeholder, n;
            }
            function au(n, t, r) {
                function e(t) {
                    var r = c, e = a;
                    return c = a = F, _ = t, s = n.apply(e, r);
                }
                function u(n) {
                    var r = n - p;
                    return n -= _, p === F || r >= t || 0 > r || g && n >= l;
                }
                function i() {
                    var n = Jo();
                    if (u(n))
                        return o(n);
                    var r, e = jo;
                    r = n - _, n = t - (n - p), r = g ? Mi(n, l - r) : n, h = e(i, r);
                }
                function o(n) {
                    return h = F, d && c ? e(n) : (c = a = F, s);
                }
                function f() {
                    var n = Jo(), r = u(n);
                    if (c = arguments, a = this, p = n, r) {
                        if (h === F)
                            return _ = n = p, h = jo(i, t), v ? e(n) : s;
                        if (g)
                            return h = jo(i, t), e(p);
                    }
                    return h === F && (h = jo(i, t)), s;
                }
                var c, a, l, s, h, p, _ = 0, v = false, g = false, d = true;
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return t = Iu(t) || 0, bu(r) && (v = !!r.leading, l = (g = 'maxWait' in r) ? Di(Iu(r.maxWait) || 0, t) : l, d = 'trailing' in r ? !!r.trailing : d), f.cancel = function () {
                    h !== F && ho(h), _ = 0, c = p = a = h = F;
                }, f.flush = function () {
                    return h === F ? s : o(Jo());
                }, f;
            }
            function lu(n, t) {
                function r() {
                    var e = arguments, u = t ? t.apply(this, e) : e[0], i = r.cache;
                    return i.has(u) ? i.get(u) : (e = n.apply(this, e), r.cache = i.set(u, e) || i, e);
                }
                if (typeof n != 'function' || null != t && typeof t != 'function')
                    throw new ei('Expected a function');
                return r.cache = new (lu.Cache || Pn)(), r;
            }
            function su(n) {
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return function () {
                    var t = arguments;
                    switch (t.length) {
                    case 0:
                        return !n.call(this);
                    case 1:
                        return !n.call(this, t[0]);
                    case 2:
                        return !n.call(this, t[0], t[1]);
                    case 3:
                        return !n.call(this, t[0], t[1], t[2]);
                    }
                    return !n.apply(this, t);
                };
            }
            function hu(n, t) {
                return n === t || n !== n && t !== t;
            }
            function pu(n) {
                return null != n && yu(n.length) && !gu(n);
            }
            function _u(n) {
                return xu(n) && pu(n);
            }
            function vu(n) {
                if (!xu(n))
                    return false;
                var t = zt(n);
                return '[object Error]' == t || '[object DOMException]' == t || typeof n.message == 'string' && typeof n.name == 'string' && !wu(n);
            }
            function gu(n) {
                return !!bu(n) && (n = zt(n), '[object Function]' == n || '[object GeneratorFunction]' == n || '[object AsyncFunction]' == n || '[object Proxy]' == n);
            }
            function du(n) {
                return typeof n == 'number' && n == Ou(n);
            }
            function yu(n) {
                return typeof n == 'number' && -1 < n && 0 == n % 1 && 9007199254740991 >= n;
            }
            function bu(n) {
                var t = typeof n;
                return null != n && ('object' == t || 'function' == t);
            }
            function xu(n) {
                return null != n && typeof n == 'object';
            }
            function ju(n) {
                return typeof n == 'number' || xu(n) && '[object Number]' == zt(n);
            }
            function wu(n) {
                return !(!xu(n) || '[object Object]' != zt(n)) && (n = bi(n), null === n || (n = ci.call(n, 'constructor') && n.constructor, typeof n == 'function' && n instanceof n && fi.call(n) == hi));
            }
            function mu(n) {
                return typeof n == 'string' || !af(n) && xu(n) && '[object String]' == zt(n);
            }
            function Au(n) {
                return typeof n == 'symbol' || xu(n) && '[object Symbol]' == zt(n);
            }
            function ku(n) {
                if (!n)
                    return [];
                if (pu(n))
                    return mu(n) ? $(n) : Mr(n);
                if (Ai && n[Ai]) {
                    n = n[Ai]();
                    for (var t, r = []; !(t = n.next()).done;)
                        r.push(t.value);
                    return r;
                }
                return t = yo(n), ('[object Map]' == t ? L : '[object Set]' == t ? D : Du)(n);
            }
            function Eu(n) {
                return n ? (n = Iu(n), n === N || n === -N ? 1.7976931348623157e+308 * (0 > n ? -1 : 1) : n === n ? n : 0) : 0 === n ? n : 0;
            }
            function Ou(n) {
                n = Eu(n);
                var t = n % 1;
                return n === n ? t ? n - t : n : 0;
            }
            function Su(n) {
                return n ? gt(Ou(n), 0, 4294967295) : 0;
            }
            function Iu(n) {
                if (typeof n == 'number')
                    return n;
                if (Au(n))
                    return P;
                if (bu(n) && (n = typeof n.valueOf == 'function' ? n.valueOf() : n, n = bu(n) ? n + '' : n), typeof n != 'string')
                    return 0 === n ? n : +n;
                n = n.replace(cn, '');
                var t = bn.test(n);
                return t || jn.test(n) ? Fn(n.slice(2), t ? 2 : 8) : yn.test(n) ? P : +n;
            }
            function Ru(n) {
                return Tr(n, Uu(n));
            }
            function zu(n) {
                return null == n ? '' : jr(n);
            }
            function Wu(n, t, r) {
                return n = null == n ? F : It(n, t), n === F ? r : n;
            }
            function Bu(n, t) {
                return null != n && ke(n, t, Lt);
            }
            function Lu(n) {
                return pu(n) ? Gn(n) : Ht(n);
            }
            function Uu(n) {
                if (pu(n))
                    n = Gn(n, true);
                else if (bu(n)) {
                    var t, r = Le(n), e = [];
                    for (t in n)
                        ('constructor' != t || !r && ci.call(n, t)) && e.push(t);
                    n = e;
                } else {
                    if (t = [], null != n)
                        for (r in ni(n))
                            t.push(r);
                    n = t;
                }
                return n;
            }
            function Cu(n, t) {
                if (null == n)
                    return {};
                var r = l(ye(n), function (n) {
                    return [n];
                });
                return t = je(t), ur(n, r, function (n, r) {
                    return t(n, r[0]);
                });
            }
            function Du(n) {
                return null == n ? [] : I(n, Lu(n));
            }
            function Mu(n) {
                return Nf(zu(n).toLowerCase());
            }
            function Tu(n) {
                return (n = zu(n)) && n.replace(mn, rt).replace(Rn, '');
            }
            function $u(n, t, r) {
                return n = zu(n), t = r ? F : t, t === F ? Ln.test(n) ? n.match(Wn) || [] : n.match(_n) || [] : n.match(t) || [];
            }
            function Fu(n) {
                return function () {
                    return n;
                };
            }
            function Nu(n) {
                return n;
            }
            function Pu(n) {
                return Gt(typeof n == 'function' ? n : dt(n, 1));
            }
            function Zu(n, t, r) {
                var e = Lu(t), i = St(t, e);
                null != r || bu(t) && (i.length || !e.length) || (r = t, t = n, n = this, i = St(t, Lu(t)));
                var o = !(bu(r) && 'chain' in r && !r.chain), f = gu(n);
                return u(i, function (r) {
                    var e = t[r];
                    n[r] = e, f && (n.prototype[r] = function () {
                        var t = this.__chain__;
                        if (o || t) {
                            var r = n(this.__wrapped__);
                            return (r.__actions__ = Mr(this.__actions__)).push({
                                func: e,
                                args: arguments,
                                thisArg: n
                            }), r.__chain__ = t, r;
                        }
                        return e.apply(n, s([this.value()], arguments));
                    });
                }), n;
            }
            function qu() {
            }
            function Vu(n) {
                return We(n) ? j($e(n)) : ir(n);
            }
            function Ku() {
                return [];
            }
            function Gu() {
                return false;
            }
            En = null == En ? Zn : it.defaults(Zn.Object(), En, it.pick(Zn, Un));
            var Hu = En.Array, Ju = En.Date, Yu = En.Error, Qu = En.Function, Xu = En.Math, ni = En.Object, ti = En.RegExp, ri = En.String, ei = En.TypeError, ui = Hu.prototype, ii = ni.prototype, oi = En['__core-js_shared__'], fi = Qu.prototype.toString, ci = ii.hasOwnProperty, ai = 0, li = function () {
                    var n = /[^.]+$/.exec(oi && oi.keys && oi.keys.IE_PROTO || '');
                    return n ? 'Symbol(src)_1.' + n : '';
                }(), si = ii.toString, hi = fi.call(ni), pi = Zn._, _i = ti('^' + fi.call(ci).replace(on, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'), vi = Kn ? En.Buffer : F, gi = En.Symbol, di = En.Uint8Array, yi = vi ? vi.f : F, bi = U(ni.getPrototypeOf, ni), xi = ni.create, ji = ii.propertyIsEnumerable, wi = ui.splice, mi = gi ? gi.isConcatSpreadable : F, Ai = gi ? gi.iterator : F, ki = gi ? gi.toStringTag : F, Ei = function () {
                    try {
                        var n = Ae(ni, 'defineProperty');
                        return n({}, '', {}), n;
                    } catch (n) {
                    }
                }(), Oi = En.clearTimeout !== Zn.clearTimeout && En.clearTimeout, Si = Ju && Ju.now !== Zn.Date.now && Ju.now, Ii = En.setTimeout !== Zn.setTimeout && En.setTimeout, Ri = Xu.ceil, zi = Xu.floor, Wi = ni.getOwnPropertySymbols, Bi = vi ? vi.isBuffer : F, Li = En.isFinite, Ui = ui.join, Ci = U(ni.keys, ni), Di = Xu.max, Mi = Xu.min, Ti = Ju.now, $i = En.parseInt, Fi = Xu.random, Ni = ui.reverse, Pi = Ae(En, 'DataView'), Zi = Ae(En, 'Map'), qi = Ae(En, 'Promise'), Vi = Ae(En, 'Set'), Ki = Ae(En, 'WeakMap'), Gi = Ae(ni, 'create'), Hi = Ki && new Ki(), Ji = {}, Yi = Fe(Pi), Qi = Fe(Zi), Xi = Fe(qi), no = Fe(Vi), to = Fe(Ki), ro = gi ? gi.prototype : F, eo = ro ? ro.valueOf : F, uo = ro ? ro.toString : F, io = function () {
                    function n() {
                    }
                    return function (t) {
                        return bu(t) ? xi ? xi(t) : (n.prototype = t, t = new n(), n.prototype = F, t) : {};
                    };
                }();
            On.templateSettings = {
                escape: Q,
                evaluate: X,
                interpolate: nn,
                variable: '',
                imports: { _: On }
            }, On.prototype = Sn.prototype, On.prototype.constructor = On, zn.prototype = io(Sn.prototype), zn.prototype.constructor = zn, Mn.prototype = io(Sn.prototype), Mn.prototype.constructor = Mn, Tn.prototype.clear = function () {
                this.__data__ = Gi ? Gi(null) : {}, this.size = 0;
            }, Tn.prototype.delete = function (n) {
                return n = this.has(n) && delete this.__data__[n], this.size -= n ? 1 : 0, n;
            }, Tn.prototype.get = function (n) {
                var t = this.__data__;
                return Gi ? (n = t[n], '__lodash_hash_undefined__' === n ? F : n) : ci.call(t, n) ? t[n] : F;
            }, Tn.prototype.has = function (n) {
                var t = this.__data__;
                return Gi ? t[n] !== F : ci.call(t, n);
            }, Tn.prototype.set = function (n, t) {
                var r = this.__data__;
                return this.size += this.has(n) ? 0 : 1, r[n] = Gi && t === F ? '__lodash_hash_undefined__' : t, this;
            }, Nn.prototype.clear = function () {
                this.__data__ = [], this.size = 0;
            }, Nn.prototype.delete = function (n) {
                var t = this.__data__;
                return n = lt(t, n), !(0 > n) && (n == t.length - 1 ? t.pop() : wi.call(t, n, 1), --this.size, true);
            }, Nn.prototype.get = function (n) {
                var t = this.__data__;
                return n = lt(t, n), 0 > n ? F : t[n][1];
            }, Nn.prototype.has = function (n) {
                return -1 < lt(this.__data__, n);
            }, Nn.prototype.set = function (n, t) {
                var r = this.__data__, e = lt(r, n);
                return 0 > e ? (++this.size, r.push([
                    n,
                    t
                ])) : r[e][1] = t, this;
            }, Pn.prototype.clear = function () {
                this.size = 0, this.__data__ = {
                    hash: new Tn(),
                    map: new (Zi || Nn)(),
                    string: new Tn()
                };
            }, Pn.prototype.delete = function (n) {
                return n = we(this, n).delete(n), this.size -= n ? 1 : 0, n;
            }, Pn.prototype.get = function (n) {
                return we(this, n).get(n);
            }, Pn.prototype.has = function (n) {
                return we(this, n).has(n);
            }, Pn.prototype.set = function (n, t) {
                var r = we(this, n), e = r.size;
                return r.set(n, t), this.size += r.size == e ? 0 : 1, this;
            }, qn.prototype.add = qn.prototype.push = function (n) {
                return this.__data__.set(n, '__lodash_hash_undefined__'), this;
            }, qn.prototype.has = function (n) {
                return this.__data__.has(n);
            }, Vn.prototype.clear = function () {
                this.__data__ = new Nn(), this.size = 0;
            }, Vn.prototype.delete = function (n) {
                var t = this.__data__;
                return n = t.delete(n), this.size = t.size, n;
            }, Vn.prototype.get = function (n) {
                return this.__data__.get(n);
            }, Vn.prototype.has = function (n) {
                return this.__data__.has(n);
            }, Vn.prototype.set = function (n, t) {
                var r = this.__data__;
                if (r instanceof Nn) {
                    var e = r.__data__;
                    if (!Zi || 199 > e.length)
                        return e.push([
                            n,
                            t
                        ]), this.size = ++r.size, this;
                    r = this.__data__ = new Pn(e);
                }
                return r.set(n, t), this.size = r.size, this;
            };
            var oo = Zr(Et), fo = Zr(Ot, true), co = qr(), ao = qr(true), lo = Hi ? function (n, t) {
                    return Hi.set(n, t), n;
                } : Nu, so = Ei ? function (n, t) {
                    return Ei(n, 'toString', {
                        configurable: true,
                        enumerable: false,
                        value: Fu(t),
                        writable: true
                    });
                } : Nu, ho = Oi || function (n) {
                    return Zn.clearTimeout(n);
                }, po = Vi && 1 / D(new Vi([
                    ,
                    -0
                ]))[1] == N ? function (n) {
                    return new Vi(n);
                } : qu, _o = Hi ? function (n) {
                    return Hi.get(n);
                } : qu, vo = Wi ? function (n) {
                    return null == n ? [] : (n = ni(n), f(Wi(n), function (t) {
                        return ji.call(n, t);
                    }));
                } : Ku, go = Wi ? function (n) {
                    for (var t = []; n;)
                        s(t, vo(n)), n = bi(n);
                    return t;
                } : Ku, yo = zt;
            (Pi && '[object DataView]' != yo(new Pi(new ArrayBuffer(1))) || Zi && '[object Map]' != yo(new Zi()) || qi && '[object Promise]' != yo(qi.resolve()) || Vi && '[object Set]' != yo(new Vi()) || Ki && '[object WeakMap]' != yo(new Ki())) && (yo = function (n) {
                var t = zt(n);
                if (n = (n = '[object Object]' == t ? n.constructor : F) ? Fe(n) : '')
                    switch (n) {
                    case Yi:
                        return '[object DataView]';
                    case Qi:
                        return '[object Map]';
                    case Xi:
                        return '[object Promise]';
                    case no:
                        return '[object Set]';
                    case to:
                        return '[object WeakMap]';
                    }
                return t;
            });
            var bo = oi ? gu : Gu, xo = Me(lo), jo = Ii || function (n, t) {
                    return Zn.setTimeout(n, t);
                }, wo = Me(so), mo = function (n) {
                    n = lu(n, function (n) {
                        return 500 === t.size && t.clear(), n;
                    });
                    var t = n.cache;
                    return n;
                }(function (n) {
                    var t = [];
                    return en.test(n) && t.push(''), n.replace(un, function (n, r, e, u) {
                        t.push(e ? u.replace(vn, '$1') : r || n);
                    }), t;
                }), Ao = lr(function (n, t) {
                    return _u(n) ? jt(n, kt(t, 1, _u, true)) : [];
                }), ko = lr(function (n, t) {
                    var r = Ge(t);
                    return _u(r) && (r = F), _u(n) ? jt(n, kt(t, 1, _u, true), je(r, 2)) : [];
                }), Eo = lr(function (n, t) {
                    var r = Ge(t);
                    return _u(r) && (r = F), _u(n) ? jt(n, kt(t, 1, _u, true), F, r) : [];
                }), Oo = lr(function (n) {
                    var t = l(n, Sr);
                    return t.length && t[0] === n[0] ? Ut(t) : [];
                }), So = lr(function (n) {
                    var t = Ge(n), r = l(n, Sr);
                    return t === Ge(r) ? t = F : r.pop(), r.length && r[0] === n[0] ? Ut(r, je(t, 2)) : [];
                }), Io = lr(function (n) {
                    var t = Ge(n), r = l(n, Sr);
                    return (t = typeof t == 'function' ? t : F) && r.pop(), r.length && r[0] === n[0] ? Ut(r, F, t) : [];
                }), Ro = lr(He), zo = ge(function (n, t) {
                    var r = null == n ? 0 : n.length, e = vt(n, t);
                    return fr(n, l(t, function (n) {
                        return Re(n, r) ? +n : n;
                    }).sort(Ur)), e;
                }), Wo = lr(function (n) {
                    return wr(kt(n, 1, _u, true));
                }), Bo = lr(function (n) {
                    var t = Ge(n);
                    return _u(t) && (t = F), wr(kt(n, 1, _u, true), je(t, 2));
                }), Lo = lr(function (n) {
                    var t = Ge(n), t = typeof t == 'function' ? t : F;
                    return wr(kt(n, 1, _u, true), F, t);
                }), Uo = lr(function (n, t) {
                    return _u(n) ? jt(n, t) : [];
                }), Co = lr(function (n) {
                    return Er(f(n, _u));
                }), Do = lr(function (n) {
                    var t = Ge(n);
                    return _u(t) && (t = F), Er(f(n, _u), je(t, 2));
                }), Mo = lr(function (n) {
                    var t = Ge(n), t = typeof t == 'function' ? t : F;
                    return Er(f(n, _u), F, t);
                }), To = lr(Ye), $o = lr(function (n) {
                    var t = n.length, t = 1 < t ? n[t - 1] : F, t = typeof t == 'function' ? (n.pop(), t) : F;
                    return Qe(n, t);
                }), Fo = ge(function (n) {
                    function t(t) {
                        return vt(t, n);
                    }
                    var r = n.length, e = r ? n[0] : 0, u = this.__wrapped__;
                    return !(1 < r || this.__actions__.length) && u instanceof Mn && Re(e) ? (u = u.slice(e, +e + (r ? 1 : 0)), u.__actions__.push({
                        func: nu,
                        args: [t],
                        thisArg: F
                    }), new zn(u, this.__chain__).thru(function (n) {
                        return r && !n.length && n.push(F), n;
                    })) : this.thru(t);
                }), No = Nr(function (n, t, r) {
                    ci.call(n, r) ? ++n[r] : _t(n, r, 1);
                }), Po = Yr(Ze), Zo = Yr(qe), qo = Nr(function (n, t, r) {
                    ci.call(n, r) ? n[r].push(t) : _t(n, r, [t]);
                }), Vo = lr(function (n, t, e) {
                    var u = -1, i = typeof t == 'function', o = pu(n) ? Hu(n.length) : [];
                    return oo(n, function (n) {
                        o[++u] = i ? r(t, n, e) : Dt(n, t, e);
                    }), o;
                }), Ko = Nr(function (n, t, r) {
                    _t(n, r, t);
                }), Go = Nr(function (n, t, r) {
                    n[r ? 0 : 1].push(t);
                }, function () {
                    return [
                        [],
                        []
                    ];
                }), Ho = lr(function (n, t) {
                    if (null == n)
                        return [];
                    var r = t.length;
                    return 1 < r && ze(n, t[0], t[1]) ? t = [] : 2 < r && ze(t[0], t[1], t[2]) && (t = [t[0]]), rr(n, kt(t, 1), []);
                }), Jo = Si || function () {
                    return Zn.Date.now();
                }, Yo = lr(function (n, t, r) {
                    var e = 1;
                    if (r.length)
                        var u = C(r, xe(Yo)), e = 32 | e;
                    return le(n, e, t, r, u);
                }), Qo = lr(function (n, t, r) {
                    var e = 3;
                    if (r.length)
                        var u = C(r, xe(Qo)), e = 32 | e;
                    return le(t, e, n, r, u);
                }), Xo = lr(function (n, t) {
                    return xt(n, 1, t);
                }), nf = lr(function (n, t, r) {
                    return xt(n, Iu(t) || 0, r);
                });
            lu.Cache = Pn;
            var tf = lr(function (n, t) {
                    t = 1 == t.length && af(t[0]) ? l(t[0], S(je())) : l(kt(t, 1), S(je()));
                    var e = t.length;
                    return lr(function (u) {
                        for (var i = -1, o = Mi(u.length, e); ++i < o;)
                            u[i] = t[i].call(this, u[i]);
                        return r(n, this, u);
                    });
                }), rf = lr(function (n, t) {
                    return le(n, 32, F, t, C(t, xe(rf)));
                }), ef = lr(function (n, t) {
                    return le(n, 64, F, t, C(t, xe(ef)));
                }), uf = ge(function (n, t) {
                    return le(n, 256, F, F, F, t);
                }), of = oe(Wt), ff = oe(function (n, t) {
                    return n >= t;
                }), cf = Mt(function () {
                    return arguments;
                }()) ? Mt : function (n) {
                    return xu(n) && ci.call(n, 'callee') && !ji.call(n, 'callee');
                }, af = Hu.isArray, lf = Hn ? S(Hn) : Tt, sf = Bi || Gu, hf = Jn ? S(Jn) : $t, pf = Yn ? S(Yn) : Nt, _f = Qn ? S(Qn) : qt, vf = Xn ? S(Xn) : Vt, gf = nt ? S(nt) : Kt, df = oe(Jt), yf = oe(function (n, t) {
                    return n <= t;
                }), bf = Pr(function (n, t) {
                    if (Le(t) || pu(t))
                        Tr(t, Lu(t), n);
                    else
                        for (var r in t)
                            ci.call(t, r) && at(n, r, t[r]);
                }), xf = Pr(function (n, t) {
                    Tr(t, Uu(t), n);
                }), jf = Pr(function (n, t, r, e) {
                    Tr(t, Uu(t), n, e);
                }), wf = Pr(function (n, t, r, e) {
                    Tr(t, Lu(t), n, e);
                }), mf = ge(vt), Af = lr(function (n) {
                    return n.push(F, se), r(jf, F, n);
                }), kf = lr(function (n) {
                    return n.push(F, he), r(Rf, F, n);
                }), Ef = ne(function (n, t, r) {
                    n[t] = r;
                }, Fu(Nu)), Of = ne(function (n, t, r) {
                    ci.call(n, t) ? n[t].push(r) : n[t] = [r];
                }, je), Sf = lr(Dt), If = Pr(function (n, t, r) {
                    nr(n, t, r);
                }), Rf = Pr(function (n, t, r, e) {
                    nr(n, t, r, e);
                }), zf = ge(function (n, t) {
                    var r = {};
                    if (null == n)
                        return r;
                    var e = false;
                    t = l(t, function (t) {
                        return t = Rr(t, n), e || (e = 1 < t.length), t;
                    }), Tr(n, ye(n), r), e && (r = dt(r, 7, pe));
                    for (var u = t.length; u--;)
                        mr(r, t[u]);
                    return r;
                }), Wf = ge(function (n, t) {
                    return null == n ? {} : er(n, t);
                }), Bf = ae(Lu), Lf = ae(Uu), Uf = Gr(function (n, t, r) {
                    return t = t.toLowerCase(), n + (r ? Mu(t) : t);
                }), Cf = Gr(function (n, t, r) {
                    return n + (r ? '-' : '') + t.toLowerCase();
                }), Df = Gr(function (n, t, r) {
                    return n + (r ? ' ' : '') + t.toLowerCase();
                }), Mf = Kr('toLowerCase'), Tf = Gr(function (n, t, r) {
                    return n + (r ? '_' : '') + t.toLowerCase();
                }), $f = Gr(function (n, t, r) {
                    return n + (r ? ' ' : '') + Nf(t);
                }), Ff = Gr(function (n, t, r) {
                    return n + (r ? ' ' : '') + t.toUpperCase();
                }), Nf = Kr('toUpperCase'), Pf = lr(function (n, t) {
                    try {
                        return r(n, F, t);
                    } catch (n) {
                        return vu(n) ? n : new Yu(n);
                    }
                }), Zf = ge(function (n, t) {
                    return u(t, function (t) {
                        t = $e(t), _t(n, t, Yo(n[t], n));
                    }), n;
                }), qf = Qr(), Vf = Qr(true), Kf = lr(function (n, t) {
                    return function (r) {
                        return Dt(r, n, t);
                    };
                }), Gf = lr(function (n, t) {
                    return function (r) {
                        return Dt(n, r, t);
                    };
                }), Hf = re(l), Jf = re(o), Yf = re(_), Qf = ie(), Xf = ie(true), nc = te(function (n, t) {
                    return n + t;
                }, 0), tc = ce('ceil'), rc = te(function (n, t) {
                    return n / t;
                }, 1), ec = ce('floor'), uc = te(function (n, t) {
                    return n * t;
                }, 1), ic = ce('round'), oc = te(function (n, t) {
                    return n - t;
                }, 0);
            return On.after = function (n, t) {
                if (typeof t != 'function')
                    throw new ei('Expected a function');
                return n = Ou(n), function () {
                    if (1 > --n)
                        return t.apply(this, arguments);
                };
            }, On.ary = iu, On.assign = bf, On.assignIn = xf, On.assignInWith = jf, On.assignWith = wf, On.at = mf, On.before = ou, On.bind = Yo, On.bindAll = Zf, On.bindKey = Qo, On.castArray = function () {
                if (!arguments.length)
                    return [];
                var n = arguments[0];
                return af(n) ? n : [n];
            }, On.chain = Xe, On.chunk = function (n, t, r) {
                if (t = (r ? ze(n, t, r) : t === F) ? 1 : Di(Ou(t), 0), r = null == n ? 0 : n.length, !r || 1 > t)
                    return [];
                for (var e = 0, u = 0, i = Hu(Ri(r / t)); e < r;)
                    i[u++] = vr(n, e, e += t);
                return i;
            }, On.compact = function (n) {
                for (var t = -1, r = null == n ? 0 : n.length, e = 0, u = []; ++t < r;) {
                    var i = n[t];
                    i && (u[e++] = i);
                }
                return u;
            }, On.concat = function () {
                var n = arguments.length;
                if (!n)
                    return [];
                for (var t = Hu(n - 1), r = arguments[0]; n--;)
                    t[n - 1] = arguments[n];
                return s(af(r) ? Mr(r) : [r], kt(t, 1));
            }, On.cond = function (n) {
                var t = null == n ? 0 : n.length, e = je();
                return n = t ? l(n, function (n) {
                    if ('function' != typeof n[1])
                        throw new ei('Expected a function');
                    return [
                        e(n[0]),
                        n[1]
                    ];
                }) : [], lr(function (e) {
                    for (var u = -1; ++u < t;) {
                        var i = n[u];
                        if (r(i[0], this, e))
                            return r(i[1], this, e);
                    }
                });
            }, On.conforms = function (n) {
                return yt(dt(n, 1));
            }, On.constant = Fu, On.countBy = No, On.create = function (n, t) {
                var r = io(n);
                return null == t ? r : ht(r, t);
            }, On.curry = fu, On.curryRight = cu, On.debounce = au, On.defaults = Af, On.defaultsDeep = kf, On.defer = Xo, On.delay = nf, On.difference = Ao, On.differenceBy = ko, On.differenceWith = Eo, On.drop = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (t = r || t === F ? 1 : Ou(t), vr(n, 0 > t ? 0 : t, e)) : [];
            }, On.dropRight = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (t = r || t === F ? 1 : Ou(t), t = e - t, vr(n, 0, 0 > t ? 0 : t)) : [];
            }, On.dropRightWhile = function (n, t) {
                return n && n.length ? Ar(n, je(t, 3), true, true) : [];
            }, On.dropWhile = function (n, t) {
                return n && n.length ? Ar(n, je(t, 3), true) : [];
            }, On.fill = function (n, t, r, e) {
                var u = null == n ? 0 : n.length;
                if (!u)
                    return [];
                for (r && typeof r != 'number' && ze(n, t, r) && (r = 0, e = u), u = n.length, r = Ou(r), 0 > r && (r = -r > u ? 0 : u + r), e = e === F || e > u ? u : Ou(e), 0 > e && (e += u), e = r > e ? 0 : Su(e); r < e;)
                    n[r++] = t;
                return n;
            }, On.filter = function (n, t) {
                return (af(n) ? f : At)(n, je(t, 3));
            }, On.flatMap = function (n, t) {
                return kt(uu(n, t), 1);
            }, On.flatMapDeep = function (n, t) {
                return kt(uu(n, t), N);
            }, On.flatMapDepth = function (n, t, r) {
                return r = r === F ? 1 : Ou(r), kt(uu(n, t), r);
            }, On.flatten = Ve, On.flattenDeep = function (n) {
                return (null == n ? 0 : n.length) ? kt(n, N) : [];
            }, On.flattenDepth = function (n, t) {
                return null != n && n.length ? (t = t === F ? 1 : Ou(t), kt(n, t)) : [];
            }, On.flip = function (n) {
                return le(n, 512);
            }, On.flow = qf, On.flowRight = Vf, On.fromPairs = function (n) {
                for (var t = -1, r = null == n ? 0 : n.length, e = {}; ++t < r;) {
                    var u = n[t];
                    e[u[0]] = u[1];
                }
                return e;
            }, On.functions = function (n) {
                return null == n ? [] : St(n, Lu(n));
            }, On.functionsIn = function (n) {
                return null == n ? [] : St(n, Uu(n));
            }, On.groupBy = qo, On.initial = function (n) {
                return (null == n ? 0 : n.length) ? vr(n, 0, -1) : [];
            }, On.intersection = Oo, On.intersectionBy = So, On.intersectionWith = Io, On.invert = Ef, On.invertBy = Of, On.invokeMap = Vo, On.iteratee = Pu, On.keyBy = Ko, On.keys = Lu, On.keysIn = Uu, On.map = uu, On.mapKeys = function (n, t) {
                var r = {};
                return t = je(t, 3), Et(n, function (n, e, u) {
                    _t(r, t(n, e, u), n);
                }), r;
            }, On.mapValues = function (n, t) {
                var r = {};
                return t = je(t, 3), Et(n, function (n, e, u) {
                    _t(r, e, t(n, e, u));
                }), r;
            }, On.matches = function (n) {
                return Qt(dt(n, 1));
            }, On.matchesProperty = function (n, t) {
                return Xt(n, dt(t, 1));
            }, On.memoize = lu, On.merge = If, On.mergeWith = Rf, On.method = Kf, On.methodOf = Gf, On.mixin = Zu, On.negate = su, On.nthArg = function (n) {
                return n = Ou(n), lr(function (t) {
                    return tr(t, n);
                });
            }, On.omit = zf, On.omitBy = function (n, t) {
                return Cu(n, su(je(t)));
            }, On.once = function (n) {
                return ou(2, n);
            }, On.orderBy = function (n, t, r, e) {
                return null == n ? [] : (af(t) || (t = null == t ? [] : [t]), r = e ? F : r, af(r) || (r = null == r ? [] : [r]), rr(n, t, r));
            }, On.over = Hf, On.overArgs = tf, On.overEvery = Jf, On.overSome = Yf, On.partial = rf, On.partialRight = ef, On.partition = Go, On.pick = Wf, On.pickBy = Cu, On.property = Vu, On.propertyOf = function (n) {
                return function (t) {
                    return null == n ? F : It(n, t);
                };
            }, On.pull = Ro, On.pullAll = He, On.pullAllBy = function (n, t, r) {
                return n && n.length && t && t.length ? or(n, t, je(r, 2)) : n;
            }, On.pullAllWith = function (n, t, r) {
                return n && n.length && t && t.length ? or(n, t, F, r) : n;
            }, On.pullAt = zo, On.range = Qf, On.rangeRight = Xf, On.rearg = uf, On.reject = function (n, t) {
                return (af(n) ? f : At)(n, su(je(t, 3)));
            }, On.remove = function (n, t) {
                var r = [];
                if (!n || !n.length)
                    return r;
                var e = -1, u = [], i = n.length;
                for (t = je(t, 3); ++e < i;) {
                    var o = n[e];
                    t(o, e, n) && (r.push(o), u.push(e));
                }
                return fr(n, u), r;
            }, On.rest = function (n, t) {
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return t = t === F ? t : Ou(t), lr(n, t);
            }, On.reverse = Je, On.sampleSize = function (n, t, r) {
                return t = (r ? ze(n, t, r) : t === F) ? 1 : Ou(t), (af(n) ? ot : hr)(n, t);
            }, On.set = function (n, t, r) {
                return null == n ? n : pr(n, t, r);
            }, On.setWith = function (n, t, r, e) {
                return e = typeof e == 'function' ? e : F, null == n ? n : pr(n, t, r, e);
            }, On.shuffle = function (n) {
                return (af(n) ? ft : _r)(n);
            }, On.slice = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (r && typeof r != 'number' && ze(n, t, r) ? (t = 0, r = e) : (t = null == t ? 0 : Ou(t), r = r === F ? e : Ou(r)), vr(n, t, r)) : [];
            }, On.sortBy = Ho, On.sortedUniq = function (n) {
                return n && n.length ? br(n) : [];
            }, On.sortedUniqBy = function (n, t) {
                return n && n.length ? br(n, je(t, 2)) : [];
            }, On.split = function (n, t, r) {
                return r && typeof r != 'number' && ze(n, t, r) && (t = r = F), r = r === F ? 4294967295 : r >>> 0, r ? (n = zu(n)) && (typeof t == 'string' || null != t && !_f(t)) && (t = jr(t), !t && Bn.test(n)) ? zr($(n), 0, r) : n.split(t, r) : [];
            }, On.spread = function (n, t) {
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return t = t === F ? 0 : Di(Ou(t), 0), lr(function (e) {
                    var u = e[t];
                    return e = zr(e, 0, t), u && s(e, u), r(n, this, e);
                });
            }, On.tail = function (n) {
                var t = null == n ? 0 : n.length;
                return t ? vr(n, 1, t) : [];
            }, On.take = function (n, t, r) {
                return n && n.length ? (t = r || t === F ? 1 : Ou(t), vr(n, 0, 0 > t ? 0 : t)) : [];
            }, On.takeRight = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (t = r || t === F ? 1 : Ou(t), t = e - t, vr(n, 0 > t ? 0 : t, e)) : [];
            }, On.takeRightWhile = function (n, t) {
                return n && n.length ? Ar(n, je(t, 3), false, true) : [];
            }, On.takeWhile = function (n, t) {
                return n && n.length ? Ar(n, je(t, 3)) : [];
            }, On.tap = function (n, t) {
                return t(n), n;
            }, On.throttle = function (n, t, r) {
                var e = true, u = true;
                if (typeof n != 'function')
                    throw new ei('Expected a function');
                return bu(r) && (e = 'leading' in r ? !!r.leading : e, u = 'trailing' in r ? !!r.trailing : u), au(n, t, {
                    leading: e,
                    maxWait: t,
                    trailing: u
                });
            }, On.thru = nu, On.toArray = ku, On.toPairs = Bf, On.toPairsIn = Lf, On.toPath = function (n) {
                return af(n) ? l(n, $e) : Au(n) ? [n] : Mr(mo(zu(n)));
            }, On.toPlainObject = Ru, On.transform = function (n, t, r) {
                var e = af(n), i = e || sf(n) || gf(n);
                if (t = je(t, 4), null == r) {
                    var o = n && n.constructor;
                    r = i ? e ? new o() : [] : bu(n) && gu(o) ? io(bi(n)) : {};
                }
                return (i ? u : Et)(n, function (n, e, u) {
                    return t(r, n, e, u);
                }), r;
            }, On.unary = function (n) {
                return iu(n, 1);
            }, On.union = Wo, On.unionBy = Bo, On.unionWith = Lo, On.uniq = function (n) {
                return n && n.length ? wr(n) : [];
            }, On.uniqBy = function (n, t) {
                return n && n.length ? wr(n, je(t, 2)) : [];
            }, On.uniqWith = function (n, t) {
                return t = typeof t == 'function' ? t : F, n && n.length ? wr(n, F, t) : [];
            }, On.unset = function (n, t) {
                return null == n || mr(n, t);
            }, On.unzip = Ye, On.unzipWith = Qe, On.update = function (n, t, r) {
                return null == n ? n : pr(n, t, Ir(r)(It(n, t)), void 0);
            }, On.updateWith = function (n, t, r, e) {
                return e = typeof e == 'function' ? e : F, null != n && (n = pr(n, t, Ir(r)(It(n, t)), e)), n;
            }, On.values = Du, On.valuesIn = function (n) {
                return null == n ? [] : I(n, Uu(n));
            }, On.without = Uo, On.words = $u, On.wrap = function (n, t) {
                return rf(Ir(t), n);
            }, On.xor = Co, On.xorBy = Do, On.xorWith = Mo, On.zip = To, On.zipObject = function (n, t) {
                return Or(n || [], t || [], at);
            }, On.zipObjectDeep = function (n, t) {
                return Or(n || [], t || [], pr);
            }, On.zipWith = $o, On.entries = Bf, On.entriesIn = Lf, On.extend = xf, On.extendWith = jf, Zu(On, On), On.add = nc, On.attempt = Pf, On.camelCase = Uf, On.capitalize = Mu, On.ceil = tc, On.clamp = function (n, t, r) {
                return r === F && (r = t, t = F), r !== F && (r = Iu(r), r = r === r ? r : 0), t !== F && (t = Iu(t), t = t === t ? t : 0), gt(Iu(n), t, r);
            }, On.clone = function (n) {
                return dt(n, 4);
            }, On.cloneDeep = function (n) {
                return dt(n, 5);
            }, On.cloneDeepWith = function (n, t) {
                return t = typeof t == 'function' ? t : F, dt(n, 5, t);
            }, On.cloneWith = function (n, t) {
                return t = typeof t == 'function' ? t : F, dt(n, 4, t);
            }, On.conformsTo = function (n, t) {
                return null == t || bt(n, t, Lu(t));
            }, On.deburr = Tu, On.defaultTo = function (n, t) {
                return null == n || n !== n ? t : n;
            }, On.divide = rc, On.endsWith = function (n, t, r) {
                n = zu(n), t = jr(t);
                var e = n.length, e = r = r === F ? e : gt(Ou(r), 0, e);
                return r -= t.length, 0 <= r && n.slice(r, e) == t;
            }, On.eq = hu, On.escape = function (n) {
                return (n = zu(n)) && Y.test(n) ? n.replace(H, et) : n;
            }, On.escapeRegExp = function (n) {
                return (n = zu(n)) && fn.test(n) ? n.replace(on, '\\$&') : n;
            }, On.every = function (n, t, r) {
                var e = af(n) ? o : wt;
                return r && ze(n, t, r) && (t = F), e(n, je(t, 3));
            }, On.find = Po, On.findIndex = Ze, On.findKey = function (n, t) {
                return v(n, je(t, 3), Et);
            }, On.findLast = Zo, On.findLastIndex = qe, On.findLastKey = function (n, t) {
                return v(n, je(t, 3), Ot);
            }, On.floor = ec, On.forEach = ru, On.forEachRight = eu, On.forIn = function (n, t) {
                return null == n ? n : co(n, je(t, 3), Uu);
            }, On.forInRight = function (n, t) {
                return null == n ? n : ao(n, je(t, 3), Uu);
            }, On.forOwn = function (n, t) {
                return n && Et(n, je(t, 3));
            }, On.forOwnRight = function (n, t) {
                return n && Ot(n, je(t, 3));
            }, On.get = Wu, On.gt = of, On.gte = ff, On.has = function (n, t) {
                return null != n && ke(n, t, Bt);
            }, On.hasIn = Bu, On.head = Ke, On.identity = Nu, On.includes = function (n, t, r, e) {
                return n = pu(n) ? n : Du(n), r = r && !e ? Ou(r) : 0, e = n.length, 0 > r && (r = Di(e + r, 0)), mu(n) ? r <= e && -1 < n.indexOf(t, r) : !!e && -1 < d(n, t, r);
            }, On.indexOf = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                return e ? (r = null == r ? 0 : Ou(r), 0 > r && (r = Di(e + r, 0)), d(n, t, r)) : -1;
            }, On.inRange = function (n, t, r) {
                return t = Eu(t), r === F ? (r = t, t = 0) : r = Eu(r), n = Iu(n), n >= Mi(t, r) && n < Di(t, r);
            }, On.invoke = Sf, On.isArguments = cf, On.isArray = af, On.isArrayBuffer = lf, On.isArrayLike = pu, On.isArrayLikeObject = _u, On.isBoolean = function (n) {
                return true === n || false === n || xu(n) && '[object Boolean]' == zt(n);
            }, On.isBuffer = sf, On.isDate = hf, On.isElement = function (n) {
                return xu(n) && 1 === n.nodeType && !wu(n);
            }, On.isEmpty = function (n) {
                if (null == n)
                    return true;
                if (pu(n) && (af(n) || typeof n == 'string' || typeof n.splice == 'function' || sf(n) || gf(n) || cf(n)))
                    return !n.length;
                var t = yo(n);
                if ('[object Map]' == t || '[object Set]' == t)
                    return !n.size;
                if (Le(n))
                    return !Ht(n).length;
                for (var r in n)
                    if (ci.call(n, r))
                        return false;
                return true;
            }, On.isEqual = function (n, t) {
                return Ft(n, t);
            }, On.isEqualWith = function (n, t, r) {
                var e = (r = typeof r == 'function' ? r : F) ? r(n, t) : F;
                return e === F ? Ft(n, t, F, r) : !!e;
            }, On.isError = vu, On.isFinite = function (n) {
                return typeof n == 'number' && Li(n);
            }, On.isFunction = gu, On.isInteger = du, On.isLength = yu, On.isMap = pf, On.isMatch = function (n, t) {
                return n === t || Pt(n, t, me(t));
            }, On.isMatchWith = function (n, t, r) {
                return r = typeof r == 'function' ? r : F, Pt(n, t, me(t), r);
            }, On.isNaN = function (n) {
                return ju(n) && n != +n;
            }, On.isNative = function (n) {
                if (bo(n))
                    throw new Yu('Unsupported core-js use. Try https://npms.io/search?q=ponyfill.');
                return Zt(n);
            }, On.isNil = function (n) {
                return null == n;
            }, On.isNull = function (n) {
                return null === n;
            }, On.isNumber = ju, On.isObject = bu, On.isObjectLike = xu, On.isPlainObject = wu, On.isRegExp = _f, On.isSafeInteger = function (n) {
                return du(n) && -9007199254740991 <= n && 9007199254740991 >= n;
            }, On.isSet = vf, On.isString = mu, On.isSymbol = Au, On.isTypedArray = gf, On.isUndefined = function (n) {
                return n === F;
            }, On.isWeakMap = function (n) {
                return xu(n) && '[object WeakMap]' == yo(n);
            }, On.isWeakSet = function (n) {
                return xu(n) && '[object WeakSet]' == zt(n);
            }, On.join = function (n, t) {
                return null == n ? '' : Ui.call(n, t);
            }, On.kebabCase = Cf, On.last = Ge, On.lastIndexOf = function (n, t, r) {
                var e = null == n ? 0 : n.length;
                if (!e)
                    return -1;
                var u = e;
                if (r !== F && (u = Ou(r), u = 0 > u ? Di(e + u, 0) : Mi(u, e - 1)), t === t) {
                    for (r = u + 1; r-- && n[r] !== t;);
                    n = r;
                } else
                    n = g(n, b, u, true);
                return n;
            }, On.lowerCase = Df, On.lowerFirst = Mf, On.lt = df, On.lte = yf, On.max = function (n) {
                return n && n.length ? mt(n, Nu, Wt) : F;
            }, On.maxBy = function (n, t) {
                return n && n.length ? mt(n, je(t, 2), Wt) : F;
            }, On.mean = function (n) {
                return x(n, Nu);
            }, On.meanBy = function (n, t) {
                return x(n, je(t, 2));
            }, On.min = function (n) {
                return n && n.length ? mt(n, Nu, Jt) : F;
            }, On.minBy = function (n, t) {
                return n && n.length ? mt(n, je(t, 2), Jt) : F;
            }, On.stubArray = Ku, On.stubFalse = Gu, On.stubObject = function () {
                return {};
            }, On.stubString = function () {
                return '';
            }, On.stubTrue = function () {
                return true;
            }, On.multiply = uc, On.nth = function (n, t) {
                return n && n.length ? tr(n, Ou(t)) : F;
            }, On.noConflict = function () {
                return Zn._ === this && (Zn._ = pi), this;
            }, On.noop = qu, On.now = Jo, On.pad = function (n, t, r) {
                n = zu(n);
                var e = (t = Ou(t)) ? T(n) : 0;
                return !t || e >= t ? n : (t = (t - e) / 2, ee(zi(t), r) + n + ee(Ri(t), r));
            }, On.padEnd = function (n, t, r) {
                n = zu(n);
                var e = (t = Ou(t)) ? T(n) : 0;
                return t && e < t ? n + ee(t - e, r) : n;
            }, On.padStart = function (n, t, r) {
                n = zu(n);
                var e = (t = Ou(t)) ? T(n) : 0;
                return t && e < t ? ee(t - e, r) + n : n;
            }, On.parseInt = function (n, t, r) {
                return r || null == t ? t = 0 : t && (t = +t), $i(zu(n).replace(an, ''), t || 0);
            }, On.random = function (n, t, r) {
                if (r && typeof r != 'boolean' && ze(n, t, r) && (t = r = F), r === F && (typeof t == 'boolean' ? (r = t, t = F) : typeof n == 'boolean' && (r = n, n = F)), n === F && t === F ? (n = 0, t = 1) : (n = Eu(n), t === F ? (t = n, n = 0) : t = Eu(t)), n > t) {
                    var e = n;
                    n = t, t = e;
                }
                return r || n % 1 || t % 1 ? (r = Fi(), Mi(n + r * (t - n + $n('1e-' + ((r + '').length - 1))), t)) : cr(n, t);
            }, On.reduce = function (n, t, r) {
                var e = af(n) ? h : m, u = 3 > arguments.length;
                return e(n, je(t, 4), r, u, oo);
            }, On.reduceRight = function (n, t, r) {
                var e = af(n) ? p : m, u = 3 > arguments.length;
                return e(n, je(t, 4), r, u, fo);
            }, On.repeat = function (n, t, r) {
                return t = (r ? ze(n, t, r) : t === F) ? 1 : Ou(t), ar(zu(n), t);
            }, On.replace = function () {
                var n = arguments, t = zu(n[0]);
                return 3 > n.length ? t : t.replace(n[1], n[2]);
            }, On.result = function (n, t, r) {
                t = Rr(t, n);
                var e = -1, u = t.length;
                for (u || (u = 1, n = F); ++e < u;) {
                    var i = null == n ? F : n[$e(t[e])];
                    i === F && (e = u, i = r), n = gu(i) ? i.call(n) : i;
                }
                return n;
            }, On.round = ic, On.runInContext = w, On.sample = function (n) {
                return (af(n) ? tt : sr)(n);
            }, On.size = function (n) {
                if (null == n)
                    return 0;
                if (pu(n))
                    return mu(n) ? T(n) : n.length;
                var t = yo(n);
                return '[object Map]' == t || '[object Set]' == t ? n.size : Ht(n).length;
            }, On.snakeCase = Tf, On.some = function (n, t, r) {
                var e = af(n) ? _ : gr;
                return r && ze(n, t, r) && (t = F), e(n, je(t, 3));
            }, On.sortedIndex = function (n, t) {
                return dr(n, t);
            }, On.sortedIndexBy = function (n, t, r) {
                return yr(n, t, je(r, 2));
            }, On.sortedIndexOf = function (n, t) {
                var r = null == n ? 0 : n.length;
                if (r) {
                    var e = dr(n, t);
                    if (e < r && hu(n[e], t))
                        return e;
                }
                return -1;
            }, On.sortedLastIndex = function (n, t) {
                return dr(n, t, true);
            }, On.sortedLastIndexBy = function (n, t, r) {
                return yr(n, t, je(r, 2), true);
            }, On.sortedLastIndexOf = function (n, t) {
                if (null == n ? 0 : n.length) {
                    var r = dr(n, t, true) - 1;
                    if (hu(n[r], t))
                        return r;
                }
                return -1;
            }, On.startCase = $f, On.startsWith = function (n, t, r) {
                return n = zu(n), r = gt(Ou(r), 0, n.length), t = jr(t), n.slice(r, r + t.length) == t;
            }, On.subtract = oc, On.sum = function (n) {
                return n && n.length ? k(n, Nu) : 0;
            }, On.sumBy = function (n, t) {
                return n && n.length ? k(n, je(t, 2)) : 0;
            }, On.template = function (n, t, r) {
                var e = On.templateSettings;
                r && ze(n, t, r) && (t = F), n = zu(n), t = jf({}, t, e, se), r = jf({}, t.imports, e.imports, se);
                var u, i, o = Lu(r), f = I(r, o), c = 0;
                r = t.interpolate || An;
                var a = '__p+=\'';
                r = ti((t.escape || An).source + '|' + r.source + '|' + (r === nn ? gn : An).source + '|' + (t.evaluate || An).source + '|$', 'g');
                var l = 'sourceURL' in t ? '//# sourceURL=' + t.sourceURL + '\n' : '';
                if (n.replace(r, function (t, r, e, o, f, l) {
                        return e || (e = o), a += n.slice(c, l).replace(kn, B), r && (u = true, a += '\'+__e(' + r + ')+\''), f && (i = true, a += '\';' + f + ';\n__p+=\''), e && (a += '\'+((__t=(' + e + '))==null?\'\':__t)+\''), c = l + t.length, t;
                    }), a += '\';', (t = t.variable) || (a = 'with(obj){' + a + '}'), a = (i ? a.replace(q, '') : a).replace(V, '$1').replace(K, '$1;'), a = 'function(' + (t || 'obj') + '){' + (t ? '' : 'obj||(obj={});') + 'var __t,__p=\'\'' + (u ? ',__e=_.escape' : '') + (i ? ',__j=Array.prototype.join;function print(){__p+=__j.call(arguments,\'\')}' : ';') + a + 'return __p}', t = Pf(function () {
                        return Qu(o, l + 'return ' + a).apply(F, f);
                    }), t.source = a, vu(t))
                    throw t;
                return t;
            }, On.times = function (n, t) {
                if (n = Ou(n), 1 > n || 9007199254740991 < n)
                    return [];
                var r = 4294967295, e = Mi(n, 4294967295);
                for (t = je(t), n -= 4294967295, e = E(e, t); ++r < n;)
                    t(r);
                return e;
            }, On.toFinite = Eu, On.toInteger = Ou, On.toLength = Su, On.toLower = function (n) {
                return zu(n).toLowerCase();
            }, On.toNumber = Iu, On.toSafeInteger = function (n) {
                return gt(Ou(n), -9007199254740991, 9007199254740991);
            }, On.toString = zu, On.toUpper = function (n) {
                return zu(n).toUpperCase();
            }, On.trim = function (n, t, r) {
                return (n = zu(n)) && (r || t === F) ? n.replace(cn, '') : n && (t = jr(t)) ? (n = $(n), r = $(t), t = z(n, r), r = W(n, r) + 1, zr(n, t, r).join('')) : n;
            }, On.trimEnd = function (n, t, r) {
                return (n = zu(n)) && (r || t === F) ? n.replace(ln, '') : n && (t = jr(t)) ? (n = $(n), t = W(n, $(t)) + 1, zr(n, 0, t).join('')) : n;
            }, On.trimStart = function (n, t, r) {
                return (n = zu(n)) && (r || t === F) ? n.replace(an, '') : n && (t = jr(t)) ? (n = $(n), t = z(n, $(t)), zr(n, t).join('')) : n;
            }, On.truncate = function (n, t) {
                var r = 30, e = '...';
                if (bu(t))
                    var u = 'separator' in t ? t.separator : u, r = 'length' in t ? Ou(t.length) : r, e = 'omission' in t ? jr(t.omission) : e;
                n = zu(n);
                var i = n.length;
                if (Bn.test(n))
                    var o = $(n), i = o.length;
                if (r >= i)
                    return n;
                if (i = r - T(e), 1 > i)
                    return e;
                if (r = o ? zr(o, 0, i).join('') : n.slice(0, i), u === F)
                    return r + e;
                if (o && (i += r.length - i), _f(u)) {
                    if (n.slice(i).search(u)) {
                        var f = r;
                        for (u.global || (u = ti(u.source, zu(dn.exec(u)) + 'g')), u.lastIndex = 0; o = u.exec(f);)
                            var c = o.index;
                        r = r.slice(0, c === F ? i : c);
                    }
                } else
                    n.indexOf(jr(u), i) != i && (u = r.lastIndexOf(u), -1 < u && (r = r.slice(0, u)));
                return r + e;
            }, On.unescape = function (n) {
                return (n = zu(n)) && J.test(n) ? n.replace(G, ut) : n;
            }, On.uniqueId = function (n) {
                var t = ++ai;
                return zu(n) + t;
            }, On.upperCase = Ff, On.upperFirst = Nf, On.each = ru, On.eachRight = eu, On.first = Ke, Zu(On, function () {
                var n = {};
                return Et(On, function (t, r) {
                    ci.call(On.prototype, r) || (n[r] = t);
                }), n;
            }(), { chain: false }), On.VERSION = '4.17.3', u('bind bindKey curry curryRight partial partialRight'.split(' '), function (n) {
                On[n].placeholder = On;
            }), u([
                'drop',
                'take'
            ], function (n, t) {
                Mn.prototype[n] = function (r) {
                    r = r === F ? 1 : Di(Ou(r), 0);
                    var e = this.__filtered__ && !t ? new Mn(this) : this.clone();
                    return e.__filtered__ ? e.__takeCount__ = Mi(r, e.__takeCount__) : e.__views__.push({
                        size: Mi(r, 4294967295),
                        type: n + (0 > e.__dir__ ? 'Right' : '')
                    }), e;
                }, Mn.prototype[n + 'Right'] = function (t) {
                    return this.reverse()[n](t).reverse();
                };
            }), u([
                'filter',
                'map',
                'takeWhile'
            ], function (n, t) {
                var r = t + 1, e = 1 == r || 3 == r;
                Mn.prototype[n] = function (n) {
                    var t = this.clone();
                    return t.__iteratees__.push({
                        iteratee: je(n, 3),
                        type: r
                    }), t.__filtered__ = t.__filtered__ || e, t;
                };
            }), u([
                'head',
                'last'
            ], function (n, t) {
                var r = 'take' + (t ? 'Right' : '');
                Mn.prototype[n] = function () {
                    return this[r](1).value()[0];
                };
            }), u([
                'initial',
                'tail'
            ], function (n, t) {
                var r = 'drop' + (t ? '' : 'Right');
                Mn.prototype[n] = function () {
                    return this.__filtered__ ? new Mn(this) : this[r](1);
                };
            }), Mn.prototype.compact = function () {
                return this.filter(Nu);
            }, Mn.prototype.find = function (n) {
                return this.filter(n).head();
            }, Mn.prototype.findLast = function (n) {
                return this.reverse().find(n);
            }, Mn.prototype.invokeMap = lr(function (n, t) {
                return typeof n == 'function' ? new Mn(this) : this.map(function (r) {
                    return Dt(r, n, t);
                });
            }), Mn.prototype.reject = function (n) {
                return this.filter(su(je(n)));
            }, Mn.prototype.slice = function (n, t) {
                n = Ou(n);
                var r = this;
                return r.__filtered__ && (0 < n || 0 > t) ? new Mn(r) : (0 > n ? r = r.takeRight(-n) : n && (r = r.drop(n)), t !== F && (t = Ou(t), r = 0 > t ? r.dropRight(-t) : r.take(t - n)), r);
            }, Mn.prototype.takeRightWhile = function (n) {
                return this.reverse().takeWhile(n).reverse();
            }, Mn.prototype.toArray = function () {
                return this.take(4294967295);
            }, Et(Mn.prototype, function (n, t) {
                var r = /^(?:filter|find|map|reject)|While$/.test(t), e = /^(?:head|last)$/.test(t), u = On[e ? 'take' + ('last' == t ? 'Right' : '') : t], i = e || /^find/.test(t);
                u && (On.prototype[t] = function () {
                    function t(n) {
                        return n = u.apply(On, s([n], f)), e && h ? n[0] : n;
                    }
                    var o = this.__wrapped__, f = e ? [1] : arguments, c = o instanceof Mn, a = f[0], l = c || af(o);
                    l && r && typeof a == 'function' && 1 != a.length && (c = l = false);
                    var h = this.__chain__, p = !!this.__actions__.length, a = i && !h, c = c && !p;
                    return !i && l ? (o = c ? o : new Mn(this), o = n.apply(o, f), o.__actions__.push({
                        func: nu,
                        args: [t],
                        thisArg: F
                    }), new zn(o, h)) : a && c ? n.apply(this, f) : (o = this.thru(t), a ? e ? o.value()[0] : o.value() : o);
                });
            }), u('pop push shift sort splice unshift'.split(' '), function (n) {
                var t = ui[n], r = /^(?:push|sort|unshift)$/.test(n) ? 'tap' : 'thru', e = /^(?:pop|shift)$/.test(n);
                On.prototype[n] = function () {
                    var n = arguments;
                    if (e && !this.__chain__) {
                        var u = this.value();
                        return t.apply(af(u) ? u : [], n);
                    }
                    return this[r](function (r) {
                        return t.apply(af(r) ? r : [], n);
                    });
                };
            }), Et(Mn.prototype, function (n, t) {
                var r = On[t];
                if (r) {
                    var e = r.name + '';
                    (Ji[e] || (Ji[e] = [])).push({
                        name: t,
                        func: r
                    });
                }
            }), Ji[Xr(F, 2).name] = [{
                    name: 'wrapper',
                    func: F
                }], Mn.prototype.clone = function () {
                var n = new Mn(this.__wrapped__);
                return n.__actions__ = Mr(this.__actions__), n.__dir__ = this.__dir__, n.__filtered__ = this.__filtered__, n.__iteratees__ = Mr(this.__iteratees__), n.__takeCount__ = this.__takeCount__, n.__views__ = Mr(this.__views__), n;
            }, Mn.prototype.reverse = function () {
                if (this.__filtered__) {
                    var n = new Mn(this);
                    n.__dir__ = -1, n.__filtered__ = true;
                } else
                    n = this.clone(), n.__dir__ *= -1;
                return n;
            }, Mn.prototype.value = function () {
                var n, t = this.__wrapped__.value(), r = this.__dir__, e = af(t), u = 0 > r, i = e ? t.length : 0;
                n = i;
                for (var o = this.__views__, f = 0, c = -1, a = o.length; ++c < a;) {
                    var l = o[c], s = l.size;
                    switch (l.type) {
                    case 'drop':
                        f += s;
                        break;
                    case 'dropRight':
                        n -= s;
                        break;
                    case 'take':
                        n = Mi(n, f + s);
                        break;
                    case 'takeRight':
                        f = Di(f, n - s);
                    }
                }
                if (n = {
                        start: f,
                        end: n
                    }, o = n.start, f = n.end, n = f - o, o = u ? f : o - 1, f = this.__iteratees__, c = f.length, a = 0, l = Mi(n, this.__takeCount__), !e || !u && i == n && l == n)
                    return kr(t, this.__actions__);
                e = [];
                n:
                    for (; n-- && a < l;) {
                        for (o += r, u = -1, i = t[o]; ++u < c;) {
                            var h = f[u], s = h.type, h = (0, h.iteratee)(i);
                            if (2 == s)
                                i = h;
                            else if (!h) {
                                if (1 == s)
                                    continue n;
                                break n;
                            }
                        }
                        e[a++] = i;
                    }
                return e;
            }, On.prototype.at = Fo, On.prototype.chain = function () {
                return Xe(this);
            }, On.prototype.commit = function () {
                return new zn(this.value(), this.__chain__);
            }, On.prototype.next = function () {
                this.__values__ === F && (this.__values__ = ku(this.value()));
                var n = this.__index__ >= this.__values__.length;
                return {
                    done: n,
                    value: n ? F : this.__values__[this.__index__++]
                };
            }, On.prototype.plant = function (n) {
                for (var t, r = this; r instanceof Sn;) {
                    var e = Pe(r);
                    e.__index__ = 0, e.__values__ = F, t ? u.__wrapped__ = e : t = e;
                    var u = e, r = r.__wrapped__;
                }
                return u.__wrapped__ = n, t;
            }, On.prototype.reverse = function () {
                var n = this.__wrapped__;
                return n instanceof Mn ? (this.__actions__.length && (n = new Mn(this)), n = n.reverse(), n.__actions__.push({
                    func: nu,
                    args: [Je],
                    thisArg: F
                }), new zn(n, this.__chain__)) : this.thru(Je);
            }, On.prototype.toJSON = On.prototype.valueOf = On.prototype.value = function () {
                return kr(this.__wrapped__, this.__actions__);
            }, On.prototype.first = On.prototype.head, Ai && (On.prototype[Ai] = tu), On;
        }();
    typeof define == 'function' && typeof define.amd == 'object' && define.amd ? (Zn._ = it, define('lodash/lodash.min', [], function () {
        return it;
    })) : Vn ? ((Vn.exports = it)._ = it, qn._ = it) : Zn._ = it;
}.call(this));

define('lodash', ['lodash/lodash.min'], function (main) { return main; });

;
(function () {
    var undefined;
    var VERSION = '4.17.3';
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.', FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = '__lodash_placeholder__';
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [
        [
            'ary',
            WRAP_ARY_FLAG
        ],
        [
            'bind',
            WRAP_BIND_FLAG
        ],
        [
            'bindKey',
            WRAP_BIND_KEY_FLAG
        ],
        [
            'curry',
            WRAP_CURRY_FLAG
        ],
        [
            'curryRight',
            WRAP_CURRY_RIGHT_FLAG
        ],
        [
            'flip',
            WRAP_FLIP_FLAG
        ],
        [
            'partial',
            WRAP_PARTIAL_FLAG
        ],
        [
            'partialRight',
            WRAP_PARTIAL_RIGHT_FLAG
        ],
        [
            'rearg',
            WRAP_REARG_FLAG
        ]
    ];
    var argsTag = '[object Arguments]', arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]', boolTag = '[object Boolean]', dateTag = '[object Date]', domExcTag = '[object DOMException]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', nullTag = '[object Null]', objectTag = '[object Object]', promiseTag = '[object Promise]', proxyTag = '[object Proxy]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', undefinedTag = '[object Undefined]', weakMapTag = '[object WeakMap]', weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, reLeadingDot = /^\./, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g, reTrimStart = /^\s+/, reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = '[\'\u2019]', rsAstral = '[' + rsAstralRange + ']', rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')', rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
            rsNonAstral,
            rsRegional,
            rsSurrPair
        ].join('|') + ')' + rsOptVar + reOptMod + ')*', rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)', rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
            rsDingbat,
            rsRegional,
            rsSurrPair
        ].join('|') + ')' + rsSeq, rsSymbol = '(?:' + [
            rsNonAstral + rsCombo + '?',
            rsCombo,
            rsRegional,
            rsSurrPair,
            rsAstral
        ].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    var reUnicodeWord = RegExp([
        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [
            rsBreak,
            rsUpper,
            '$'
        ].join('|') + ')',
        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [
            rsBreak,
            rsUpper + rsMiscLower,
            '$'
        ].join('|') + ')',
        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
        rsUpper + '+' + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
    ].join('|'), 'g');
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = [
        'Array',
        'Buffer',
        'DataView',
        'Date',
        'Error',
        'Float32Array',
        'Float64Array',
        'Function',
        'Int8Array',
        'Int16Array',
        'Int32Array',
        'Map',
        'Math',
        'Object',
        'Promise',
        'RegExp',
        'Set',
        'String',
        'Symbol',
        'TypeError',
        'Uint8Array',
        'Uint8ClampedArray',
        'Uint16Array',
        'Uint32Array',
        'WeakMap',
        '_',
        'clearTimeout',
        'isFinite',
        'parseInt',
        'setTimeout'
    ];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
        '\xC0': 'A',
        '\xC1': 'A',
        '\xC2': 'A',
        '\xC3': 'A',
        '\xC4': 'A',
        '\xC5': 'A',
        '\xE0': 'a',
        '\xE1': 'a',
        '\xE2': 'a',
        '\xE3': 'a',
        '\xE4': 'a',
        '\xE5': 'a',
        '\xC7': 'C',
        '\xE7': 'c',
        '\xD0': 'D',
        '\xF0': 'd',
        '\xC8': 'E',
        '\xC9': 'E',
        '\xCA': 'E',
        '\xCB': 'E',
        '\xE8': 'e',
        '\xE9': 'e',
        '\xEA': 'e',
        '\xEB': 'e',
        '\xCC': 'I',
        '\xCD': 'I',
        '\xCE': 'I',
        '\xCF': 'I',
        '\xEC': 'i',
        '\xED': 'i',
        '\xEE': 'i',
        '\xEF': 'i',
        '\xD1': 'N',
        '\xF1': 'n',
        '\xD2': 'O',
        '\xD3': 'O',
        '\xD4': 'O',
        '\xD5': 'O',
        '\xD6': 'O',
        '\xD8': 'O',
        '\xF2': 'o',
        '\xF3': 'o',
        '\xF4': 'o',
        '\xF5': 'o',
        '\xF6': 'o',
        '\xF8': 'o',
        '\xD9': 'U',
        '\xDA': 'U',
        '\xDB': 'U',
        '\xDC': 'U',
        '\xF9': 'u',
        '\xFA': 'u',
        '\xFB': 'u',
        '\xFC': 'u',
        '\xDD': 'Y',
        '\xFD': 'y',
        '\xFF': 'y',
        '\xC6': 'Ae',
        '\xE6': 'ae',
        '\xDE': 'Th',
        '\xFE': 'th',
        '\xDF': 'ss',
        '\u0100': 'A',
        '\u0102': 'A',
        '\u0104': 'A',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u0105': 'a',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u010E': 'D',
        '\u0110': 'D',
        '\u010F': 'd',
        '\u0111': 'd',
        '\u0112': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u0118': 'E',
        '\u011A': 'E',
        '\u0113': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u0119': 'e',
        '\u011B': 'e',
        '\u011C': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u0122': 'G',
        '\u011D': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u0123': 'g',
        '\u0124': 'H',
        '\u0126': 'H',
        '\u0125': 'h',
        '\u0127': 'h',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u012E': 'I',
        '\u0130': 'I',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u012F': 'i',
        '\u0131': 'i',
        '\u0134': 'J',
        '\u0135': 'j',
        '\u0136': 'K',
        '\u0137': 'k',
        '\u0138': 'k',
        '\u0139': 'L',
        '\u013B': 'L',
        '\u013D': 'L',
        '\u013F': 'L',
        '\u0141': 'L',
        '\u013A': 'l',
        '\u013C': 'l',
        '\u013E': 'l',
        '\u0140': 'l',
        '\u0142': 'l',
        '\u0143': 'N',
        '\u0145': 'N',
        '\u0147': 'N',
        '\u014A': 'N',
        '\u0144': 'n',
        '\u0146': 'n',
        '\u0148': 'n',
        '\u014B': 'n',
        '\u014C': 'O',
        '\u014E': 'O',
        '\u0150': 'O',
        '\u014D': 'o',
        '\u014F': 'o',
        '\u0151': 'o',
        '\u0154': 'R',
        '\u0156': 'R',
        '\u0158': 'R',
        '\u0155': 'r',
        '\u0157': 'r',
        '\u0159': 'r',
        '\u015A': 'S',
        '\u015C': 'S',
        '\u015E': 'S',
        '\u0160': 'S',
        '\u015B': 's',
        '\u015D': 's',
        '\u015F': 's',
        '\u0161': 's',
        '\u0162': 'T',
        '\u0164': 'T',
        '\u0166': 'T',
        '\u0163': 't',
        '\u0165': 't',
        '\u0167': 't',
        '\u0168': 'U',
        '\u016A': 'U',
        '\u016C': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u0172': 'U',
        '\u0169': 'u',
        '\u016B': 'u',
        '\u016D': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u0173': 'u',
        '\u0174': 'W',
        '\u0175': 'w',
        '\u0176': 'Y',
        '\u0177': 'y',
        '\u0178': 'Y',
        '\u0179': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u017A': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u0132': 'IJ',
        '\u0133': 'ij',
        '\u0152': 'Oe',
        '\u0153': 'oe',
        '\u0149': '\'n',
        '\u017F': 's'
    };
    var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#39;'
    };
    var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': '\''
    };
    var stringEscapes = {
        '\\': '\\',
        '\'': '\'',
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
    };
    var freeParseFloat = parseFloat, freeParseInt = parseInt;
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function () {
        try {
            return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {
        }
    }();
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function addMapEntry(map, pair) {
        map.set(pair[0], pair[1]);
        return map;
    }
    function addSetEntry(set, value) {
        set.add(value);
        return set;
    }
    function apply(func, thisArg, args) {
        switch (args.length) {
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }
    function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
    }
    function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
                break;
            }
        }
        return array;
    }
    function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
            if (iteratee(array[length], length, array) === false) {
                break;
            }
        }
        return array;
    }
    function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
            if (!predicate(array[index], index, array)) {
                return false;
            }
        }
        return true;
    }
    function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
                result[resIndex++] = value;
            }
        }
        return result;
    }
    function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
            if (comparator(value, array[index])) {
                return true;
            }
        }
        return false;
    }
    function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
            result[index] = iteratee(array[index], index, array);
        }
        return result;
    }
    function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
            array[offset + index] = values[index];
        }
        return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
            accumulator = array[++index];
        }
        while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
    }
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
            accumulator = array[--length];
        }
        while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
    }
    function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
            if (predicate(array[index], index, array)) {
                return true;
            }
        }
        return false;
    }
    var asciiSize = baseProperty('length');
    function asciiToArray(string) {
        return string.split('');
    }
    function asciiWords(string) {
        return string.match(reAsciiWord) || [];
    }
    function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function (value, key, collection) {
            if (predicate(value, key, collection)) {
                result = key;
                return false;
            }
        });
        return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
                return index;
            }
        }
        return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
            if (comparator(array[index], value)) {
                return index;
            }
        }
        return -1;
    }
    function baseIsNaN(value) {
        return value !== value;
    }
    function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
    }
    function baseProperty(key) {
        return function (object) {
            return object == null ? undefined : object[key];
        };
    }
    function basePropertyOf(object) {
        return function (key) {
            return object == null ? undefined : object[key];
        };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function (value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
            array[length] = array[length].value;
        }
        return array;
    }
    function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined) {
                result = result === undefined ? current : result + current;
            }
        }
        return result;
    }
    function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
            result[index] = iteratee(index);
        }
        return result;
    }
    function baseToPairs(object, props) {
        return arrayMap(props, function (key) {
            return [
                key,
                object[key]
            ];
        });
    }
    function baseUnary(func) {
        return function (value) {
            return func(value);
        };
    }
    function baseValues(object, props) {
        return arrayMap(props, function (key) {
            return object[key];
        });
    }
    function cacheHas(cache, key) {
        return cache.has(key);
    }
    function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
    }
    function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
            if (array[length] === placeholder) {
                ++result;
            }
        }
        return result;
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
    }
    function getValue(object, key) {
        return object == null ? undefined : object[key];
    }
    function hasUnicode(string) {
        return reHasUnicode.test(string);
    }
    function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
    }
    function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
            result.push(data.value);
        }
        return result;
    }
    function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function (value, key) {
            result[++index] = [
                key,
                value
            ];
        });
        return result;
    }
    function overArg(func, transform) {
        return function (arg) {
            return func(transform(arg));
        };
    }
    function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
            }
        }
        return result;
    }
    function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function (value) {
            result[++index] = value;
        });
        return result;
    }
    function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function (value) {
            result[++index] = [
                value,
                value
            ];
        });
        return result;
    }
    function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
            if (array[index] === value) {
                return index;
            }
        }
        return -1;
    }
    function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
            if (array[index] === value) {
                return index;
            }
        }
        return index;
    }
    function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
            ++result;
        }
        return result;
    }
    function unicodeToArray(string) {
        return string.match(reUnicode) || [];
    }
    function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
    }
    var runInContext = function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array = context.Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
        var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
        var coreJsData = context['__core-js_shared__'];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function () {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? 'Symbol(src)_1.' + uid : '';
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object);
        var oldDash = root._;
        var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
        var Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        var defineProperty = function () {
            try {
                var func = getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
            } catch (e) {
            }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, 'DataView'), Map = getNative(context, 'Map'), Promise = getNative(context, 'Promise'), Set = getNative(context, 'Set'), WeakMap = getNative(context, 'WeakMap'), nativeCreate = getNative(Object, 'create');
        var metaMap = WeakMap && new WeakMap();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) {
                    return value;
                }
                if (hasOwnProperty.call(value, '__wrapped__')) {
                    return wrapperClone(value);
                }
            }
            return new LodashWrapper(value);
        }
        var baseCreate = function () {
            function object() {
            }
            return function (proto) {
                if (!isObject(proto)) {
                    return {};
                }
                if (objectCreate) {
                    return objectCreate(proto);
                }
                object.prototype = proto;
                var result = new object();
                object.prototype = undefined;
                return result;
            };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
        }
        lodash.templateSettings = {
            'escape': reEscape,
            'evaluate': reEvaluate,
            'interpolate': reInterpolate,
            'variable': '',
            'imports': { '_': lodash }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
        }
        function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
        }
        function lazyReverse() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
            } else {
                result = this.clone();
                result.__dir__ *= -1;
            }
            return result;
        }
        function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
                return baseWrapperValue(array, this.__actions__);
            }
            var result = [];
            outer:
                while (length-- && resIndex < takeCount) {
                    index += dir;
                    var iterIndex = -1, value = array[index];
                    while (++iterIndex < iterLength) {
                        var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                        if (type == LAZY_MAP_FLAG) {
                            value = computed;
                        } else if (!computed) {
                            if (type == LAZY_FILTER_FLAG) {
                                continue outer;
                            } else {
                                break outer;
                            }
                        }
                    }
                    result[resIndex++] = value;
                }
            return result;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        }
        function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }
        function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }
        function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
                data.pop();
            } else {
                splice.call(data, index, 1);
            }
            --this.size;
            return true;
        }
        function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        }
        function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([
                    key,
                    value
                ]);
            } else {
                data[index][1] = value;
            }
            return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                'hash': new Hash(),
                'map': new (Map || ListCache)(),
                'string': new Hash()
            };
        }
        function mapCacheDelete(key) {
            var result = getMapData(this, key)['delete'](key);
            this.size -= result ? 1 : 0;
            return result;
        }
        function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache();
            while (++index < length) {
                this.add(values[index]);
            }
        }
        function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }
        function setCacheHas(value) {
            return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
        }
        function stackDelete(key) {
            var data = this.__data__, result = data['delete'](key);
            this.size = data.size;
            return result;
        }
        function stackGet(key) {
            return this.__data__.get(key);
        }
        function stackHas(key) {
            return this.__data__.has(key);
        }
        function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                    pairs.push([
                        key,
                        value
                    ]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for (var key in value) {
                if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
                    result.push(key);
                }
            }
            return result;
        }
        function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined;
        }
        function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
                baseAssignValue(object, key, value);
            }
        }
        function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
                baseAssignValue(object, key, value);
            }
        }
        function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
                if (eq(array[length][0], key)) {
                    return length;
                }
            }
            return -1;
        }
        function baseAggregator(collection, setter, iteratee, accumulator) {
            baseEach(collection, function (value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
        }
        function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
            if (key == '__proto__' && defineProperty) {
                defineProperty(object, key, {
                    'configurable': true,
                    'enumerable': true,
                    'value': value,
                    'writable': true
                });
            } else {
                object[key] = value;
            }
        }
        function baseAt(object, paths) {
            var index = -1, length = paths.length, result = Array(length), skip = object == null;
            while (++index < length) {
                result[index] = skip ? undefined : get(object, paths[index]);
            }
            return result;
        }
        function baseClamp(number, lower, upper) {
            if (number === number) {
                if (upper !== undefined) {
                    number = number <= upper ? number : upper;
                }
                if (lower !== undefined) {
                    number = number >= lower ? number : lower;
                }
            }
            return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
                result = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result !== undefined) {
                return result;
            }
            if (!isObject(value)) {
                return value;
            }
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) {
                    return copyArray(value, result);
                }
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) {
                    return cloneBuffer(value, isDeep);
                }
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = isFlat || isFunc ? {} : initCloneObject(value);
                    if (!isDeep) {
                        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                    }
                } else {
                    if (!cloneableTags[tag]) {
                        return object ? value : {};
                    }
                    result = initCloneByTag(value, tag, baseClone, isDeep);
                }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
                return stacked;
            }
            stack.set(value, result);
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, function (subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
        }
        function baseConforms(source) {
            var props = keys(source);
            return function (object) {
                return baseConformsTo(object, source, props);
            };
        }
        function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (length--) {
                var key = props[length], predicate = source[key], value = object[key];
                if (value === undefined && !(key in object) || !predicate(value)) {
                    return false;
                }
            }
            return true;
        }
        function baseDelay(func, wait, args) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return setTimeout(function () {
                func.apply(undefined, args);
            }, wait);
        }
        function baseDifference(array, values, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
            if (!length) {
                return result;
            }
            if (iteratee) {
                values = arrayMap(values, baseUnary(iteratee));
            }
            if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
            } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
            }
            outer:
                while (++index < length) {
                    var value = array[index], computed = iteratee == null ? value : iteratee(value);
                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                        var valuesIndex = valuesLength;
                        while (valuesIndex--) {
                            if (values[valuesIndex] === computed) {
                                continue outer;
                            }
                        }
                        result.push(value);
                    } else if (!includes(values, computed, comparator)) {
                        result.push(value);
                    }
                }
            return result;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
            var result = true;
            baseEach(collection, function (value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        function baseExtremum(array, iteratee, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
                var value = array[index], current = iteratee(value);
                if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
                    var computed = current, result = value;
                }
            }
            return result;
        }
        function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) {
                start = -start > length ? 0 : length + start;
            }
            end = end === undefined || end > length ? length : toInteger(end);
            if (end < 0) {
                end += length;
            }
            end = start > end ? 0 : toLength(end);
            while (start < end) {
                array[start++] = value;
            }
            return array;
        }
        function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, function (value, index, collection) {
                if (predicate(value, index, collection)) {
                    result.push(value);
                }
            });
            return result;
        }
        function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) {
                        baseFlatten(value, depth - 1, predicate, isStrict, result);
                    } else {
                        arrayPush(result, value);
                    }
                } else if (!isStrict) {
                    result[result.length] = value;
                }
            }
            return result;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
        }
        function baseFunctions(object, props) {
            return arrayFilter(props, function (key) {
                return isFunction(object[key]);
            });
        }
        function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
                object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        function baseGetTag(value) {
            if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
            return value > other;
        }
        function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
            return object != null && key in Object(object);
        }
        function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
            while (othIndex--) {
                var array = arrays[othIndex];
                if (othIndex && iteratee) {
                    array = arrayMap(array, baseUnary(iteratee));
                }
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
                while (++index < length && result.length < maxLength) {
                    var value = array[index], computed = iteratee ? iteratee(value) : value;
                    value = comparator || value !== 0 ? value : 0;
                    if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                        othIndex = othLength;
                        while (--othIndex) {
                            var cache = caches[othIndex];
                            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                                continue outer;
                            }
                        }
                        if (seen) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
            return result;
        }
        function baseInverter(object, setter, iteratee, accumulator) {
            baseForOwn(object, function (value, key, object) {
                setter(accumulator, iteratee(value), key, object);
            });
            return accumulator;
        }
        function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined : apply(func, object, args);
        }
        function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
                return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
                return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                    return false;
                }
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack());
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack());
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) {
                return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (index--) {
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                    return false;
                }
            }
            while (++index < length) {
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) {
                        return false;
                    }
                } else {
                    var stack = new Stack();
                    if (customizer) {
                        var result = customizer(objValue, srcValue, key, object, source, stack);
                    }
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
                        return false;
                    }
                }
            }
            return true;
        }
        function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
                return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
            if (typeof value == 'function') {
                return value;
            }
            if (value == null) {
                return identity;
            }
            if (typeof value == 'object') {
                return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
        }
        function baseKeys(object) {
            if (!isPrototype(object)) {
                return nativeKeys(object);
            }
            var result = [];
            for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != 'constructor') {
                    result.push(key);
                }
            }
            return result;
        }
        function baseKeysIn(object) {
            if (!isObject(object)) {
                return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result = [];
            for (var key in object) {
                if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                    result.push(key);
                }
            }
            return result;
        }
        function baseLt(value, other) {
            return value < other;
        }
        function baseMap(collection, iteratee) {
            var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function (value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function (object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
            }
            return function (object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
                return;
            }
            baseFor(source, function (srcValue, key) {
                if (isObject(srcValue)) {
                    stack || (stack = new Stack());
                    baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                } else {
                    var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;
                    if (newValue === undefined) {
                        newValue = srcValue;
                    }
                    assignMergeValue(object, key, newValue);
                }
            }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = object[key], srcValue = source[key], stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) {
                        newValue = objValue;
                    } else if (isArrayLikeObject(objValue)) {
                        newValue = copyArray(objValue);
                    } else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                    } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                    } else {
                        newValue = [];
                    }
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) {
                        newValue = toPlainObject(objValue);
                    } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
                        newValue = initCloneObject(srcValue);
                    }
                } else {
                    isCommon = false;
                }
            }
            if (isCommon) {
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack['delete'](srcValue);
            }
            assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
            var length = array.length;
            if (!length) {
                return;
            }
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined;
        }
        function baseOrderBy(collection, iteratees, orders) {
            var index = -1;
            iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
            var result = baseMap(collection, function (value, key, collection) {
                var criteria = arrayMap(iteratees, function (iteratee) {
                    return iteratee(value);
                });
                return {
                    'criteria': criteria,
                    'index': ++index,
                    'value': value
                };
            });
            return baseSortBy(result, function (object, other) {
                return compareMultiple(object, other, orders);
            });
        }
        function basePick(object, paths) {
            return basePickBy(object, paths, function (value, path) {
                return hasIn(object, path);
            });
        }
        function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result = {};
            while (++index < length) {
                var path = paths[index], value = baseGet(object, path);
                if (predicate(value, path)) {
                    baseSet(result, castPath(path, object), value);
                }
            }
            return result;
        }
        function basePropertyDeep(path) {
            return function (object) {
                return baseGet(object, path);
            };
        }
        function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
            if (array === values) {
                values = copyArray(values);
            }
            if (iteratee) {
                seen = arrayMap(array, baseUnary(iteratee));
            }
            while (++index < length) {
                var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                    if (seen !== array) {
                        splice.call(seen, fromIndex, 1);
                    }
                    splice.call(array, fromIndex, 1);
                }
            }
            return array;
        }
        function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                    var previous = index;
                    if (isIndex(index)) {
                        splice.call(array, index, 1);
                    } else {
                        baseUnset(array, index);
                    }
                }
            }
            return array;
        }
        function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
            while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }
        function baseRepeat(string, n) {
            var result = '';
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                return result;
            }
            do {
                if (n % 2) {
                    result += string;
                }
                n = nativeFloor(n / 2);
                if (n) {
                    string += string;
                }
            } while (n);
            return result;
        }
        function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + '');
        }
        function baseSample(collection) {
            return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
                return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
                var key = toKey(path[index]), newValue = value;
                if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) {
                        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                    }
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }
        var baseSetData = !metaMap ? identity : function (func, data) {
            metaMap.set(func, data);
            return func;
        };
        var baseSetToString = !defineProperty ? identity : function (func, string) {
            return defineProperty(func, 'toString', {
                'configurable': true,
                'enumerable': false,
                'value': constant(string),
                'writable': true
            });
        };
        function baseShuffle(collection) {
            return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) {
                start = -start > length ? 0 : length + start;
            }
            end = end > length ? length : end;
            if (end < 0) {
                end += length;
            }
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result = Array(length);
            while (++index < length) {
                result[index] = array[index + start];
            }
            return result;
        }
        function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function (value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while (low < high) {
                    var mid = low + high >>> 1, computed = array[mid];
                    if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                        low = mid + 1;
                    } else {
                        high = mid;
                    }
                }
                return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee, retHighest) {
            value = iteratee(value);
            var low = 0, high = array == null ? 0 : array.length, valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined;
            while (low < high) {
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                if (valIsNaN) {
                    var setLow = retHighest || othIsReflexive;
                } else if (valIsUndefined) {
                    setLow = othIsReflexive && (retHighest || othIsDefined);
                } else if (valIsNull) {
                    setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                } else if (valIsSymbol) {
                    setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                } else if (othIsNull || othIsSymbol) {
                    setLow = false;
                } else {
                    setLow = retHighest ? computed <= value : computed < value;
                }
                if (setLow) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee) {
            var index = -1, length = array.length, resIndex = 0, result = [];
            while (++index < length) {
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                if (!index || !eq(computed, seen)) {
                    var seen = computed;
                    result[resIndex++] = value === 0 ? 0 : value;
                }
            }
            return result;
        }
        function baseToNumber(value) {
            if (typeof value == 'number') {
                return value;
            }
            if (isSymbol(value)) {
                return NAN;
            }
            return +value;
        }
        function baseToString(value) {
            if (typeof value == 'string') {
                return value;
            }
            if (isArray(value)) {
                return arrayMap(value, baseToString) + '';
            }
            if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : '';
            }
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
            if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) {
                    return setToArray(set);
                }
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache();
            } else {
                seen = iteratee ? [] : result;
            }
            outer:
                while (++index < length) {
                    var value = array[index], computed = iteratee ? iteratee(value) : value;
                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                        var seenIndex = seen.length;
                        while (seenIndex--) {
                            if (seen[seenIndex] === computed) {
                                continue outer;
                            }
                        }
                        if (iteratee) {
                            seen.push(computed);
                        }
                        result.push(value);
                    } else if (!includes(seen, computed, comparator)) {
                        if (seen !== result) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
            return result;
        }
        function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
            var result = value;
            if (result instanceof LazyWrapper) {
                result = result.value();
            }
            return arrayReduce(actions, function (result, action) {
                return action.func.apply(action.thisArg, arrayPush([result], action.args));
            }, result);
        }
        function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length;
            if (length < 2) {
                return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result = Array(length);
            while (++index < length) {
                var array = arrays[index], othIndex = -1;
                while (++othIndex < length) {
                    if (othIndex != index) {
                        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                    }
                }
            }
            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
        function baseZipObject(props, values, assignFunc) {
            var index = -1, length = props.length, valsLength = values.length, result = {};
            while (++index < length) {
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
            return typeof value == 'function' ? value : identity;
        }
        function castPath(value, object) {
            if (isArray(value)) {
                return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout = ctxClearTimeout || function (id) {
            return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
                return buffer.slice();
            }
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
        }
        function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneMap(map, isDeep, cloneFunc) {
            var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
            return arrayReduce(array, addMapEntry, new map.constructor());
        }
        function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }
        function cloneSet(set, isDeep, cloneFunc) {
            var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
            return arrayReduce(array, addSetEntry, new set.constructor());
        }
        function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
            if (value !== other) {
                var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                    return 1;
                }
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                    return -1;
                }
            }
            return 0;
        }
        function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
                var result = compareAscending(objCriteria[index], othCriteria[index]);
                if (result) {
                    if (index >= ordersLength) {
                        return result;
                    }
                    var order = orders[index];
                    return result * (order == 'desc' ? -1 : 1);
                }
            }
            return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
                result[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                    result[holders[argsIndex]] = args[argsIndex];
                }
            }
            while (rangeLength--) {
                result[leftIndex++] = args[argsIndex++];
            }
            return result;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
                result[argsIndex] = args[argsIndex];
            }
            var offset = argsIndex;
            while (++rightIndex < rightLength) {
                result[offset + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                    result[offset + holders[holdersIndex]] = args[argsIndex++];
                }
            }
            return result;
        }
        function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            while (++index < length) {
                array[index] = source[index];
            }
            return array;
        }
        function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                if (newValue === undefined) {
                    newValue = source[key];
                }
                if (isNew) {
                    baseAssignValue(object, key, newValue);
                } else {
                    assignValue(object, key, newValue);
                }
            }
            return object;
        }
        function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
            return function (collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
            };
        }
        function createAssigner(assigner) {
            return baseRest(function (object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object(object);
                while (++index < length) {
                    var source = sources[index];
                    if (source) {
                        assigner(object, source, index, customizer);
                    }
                }
                return object;
            });
        }
        function createBaseEach(eachFunc, fromRight) {
            return function (collection, iteratee) {
                if (collection == null) {
                    return collection;
                }
                if (!isArrayLike(collection)) {
                    return eachFunc(collection, iteratee);
                }
                var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
                while (fromRight ? index-- : ++index < length) {
                    if (iteratee(iterable[index], index, iterable) === false) {
                        break;
                    }
                }
                return collection;
            };
        }
        function createBaseFor(fromRight) {
            return function (object, iteratee, keysFunc) {
                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                while (length--) {
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                    }
                }
                return object;
            };
        }
        function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
        }
        function createCaseFirst(methodName) {
            return function (string) {
                string = toString(string);
                var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
                var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
                return chr[methodName]() + trailing;
            };
        }
        function createCompounder(callback) {
            return function (string) {
                return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
            };
        }
        function createCtor(Ctor) {
            return function () {
                var args = arguments;
                switch (args.length) {
                case 0:
                    return new Ctor();
                case 1:
                    return new Ctor(args[0]);
                case 2:
                    return new Ctor(args[0], args[1]);
                case 3:
                    return new Ctor(args[0], args[1], args[2]);
                case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                return isObject(result) ? result : thisBinding;
            };
        }
        function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
                while (index--) {
                    args[index] = arguments[index];
                }
                var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                length -= holders.length;
                if (length < arity) {
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
                }
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return apply(fn, this, args);
            }
            return wrapper;
        }
        function createFind(findIndexFunc) {
            return function (collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = getIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function (key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }
        function createFlow(fromRight) {
            return flatRest(function (funcs) {
                var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                if (fromRight) {
                    funcs.reverse();
                }
                while (index--) {
                    var func = funcs[index];
                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                        var wrapper = new LodashWrapper([], true);
                    }
                }
                index = wrapper ? index : length;
                while (++index < length) {
                    func = funcs[index];
                    var funcName = getFuncName(func), data = funcName == 'wrapper' ? getData(func) : undefined;
                    if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                    } else {
                        wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                    }
                }
                return function () {
                    var args = arguments, value = args[0];
                    if (wrapper && args.length == 1 && isArray(value)) {
                        return wrapper.plant(value).value();
                    }
                    var index = 0, result = length ? funcs[index].apply(this, args) : value;
                    while (++index < length) {
                        result = funcs[index].call(this, result);
                    }
                    return result;
                };
            });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length;
                while (index--) {
                    args[index] = arguments[index];
                }
                if (isCurried) {
                    var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                }
                if (partials) {
                    args = composeArgs(args, partials, holders, isCurried);
                }
                if (partialsRight) {
                    args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                }
                length -= holdersCount;
                if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                if (argPos) {
                    args = reorder(args, argPos);
                } else if (isFlip && length > 1) {
                    args.reverse();
                }
                if (isAry && ary < length) {
                    args.length = ary;
                }
                if (this && this !== root && this instanceof wrapper) {
                    fn = Ctor || createCtor(fn);
                }
                return fn.apply(thisBinding, args);
            }
            return wrapper;
        }
        function createInverter(setter, toIteratee) {
            return function (object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
            };
        }
        function createMathOperation(operator, defaultValue) {
            return function (value, other) {
                var result;
                if (value === undefined && other === undefined) {
                    return defaultValue;
                }
                if (value !== undefined) {
                    result = value;
                }
                if (other !== undefined) {
                    if (result === undefined) {
                        return other;
                    }
                    if (typeof value == 'string' || typeof other == 'string') {
                        value = baseToString(value);
                        other = baseToString(other);
                    } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                    }
                    result = operator(value, other);
                }
                return result;
            };
        }
        function createOver(arrayFunc) {
            return flatRest(function (iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function (args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function (iteratee) {
                        return apply(iteratee, thisArg, args);
                    });
                });
            });
        }
        function createPadding(length, chars) {
            chars = chars === undefined ? ' ' : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
                return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                while (++leftIndex < leftLength) {
                    args[leftIndex] = partials[leftIndex];
                }
                while (argsLength--) {
                    args[leftIndex++] = arguments[++argsIndex];
                }
                return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
        }
        function createRange(fromRight) {
            return function (start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                    end = step = undefined;
                }
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else {
                    end = toFinite(end);
                }
                step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
                return baseRange(start, end, step, fromRight);
            };
        }
        function createRelationalOperation(operator) {
            return function (value, other) {
                if (!(typeof value == 'string' && typeof other == 'string')) {
                    value = toNumber(value);
                    other = toNumber(other);
                }
                return operator(value, other);
            };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity
            ];
            var result = wrapFunc.apply(undefined, newData);
            if (isLaziable(func)) {
                setData(result, newData);
            }
            result.placeholder = placeholder;
            return setWrapToString(result, func, bitmask);
        }
        function createRound(methodName) {
            var func = Math[methodName];
            return function (number, precision) {
                number = toNumber(number);
                precision = nativeMin(toInteger(precision), 292);
                if (precision) {
                    var pair = (toString(number) + 'e').split('e'), value = func(pair[0] + 'e' + (+pair[1] + precision));
                    pair = (toString(value) + 'e').split('e');
                    return +(pair[0] + 'e' + (+pair[1] - precision));
                }
                return func(number);
            };
        }
        var createSet = !(Set && 1 / setToArray(new Set([
            ,
            -0
        ]))[1] == INFINITY) ? noop : function (values) {
            return new Set(values);
        };
        function createToPairs(keysFunc) {
            return function (object) {
                var tag = getTag(object);
                if (tag == mapTag) {
                    return mapToArray(object);
                }
                if (tag == setTag) {
                    return setToPairs(object);
                }
                return baseToPairs(object, keysFunc(object));
            };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func);
            var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
            ];
            if (data) {
                mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] == null ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                var result = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                result = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                result = createPartial(func, bitmask, thisArg, partials);
            } else {
                result = createHybrid.apply(undefined, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                return srcValue;
            }
            return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                stack['delete'](srcValue);
            }
            return objValue;
        }
        function customOmitClone(value, key) {
            return key !== undefined && isPlainObject(value) ? undefined : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                return false;
            }
            var stacked = stack.get(array);
            if (stacked && stack.get(other)) {
                return stacked == other;
            }
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
                var arrValue = array[index], othValue = other[index];
                if (customizer) {
                    var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                }
                if (compared !== undefined) {
                    if (compared) {
                        continue;
                    }
                    result = false;
                    break;
                }
                if (seen) {
                    if (!arraySome(other, function (othValue, othIndex) {
                            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                return seen.push(othIndex);
                            }
                        })) {
                        result = false;
                        break;
                    }
                } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    result = false;
                    break;
                }
            }
            stack['delete'](array);
            stack['delete'](other);
            return result;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
            case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                    return false;
                }
                object = object.buffer;
                other = other.buffer;
            case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                    return false;
                }
                return true;
            case boolTag:
            case dateTag:
            case numberTag:
                return eq(+object, +other);
            case errorTag:
                return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
                return object == other + '';
            case mapTag:
                var convert = mapToArray;
            case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                    return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                    return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack['delete'](object);
                return result;
            case symbolTag:
                if (symbolValueOf) {
                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
                return false;
            }
            var index = objLength;
            while (index--) {
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                    return false;
                }
            }
            var stacked = stack.get(object);
            if (stacked && stack.get(other)) {
                return stacked == other;
            }
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) {
                    var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                }
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == 'constructor');
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                    result = false;
                }
            }
            stack['delete'](object);
            stack['delete'](other);
            return result;
        }
        function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + '');
        }
        function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function (func) {
            return metaMap.get(func);
        };
        function getFuncName(func) {
            var result = func.name + '', array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
            while (length--) {
                var data = array[length], otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) {
                    return data.name;
                }
            }
            return result;
        }
        function getHolder(func) {
            var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
            return object.placeholder;
        }
        function getIteratee() {
            var result = lodash.iteratee || iteratee;
            result = result === iteratee ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
        function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
        }
        function getMatchData(object) {
            var result = keys(object), length = result.length;
            while (length--) {
                var key = result[length], value = object[key];
                result[length] = [
                    key,
                    value,
                    isStrictComparable(value)
                ];
            }
            return result;
        }
        function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {
            }
            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) {
                    value[symToStringTag] = tag;
                } else {
                    delete value[symToStringTag];
                }
            }
            return result;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
            if (object == null) {
                return [];
            }
            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), function (symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
            var result = [];
            while (object) {
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
            getTag = function (value) {
                var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
                if (ctorString) {
                    switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag;
                    case mapCtorString:
                        return mapTag;
                    case promiseCtorString:
                        return promiseTag;
                    case setCtorString:
                        return setTag;
                    case weakMapCtorString:
                        return weakMapTag;
                    }
                }
                return result;
            };
        }
        function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
                var data = transforms[index], size = data.size;
                switch (data.type) {
                case 'drop':
                    start += size;
                    break;
                case 'dropRight':
                    end -= size;
                    break;
                case 'take':
                    end = nativeMin(end, start + size);
                    break;
                case 'takeRight':
                    start = nativeMax(start, end - size);
                    break;
                }
            }
            return {
                'start': start,
                'end': end
            };
        }
        function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result = false;
            while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                    break;
                }
                object = object[key];
            }
            if (result || ++index != length) {
                return result;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
            var length = array.length, result = array.constructor(length);
            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        function initCloneObject(object) {
            return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, cloneFunc, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
            case arrayBufferTag:
                return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
                return new Ctor(+object);
            case dataViewTag:
                return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
                return cloneTypedArray(object, isDeep);
            case mapTag:
                return cloneMap(object, isDeep, cloneFunc);
            case numberTag:
            case stringTag:
                return new Ctor(object);
            case regexpTag:
                return cloneRegExp(object);
            case setTag:
                return cloneSet(object, isDeep, cloneFunc);
            case symbolTag:
                return cloneSymbol(object);
            }
        }
        function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
                return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
            details = details.join(length > 2 ? ', ' : ' ');
            return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }
        function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (typeof value == 'number' || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
                return false;
            }
            var type = typeof index;
            if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
                return eq(object[index], value);
            }
            return false;
        }
        function isKey(value, object) {
            if (isArray(value)) {
                return false;
            }
            var type = typeof value;
            if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
                return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
        }
        function isKeyable(value) {
            var type = typeof value;
            return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
        }
        function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                return false;
            }
            if (func === other) {
                return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
        }
        function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
            return value === proto;
        }
        function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
            return function (object) {
                if (object == null) {
                    return false;
                }
                return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
            };
        }
        function memoizeCapped(func) {
            var result = memoize(func, function (key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                    cache.clear();
                }
                return key;
            });
            var cache = result.cache;
            return result;
        }
        function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
                return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
                data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
                data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
                data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        function nativeKeysIn(object) {
            var result = [];
            if (object != null) {
                for (var key in Object(object)) {
                    result.push(key);
                }
            }
            return result;
        }
        function objectToString(value) {
            return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function () {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                while (++index < length) {
                    array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                    otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        var setData = shortOut(baseSetData);
        var setTimeout = ctxSetTimeout || function (func, wait) {
            return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + '';
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function () {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) {
                        return arguments[0];
                    }
                } else {
                    count = 0;
                }
                return func.apply(undefined, arguments);
            };
        }
        function shuffleSelf(array, size) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size = size === undefined ? length : size;
            while (++index < size) {
                var rand = baseRandom(index, lastIndex), value = array[rand];
                array[rand] = array[index];
                array[index] = value;
            }
            array.length = size;
            return array;
        }
        var stringToPath = memoizeCapped(function (string) {
            var result = [];
            if (reLeadingDot.test(string)) {
                result.push('');
            }
            string.replace(rePropName, function (match, number, quote, string) {
                result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
            });
            return result;
        });
        function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) {
                return value;
            }
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {
                }
                try {
                    return func + '';
                } catch (e) {
                }
            }
            return '';
        }
        function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function (pair) {
                var value = '_.' + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                    details.push(value);
                }
            });
            return details.sort();
        }
        function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
                return wrapper.clone();
            }
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
        }
        function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
                size = 1;
            } else {
                size = nativeMax(toInteger(size), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size < 1) {
                return [];
            }
            var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
            while (index < length) {
                result[resIndex++] = baseSlice(array, index, index += size);
            }
            return result;
        }
        function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (value) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }
        function concat() {
            var length = arguments.length;
            if (!length) {
                return [];
            }
            var args = Array(length - 1), array = arguments[0], index = length;
            while (index--) {
                args[index - 1] = arguments[index];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function (array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function (array, values) {
            var iteratee = last(values);
            if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
        });
        var differenceWith = baseRest(function (array, values) {
            var comparator = last(values);
            if (isArrayLikeObject(comparator)) {
                comparator = undefined;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
        });
        function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
                index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
            while (++index < length) {
                var pair = pairs[index];
                result[pair[0]] = pair[1];
            }
            return result;
        }
        function head(array) {
            return array && array.length ? array[0] : undefined;
        }
        function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
                index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value, index);
        }
        function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function (arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function (arrays) {
            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee === last(mapped)) {
                iteratee = undefined;
            } else {
                mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
        });
        var intersectionWith = baseRest(function (arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            if (comparator) {
                mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        function join(array, separator) {
            return array == null ? '' : nativeJoin.call(array, separator);
        }
        function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }
        function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = length;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
        }
        function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
        }
        function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
        }
        var pullAt = flatRest(function (array, indexes) {
            var length = array == null ? 0 : array.length, result = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function (index) {
                return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result;
        });
        function remove(array, predicate) {
            var result = [];
            if (!(array && array.length)) {
                return result;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        }
        function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }
        function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) {
                    return index;
                }
            }
            return -1;
        }
        function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }
        function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) {
                    return index;
                }
            }
            return -1;
        }
        function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
        }
        function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
            if (!(array && array.length)) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function (arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function (arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });
        var unionWith = baseRest(function (arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
        function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }
        function uniqWith(array, comparator) {
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
        }
        function unzip(array) {
            if (!(array && array.length)) {
                return [];
            }
            var length = 0;
            array = arrayFilter(array, function (group) {
                if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return true;
                }
            });
            return baseTimes(length, function (index) {
                return arrayMap(array, baseProperty(index));
            });
        }
        function unzipWith(array, iteratee) {
            if (!(array && array.length)) {
                return [];
            }
            var result = unzip(array);
            if (iteratee == null) {
                return result;
            }
            return arrayMap(result, function (group) {
                return apply(iteratee, undefined, group);
            });
        }
        var without = baseRest(function (array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        });
        var xor = baseRest(function (arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function (arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });
        var xorWith = baseRest(function (arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        }
        function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
        }
        var zipWith = baseRest(function (arrays) {
            var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
            iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
        });
        function chain(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
        }
        function tap(value, interceptor) {
            interceptor(value);
            return value;
        }
        function thru(value, interceptor) {
            return interceptor(value);
        }
        var wrapperAt = flatRest(function (paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function (object) {
                    return baseAt(object, paths);
                };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
                return this.thru(interceptor);
            }
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
                'func': thru,
                'args': [interceptor],
                'thisArg': undefined
            });
            return new LodashWrapper(value, this.__chain__).thru(function (array) {
                if (length && !array.length) {
                    array.push(undefined);
                }
                return array;
            });
        });
        function wrapperChain() {
            return chain(this);
        }
        function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
            if (this.__values__ === undefined) {
                this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
            return {
                'done': done,
                'value': value
            };
        }
        function wrapperToIterator() {
            return this;
        }
        function wrapperPlant(value) {
            var result, parent = this;
            while (parent instanceof baseLodash) {
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) {
                    previous.__wrapped__ = clone;
                } else {
                    result = clone;
                }
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        }
        function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) {
                    wrapped = new LazyWrapper(this);
                }
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                    'func': thru,
                    'args': [reverse],
                    'thisArg': undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
        }
        function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
                ++result[key];
            } else {
                baseAssignValue(result, key, 1);
            }
        });
        function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
            }
            return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1);
        }
        function flatMapDeep(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), INFINITY);
        }
        function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee), depth);
        }
        function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee, 3));
        }
        function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee, 3));
        }
        var groupBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
                result[key].push(value);
            } else {
                baseAssignValue(result, key, [value]);
            }
        });
        function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
                fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function (collection, path, args) {
            var index = -1, isFunc = typeof path == 'function', result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function (value) {
                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result;
        });
        var keyBy = createAggregator(function (result, value, key) {
            baseAssignValue(result, key, value);
        });
        function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
                return [];
            }
            if (!isArray(iteratees)) {
                iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined : orders;
            if (!isArray(orders)) {
                orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function (result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function () {
            return [
                [],
                []
            ];
        });
        function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
        }
        function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
                n = 1;
            } else {
                n = toInteger(n);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
        }
        function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
        }
        function size(collection) {
            if (collection == null) {
                return 0;
            }
            if (isArrayLike(collection)) {
                return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
                return collection.size;
            }
            return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
            }
            return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function (collection, iteratees) {
            if (collection == null) {
                return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function () {
            return root.Date.now();
        };
        function after(n, func) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function () {
                if (--n < 1) {
                    return func.apply(this, arguments);
                }
            };
        }
        function ary(func, n, guard) {
            n = guard ? undefined : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        function before(n, func) {
            var result;
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function () {
                if (--n > 0) {
                    result = func.apply(this, arguments);
                }
                if (n <= 1) {
                    func = undefined;
                }
                return result;
            };
        }
        var bind = baseRest(function (func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function (object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curry.placeholder;
            return result;
        }
        function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryRight.placeholder;
            return result;
        }
        function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxing = 'maxWait' in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }
            function leadingEdge(time) {
                lastInvokeTime = time;
                timerId = setTimeout(timerExpired, wait);
                return leading ? invokeFunc(time) : result;
            }
            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result = wait - timeSinceLastCall;
                return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
            }
            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                    return trailingEdge(time);
                }
                timerId = setTimeout(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
                timerId = undefined;
                if (trailing && lastArgs) {
                    return invokeFunc(time);
                }
                lastArgs = lastThis = undefined;
                return result;
            }
            function cancel() {
                if (timerId !== undefined) {
                    clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            }
            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }
            function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                    if (timerId === undefined) {
                        return leadingEdge(lastCallTime);
                    }
                    if (maxing) {
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                if (timerId === undefined) {
                    timerId = setTimeout(timerExpired, wait);
                }
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }
        var defer = baseRest(function (func, args) {
            return baseDelay(func, 1, args);
        });
        var delay = baseRest(function (func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
            if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function () {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) {
                    return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
            if (typeof predicate != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return function () {
                var args = arguments;
                switch (args.length) {
                case 0:
                    return !predicate.call(this);
                case 1:
                    return !predicate.call(this, args[0]);
                case 2:
                    return !predicate.call(this, args[0], args[1]);
                case 3:
                    return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
            };
        }
        function once(func) {
            return before(2, func);
        }
        var overArgs = castRest(function (func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function (args) {
                var index = -1, length = nativeMin(args.length, funcsLength);
                while (++index < length) {
                    args[index] = transforms[index].call(this, args[index]);
                }
                return apply(func, this, args);
            });
        });
        var partial = baseRest(function (func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
        var partialRight = baseRest(function (func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
        var rearg = flatRest(function (func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
        function rest(func, start) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            start = start === undefined ? start : toInteger(start);
            return baseRest(func, start);
        }
        function spread(func, start) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function (args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                if (array) {
                    arrayPush(otherArgs, array);
                }
                return apply(func, this, otherArgs);
            });
        }
        function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
                leading = 'leading' in options ? !!options.leading : leading;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                'leading': leading,
                'maxWait': wait,
                'trailing': trailing
            });
        }
        function unary(func) {
            return ary(func, 1);
        }
        function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
        }
        function castArray() {
            if (!arguments.length) {
                return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
        }
        function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function (value, other) {
            return value >= other;
        });
        var isArguments = baseIsArguments(function () {
            return arguments;
        }()) ? baseIsArguments : function (value) {
            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
        };
        var isArray = Array.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
            if (value == null) {
                return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
                return !value.size;
            }
            if (isPrototype(value)) {
                return !baseKeys(value).length;
            }
            for (var key in value) {
                if (hasOwnProperty.call(value, key)) {
                    return false;
                }
            }
            return true;
        }
        function isEqual(value, other) {
            return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
        function isError(value) {
            if (!isObjectLike(value)) {
                return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
        }
        function isFinite(value) {
            return typeof value == 'number' && nativeIsFinite(value);
        }
        function isFunction(value) {
            if (!isObject(value)) {
                return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
            return typeof value == 'number' && value == toInteger(value);
        }
        function isLength(value) {
            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
            var type = typeof value;
            return value != null && (type == 'object' || type == 'function');
        }
        function isObjectLike(value) {
            return value != null && typeof value == 'object';
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN(value) {
            return isNumber(value) && value != +value;
        }
        function isNative(value) {
            if (isMaskable(value)) {
                throw new Error(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
        }
        function isNull(value) {
            return value === null;
        }
        function isNil(value) {
            return value == null;
        }
        function isNumber(value) {
            return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
                return true;
            }
            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
            return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
            return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
            return value === undefined;
        }
        function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function (value, other) {
            return value <= other;
        });
        function toArray(value) {
            if (!value) {
                return [];
            }
            if (isArrayLike(value)) {
                return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
                return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
        }
        function toFinite(value) {
            if (!value) {
                return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }
        function toInteger(value) {
            var result = toFinite(value), remainder = result % 1;
            return result === result ? remainder ? result - remainder : result : 0;
        }
        function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
            if (typeof value == 'number') {
                return value;
            }
            if (isSymbol(value)) {
                return NAN;
            }
            if (isObject(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject(other) ? other + '' : other;
            }
            if (typeof value != 'string') {
                return value === 0 ? value : +value;
            }
            value = value.replace(reTrim, '');
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
            return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
        }
        function toString(value) {
            return value == null ? '' : baseToString(value);
        }
        var assign = createAssigner(function (object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
            }
            for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                    assignValue(object, key, source[key]);
                }
            }
        });
        var assignIn = createAssigner(function (object, source) {
            copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties == null ? result : baseAssign(result, properties);
        }
        var defaults = baseRest(function (args) {
            args.push(undefined, customDefaultsAssignIn);
            return apply(assignInWith, undefined, args);
        });
        var defaultsDeep = baseRest(function (args) {
            args.push(undefined, customDefaultsMerge);
            return apply(mergeWith, undefined, args);
        });
        function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }
        function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }
        function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3));
        }
        function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }
        function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function (result, value, key) {
            result[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function (result, value, key) {
            if (hasOwnProperty.call(result, value)) {
                result[value].push(key);
            } else {
                result[value] = [key];
            }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
            });
            return result;
        }
        function mapValues(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
        }
        var merge = createAssigner(function (object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function (object, paths) {
            var result = {};
            if (object == null) {
                return result;
            }
            var isDeep = false;
            paths = arrayMap(paths, function (path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
            });
            copyObject(object, getAllKeysIn(object), result);
            if (isDeep) {
                result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
                baseUnset(result, paths[length]);
            }
            return result;
        });
        function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function (object, paths) {
            return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
            if (object == null) {
                return {};
            }
            var props = arrayMap(getAllKeysIn(object), function (prop) {
                return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function (value, path) {
                return predicate(value, path[0]);
            });
        }
        function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            if (!length) {
                length = 1;
                object = undefined;
            }
            while (++index < length) {
                var value = object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                    index = length;
                    value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
            }
            return object;
        }
        function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee = getIteratee(iteratee, 4);
            if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) {
                    accumulator = isArr ? new Ctor() : [];
                } else if (isObject(object)) {
                    accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                } else {
                    accumulator = {};
                }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
            if (upper === undefined) {
                upper = lower;
                lower = undefined;
            }
            if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined) {
                end = start;
                start = 0;
            } else {
                end = toFinite(end);
            }
            number = toNumber(number);
            return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
            if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                upper = floating = undefined;
            }
            if (floating === undefined) {
                if (typeof upper == 'boolean') {
                    floating = upper;
                    upper = undefined;
                } else if (typeof lower == 'boolean') {
                    floating = lower;
                    lower = undefined;
                }
            }
            if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
            } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                } else {
                    upper = toFinite(upper);
                }
            }
            if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
            }
            return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function (result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
        }
        function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
        }
        var kebabCase = createCompounder(function (result, word, index) {
            return result + (index ? '-' : '') + word.toLowerCase();
        });
        var lowerCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst('toLowerCase');
        function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
                return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt(string, radix, guard) {
            if (guard || radix == null) {
                radix = 0;
            } else if (radix) {
                radix = +radix;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
        }
        function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
                n = 1;
            } else {
                n = toInteger(n);
            }
            return baseRepeat(toString(string), n);
        }
        function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function (result, word, index) {
            return result + (index ? '_' : '') + word.toLowerCase();
        });
        function split(string, separator, limit) {
            if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                separator = limit = undefined;
            }
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
                return [];
            }
            string = toString(string);
            if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) {
                    return castSlice(stringToArray(string), 0, limit);
                }
            }
            return string.split(separator, limit);
        }
        var startCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + upperFirst(word);
        });
        function startsWith(string, target, position) {
            string = toString(string);
            position = baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
                options = undefined;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = '__p += \'';
            var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
            var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
            string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                if (escapeValue) {
                    isEscaping = true;
                    source += '\' +\n__e(' + escapeValue + ') +\n\'';
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += '\';\n' + evaluateValue + ';\n__p += \'';
                }
                if (interpolateValue) {
                    source += '\' +\n((__t = (' + interpolateValue + ')) == null ? \'\' : __t) +\n\'';
                }
                index = offset + match.length;
                return match;
            });
            source += '\';\n';
            var variable = options.variable;
            if (!variable) {
                source = 'with (obj) {\n' + source + '\n}\n';
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
            source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + 'var __t, __p = \'\'' + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + 'function print() { __p += __j.call(arguments, \'\') }\n' : ';\n') + source + 'return __p\n}';
            var result = attempt(function () {
                return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
            });
            result.source = source;
            if (isError(result)) {
                throw result;
            }
            return result;
        }
        function toLower(value) {
            return toString(value).toLowerCase();
        }
        function toUpper(value) {
            return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) {
                return string.replace(reTrim, '');
            }
            if (!string || !(chars = baseToString(chars))) {
                return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join('');
        }
        function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) {
                return string.replace(reTrimEnd, '');
            }
            if (!string || !(chars = baseToString(chars))) {
                return string;
            }
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join('');
        }
        function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) {
                return string.replace(reTrimStart, '');
            }
            if (!string || !(chars = baseToString(chars))) {
                return string;
            }
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join('');
        }
        function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
                var separator = 'separator' in options ? options.separator : separator;
                length = 'length' in options ? toInteger(options.length) : length;
                omission = 'omission' in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
            }
            if (length >= strLength) {
                return string;
            }
            var end = length - stringSize(omission);
            if (end < 1) {
                return omission;
            }
            var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);
            if (separator === undefined) {
                return result + omission;
            }
            if (strSymbols) {
                end += result.length - end;
            }
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, substring = result;
                    if (!separator.global) {
                        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                    }
                    separator.lastIndex = 0;
                    while (match = separator.exec(substring)) {
                        var newEnd = match.index;
                    }
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
            } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) {
                    result = result.slice(0, index);
                }
            }
            return result + omission;
        }
        function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + word.toUpperCase();
        });
        var upperFirst = createCaseFirst('toUpperCase');
        function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined : pattern;
            if (pattern === undefined) {
                return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
        }
        var attempt = baseRest(function (func, args) {
            try {
                return apply(func, undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        });
        var bindAll = flatRest(function (object, methodNames) {
            arrayEach(methodNames, function (key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
        });
        function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function (pair) {
                if (typeof pair[1] != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                return [
                    toIteratee(pair[0]),
                    pair[1]
                ];
            });
            return baseRest(function (args) {
                var index = -1;
                while (++index < length) {
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) {
                        return apply(pair[1], this, args);
                    }
                }
            });
        }
        function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
            return function () {
                return value;
            };
        }
        function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
            return value;
        }
        function iteratee(func) {
            return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function (path, args) {
            return function (object) {
                return baseInvoke(object, path, args);
            };
        });
        var methodOf = baseRest(function (object, args) {
            return function (path) {
                return baseInvoke(object, path, args);
            };
        });
        function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = !(isObject(options) && 'chain' in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function (methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) {
                    object.prototype[methodName] = function () {
                        var chainAll = this.__chain__;
                        if (chain || chainAll) {
                            var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                            actions.push({
                                'func': func,
                                'args': arguments,
                                'thisArg': object
                            });
                            result.__chain__ = chainAll;
                            return result;
                        }
                        return func.apply(object, arrayPush([this.value()], arguments));
                    };
                }
            });
            return object;
        }
        function noConflict() {
            if (root._ === this) {
                root._ = oldDash;
            }
            return this;
        }
        function noop() {
        }
        function nthArg(n) {
            n = toInteger(n);
            return baseRest(function (args) {
                return baseNth(args, n);
            });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
            return function (path) {
                return object == null ? undefined : baseGet(object, path);
            };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
            return [];
        }
        function stubFalse() {
            return false;
        }
        function stubObject() {
            return {};
        }
        function stubString() {
            return '';
        }
        function stubTrue() {
            return true;
        }
        function times(n, iteratee) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) {
                return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee = getIteratee(iteratee);
            n -= MAX_ARRAY_LENGTH;
            var result = baseTimes(length, iteratee);
            while (++index < n) {
                iteratee(index);
            }
            return result;
        }
        function toPath(value) {
            if (isArray(value)) {
                return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        }
        var add = createMathOperation(function (augend, addend) {
            return augend + addend;
        }, 0);
        var ceil = createRound('ceil');
        var divide = createMathOperation(function (dividend, divisor) {
            return dividend / divisor;
        }, 1);
        var floor = createRound('floor');
        function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        }
        function maxBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
        }
        function mean(array) {
            return baseMean(array, identity);
        }
        function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2));
        }
        function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        }
        function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
        }
        var multiply = createMathOperation(function (multiplier, multiplicand) {
            return multiplier * multiplicand;
        }, 1);
        var round = createRound('round');
        var subtract = createMathOperation(function (minuend, subtrahend) {
            return minuend - subtrahend;
        }, 0);
        function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function () {
            var source = {};
            baseForOwn(lodash, function (func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                    source[methodName] = func;
                }
            });
            return source;
        }(), { 'chain': false });
        lodash.VERSION = VERSION;
        arrayEach([
            'bind',
            'bindKey',
            'curry',
            'curryRight',
            'partial',
            'partialRight'
        ], function (methodName) {
            lodash[methodName].placeholder = lodash;
        });
        arrayEach([
            'drop',
            'take'
        ], function (methodName, index) {
            LazyWrapper.prototype[methodName] = function (n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                if (result.__filtered__) {
                    result.__takeCount__ = nativeMin(n, result.__takeCount__);
                } else {
                    result.__views__.push({
                        'size': nativeMin(n, MAX_ARRAY_LENGTH),
                        'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                    });
                }
                return result;
            };
            LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        arrayEach([
            'filter',
            'map',
            'takeWhile'
        ], function (methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function (iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                    'iteratee': getIteratee(iteratee, 3),
                    'type': type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        arrayEach([
            'head',
            'last'
        ], function (methodName, index) {
            var takeName = 'take' + (index ? 'Right' : '');
            LazyWrapper.prototype[methodName] = function () {
                return this[takeName](1).value()[0];
            };
        });
        arrayEach([
            'initial',
            'tail'
        ], function (methodName, index) {
            var dropName = 'drop' + (index ? '' : 'Right');
            LazyWrapper.prototype[methodName] = function () {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        LazyWrapper.prototype.compact = function () {
            return this.filter(identity);
        };
        LazyWrapper.prototype.find = function (predicate) {
            return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function (predicate) {
            return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
            if (typeof path == 'function') {
                return new LazyWrapper(this);
            }
            return this.map(function (value) {
                return baseInvoke(value, path, args);
            });
        });
        LazyWrapper.prototype.reject = function (predicate) {
            return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function (start, end) {
            start = toInteger(start);
            var result = this;
            if (result.__filtered__ && (start > 0 || end < 0)) {
                return new LazyWrapper(result);
            }
            if (start < 0) {
                result = result.takeRight(-start);
            } else if (start) {
                result = result.drop(start);
            }
            if (end !== undefined) {
                end = toInteger(end);
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function (predicate) {
            return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function () {
            return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
                return;
            }
            lodash.prototype[methodName] = function () {
                var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value);
                var interceptor = function (value) {
                    var result = lodashFunc.apply(lodash, arrayPush([value], args));
                    return isTaker && chainAll ? result[0] : result;
                };
                if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                    isLazy = useLazy = false;
                }
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                    value = onlyLazy ? value : new LazyWrapper(this);
                    var result = func.apply(value, args);
                    result.__actions__.push({
                        'func': thru,
                        'args': [interceptor],
                        'thisArg': undefined
                    });
                    return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) {
                    return func.apply(this, args);
                }
                result = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
            };
        });
        arrayEach([
            'pop',
            'push',
            'shift',
            'sort',
            'splice',
            'unshift'
        ], function (methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function () {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function (value) {
                    return func.apply(isArray(value) ? value : [], args);
                });
            };
        });
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name + '', names = realNames[key] || (realNames[key] = []);
                names.push({
                    'name': methodName,
                    'func': lodashFunc
                });
            }
        });
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
                'name': 'wrapper',
                'func': undefined
            }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
    };
    var _ = runInContext();
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        root._ = _;
        define('fp/lodash', [], function () {
            return _;
        });
    } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
    } else {
        root._ = _;
    }
}.call(this));

;
(function () {
    var undefined;
    var VERSION = '4.17.3';
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.', FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = '__lodash_placeholder__';
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [
        [
            'ary',
            WRAP_ARY_FLAG
        ],
        [
            'bind',
            WRAP_BIND_FLAG
        ],
        [
            'bindKey',
            WRAP_BIND_KEY_FLAG
        ],
        [
            'curry',
            WRAP_CURRY_FLAG
        ],
        [
            'curryRight',
            WRAP_CURRY_RIGHT_FLAG
        ],
        [
            'flip',
            WRAP_FLIP_FLAG
        ],
        [
            'partial',
            WRAP_PARTIAL_FLAG
        ],
        [
            'partialRight',
            WRAP_PARTIAL_RIGHT_FLAG
        ],
        [
            'rearg',
            WRAP_REARG_FLAG
        ]
    ];
    var argsTag = '[object Arguments]', arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]', boolTag = '[object Boolean]', dateTag = '[object Date]', domExcTag = '[object DOMException]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', nullTag = '[object Null]', objectTag = '[object Object]', promiseTag = '[object Promise]', proxyTag = '[object Proxy]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', undefinedTag = '[object Undefined]', weakMapTag = '[object WeakMap]', weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, reLeadingDot = /^\./, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g, reTrimStart = /^\s+/, reTrimEnd = /\s+$/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = '[\'\u2019]', rsAstral = '[' + rsAstralRange + ']', rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')', rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
            rsNonAstral,
            rsRegional,
            rsSurrPair
        ].join('|') + ')' + rsOptVar + reOptMod + ')*', rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)', rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
            rsDingbat,
            rsRegional,
            rsSurrPair
        ].join('|') + ')' + rsSeq, rsSymbol = '(?:' + [
            rsNonAstral + rsCombo + '?',
            rsCombo,
            rsRegional,
            rsSurrPair,
            rsAstral
        ].join('|') + ')';
    var reApos = RegExp(rsApos, 'g');
    var reComboMark = RegExp(rsCombo, 'g');
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    var reUnicodeWord = RegExp([
        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [
            rsBreak,
            rsUpper,
            '$'
        ].join('|') + ')',
        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [
            rsBreak,
            rsUpper + rsMiscLower,
            '$'
        ].join('|') + ')',
        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
        rsUpper + '+' + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
    ].join('|'), 'g');
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = [
        'Array',
        'Buffer',
        'DataView',
        'Date',
        'Error',
        'Float32Array',
        'Float64Array',
        'Function',
        'Int8Array',
        'Int16Array',
        'Int32Array',
        'Map',
        'Math',
        'Object',
        'Promise',
        'RegExp',
        'Set',
        'String',
        'Symbol',
        'TypeError',
        'Uint8Array',
        'Uint8ClampedArray',
        'Uint16Array',
        'Uint32Array',
        'WeakMap',
        '_',
        'clearTimeout',
        'isFinite',
        'parseInt',
        'setTimeout'
    ];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
        '\xC0': 'A',
        '\xC1': 'A',
        '\xC2': 'A',
        '\xC3': 'A',
        '\xC4': 'A',
        '\xC5': 'A',
        '\xE0': 'a',
        '\xE1': 'a',
        '\xE2': 'a',
        '\xE3': 'a',
        '\xE4': 'a',
        '\xE5': 'a',
        '\xC7': 'C',
        '\xE7': 'c',
        '\xD0': 'D',
        '\xF0': 'd',
        '\xC8': 'E',
        '\xC9': 'E',
        '\xCA': 'E',
        '\xCB': 'E',
        '\xE8': 'e',
        '\xE9': 'e',
        '\xEA': 'e',
        '\xEB': 'e',
        '\xCC': 'I',
        '\xCD': 'I',
        '\xCE': 'I',
        '\xCF': 'I',
        '\xEC': 'i',
        '\xED': 'i',
        '\xEE': 'i',
        '\xEF': 'i',
        '\xD1': 'N',
        '\xF1': 'n',
        '\xD2': 'O',
        '\xD3': 'O',
        '\xD4': 'O',
        '\xD5': 'O',
        '\xD6': 'O',
        '\xD8': 'O',
        '\xF2': 'o',
        '\xF3': 'o',
        '\xF4': 'o',
        '\xF5': 'o',
        '\xF6': 'o',
        '\xF8': 'o',
        '\xD9': 'U',
        '\xDA': 'U',
        '\xDB': 'U',
        '\xDC': 'U',
        '\xF9': 'u',
        '\xFA': 'u',
        '\xFB': 'u',
        '\xFC': 'u',
        '\xDD': 'Y',
        '\xFD': 'y',
        '\xFF': 'y',
        '\xC6': 'Ae',
        '\xE6': 'ae',
        '\xDE': 'Th',
        '\xFE': 'th',
        '\xDF': 'ss',
        '\u0100': 'A',
        '\u0102': 'A',
        '\u0104': 'A',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u0105': 'a',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u010E': 'D',
        '\u0110': 'D',
        '\u010F': 'd',
        '\u0111': 'd',
        '\u0112': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u0118': 'E',
        '\u011A': 'E',
        '\u0113': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u0119': 'e',
        '\u011B': 'e',
        '\u011C': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u0122': 'G',
        '\u011D': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u0123': 'g',
        '\u0124': 'H',
        '\u0126': 'H',
        '\u0125': 'h',
        '\u0127': 'h',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u012E': 'I',
        '\u0130': 'I',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u012F': 'i',
        '\u0131': 'i',
        '\u0134': 'J',
        '\u0135': 'j',
        '\u0136': 'K',
        '\u0137': 'k',
        '\u0138': 'k',
        '\u0139': 'L',
        '\u013B': 'L',
        '\u013D': 'L',
        '\u013F': 'L',
        '\u0141': 'L',
        '\u013A': 'l',
        '\u013C': 'l',
        '\u013E': 'l',
        '\u0140': 'l',
        '\u0142': 'l',
        '\u0143': 'N',
        '\u0145': 'N',
        '\u0147': 'N',
        '\u014A': 'N',
        '\u0144': 'n',
        '\u0146': 'n',
        '\u0148': 'n',
        '\u014B': 'n',
        '\u014C': 'O',
        '\u014E': 'O',
        '\u0150': 'O',
        '\u014D': 'o',
        '\u014F': 'o',
        '\u0151': 'o',
        '\u0154': 'R',
        '\u0156': 'R',
        '\u0158': 'R',
        '\u0155': 'r',
        '\u0157': 'r',
        '\u0159': 'r',
        '\u015A': 'S',
        '\u015C': 'S',
        '\u015E': 'S',
        '\u0160': 'S',
        '\u015B': 's',
        '\u015D': 's',
        '\u015F': 's',
        '\u0161': 's',
        '\u0162': 'T',
        '\u0164': 'T',
        '\u0166': 'T',
        '\u0163': 't',
        '\u0165': 't',
        '\u0167': 't',
        '\u0168': 'U',
        '\u016A': 'U',
        '\u016C': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u0172': 'U',
        '\u0169': 'u',
        '\u016B': 'u',
        '\u016D': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u0173': 'u',
        '\u0174': 'W',
        '\u0175': 'w',
        '\u0176': 'Y',
        '\u0177': 'y',
        '\u0178': 'Y',
        '\u0179': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u017A': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u0132': 'IJ',
        '\u0133': 'ij',
        '\u0152': 'Oe',
        '\u0153': 'oe',
        '\u0149': '\'n',
        '\u017F': 's'
    };
    var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#39;'
    };
    var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': '\''
    };
    var stringEscapes = {
        '\\': '\\',
        '\'': '\'',
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
    };
    var freeParseFloat = parseFloat, freeParseInt = parseInt;
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function () {
        try {
            return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {
        }
    }();
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function addMapEntry(map, pair) {
        map.set(pair[0], pair[1]);
        return map;
    }
    function addSetEntry(set, value) {
        set.add(value);
        return set;
    }
    function apply(func, thisArg, args) {
        switch (args.length) {
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }
    function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
    }
    function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
                break;
            }
        }
        return array;
    }
    function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
            if (iteratee(array[length], length, array) === false) {
                break;
            }
        }
        return array;
    }
    function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
            if (!predicate(array[index], index, array)) {
                return false;
            }
        }
        return true;
    }
    function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
                result[resIndex++] = value;
            }
        }
        return result;
    }
    function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
            if (comparator(value, array[index])) {
                return true;
            }
        }
        return false;
    }
    function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
            result[index] = iteratee(array[index], index, array);
        }
        return result;
    }
    function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
            array[offset + index] = values[index];
        }
        return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
            accumulator = array[++index];
        }
        while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
    }
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
            accumulator = array[--length];
        }
        while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
    }
    function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
            if (predicate(array[index], index, array)) {
                return true;
            }
        }
        return false;
    }
    var asciiSize = baseProperty('length');
    function asciiToArray(string) {
        return string.split('');
    }
    function asciiWords(string) {
        return string.match(reAsciiWord) || [];
    }
    function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function (value, key, collection) {
            if (predicate(value, key, collection)) {
                result = key;
                return false;
            }
        });
        return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
                return index;
            }
        }
        return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
            if (comparator(array[index], value)) {
                return index;
            }
        }
        return -1;
    }
    function baseIsNaN(value) {
        return value !== value;
    }
    function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
    }
    function baseProperty(key) {
        return function (object) {
            return object == null ? undefined : object[key];
        };
    }
    function basePropertyOf(object) {
        return function (key) {
            return object == null ? undefined : object[key];
        };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function (value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
            array[length] = array[length].value;
        }
        return array;
    }
    function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined) {
                result = result === undefined ? current : result + current;
            }
        }
        return result;
    }
    function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
            result[index] = iteratee(index);
        }
        return result;
    }
    function baseToPairs(object, props) {
        return arrayMap(props, function (key) {
            return [
                key,
                object[key]
            ];
        });
    }
    function baseUnary(func) {
        return function (value) {
            return func(value);
        };
    }
    function baseValues(object, props) {
        return arrayMap(props, function (key) {
            return object[key];
        });
    }
    function cacheHas(cache, key) {
        return cache.has(key);
    }
    function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
    }
    function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
            if (array[length] === placeholder) {
                ++result;
            }
        }
        return result;
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
    }
    function getValue(object, key) {
        return object == null ? undefined : object[key];
    }
    function hasUnicode(string) {
        return reHasUnicode.test(string);
    }
    function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
    }
    function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
            result.push(data.value);
        }
        return result;
    }
    function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function (value, key) {
            result[++index] = [
                key,
                value
            ];
        });
        return result;
    }
    function overArg(func, transform) {
        return function (arg) {
            return func(transform(arg));
        };
    }
    function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
            }
        }
        return result;
    }
    function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function (value) {
            result[++index] = value;
        });
        return result;
    }
    function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function (value) {
            result[++index] = [
                value,
                value
            ];
        });
        return result;
    }
    function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
            if (array[index] === value) {
                return index;
            }
        }
        return -1;
    }
    function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
            if (array[index] === value) {
                return index;
            }
        }
        return index;
    }
    function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
            ++result;
        }
        return result;
    }
    function unicodeToArray(string) {
        return string.match(reUnicode) || [];
    }
    function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
    }
    var runInContext = function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        var Array = context.Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
        var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
        var coreJsData = context['__core-js_shared__'];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function () {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? 'Symbol(src)_1.' + uid : '';
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object);
        var oldDash = root._;
        var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
        var Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        var defineProperty = function () {
            try {
                var func = getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
            } catch (e) {
            }
        }();
        var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, 'DataView'), Map = getNative(context, 'Map'), Promise = getNative(context, 'Promise'), Set = getNative(context, 'Set'), WeakMap = getNative(context, 'WeakMap'), nativeCreate = getNative(Object, 'create');
        var metaMap = WeakMap && new WeakMap();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) {
                    return value;
                }
                if (hasOwnProperty.call(value, '__wrapped__')) {
                    return wrapperClone(value);
                }
            }
            return new LodashWrapper(value);
        }
        var baseCreate = function () {
            function object() {
            }
            return function (proto) {
                if (!isObject(proto)) {
                    return {};
                }
                if (objectCreate) {
                    return objectCreate(proto);
                }
                object.prototype = proto;
                var result = new object();
                object.prototype = undefined;
                return result;
            };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
        }
        lodash.templateSettings = {
            'escape': reEscape,
            'evaluate': reEvaluate,
            'interpolate': reInterpolate,
            'variable': '',
            'imports': { '_': lodash }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
        }
        function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
        }
        function lazyReverse() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
            } else {
                result = this.clone();
                result.__dir__ *= -1;
            }
            return result;
        }
        function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
                return baseWrapperValue(array, this.__actions__);
            }
            var result = [];
            outer:
                while (length-- && resIndex < takeCount) {
                    index += dir;
                    var iterIndex = -1, value = array[index];
                    while (++iterIndex < iterLength) {
                        var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                        if (type == LAZY_MAP_FLAG) {
                            value = computed;
                        } else if (!computed) {
                            if (type == LAZY_FILTER_FLAG) {
                                continue outer;
                            } else {
                                break outer;
                            }
                        }
                    }
                    result[resIndex++] = value;
                }
            return result;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        }
        function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }
        function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }
        function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
                data.pop();
            } else {
                splice.call(data, index, 1);
            }
            --this.size;
            return true;
        }
        function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        }
        function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([
                    key,
                    value
                ]);
            } else {
                data[index][1] = value;
            }
            return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                'hash': new Hash(),
                'map': new (Map || ListCache)(),
                'string': new Hash()
            };
        }
        function mapCacheDelete(key) {
            var result = getMapData(this, key)['delete'](key);
            this.size -= result ? 1 : 0;
            return result;
        }
        function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache();
            while (++index < length) {
                this.add(values[index]);
            }
        }
        function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }
        function setCacheHas(value) {
            return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
        }
        function stackDelete(key) {
            var data = this.__data__, result = data['delete'](key);
            this.size = data.size;
            return result;
        }
        function stackGet(key) {
            return this.__data__.get(key);
        }
        function stackHas(key) {
            return this.__data__.has(key);
        }
        function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                    pairs.push([
                        key,
                        value
                    ]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for (var key in value) {
                if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
                    result.push(key);
                }
            }
            return result;
        }
        function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined;
        }
        function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
                baseAssignValue(object, key, value);
            }
        }
        function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
                baseAssignValue(object, key, value);
            }
        }
        function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
                if (eq(array[length][0], key)) {
                    return length;
                }
            }
            return -1;
        }
        function baseAggregator(collection, setter, iteratee, accumulator) {
            baseEach(collection, function (value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
        }
        function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
            if (key == '__proto__' && defineProperty) {
                defineProperty(object, key, {
                    'configurable': true,
                    'enumerable': true,
                    'value': value,
                    'writable': true
                });
            } else {
                object[key] = value;
            }
        }
        function baseAt(object, paths) {
            var index = -1, length = paths.length, result = Array(length), skip = object == null;
            while (++index < length) {
                result[index] = skip ? undefined : get(object, paths[index]);
            }
            return result;
        }
        function baseClamp(number, lower, upper) {
            if (number === number) {
                if (upper !== undefined) {
                    number = number <= upper ? number : upper;
                }
                if (lower !== undefined) {
                    number = number >= lower ? number : lower;
                }
            }
            return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
                result = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result !== undefined) {
                return result;
            }
            if (!isObject(value)) {
                return value;
            }
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) {
                    return copyArray(value, result);
                }
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) {
                    return cloneBuffer(value, isDeep);
                }
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = isFlat || isFunc ? {} : initCloneObject(value);
                    if (!isDeep) {
                        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                    }
                } else {
                    if (!cloneableTags[tag]) {
                        return object ? value : {};
                    }
                    result = initCloneByTag(value, tag, baseClone, isDeep);
                }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
                return stacked;
            }
            stack.set(value, result);
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, function (subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
        }
        function baseConforms(source) {
            var props = keys(source);
            return function (object) {
                return baseConformsTo(object, source, props);
            };
        }
        function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (length--) {
                var key = props[length], predicate = source[key], value = object[key];
                if (value === undefined && !(key in object) || !predicate(value)) {
                    return false;
                }
            }
            return true;
        }
        function baseDelay(func, wait, args) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return setTimeout(function () {
                func.apply(undefined, args);
            }, wait);
        }
        function baseDifference(array, values, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
            if (!length) {
                return result;
            }
            if (iteratee) {
                values = arrayMap(values, baseUnary(iteratee));
            }
            if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
            } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
            }
            outer:
                while (++index < length) {
                    var value = array[index], computed = iteratee == null ? value : iteratee(value);
                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                        var valuesIndex = valuesLength;
                        while (valuesIndex--) {
                            if (values[valuesIndex] === computed) {
                                continue outer;
                            }
                        }
                        result.push(value);
                    } else if (!includes(values, computed, comparator)) {
                        result.push(value);
                    }
                }
            return result;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
            var result = true;
            baseEach(collection, function (value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        function baseExtremum(array, iteratee, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
                var value = array[index], current = iteratee(value);
                if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
                    var computed = current, result = value;
                }
            }
            return result;
        }
        function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) {
                start = -start > length ? 0 : length + start;
            }
            end = end === undefined || end > length ? length : toInteger(end);
            if (end < 0) {
                end += length;
            }
            end = start > end ? 0 : toLength(end);
            while (start < end) {
                array[start++] = value;
            }
            return array;
        }
        function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, function (value, index, collection) {
                if (predicate(value, index, collection)) {
                    result.push(value);
                }
            });
            return result;
        }
        function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) {
                        baseFlatten(value, depth - 1, predicate, isStrict, result);
                    } else {
                        arrayPush(result, value);
                    }
                } else if (!isStrict) {
                    result[result.length] = value;
                }
            }
            return result;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
        }
        function baseFunctions(object, props) {
            return arrayFilter(props, function (key) {
                return isFunction(object[key]);
            });
        }
        function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
                object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        function baseGetTag(value) {
            if (value == null) {
                return value === undefined ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other) {
            return value > other;
        }
        function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
            return object != null && key in Object(object);
        }
        function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
            while (othIndex--) {
                var array = arrays[othIndex];
                if (othIndex && iteratee) {
                    array = arrayMap(array, baseUnary(iteratee));
                }
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
                while (++index < length && result.length < maxLength) {
                    var value = array[index], computed = iteratee ? iteratee(value) : value;
                    value = comparator || value !== 0 ? value : 0;
                    if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                        othIndex = othLength;
                        while (--othIndex) {
                            var cache = caches[othIndex];
                            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                                continue outer;
                            }
                        }
                        if (seen) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
            return result;
        }
        function baseInverter(object, setter, iteratee, accumulator) {
            baseForOwn(object, function (value, key, object) {
                setter(accumulator, iteratee(value), key, object);
            });
            return accumulator;
        }
        function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined : apply(func, object, args);
        }
        function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
                return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
                return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) {
                    return false;
                }
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack());
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack());
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) {
                return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (index--) {
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                    return false;
                }
            }
            while (++index < length) {
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) {
                        return false;
                    }
                } else {
                    var stack = new Stack();
                    if (customizer) {
                        var result = customizer(objValue, srcValue, key, object, source, stack);
                    }
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
                        return false;
                    }
                }
            }
            return true;
        }
        function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
                return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
            if (typeof value == 'function') {
                return value;
            }
            if (value == null) {
                return identity;
            }
            if (typeof value == 'object') {
                return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
        }
        function baseKeys(object) {
            if (!isPrototype(object)) {
                return nativeKeys(object);
            }
            var result = [];
            for (var key in Object(object)) {
                if (hasOwnProperty.call(object, key) && key != 'constructor') {
                    result.push(key);
                }
            }
            return result;
        }
        function baseKeysIn(object) {
            if (!isObject(object)) {
                return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result = [];
            for (var key in object) {
                if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                    result.push(key);
                }
            }
            return result;
        }
        function baseLt(value, other) {
            return value < other;
        }
        function baseMap(collection, iteratee) {
            var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function (value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function (object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(toKey(path), srcValue);
            }
            return function (object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
                return;
            }
            baseFor(source, function (srcValue, key) {
                if (isObject(srcValue)) {
                    stack || (stack = new Stack());
                    baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                } else {
                    var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;
                    if (newValue === undefined) {
                        newValue = srcValue;
                    }
                    assignMergeValue(object, key, newValue);
                }
            }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = object[key], srcValue = source[key], stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) {
                        newValue = objValue;
                    } else if (isArrayLikeObject(objValue)) {
                        newValue = copyArray(objValue);
                    } else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                    } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                    } else {
                        newValue = [];
                    }
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) {
                        newValue = toPlainObject(objValue);
                    } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
                        newValue = initCloneObject(srcValue);
                    }
                } else {
                    isCommon = false;
                }
            }
            if (isCommon) {
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack['delete'](srcValue);
            }
            assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
            var length = array.length;
            if (!length) {
                return;
            }
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined;
        }
        function baseOrderBy(collection, iteratees, orders) {
            var index = -1;
            iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
            var result = baseMap(collection, function (value, key, collection) {
                var criteria = arrayMap(iteratees, function (iteratee) {
                    return iteratee(value);
                });
                return {
                    'criteria': criteria,
                    'index': ++index,
                    'value': value
                };
            });
            return baseSortBy(result, function (object, other) {
                return compareMultiple(object, other, orders);
            });
        }
        function basePick(object, paths) {
            return basePickBy(object, paths, function (value, path) {
                return hasIn(object, path);
            });
        }
        function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result = {};
            while (++index < length) {
                var path = paths[index], value = baseGet(object, path);
                if (predicate(value, path)) {
                    baseSet(result, castPath(path, object), value);
                }
            }
            return result;
        }
        function basePropertyDeep(path) {
            return function (object) {
                return baseGet(object, path);
            };
        }
        function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
            if (array === values) {
                values = copyArray(values);
            }
            if (iteratee) {
                seen = arrayMap(array, baseUnary(iteratee));
            }
            while (++index < length) {
                var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                    if (seen !== array) {
                        splice.call(seen, fromIndex, 1);
                    }
                    splice.call(array, fromIndex, 1);
                }
            }
            return array;
        }
        function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                    var previous = index;
                    if (isIndex(index)) {
                        splice.call(array, index, 1);
                    } else {
                        baseUnset(array, index);
                    }
                }
            }
            return array;
        }
        function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
            while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }
        function baseRepeat(string, n) {
            var result = '';
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                return result;
            }
            do {
                if (n % 2) {
                    result += string;
                }
                n = nativeFloor(n / 2);
                if (n) {
                    string += string;
                }
            } while (n);
            return result;
        }
        function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + '');
        }
        function baseSample(collection) {
            return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
                return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
                var key = toKey(path[index]), newValue = value;
                if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) {
                        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                    }
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }
        var baseSetData = !metaMap ? identity : function (func, data) {
            metaMap.set(func, data);
            return func;
        };
        var baseSetToString = !defineProperty ? identity : function (func, string) {
            return defineProperty(func, 'toString', {
                'configurable': true,
                'enumerable': false,
                'value': constant(string),
                'writable': true
            });
        };
        function baseShuffle(collection) {
            return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) {
                start = -start > length ? 0 : length + start;
            }
            end = end > length ? length : end;
            if (end < 0) {
                end += length;
            }
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result = Array(length);
            while (++index < length) {
                result[index] = array[index + start];
            }
            return result;
        }
        function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function (value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while (low < high) {
                    var mid = low + high >>> 1, computed = array[mid];
                    if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                        low = mid + 1;
                    } else {
                        high = mid;
                    }
                }
                return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee, retHighest) {
            value = iteratee(value);
            var low = 0, high = array == null ? 0 : array.length, valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined;
            while (low < high) {
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                if (valIsNaN) {
                    var setLow = retHighest || othIsReflexive;
                } else if (valIsUndefined) {
                    setLow = othIsReflexive && (retHighest || othIsDefined);
                } else if (valIsNull) {
                    setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                } else if (valIsSymbol) {
                    setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                } else if (othIsNull || othIsSymbol) {
                    setLow = false;
                } else {
                    setLow = retHighest ? computed <= value : computed < value;
                }
                if (setLow) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee) {
            var index = -1, length = array.length, resIndex = 0, result = [];
            while (++index < length) {
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                if (!index || !eq(computed, seen)) {
                    var seen = computed;
                    result[resIndex++] = value === 0 ? 0 : value;
                }
            }
            return result;
        }
        function baseToNumber(value) {
            if (typeof value == 'number') {
                return value;
            }
            if (isSymbol(value)) {
                return NAN;
            }
            return +value;
        }
        function baseToString(value) {
            if (typeof value == 'string') {
                return value;
            }
            if (isArray(value)) {
                return arrayMap(value, baseToString) + '';
            }
            if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : '';
            }
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
            if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) {
                    return setToArray(set);
                }
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache();
            } else {
                seen = iteratee ? [] : result;
            }
            outer:
                while (++index < length) {
                    var value = array[index], computed = iteratee ? iteratee(value) : value;
                    value = comparator || value !== 0 ? value : 0;
                    if (isCommon && computed === computed) {
                        var seenIndex = seen.length;
                        while (seenIndex--) {
                            if (seen[seenIndex] === computed) {
                                continue outer;
                            }
                        }
                        if (iteratee) {
                            seen.push(computed);
                        }
                        result.push(value);
                    } else if (!includes(seen, computed, comparator)) {
                        if (seen !== result) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
            return result;
        }
        function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
            var result = value;
            if (result instanceof LazyWrapper) {
                result = result.value();
            }
            return arrayReduce(actions, function (result, action) {
                return action.func.apply(action.thisArg, arrayPush([result], action.args));
            }, result);
        }
        function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length;
            if (length < 2) {
                return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result = Array(length);
            while (++index < length) {
                var array = arrays[index], othIndex = -1;
                while (++othIndex < length) {
                    if (othIndex != index) {
                        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                    }
                }
            }
            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
        function baseZipObject(props, values, assignFunc) {
            var index = -1, length = props.length, valsLength = values.length, result = {};
            while (++index < length) {
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
            return typeof value == 'function' ? value : identity;
        }
        function castPath(value, object) {
            if (isArray(value)) {
                return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout = ctxClearTimeout || function (id) {
            return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
                return buffer.slice();
            }
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
        }
        function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneMap(map, isDeep, cloneFunc) {
            var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
            return arrayReduce(array, addMapEntry, new map.constructor());
        }
        function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }
        function cloneSet(set, isDeep, cloneFunc) {
            var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
            return arrayReduce(array, addSetEntry, new set.constructor());
        }
        function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
            if (value !== other) {
                var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                    return 1;
                }
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                    return -1;
                }
            }
            return 0;
        }
        function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
                var result = compareAscending(objCriteria[index], othCriteria[index]);
                if (result) {
                    if (index >= ordersLength) {
                        return result;
                    }
                    var order = orders[index];
                    return result * (order == 'desc' ? -1 : 1);
                }
            }
            return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
                result[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                    result[holders[argsIndex]] = args[argsIndex];
                }
            }
            while (rangeLength--) {
                result[leftIndex++] = args[argsIndex++];
            }
            return result;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
                result[argsIndex] = args[argsIndex];
            }
            var offset = argsIndex;
            while (++rightIndex < rightLength) {
                result[offset + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                    result[offset + holders[holdersIndex]] = args[argsIndex++];
                }
            }
            return result;
        }
        function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            while (++index < length) {
                array[index] = source[index];
            }
            return array;
        }
        function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                if (newValue === undefined) {
                    newValue = source[key];
                }
                if (isNew) {
                    baseAssignValue(object, key, newValue);
                } else {
                    assignValue(object, key, newValue);
                }
            }
            return object;
        }
        function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
            return function (collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
            };
        }
        function createAssigner(assigner) {
            return baseRest(function (object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object(object);
                while (++index < length) {
                    var source = sources[index];
                    if (source) {
                        assigner(object, source, index, customizer);
                    }
                }
                return object;
            });
        }
        function createBaseEach(eachFunc, fromRight) {
            return function (collection, iteratee) {
                if (collection == null) {
                    return collection;
                }
                if (!isArrayLike(collection)) {
                    return eachFunc(collection, iteratee);
                }
                var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
                while (fromRight ? index-- : ++index < length) {
                    if (iteratee(iterable[index], index, iterable) === false) {
                        break;
                    }
                }
                return collection;
            };
        }
        function createBaseFor(fromRight) {
            return function (object, iteratee, keysFunc) {
                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                while (length--) {
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                    }
                }
                return object;
            };
        }
        function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
        }
        function createCaseFirst(methodName) {
            return function (string) {
                string = toString(string);
                var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
                var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
                return chr[methodName]() + trailing;
            };
        }
        function createCompounder(callback) {
            return function (string) {
                return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
            };
        }
        function createCtor(Ctor) {
            return function () {
                var args = arguments;
                switch (args.length) {
                case 0:
                    return new Ctor();
                case 1:
                    return new Ctor(args[0]);
                case 2:
                    return new Ctor(args[0], args[1]);
                case 3:
                    return new Ctor(args[0], args[1], args[2]);
                case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                return isObject(result) ? result : thisBinding;
            };
        }
        function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
                while (index--) {
                    args[index] = arguments[index];
                }
                var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                length -= holders.length;
                if (length < arity) {
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
                }
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return apply(fn, this, args);
            }
            return wrapper;
        }
        function createFind(findIndexFunc) {
            return function (collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = getIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function (key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }
        function createFlow(fromRight) {
            return flatRest(function (funcs) {
                var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                if (fromRight) {
                    funcs.reverse();
                }
                while (index--) {
                    var func = funcs[index];
                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                        var wrapper = new LodashWrapper([], true);
                    }
                }
                index = wrapper ? index : length;
                while (++index < length) {
                    func = funcs[index];
                    var funcName = getFuncName(func), data = funcName == 'wrapper' ? getData(func) : undefined;
                    if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                    } else {
                        wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                    }
                }
                return function () {
                    var args = arguments, value = args[0];
                    if (wrapper && args.length == 1 && isArray(value)) {
                        return wrapper.plant(value).value();
                    }
                    var index = 0, result = length ? funcs[index].apply(this, args) : value;
                    while (++index < length) {
                        result = funcs[index].call(this, result);
                    }
                    return result;
                };
            });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length;
                while (index--) {
                    args[index] = arguments[index];
                }
                if (isCurried) {
                    var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                }
                if (partials) {
                    args = composeArgs(args, partials, holders, isCurried);
                }
                if (partialsRight) {
                    args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                }
                length -= holdersCount;
                if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                if (argPos) {
                    args = reorder(args, argPos);
                } else if (isFlip && length > 1) {
                    args.reverse();
                }
                if (isAry && ary < length) {
                    args.length = ary;
                }
                if (this && this !== root && this instanceof wrapper) {
                    fn = Ctor || createCtor(fn);
                }
                return fn.apply(thisBinding, args);
            }
            return wrapper;
        }
        function createInverter(setter, toIteratee) {
            return function (object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
            };
        }
        function createMathOperation(operator, defaultValue) {
            return function (value, other) {
                var result;
                if (value === undefined && other === undefined) {
                    return defaultValue;
                }
                if (value !== undefined) {
                    result = value;
                }
                if (other !== undefined) {
                    if (result === undefined) {
                        return other;
                    }
                    if (typeof value == 'string' || typeof other == 'string') {
                        value = baseToString(value);
                        other = baseToString(other);
                    } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                    }
                    result = operator(value, other);
                }
                return result;
            };
        }
        function createOver(arrayFunc) {
            return flatRest(function (iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function (args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function (iteratee) {
                        return apply(iteratee, thisArg, args);
                    });
                });
            });
        }
        function createPadding(length, chars) {
            chars = chars === undefined ? ' ' : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
                return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                while (++leftIndex < leftLength) {
                    args[leftIndex] = partials[leftIndex];
                }
                while (argsLength--) {
                    args[leftIndex++] = arguments[++argsIndex];
                }
                return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
        }
        function createRange(fromRight) {
            return function (start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                    end = step = undefined;
                }
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else {
                    end = toFinite(end);
                }
                step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
                return baseRange(start, end, step, fromRight);
            };
        }
        function createRelationalOperation(operator) {
            return function (value, other) {
                if (!(typeof value == 'string' && typeof other == 'string')) {
                    value = toNumber(value);
                    other = toNumber(other);
                }
                return operator(value, other);
            };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity
            ];
            var result = wrapFunc.apply(undefined, newData);
            if (isLaziable(func)) {
                setData(result, newData);
            }
            result.placeholder = placeholder;
            return setWrapToString(result, func, bitmask);
        }
        function createRound(methodName) {
            var func = Math[methodName];
            return function (number, precision) {
                number = toNumber(number);
                precision = nativeMin(toInteger(precision), 292);
                if (precision) {
                    var pair = (toString(number) + 'e').split('e'), value = func(pair[0] + 'e' + (+pair[1] + precision));
                    pair = (toString(value) + 'e').split('e');
                    return +(pair[0] + 'e' + (+pair[1] - precision));
                }
                return func(number);
            };
        }
        var createSet = !(Set && 1 / setToArray(new Set([
            ,
            -0
        ]))[1] == INFINITY) ? noop : function (values) {
            return new Set(values);
        };
        function createToPairs(keysFunc) {
            return function (object) {
                var tag = getTag(object);
                if (tag == mapTag) {
                    return mapToArray(object);
                }
                if (tag == setTag) {
                    return setToPairs(object);
                }
                return baseToPairs(object, keysFunc(object));
            };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func);
            var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
            ];
            if (data) {
                mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] == null ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                var result = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                result = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                result = createPartial(func, bitmask, thisArg, partials);
            } else {
                result = createHybrid.apply(undefined, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                return srcValue;
            }
            return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                stack['delete'](srcValue);
            }
            return objValue;
        }
        function customOmitClone(value, key) {
            return key !== undefined && isPlainObject(value) ? undefined : value;
        }
        function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                return false;
            }
            var stacked = stack.get(array);
            if (stacked && stack.get(other)) {
                return stacked == other;
            }
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
                var arrValue = array[index], othValue = other[index];
                if (customizer) {
                    var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                }
                if (compared !== undefined) {
                    if (compared) {
                        continue;
                    }
                    result = false;
                    break;
                }
                if (seen) {
                    if (!arraySome(other, function (othValue, othIndex) {
                            if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                return seen.push(othIndex);
                            }
                        })) {
                        result = false;
                        break;
                    }
                } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    result = false;
                    break;
                }
            }
            stack['delete'](array);
            stack['delete'](other);
            return result;
        }
        function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
            case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                    return false;
                }
                object = object.buffer;
                other = other.buffer;
            case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                    return false;
                }
                return true;
            case boolTag:
            case dateTag:
            case numberTag:
                return eq(+object, +other);
            case errorTag:
                return object.name == other.name && object.message == other.message;
            case regexpTag:
            case stringTag:
                return object == other + '';
            case mapTag:
                var convert = mapToArray;
            case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                    return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                    return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack['delete'](object);
                return result;
            case symbolTag:
                if (symbolValueOf) {
                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
        }
        function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
                return false;
            }
            var index = objLength;
            while (index--) {
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                    return false;
                }
            }
            var stacked = stack.get(object);
            if (stacked && stack.get(other)) {
                return stacked == other;
            }
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) {
                    var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                }
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == 'constructor');
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                    result = false;
                }
            }
            stack['delete'](object);
            stack['delete'](other);
            return result;
        }
        function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + '');
        }
        function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function (func) {
            return metaMap.get(func);
        };
        function getFuncName(func) {
            var result = func.name + '', array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
            while (length--) {
                var data = array[length], otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) {
                    return data.name;
                }
            }
            return result;
        }
        function getHolder(func) {
            var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
            return object.placeholder;
        }
        function getIteratee() {
            var result = lodash.iteratee || iteratee;
            result = result === iteratee ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
        function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
        }
        function getMatchData(object) {
            var result = keys(object), length = result.length;
            while (length--) {
                var key = result[length], value = object[key];
                result[length] = [
                    key,
                    value,
                    isStrictComparable(value)
                ];
            }
            return result;
        }
        function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {
            }
            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) {
                    value[symToStringTag] = tag;
                } else {
                    delete value[symToStringTag];
                }
            }
            return result;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
            if (object == null) {
                return [];
            }
            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), function (symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
            var result = [];
            while (object) {
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
            getTag = function (value) {
                var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
                if (ctorString) {
                    switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag;
                    case mapCtorString:
                        return mapTag;
                    case promiseCtorString:
                        return promiseTag;
                    case setCtorString:
                        return setTag;
                    case weakMapCtorString:
                        return weakMapTag;
                    }
                }
                return result;
            };
        }
        function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
                var data = transforms[index], size = data.size;
                switch (data.type) {
                case 'drop':
                    start += size;
                    break;
                case 'dropRight':
                    end -= size;
                    break;
                case 'take':
                    end = nativeMin(end, start + size);
                    break;
                case 'takeRight':
                    start = nativeMax(start, end - size);
                    break;
                }
            }
            return {
                'start': start,
                'end': end
            };
        }
        function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result = false;
            while (++index < length) {
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) {
                    break;
                }
                object = object[key];
            }
            if (result || ++index != length) {
                return result;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        function initCloneArray(array) {
            var length = array.length, result = array.constructor(length);
            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        function initCloneObject(object) {
            return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, cloneFunc, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
            case arrayBufferTag:
                return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
                return new Ctor(+object);
            case dataViewTag:
                return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
                return cloneTypedArray(object, isDeep);
            case mapTag:
                return cloneMap(object, isDeep, cloneFunc);
            case numberTag:
            case stringTag:
                return new Ctor(object);
            case regexpTag:
                return cloneRegExp(object);
            case setTag:
                return cloneSet(object, isDeep, cloneFunc);
            case symbolTag:
                return cloneSymbol(object);
            }
        }
        function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
                return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
            details = details.join(length > 2 ? ', ' : ' ');
            return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }
        function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (typeof value == 'number' || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
                return false;
            }
            var type = typeof index;
            if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
                return eq(object[index], value);
            }
            return false;
        }
        function isKey(value, object) {
            if (isArray(value)) {
                return false;
            }
            var type = typeof value;
            if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
                return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
        }
        function isKeyable(value) {
            var type = typeof value;
            return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
        }
        function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                return false;
            }
            if (func === other) {
                return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
        }
        function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction : stubFalse;
        function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
            return value === proto;
        }
        function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
            return function (object) {
                if (object == null) {
                    return false;
                }
                return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
            };
        }
        function memoizeCapped(func) {
            var result = memoize(func, function (key) {
                if (cache.size === MAX_MEMOIZE_SIZE) {
                    cache.clear();
                }
                return key;
            });
            var cache = result.cache;
            return result;
        }
        function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
                return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
                data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
                data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
                data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        function nativeKeysIn(object) {
            var result = [];
            if (object != null) {
                for (var key in Object(object)) {
                    result.push(key);
                }
            }
            return result;
        }
        function objectToString(value) {
            return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function () {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                while (++index < length) {
                    array[index] = args[start + index];
                }
                index = -1;
                var otherArgs = Array(start + 1);
                while (++index < start) {
                    otherArgs[index] = args[index];
                }
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        var setData = shortOut(baseSetData);
        var setTimeout = ctxSetTimeout || function (func, wait) {
            return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + '';
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function () {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) {
                        return arguments[0];
                    }
                } else {
                    count = 0;
                }
                return func.apply(undefined, arguments);
            };
        }
        function shuffleSelf(array, size) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size = size === undefined ? length : size;
            while (++index < size) {
                var rand = baseRandom(index, lastIndex), value = array[rand];
                array[rand] = array[index];
                array[index] = value;
            }
            array.length = size;
            return array;
        }
        var stringToPath = memoizeCapped(function (string) {
            var result = [];
            if (reLeadingDot.test(string)) {
                result.push('');
            }
            string.replace(rePropName, function (match, number, quote, string) {
                result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
            });
            return result;
        });
        function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) {
                return value;
            }
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {
                }
                try {
                    return func + '';
                } catch (e) {
                }
            }
            return '';
        }
        function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function (pair) {
                var value = '_.' + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                    details.push(value);
                }
            });
            return details.sort();
        }
        function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
                return wrapper.clone();
            }
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
        }
        function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
                size = 1;
            } else {
                size = nativeMax(toInteger(size), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size < 1) {
                return [];
            }
            var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
            while (index < length) {
                result[resIndex++] = baseSlice(array, index, index += size);
            }
            return result;
        }
        function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (value) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }
        function concat() {
            var length = arguments.length;
            if (!length) {
                return [];
            }
            var args = Array(length - 1), array = arguments[0], index = length;
            while (index--) {
                args[index - 1] = arguments[index];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function (array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function (array, values) {
            var iteratee = last(values);
            if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
        });
        var differenceWith = baseRest(function (array, values) {
            var comparator = last(values);
            if (isArrayLikeObject(comparator)) {
                comparator = undefined;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
        });
        function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
                index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
            while (++index < length) {
                var pair = pairs[index];
                result[pair[0]] = pair[1];
            }
            return result;
        }
        function head(array) {
            return array && array.length ? array[0] : undefined;
        }
        function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
                index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value, index);
        }
        function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function (arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function (arrays) {
            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee === last(mapped)) {
                iteratee = undefined;
            } else {
                mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
        });
        var intersectionWith = baseRest(function (arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            if (comparator) {
                mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        function join(array, separator) {
            return array == null ? '' : nativeJoin.call(array, separator);
        }
        function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }
        function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return -1;
            }
            var index = length;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
        }
        function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
        }
        function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
        }
        var pullAt = flatRest(function (array, indexes) {
            var length = array == null ? 0 : array.length, result = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function (index) {
                return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result;
        });
        function remove(array, predicate) {
            var result = [];
            if (!(array && array.length)) {
                return result;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        }
        function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }
        function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) {
                    return index;
                }
            }
            return -1;
        }
        function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }
        function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) {
                    return index;
                }
            }
            return -1;
        }
        function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
        }
        function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
            if (!(array && array.length)) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function (arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function (arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });
        var unionWith = baseRest(function (arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
        function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }
        function uniqWith(array, comparator) {
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
        }
        function unzip(array) {
            if (!(array && array.length)) {
                return [];
            }
            var length = 0;
            array = arrayFilter(array, function (group) {
                if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return true;
                }
            });
            return baseTimes(length, function (index) {
                return arrayMap(array, baseProperty(index));
            });
        }
        function unzipWith(array, iteratee) {
            if (!(array && array.length)) {
                return [];
            }
            var result = unzip(array);
            if (iteratee == null) {
                return result;
            }
            return arrayMap(result, function (group) {
                return apply(iteratee, undefined, group);
            });
        }
        var without = baseRest(function (array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        });
        var xor = baseRest(function (arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function (arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });
        var xorWith = baseRest(function (arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        }
        function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
        }
        var zipWith = baseRest(function (arrays) {
            var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
            iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
        });
        function chain(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
        }
        function tap(value, interceptor) {
            interceptor(value);
            return value;
        }
        function thru(value, interceptor) {
            return interceptor(value);
        }
        var wrapperAt = flatRest(function (paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function (object) {
                    return baseAt(object, paths);
                };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
                return this.thru(interceptor);
            }
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
                'func': thru,
                'args': [interceptor],
                'thisArg': undefined
            });
            return new LodashWrapper(value, this.__chain__).thru(function (array) {
                if (length && !array.length) {
                    array.push(undefined);
                }
                return array;
            });
        });
        function wrapperChain() {
            return chain(this);
        }
        function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
            if (this.__values__ === undefined) {
                this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
            return {
                'done': done,
                'value': value
            };
        }
        function wrapperToIterator() {
            return this;
        }
        function wrapperPlant(value) {
            var result, parent = this;
            while (parent instanceof baseLodash) {
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) {
                    previous.__wrapped__ = clone;
                } else {
                    result = clone;
                }
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        }
        function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) {
                    wrapped = new LazyWrapper(this);
                }
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                    'func': thru,
                    'args': [reverse],
                    'thisArg': undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
        }
        function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
                ++result[key];
            } else {
                baseAssignValue(result, key, 1);
            }
        });
        function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
            }
            return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1);
        }
        function flatMapDeep(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), INFINITY);
        }
        function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee), depth);
        }
        function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee, 3));
        }
        function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee, 3));
        }
        var groupBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
                result[key].push(value);
            } else {
                baseAssignValue(result, key, [value]);
            }
        });
        function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
                fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function (collection, path, args) {
            var index = -1, isFunc = typeof path == 'function', result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function (value) {
                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result;
        });
        var keyBy = createAggregator(function (result, value, key) {
            baseAssignValue(result, key, value);
        });
        function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
                return [];
            }
            if (!isArray(iteratees)) {
                iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined : orders;
            if (!isArray(orders)) {
                orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function (result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function () {
            return [
                [],
                []
            ];
        });
        function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
        }
        function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
                n = 1;
            } else {
                n = toInteger(n);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
        }
        function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
        }
        function size(collection) {
            if (collection == null) {
                return 0;
            }
            if (isArrayLike(collection)) {
                return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
                return collection.size;
            }
            return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
            }
            return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function (collection, iteratees) {
            if (collection == null) {
                return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function () {
            return root.Date.now();
        };
        function after(n, func) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function () {
                if (--n < 1) {
                    return func.apply(this, arguments);
                }
            };
        }
        function ary(func, n, guard) {
            n = guard ? undefined : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        function before(n, func) {
            var result;
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function () {
                if (--n > 0) {
                    result = func.apply(this, arguments);
                }
                if (n <= 1) {
                    func = undefined;
                }
                return result;
            };
        }
        var bind = baseRest(function (func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function (object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curry.placeholder;
            return result;
        }
        function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryRight.placeholder;
            return result;
        }
        function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxing = 'maxWait' in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }
            function leadingEdge(time) {
                lastInvokeTime = time;
                timerId = setTimeout(timerExpired, wait);
                return leading ? invokeFunc(time) : result;
            }
            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result = wait - timeSinceLastCall;
                return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
            }
            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                    return trailingEdge(time);
                }
                timerId = setTimeout(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
                timerId = undefined;
                if (trailing && lastArgs) {
                    return invokeFunc(time);
                }
                lastArgs = lastThis = undefined;
                return result;
            }
            function cancel() {
                if (timerId !== undefined) {
                    clearTimeout(timerId);
                }
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            }
            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }
            function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                    if (timerId === undefined) {
                        return leadingEdge(lastCallTime);
                    }
                    if (maxing) {
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                if (timerId === undefined) {
                    timerId = setTimeout(timerExpired, wait);
                }
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }
        var defer = baseRest(function (func, args) {
            return baseDelay(func, 1, args);
        });
        var delay = baseRest(function (func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
            if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function () {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) {
                    return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
            if (typeof predicate != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return function () {
                var args = arguments;
                switch (args.length) {
                case 0:
                    return !predicate.call(this);
                case 1:
                    return !predicate.call(this, args[0]);
                case 2:
                    return !predicate.call(this, args[0], args[1]);
                case 3:
                    return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
            };
        }
        function once(func) {
            return before(2, func);
        }
        var overArgs = castRest(function (func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function (args) {
                var index = -1, length = nativeMin(args.length, funcsLength);
                while (++index < length) {
                    args[index] = transforms[index].call(this, args[index]);
                }
                return apply(func, this, args);
            });
        });
        var partial = baseRest(function (func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
        var partialRight = baseRest(function (func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
        var rearg = flatRest(function (func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
        function rest(func, start) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            start = start === undefined ? start : toInteger(start);
            return baseRest(func, start);
        }
        function spread(func, start) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function (args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                if (array) {
                    arrayPush(otherArgs, array);
                }
                return apply(func, this, otherArgs);
            });
        }
        function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
                leading = 'leading' in options ? !!options.leading : leading;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                'leading': leading,
                'maxWait': wait,
                'trailing': trailing
            });
        }
        function unary(func) {
            return ary(func, 1);
        }
        function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
        }
        function castArray() {
            if (!arguments.length) {
                return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
        }
        function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function (value, other) {
            return value >= other;
        });
        var isArguments = baseIsArguments(function () {
            return arguments;
        }()) ? baseIsArguments : function (value) {
            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
        };
        var isArray = Array.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
            if (value == null) {
                return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
                return !value.size;
            }
            if (isPrototype(value)) {
                return !baseKeys(value).length;
            }
            for (var key in value) {
                if (hasOwnProperty.call(value, key)) {
                    return false;
                }
            }
            return true;
        }
        function isEqual(value, other) {
            return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
        function isError(value) {
            if (!isObjectLike(value)) {
                return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
        }
        function isFinite(value) {
            return typeof value == 'number' && nativeIsFinite(value);
        }
        function isFunction(value) {
            if (!isObject(value)) {
                return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        function isInteger(value) {
            return typeof value == 'number' && value == toInteger(value);
        }
        function isLength(value) {
            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
            var type = typeof value;
            return value != null && (type == 'object' || type == 'function');
        }
        function isObjectLike(value) {
            return value != null && typeof value == 'object';
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN(value) {
            return isNumber(value) && value != +value;
        }
        function isNative(value) {
            if (isMaskable(value)) {
                throw new Error(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
        }
        function isNull(value) {
            return value === null;
        }
        function isNil(value) {
            return value == null;
        }
        function isNumber(value) {
            return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
                return true;
            }
            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
            return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
            return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
            return value === undefined;
        }
        function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function (value, other) {
            return value <= other;
        });
        function toArray(value) {
            if (!value) {
                return [];
            }
            if (isArrayLike(value)) {
                return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
                return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
        }
        function toFinite(value) {
            if (!value) {
                return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }
        function toInteger(value) {
            var result = toFinite(value), remainder = result % 1;
            return result === result ? remainder ? result - remainder : result : 0;
        }
        function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
            if (typeof value == 'number') {
                return value;
            }
            if (isSymbol(value)) {
                return NAN;
            }
            if (isObject(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject(other) ? other + '' : other;
            }
            if (typeof value != 'string') {
                return value === 0 ? value : +value;
            }
            value = value.replace(reTrim, '');
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
            return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
        }
        function toString(value) {
            return value == null ? '' : baseToString(value);
        }
        var assign = createAssigner(function (object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
            }
            for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                    assignValue(object, key, source[key]);
                }
            }
        });
        var assignIn = createAssigner(function (object, source) {
            copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties == null ? result : baseAssign(result, properties);
        }
        var defaults = baseRest(function (args) {
            args.push(undefined, customDefaultsAssignIn);
            return apply(assignInWith, undefined, args);
        });
        var defaultsDeep = baseRest(function (args) {
            args.push(undefined, customDefaultsMerge);
            return apply(mergeWith, undefined, args);
        });
        function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }
        function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }
        function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3));
        }
        function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }
        function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function (result, value, key) {
            result[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function (result, value, key) {
            if (hasOwnProperty.call(result, value)) {
                result[value].push(key);
            } else {
                result[value] = [key];
            }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
            });
            return result;
        }
        function mapValues(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function (value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
        }
        var merge = createAssigner(function (object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function (object, paths) {
            var result = {};
            if (object == null) {
                return result;
            }
            var isDeep = false;
            paths = arrayMap(paths, function (path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
            });
            copyObject(object, getAllKeysIn(object), result);
            if (isDeep) {
                result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
                baseUnset(result, paths[length]);
            }
            return result;
        });
        function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function (object, paths) {
            return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
            if (object == null) {
                return {};
            }
            var props = arrayMap(getAllKeysIn(object), function (prop) {
                return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function (value, path) {
                return predicate(value, path[0]);
            });
        }
        function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            if (!length) {
                length = 1;
                object = undefined;
            }
            while (++index < length) {
                var value = object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                    index = length;
                    value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
            }
            return object;
        }
        function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee = getIteratee(iteratee, 4);
            if (accumulator == null) {
                var Ctor = object && object.constructor;
                if (isArrLike) {
                    accumulator = isArr ? new Ctor() : [];
                } else if (isObject(object)) {
                    accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                } else {
                    accumulator = {};
                }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
            if (upper === undefined) {
                upper = lower;
                lower = undefined;
            }
            if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined) {
                end = start;
                start = 0;
            } else {
                end = toFinite(end);
            }
            number = toNumber(number);
            return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
            if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                upper = floating = undefined;
            }
            if (floating === undefined) {
                if (typeof upper == 'boolean') {
                    floating = upper;
                    upper = undefined;
                } else if (typeof lower == 'boolean') {
                    floating = lower;
                    lower = undefined;
                }
            }
            if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
            } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                } else {
                    upper = toFinite(upper);
                }
            }
            if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
            }
            return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function (result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
        }
        function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
        }
        function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
        }
        var kebabCase = createCompounder(function (result, word, index) {
            return result + (index ? '-' : '') + word.toLowerCase();
        });
        var lowerCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst('toLowerCase');
        function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
                return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt(string, radix, guard) {
            if (guard || radix == null) {
                radix = 0;
            } else if (radix) {
                radix = +radix;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
        }
        function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
                n = 1;
            } else {
                n = toInteger(n);
            }
            return baseRepeat(toString(string), n);
        }
        function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function (result, word, index) {
            return result + (index ? '_' : '') + word.toLowerCase();
        });
        function split(string, separator, limit) {
            if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                separator = limit = undefined;
            }
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
                return [];
            }
            string = toString(string);
            if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) {
                    return castSlice(stringToArray(string), 0, limit);
                }
            }
            return string.split(separator, limit);
        }
        var startCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + upperFirst(word);
        });
        function startsWith(string, target, position) {
            string = toString(string);
            position = baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
                options = undefined;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = '__p += \'';
            var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
            var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
            string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                if (escapeValue) {
                    isEscaping = true;
                    source += '\' +\n__e(' + escapeValue + ') +\n\'';
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += '\';\n' + evaluateValue + ';\n__p += \'';
                }
                if (interpolateValue) {
                    source += '\' +\n((__t = (' + interpolateValue + ')) == null ? \'\' : __t) +\n\'';
                }
                index = offset + match.length;
                return match;
            });
            source += '\';\n';
            var variable = options.variable;
            if (!variable) {
                source = 'with (obj) {\n' + source + '\n}\n';
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
            source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + 'var __t, __p = \'\'' + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + 'function print() { __p += __j.call(arguments, \'\') }\n' : ';\n') + source + 'return __p\n}';
            var result = attempt(function () {
                return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
            });
            result.source = source;
            if (isError(result)) {
                throw result;
            }
            return result;
        }
        function toLower(value) {
            return toString(value).toLowerCase();
        }
        function toUpper(value) {
            return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) {
                return string.replace(reTrim, '');
            }
            if (!string || !(chars = baseToString(chars))) {
                return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join('');
        }
        function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) {
                return string.replace(reTrimEnd, '');
            }
            if (!string || !(chars = baseToString(chars))) {
                return string;
            }
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join('');
        }
        function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) {
                return string.replace(reTrimStart, '');
            }
            if (!string || !(chars = baseToString(chars))) {
                return string;
            }
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join('');
        }
        function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
                var separator = 'separator' in options ? options.separator : separator;
                length = 'length' in options ? toInteger(options.length) : length;
                omission = 'omission' in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
            }
            if (length >= strLength) {
                return string;
            }
            var end = length - stringSize(omission);
            if (end < 1) {
                return omission;
            }
            var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);
            if (separator === undefined) {
                return result + omission;
            }
            if (strSymbols) {
                end += result.length - end;
            }
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, substring = result;
                    if (!separator.global) {
                        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                    }
                    separator.lastIndex = 0;
                    while (match = separator.exec(substring)) {
                        var newEnd = match.index;
                    }
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
            } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) {
                    result = result.slice(0, index);
                }
            }
            return result + omission;
        }
        function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + word.toUpperCase();
        });
        var upperFirst = createCaseFirst('toUpperCase');
        function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined : pattern;
            if (pattern === undefined) {
                return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
        }
        var attempt = baseRest(function (func, args) {
            try {
                return apply(func, undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        });
        var bindAll = flatRest(function (object, methodNames) {
            arrayEach(methodNames, function (key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
        });
        function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function (pair) {
                if (typeof pair[1] != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                return [
                    toIteratee(pair[0]),
                    pair[1]
                ];
            });
            return baseRest(function (args) {
                var index = -1;
                while (++index < length) {
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) {
                        return apply(pair[1], this, args);
                    }
                }
            });
        }
        function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
            return function () {
                return value;
            };
        }
        function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
            return value;
        }
        function iteratee(func) {
            return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function (path, args) {
            return function (object) {
                return baseInvoke(object, path, args);
            };
        });
        var methodOf = baseRest(function (object, args) {
            return function (path) {
                return baseInvoke(object, path, args);
            };
        });
        function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = !(isObject(options) && 'chain' in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function (methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) {
                    object.prototype[methodName] = function () {
                        var chainAll = this.__chain__;
                        if (chain || chainAll) {
                            var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                            actions.push({
                                'func': func,
                                'args': arguments,
                                'thisArg': object
                            });
                            result.__chain__ = chainAll;
                            return result;
                        }
                        return func.apply(object, arrayPush([this.value()], arguments));
                    };
                }
            });
            return object;
        }
        function noConflict() {
            if (root._ === this) {
                root._ = oldDash;
            }
            return this;
        }
        function noop() {
        }
        function nthArg(n) {
            n = toInteger(n);
            return baseRest(function (args) {
                return baseNth(args, n);
            });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
            return function (path) {
                return object == null ? undefined : baseGet(object, path);
            };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
            return [];
        }
        function stubFalse() {
            return false;
        }
        function stubObject() {
            return {};
        }
        function stubString() {
            return '';
        }
        function stubTrue() {
            return true;
        }
        function times(n, iteratee) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) {
                return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee = getIteratee(iteratee);
            n -= MAX_ARRAY_LENGTH;
            var result = baseTimes(length, iteratee);
            while (++index < n) {
                iteratee(index);
            }
            return result;
        }
        function toPath(value) {
            if (isArray(value)) {
                return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        }
        var add = createMathOperation(function (augend, addend) {
            return augend + addend;
        }, 0);
        var ceil = createRound('ceil');
        var divide = createMathOperation(function (dividend, divisor) {
            return dividend / divisor;
        }, 1);
        var floor = createRound('floor');
        function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        }
        function maxBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
        }
        function mean(array) {
            return baseMean(array, identity);
        }
        function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2));
        }
        function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        }
        function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
        }
        var multiply = createMathOperation(function (multiplier, multiplicand) {
            return multiplier * multiplicand;
        }, 1);
        var round = createRound('round');
        var subtract = createMathOperation(function (minuend, subtrahend) {
            return minuend - subtrahend;
        }, 0);
        function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function () {
            var source = {};
            baseForOwn(lodash, function (func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                    source[methodName] = func;
                }
            });
            return source;
        }(), { 'chain': false });
        lodash.VERSION = VERSION;
        arrayEach([
            'bind',
            'bindKey',
            'curry',
            'curryRight',
            'partial',
            'partialRight'
        ], function (methodName) {
            lodash[methodName].placeholder = lodash;
        });
        arrayEach([
            'drop',
            'take'
        ], function (methodName, index) {
            LazyWrapper.prototype[methodName] = function (n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                if (result.__filtered__) {
                    result.__takeCount__ = nativeMin(n, result.__takeCount__);
                } else {
                    result.__views__.push({
                        'size': nativeMin(n, MAX_ARRAY_LENGTH),
                        'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                    });
                }
                return result;
            };
            LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        arrayEach([
            'filter',
            'map',
            'takeWhile'
        ], function (methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function (iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                    'iteratee': getIteratee(iteratee, 3),
                    'type': type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        arrayEach([
            'head',
            'last'
        ], function (methodName, index) {
            var takeName = 'take' + (index ? 'Right' : '');
            LazyWrapper.prototype[methodName] = function () {
                return this[takeName](1).value()[0];
            };
        });
        arrayEach([
            'initial',
            'tail'
        ], function (methodName, index) {
            var dropName = 'drop' + (index ? '' : 'Right');
            LazyWrapper.prototype[methodName] = function () {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        LazyWrapper.prototype.compact = function () {
            return this.filter(identity);
        };
        LazyWrapper.prototype.find = function (predicate) {
            return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function (predicate) {
            return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
            if (typeof path == 'function') {
                return new LazyWrapper(this);
            }
            return this.map(function (value) {
                return baseInvoke(value, path, args);
            });
        });
        LazyWrapper.prototype.reject = function (predicate) {
            return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function (start, end) {
            start = toInteger(start);
            var result = this;
            if (result.__filtered__ && (start > 0 || end < 0)) {
                return new LazyWrapper(result);
            }
            if (start < 0) {
                result = result.takeRight(-start);
            } else if (start) {
                result = result.drop(start);
            }
            if (end !== undefined) {
                end = toInteger(end);
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function (predicate) {
            return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function () {
            return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
                return;
            }
            lodash.prototype[methodName] = function () {
                var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value);
                var interceptor = function (value) {
                    var result = lodashFunc.apply(lodash, arrayPush([value], args));
                    return isTaker && chainAll ? result[0] : result;
                };
                if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                    isLazy = useLazy = false;
                }
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                    value = onlyLazy ? value : new LazyWrapper(this);
                    var result = func.apply(value, args);
                    result.__actions__.push({
                        'func': thru,
                        'args': [interceptor],
                        'thisArg': undefined
                    });
                    return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) {
                    return func.apply(this, args);
                }
                result = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
            };
        });
        arrayEach([
            'pop',
            'push',
            'shift',
            'sort',
            'splice',
            'unshift'
        ], function (methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function () {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function (value) {
                    return func.apply(isArray(value) ? value : [], args);
                });
            };
        });
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name + '', names = realNames[key] || (realNames[key] = []);
                names.push({
                    'name': methodName,
                    'func': lodashFunc
                });
            }
        });
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
                'name': 'wrapper',
                'func': undefined
            }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
        }
        return lodash;
    };
    var _ = runInContext();
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        root._ = _;
        define('lodash/lodash', [], function () {
            return _;
        });
    } else if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
    } else {
        root._ = _;
    }
}.call(this));

(function (t, e) {
    'object' == typeof exports && 'object' == typeof module ? module.exports = e() : 'function' == typeof define && define.amd ? define('fp/lodash.fp.min', [], e) : 'object' == typeof exports ? exports.fp = e() : t.fp = e();
}(this, function () {
    return function (t) {
        function e(n) {
            if (r[n])
                return r[n].exports;
            var i = r[n] = {
                exports: {},
                id: n,
                loaded: !1
            };
            return t[n].call(i.exports, i, i.exports, e), i.loaded = !0, i.exports;
        }
        var r = {};
        return e.m = t, e.c = r, e.p = '', e(0);
    }([
        function (t, e, r) {
            function n(t, e) {
                return i(t, t, e);
            }
            var i = r(1);
            'function' == typeof _ && 'function' == typeof _.runInContext && (_ = n(_.runInContext())), t.exports = n;
        },
        function (t, e, r) {
            function n(t, e) {
                return 2 == e ? function (e, r) {
                    return t.apply(void 0, arguments);
                } : function (e) {
                    return t.apply(void 0, arguments);
                };
            }
            function i(t, e) {
                return 2 == e ? function (e, r) {
                    return t(e, r);
                } : function (e) {
                    return t(e);
                };
            }
            function a(t) {
                for (var e = t ? t.length : 0, r = Array(e); e--;)
                    r[e] = t[e];
                return r;
            }
            function o(t) {
                return function (e) {
                    return t({}, e);
                };
            }
            function s(t, e) {
                return function () {
                    for (var r = arguments.length, n = r - 1, i = Array(r); r--;)
                        i[r] = arguments[r];
                    var a = i[e], o = i.slice(0, e);
                    return a && d.apply(o, a), e != n && d.apply(o, i.slice(e + 1)), t.apply(this, o);
                };
            }
            function l(t, e) {
                return function () {
                    var r = arguments.length;
                    if (r) {
                        for (var n = Array(r); r--;)
                            n[r] = arguments[r];
                        var i = n[0] = e.apply(void 0, n);
                        return t.apply(void 0, n), i;
                    }
                };
            }
            function u(t, e, r, d) {
                function c(t, e) {
                    if (B.cap) {
                        var r = p.iterateeRearg[t];
                        if (r)
                            return x(e, r);
                        var n = !b && p.iterateeAry[t];
                        if (n)
                            return W(e, n);
                    }
                    return e;
                }
                function h(t, e, r) {
                    return E || B.curry && r > 1 ? z(e, r) : e;
                }
                function g(t, e, r) {
                    if (B.fixed && (F || !p.skipFixed[t])) {
                        var n = p.methodSpread[t], i = n && n.start;
                        return void 0 === i ? w(e, r) : s(e, i);
                    }
                    return e;
                }
                function y(t, e, r) {
                    return B.rearg && r > 1 && (j || !p.skipRearg[t]) ? _(e, p.methodRearg[t] || p.aryRearg[r]) : e;
                }
                function m(t, e) {
                    e = V(e);
                    for (var r = -1, n = e.length, i = n - 1, a = D(Object(t)), o = a; null != o && ++r < n;) {
                        var s = e[r], l = o[s];
                        null != l && (o[e[r]] = D(r == i ? l : Object(l))), o = o[s];
                    }
                    return a;
                }
                function v(t) {
                    return H.runInContext.convert(t)(void 0);
                }
                function A(t, e) {
                    var r = p.aliasToReal[t] || t, n = p.remap[r] || r, i = d;
                    return function (t) {
                        return u(b ? L : S, r, b ? L[n] : e, M(M({}, i), t));
                    };
                }
                function W(t, e) {
                    return I(t, function (t) {
                        return 'function' == typeof t ? i(t, e) : t;
                    });
                }
                function x(t, e) {
                    return I(t, function (t) {
                        var r = e.length;
                        return n(_(i(t, r), e), r);
                    });
                }
                function I(t, e) {
                    return function () {
                        var r = arguments.length;
                        if (!r)
                            return t();
                        for (var n = Array(r); r--;)
                            n[r] = arguments[r];
                        var i = B.rearg ? 0 : r - 1;
                        return n[i] = e(n[i]), t.apply(void 0, n);
                    };
                }
                function R(t, e) {
                    var r, n = p.aliasToReal[t] || t, i = e, s = G[n];
                    return s ? i = s(e) : B.immutable && (p.mutate.array[n] ? i = l(e, a) : p.mutate.object[n] ? i = l(e, o(e)) : p.mutate.set[n] && (i = l(e, m))), q(U, function (t) {
                        return q(p.aryMethod[t], function (e) {
                            if (n == e) {
                                var a = p.methodSpread[n];
                                return r = a && a.afterRearg ? g(n, y(n, i, t), t) : y(n, g(n, i, t), t), r = c(n, r), r = h(n, r, t), !1;
                            }
                        }), !r;
                    }), r || (r = i), r == e && (r = E ? z(r, 1) : function () {
                        return e.apply(this, arguments);
                    }), r.convert = A(n, e), p.placeholder[n] && (O = !0, r.placeholder = e.placeholder = C), r;
                }
                var O, b = 'function' == typeof e, k = e === Object(e);
                if (k && (d = r, r = e, e = void 0), null == r)
                    throw new TypeError();
                d || (d = {});
                var B = {
                        cap: !('cap' in d) || d.cap,
                        curry: !('curry' in d) || d.curry,
                        fixed: !('fixed' in d) || d.fixed,
                        immutable: !('immutable' in d) || d.immutable,
                        rearg: !('rearg' in d) || d.rearg
                    }, E = 'curry' in d && d.curry, F = 'fixed' in d && d.fixed, j = 'rearg' in d && d.rearg, C = b ? r : f, L = b ? r.runInContext() : void 0, S = b ? r : {
                        ary: t.ary,
                        assign: t.assign,
                        clone: t.clone,
                        curry: t.curry,
                        forEach: t.forEach,
                        isArray: t.isArray,
                        isFunction: t.isFunction,
                        iteratee: t.iteratee,
                        keys: t.keys,
                        rearg: t.rearg,
                        toInteger: t.toInteger,
                        toPath: t.toPath
                    }, w = S.ary, M = S.assign, D = S.clone, z = S.curry, q = S.forEach, P = S.isArray, T = S.isFunction, K = S.keys, _ = S.rearg, N = S.toInteger, V = S.toPath, U = K(p.aryMethod), G = {
                        castArray: function (t) {
                            return function () {
                                var e = arguments[0];
                                return P(e) ? t(a(e)) : t.apply(void 0, arguments);
                            };
                        },
                        iteratee: function (t) {
                            return function () {
                                var e = arguments[0], r = arguments[1], n = t(e, r), a = n.length;
                                return B.cap && 'number' == typeof r ? (r = r > 2 ? r - 2 : 1, a && a <= r ? n : i(n, r)) : n;
                            };
                        },
                        mixin: function (t) {
                            return function (e) {
                                var r = this;
                                if (!T(r))
                                    return t(r, Object(e));
                                var n = [];
                                return q(K(e), function (t) {
                                    T(e[t]) && n.push([
                                        t,
                                        r.prototype[t]
                                    ]);
                                }), t(r, Object(e)), q(n, function (t) {
                                    var e = t[1];
                                    T(e) ? r.prototype[t[0]] = e : delete r.prototype[t[0]];
                                }), r;
                            };
                        },
                        nthArg: function (t) {
                            return function (e) {
                                var r = e < 0 ? 1 : N(e) + 1;
                                return z(t(e), r);
                            };
                        },
                        rearg: function (t) {
                            return function (e, r) {
                                var n = r ? r.length : 0;
                                return z(t(e, r), n);
                            };
                        },
                        runInContext: function (e) {
                            return function (r) {
                                return u(t, e(r), d);
                            };
                        }
                    };
                if (!k)
                    return R(e, r);
                var H = r, J = [];
                return q(U, function (t) {
                    q(p.aryMethod[t], function (t) {
                        var e = H[p.remap[t] || t];
                        e && J.push([
                            t,
                            R(t, e)
                        ]);
                    });
                }), q(K(H), function (t) {
                    var e = H[t];
                    if ('function' == typeof e) {
                        for (var r = J.length; r--;)
                            if (J[r][0] == t)
                                return;
                        e.convert = A(t, e), J.push([
                            t,
                            e
                        ]);
                    }
                }), q(J, function (t) {
                    H[t[0]] = t[1];
                }), H.convert = v, O && (H.placeholder = C), q(K(H), function (t) {
                    q(p.realToAlias[t] || [], function (e) {
                        H[e] = H[t];
                    });
                }), H;
            }
            var p = r(2), f = r(3), d = Array.prototype.push;
            t.exports = u;
        },
        function (t, e) {
            e.aliasToReal = {
                each: 'forEach',
                eachRight: 'forEachRight',
                entries: 'toPairs',
                entriesIn: 'toPairsIn',
                extend: 'assignIn',
                extendAll: 'assignInAll',
                extendAllWith: 'assignInAllWith',
                extendWith: 'assignInWith',
                first: 'head',
                conforms: 'conformsTo',
                matches: 'isMatch',
                property: 'get',
                __: 'placeholder',
                F: 'stubFalse',
                T: 'stubTrue',
                all: 'every',
                allPass: 'overEvery',
                always: 'constant',
                any: 'some',
                anyPass: 'overSome',
                apply: 'spread',
                assoc: 'set',
                assocPath: 'set',
                complement: 'negate',
                compose: 'flowRight',
                contains: 'includes',
                dissoc: 'unset',
                dissocPath: 'unset',
                dropLast: 'dropRight',
                dropLastWhile: 'dropRightWhile',
                equals: 'isEqual',
                identical: 'eq',
                indexBy: 'keyBy',
                init: 'initial',
                invertObj: 'invert',
                juxt: 'over',
                omitAll: 'omit',
                nAry: 'ary',
                path: 'get',
                pathEq: 'matchesProperty',
                pathOr: 'getOr',
                paths: 'at',
                pickAll: 'pick',
                pipe: 'flow',
                pluck: 'map',
                prop: 'get',
                propEq: 'matchesProperty',
                propOr: 'getOr',
                props: 'at',
                symmetricDifference: 'xor',
                symmetricDifferenceBy: 'xorBy',
                symmetricDifferenceWith: 'xorWith',
                takeLast: 'takeRight',
                takeLastWhile: 'takeRightWhile',
                unapply: 'rest',
                unnest: 'flatten',
                useWith: 'overArgs',
                where: 'conformsTo',
                whereEq: 'isMatch',
                zipObj: 'zipObject'
            }, e.aryMethod = {
                1: [
                    'assignAll',
                    'assignInAll',
                    'attempt',
                    'castArray',
                    'ceil',
                    'create',
                    'curry',
                    'curryRight',
                    'defaultsAll',
                    'defaultsDeepAll',
                    'floor',
                    'flow',
                    'flowRight',
                    'fromPairs',
                    'invert',
                    'iteratee',
                    'memoize',
                    'method',
                    'mergeAll',
                    'methodOf',
                    'mixin',
                    'nthArg',
                    'over',
                    'overEvery',
                    'overSome',
                    'rest',
                    'reverse',
                    'round',
                    'runInContext',
                    'spread',
                    'template',
                    'trim',
                    'trimEnd',
                    'trimStart',
                    'uniqueId',
                    'words',
                    'zipAll'
                ],
                2: [
                    'add',
                    'after',
                    'ary',
                    'assign',
                    'assignAllWith',
                    'assignIn',
                    'assignInAllWith',
                    'at',
                    'before',
                    'bind',
                    'bindAll',
                    'bindKey',
                    'chunk',
                    'cloneDeepWith',
                    'cloneWith',
                    'concat',
                    'conformsTo',
                    'countBy',
                    'curryN',
                    'curryRightN',
                    'debounce',
                    'defaults',
                    'defaultsDeep',
                    'defaultTo',
                    'delay',
                    'difference',
                    'divide',
                    'drop',
                    'dropRight',
                    'dropRightWhile',
                    'dropWhile',
                    'endsWith',
                    'eq',
                    'every',
                    'filter',
                    'find',
                    'findIndex',
                    'findKey',
                    'findLast',
                    'findLastIndex',
                    'findLastKey',
                    'flatMap',
                    'flatMapDeep',
                    'flattenDepth',
                    'forEach',
                    'forEachRight',
                    'forIn',
                    'forInRight',
                    'forOwn',
                    'forOwnRight',
                    'get',
                    'groupBy',
                    'gt',
                    'gte',
                    'has',
                    'hasIn',
                    'includes',
                    'indexOf',
                    'intersection',
                    'invertBy',
                    'invoke',
                    'invokeMap',
                    'isEqual',
                    'isMatch',
                    'join',
                    'keyBy',
                    'lastIndexOf',
                    'lt',
                    'lte',
                    'map',
                    'mapKeys',
                    'mapValues',
                    'matchesProperty',
                    'maxBy',
                    'meanBy',
                    'merge',
                    'mergeAllWith',
                    'minBy',
                    'multiply',
                    'nth',
                    'omit',
                    'omitBy',
                    'overArgs',
                    'pad',
                    'padEnd',
                    'padStart',
                    'parseInt',
                    'partial',
                    'partialRight',
                    'partition',
                    'pick',
                    'pickBy',
                    'propertyOf',
                    'pull',
                    'pullAll',
                    'pullAt',
                    'random',
                    'range',
                    'rangeRight',
                    'rearg',
                    'reject',
                    'remove',
                    'repeat',
                    'restFrom',
                    'result',
                    'sampleSize',
                    'some',
                    'sortBy',
                    'sortedIndex',
                    'sortedIndexOf',
                    'sortedLastIndex',
                    'sortedLastIndexOf',
                    'sortedUniqBy',
                    'split',
                    'spreadFrom',
                    'startsWith',
                    'subtract',
                    'sumBy',
                    'take',
                    'takeRight',
                    'takeRightWhile',
                    'takeWhile',
                    'tap',
                    'throttle',
                    'thru',
                    'times',
                    'trimChars',
                    'trimCharsEnd',
                    'trimCharsStart',
                    'truncate',
                    'union',
                    'uniqBy',
                    'uniqWith',
                    'unset',
                    'unzipWith',
                    'without',
                    'wrap',
                    'xor',
                    'zip',
                    'zipObject',
                    'zipObjectDeep'
                ],
                3: [
                    'assignInWith',
                    'assignWith',
                    'clamp',
                    'differenceBy',
                    'differenceWith',
                    'findFrom',
                    'findIndexFrom',
                    'findLastFrom',
                    'findLastIndexFrom',
                    'getOr',
                    'includesFrom',
                    'indexOfFrom',
                    'inRange',
                    'intersectionBy',
                    'intersectionWith',
                    'invokeArgs',
                    'invokeArgsMap',
                    'isEqualWith',
                    'isMatchWith',
                    'flatMapDepth',
                    'lastIndexOfFrom',
                    'mergeWith',
                    'orderBy',
                    'padChars',
                    'padCharsEnd',
                    'padCharsStart',
                    'pullAllBy',
                    'pullAllWith',
                    'rangeStep',
                    'rangeStepRight',
                    'reduce',
                    'reduceRight',
                    'replace',
                    'set',
                    'slice',
                    'sortedIndexBy',
                    'sortedLastIndexBy',
                    'transform',
                    'unionBy',
                    'unionWith',
                    'update',
                    'xorBy',
                    'xorWith',
                    'zipWith'
                ],
                4: [
                    'fill',
                    'setWith',
                    'updateWith'
                ]
            }, e.aryRearg = {
                2: [
                    1,
                    0
                ],
                3: [
                    2,
                    0,
                    1
                ],
                4: [
                    3,
                    2,
                    0,
                    1
                ]
            }, e.iterateeAry = {
                dropRightWhile: 1,
                dropWhile: 1,
                every: 1,
                filter: 1,
                find: 1,
                findFrom: 1,
                findIndex: 1,
                findIndexFrom: 1,
                findKey: 1,
                findLast: 1,
                findLastFrom: 1,
                findLastIndex: 1,
                findLastIndexFrom: 1,
                findLastKey: 1,
                flatMap: 1,
                flatMapDeep: 1,
                flatMapDepth: 1,
                forEach: 1,
                forEachRight: 1,
                forIn: 1,
                forInRight: 1,
                forOwn: 1,
                forOwnRight: 1,
                map: 1,
                mapKeys: 1,
                mapValues: 1,
                partition: 1,
                reduce: 2,
                reduceRight: 2,
                reject: 1,
                remove: 1,
                some: 1,
                takeRightWhile: 1,
                takeWhile: 1,
                times: 1,
                transform: 2
            }, e.iterateeRearg = {
                mapKeys: [1],
                reduceRight: [
                    1,
                    0
                ]
            }, e.methodRearg = {
                assignInAllWith: [
                    1,
                    0
                ],
                assignInWith: [
                    1,
                    2,
                    0
                ],
                assignAllWith: [
                    1,
                    0
                ],
                assignWith: [
                    1,
                    2,
                    0
                ],
                differenceBy: [
                    1,
                    2,
                    0
                ],
                differenceWith: [
                    1,
                    2,
                    0
                ],
                getOr: [
                    2,
                    1,
                    0
                ],
                intersectionBy: [
                    1,
                    2,
                    0
                ],
                intersectionWith: [
                    1,
                    2,
                    0
                ],
                isEqualWith: [
                    1,
                    2,
                    0
                ],
                isMatchWith: [
                    2,
                    1,
                    0
                ],
                mergeAllWith: [
                    1,
                    0
                ],
                mergeWith: [
                    1,
                    2,
                    0
                ],
                padChars: [
                    2,
                    1,
                    0
                ],
                padCharsEnd: [
                    2,
                    1,
                    0
                ],
                padCharsStart: [
                    2,
                    1,
                    0
                ],
                pullAllBy: [
                    2,
                    1,
                    0
                ],
                pullAllWith: [
                    2,
                    1,
                    0
                ],
                rangeStep: [
                    1,
                    2,
                    0
                ],
                rangeStepRight: [
                    1,
                    2,
                    0
                ],
                setWith: [
                    3,
                    1,
                    2,
                    0
                ],
                sortedIndexBy: [
                    2,
                    1,
                    0
                ],
                sortedLastIndexBy: [
                    2,
                    1,
                    0
                ],
                unionBy: [
                    1,
                    2,
                    0
                ],
                unionWith: [
                    1,
                    2,
                    0
                ],
                updateWith: [
                    3,
                    1,
                    2,
                    0
                ],
                xorBy: [
                    1,
                    2,
                    0
                ],
                xorWith: [
                    1,
                    2,
                    0
                ],
                zipWith: [
                    1,
                    2,
                    0
                ]
            }, e.methodSpread = {
                assignAll: { start: 0 },
                assignAllWith: { start: 0 },
                assignInAll: { start: 0 },
                assignInAllWith: { start: 0 },
                defaultsAll: { start: 0 },
                defaultsDeepAll: { start: 0 },
                invokeArgs: { start: 2 },
                invokeArgsMap: { start: 2 },
                mergeAll: { start: 0 },
                mergeAllWith: { start: 0 },
                partial: { start: 1 },
                partialRight: { start: 1 },
                without: { start: 1 },
                zipAll: { start: 0 }
            }, e.mutate = {
                array: {
                    fill: !0,
                    pull: !0,
                    pullAll: !0,
                    pullAllBy: !0,
                    pullAllWith: !0,
                    pullAt: !0,
                    remove: !0,
                    reverse: !0
                },
                object: {
                    assign: !0,
                    assignAll: !0,
                    assignAllWith: !0,
                    assignIn: !0,
                    assignInAll: !0,
                    assignInAllWith: !0,
                    assignInWith: !0,
                    assignWith: !0,
                    defaults: !0,
                    defaultsAll: !0,
                    defaultsDeep: !0,
                    defaultsDeepAll: !0,
                    merge: !0,
                    mergeAll: !0,
                    mergeAllWith: !0,
                    mergeWith: !0
                },
                set: {
                    set: !0,
                    setWith: !0,
                    unset: !0,
                    update: !0,
                    updateWith: !0
                }
            }, e.placeholder = {
                bind: !0,
                bindKey: !0,
                curry: !0,
                curryRight: !0,
                partial: !0,
                partialRight: !0
            }, e.realToAlias = function () {
                var t = Object.prototype.hasOwnProperty, r = e.aliasToReal, n = {};
                for (var i in r) {
                    var a = r[i];
                    t.call(n, a) ? n[a].push(i) : n[a] = [i];
                }
                return n;
            }(), e.remap = {
                assignAll: 'assign',
                assignAllWith: 'assignWith',
                assignInAll: 'assignIn',
                assignInAllWith: 'assignInWith',
                curryN: 'curry',
                curryRightN: 'curryRight',
                defaultsAll: 'defaults',
                defaultsDeepAll: 'defaultsDeep',
                findFrom: 'find',
                findIndexFrom: 'findIndex',
                findLastFrom: 'findLast',
                findLastIndexFrom: 'findLastIndex',
                getOr: 'get',
                includesFrom: 'includes',
                indexOfFrom: 'indexOf',
                invokeArgs: 'invoke',
                invokeArgsMap: 'invokeMap',
                lastIndexOfFrom: 'lastIndexOf',
                mergeAll: 'merge',
                mergeAllWith: 'mergeWith',
                padChars: 'pad',
                padCharsEnd: 'padEnd',
                padCharsStart: 'padStart',
                propertyOf: 'get',
                rangeStep: 'range',
                rangeStepRight: 'rangeRight',
                restFrom: 'rest',
                spreadFrom: 'spread',
                trimChars: 'trim',
                trimCharsEnd: 'trimEnd',
                trimCharsStart: 'trimStart',
                zipAll: 'zip'
            }, e.skipFixed = {
                castArray: !0,
                flow: !0,
                flowRight: !0,
                iteratee: !0,
                mixin: !0,
                rearg: !0,
                runInContext: !0
            }, e.skipRearg = {
                add: !0,
                assign: !0,
                assignIn: !0,
                bind: !0,
                bindKey: !0,
                concat: !0,
                difference: !0,
                divide: !0,
                eq: !0,
                gt: !0,
                gte: !0,
                isEqual: !0,
                lt: !0,
                lte: !0,
                matchesProperty: !0,
                merge: !0,
                multiply: !0,
                overArgs: !0,
                partial: !0,
                partialRight: !0,
                propertyOf: !0,
                random: !0,
                range: !0,
                rangeRight: !0,
                subtract: !0,
                zip: !0,
                zipObject: !0,
                zipObjectDeep: !0
            };
        },
        function (t, e) {
            t.exports = {};
        }
    ]);
}));

define('fp', ['fp/lodash.fp.min'], function (main) { return main; });

(function (t, e) {
    'object' == typeof exports && 'object' == typeof module ? module.exports = e() : 'function' == typeof define && define.amd ? define('lodash/lodash.fp.min', [], e) : 'object' == typeof exports ? exports.fp = e() : t.fp = e();
}(this, function () {
    return function (t) {
        function e(n) {
            if (r[n])
                return r[n].exports;
            var i = r[n] = {
                exports: {},
                id: n,
                loaded: !1
            };
            return t[n].call(i.exports, i, i.exports, e), i.loaded = !0, i.exports;
        }
        var r = {};
        return e.m = t, e.c = r, e.p = '', e(0);
    }([
        function (t, e, r) {
            function n(t, e) {
                return i(t, t, e);
            }
            var i = r(1);
            'function' == typeof _ && 'function' == typeof _.runInContext && (_ = n(_.runInContext())), t.exports = n;
        },
        function (t, e, r) {
            function n(t, e) {
                return 2 == e ? function (e, r) {
                    return t.apply(void 0, arguments);
                } : function (e) {
                    return t.apply(void 0, arguments);
                };
            }
            function i(t, e) {
                return 2 == e ? function (e, r) {
                    return t(e, r);
                } : function (e) {
                    return t(e);
                };
            }
            function a(t) {
                for (var e = t ? t.length : 0, r = Array(e); e--;)
                    r[e] = t[e];
                return r;
            }
            function o(t) {
                return function (e) {
                    return t({}, e);
                };
            }
            function s(t, e) {
                return function () {
                    for (var r = arguments.length, n = r - 1, i = Array(r); r--;)
                        i[r] = arguments[r];
                    var a = i[e], o = i.slice(0, e);
                    return a && d.apply(o, a), e != n && d.apply(o, i.slice(e + 1)), t.apply(this, o);
                };
            }
            function l(t, e) {
                return function () {
                    var r = arguments.length;
                    if (r) {
                        for (var n = Array(r); r--;)
                            n[r] = arguments[r];
                        var i = n[0] = e.apply(void 0, n);
                        return t.apply(void 0, n), i;
                    }
                };
            }
            function u(t, e, r, d) {
                function c(t, e) {
                    if (B.cap) {
                        var r = p.iterateeRearg[t];
                        if (r)
                            return x(e, r);
                        var n = !b && p.iterateeAry[t];
                        if (n)
                            return W(e, n);
                    }
                    return e;
                }
                function h(t, e, r) {
                    return E || B.curry && r > 1 ? z(e, r) : e;
                }
                function g(t, e, r) {
                    if (B.fixed && (F || !p.skipFixed[t])) {
                        var n = p.methodSpread[t], i = n && n.start;
                        return void 0 === i ? w(e, r) : s(e, i);
                    }
                    return e;
                }
                function y(t, e, r) {
                    return B.rearg && r > 1 && (j || !p.skipRearg[t]) ? _(e, p.methodRearg[t] || p.aryRearg[r]) : e;
                }
                function m(t, e) {
                    e = V(e);
                    for (var r = -1, n = e.length, i = n - 1, a = D(Object(t)), o = a; null != o && ++r < n;) {
                        var s = e[r], l = o[s];
                        null != l && (o[e[r]] = D(r == i ? l : Object(l))), o = o[s];
                    }
                    return a;
                }
                function v(t) {
                    return H.runInContext.convert(t)(void 0);
                }
                function A(t, e) {
                    var r = p.aliasToReal[t] || t, n = p.remap[r] || r, i = d;
                    return function (t) {
                        return u(b ? L : S, r, b ? L[n] : e, M(M({}, i), t));
                    };
                }
                function W(t, e) {
                    return I(t, function (t) {
                        return 'function' == typeof t ? i(t, e) : t;
                    });
                }
                function x(t, e) {
                    return I(t, function (t) {
                        var r = e.length;
                        return n(_(i(t, r), e), r);
                    });
                }
                function I(t, e) {
                    return function () {
                        var r = arguments.length;
                        if (!r)
                            return t();
                        for (var n = Array(r); r--;)
                            n[r] = arguments[r];
                        var i = B.rearg ? 0 : r - 1;
                        return n[i] = e(n[i]), t.apply(void 0, n);
                    };
                }
                function R(t, e) {
                    var r, n = p.aliasToReal[t] || t, i = e, s = G[n];
                    return s ? i = s(e) : B.immutable && (p.mutate.array[n] ? i = l(e, a) : p.mutate.object[n] ? i = l(e, o(e)) : p.mutate.set[n] && (i = l(e, m))), q(U, function (t) {
                        return q(p.aryMethod[t], function (e) {
                            if (n == e) {
                                var a = p.methodSpread[n];
                                return r = a && a.afterRearg ? g(n, y(n, i, t), t) : y(n, g(n, i, t), t), r = c(n, r), r = h(n, r, t), !1;
                            }
                        }), !r;
                    }), r || (r = i), r == e && (r = E ? z(r, 1) : function () {
                        return e.apply(this, arguments);
                    }), r.convert = A(n, e), p.placeholder[n] && (O = !0, r.placeholder = e.placeholder = C), r;
                }
                var O, b = 'function' == typeof e, k = e === Object(e);
                if (k && (d = r, r = e, e = void 0), null == r)
                    throw new TypeError();
                d || (d = {});
                var B = {
                        cap: !('cap' in d) || d.cap,
                        curry: !('curry' in d) || d.curry,
                        fixed: !('fixed' in d) || d.fixed,
                        immutable: !('immutable' in d) || d.immutable,
                        rearg: !('rearg' in d) || d.rearg
                    }, E = 'curry' in d && d.curry, F = 'fixed' in d && d.fixed, j = 'rearg' in d && d.rearg, C = b ? r : f, L = b ? r.runInContext() : void 0, S = b ? r : {
                        ary: t.ary,
                        assign: t.assign,
                        clone: t.clone,
                        curry: t.curry,
                        forEach: t.forEach,
                        isArray: t.isArray,
                        isFunction: t.isFunction,
                        iteratee: t.iteratee,
                        keys: t.keys,
                        rearg: t.rearg,
                        toInteger: t.toInteger,
                        toPath: t.toPath
                    }, w = S.ary, M = S.assign, D = S.clone, z = S.curry, q = S.forEach, P = S.isArray, T = S.isFunction, K = S.keys, _ = S.rearg, N = S.toInteger, V = S.toPath, U = K(p.aryMethod), G = {
                        castArray: function (t) {
                            return function () {
                                var e = arguments[0];
                                return P(e) ? t(a(e)) : t.apply(void 0, arguments);
                            };
                        },
                        iteratee: function (t) {
                            return function () {
                                var e = arguments[0], r = arguments[1], n = t(e, r), a = n.length;
                                return B.cap && 'number' == typeof r ? (r = r > 2 ? r - 2 : 1, a && a <= r ? n : i(n, r)) : n;
                            };
                        },
                        mixin: function (t) {
                            return function (e) {
                                var r = this;
                                if (!T(r))
                                    return t(r, Object(e));
                                var n = [];
                                return q(K(e), function (t) {
                                    T(e[t]) && n.push([
                                        t,
                                        r.prototype[t]
                                    ]);
                                }), t(r, Object(e)), q(n, function (t) {
                                    var e = t[1];
                                    T(e) ? r.prototype[t[0]] = e : delete r.prototype[t[0]];
                                }), r;
                            };
                        },
                        nthArg: function (t) {
                            return function (e) {
                                var r = e < 0 ? 1 : N(e) + 1;
                                return z(t(e), r);
                            };
                        },
                        rearg: function (t) {
                            return function (e, r) {
                                var n = r ? r.length : 0;
                                return z(t(e, r), n);
                            };
                        },
                        runInContext: function (e) {
                            return function (r) {
                                return u(t, e(r), d);
                            };
                        }
                    };
                if (!k)
                    return R(e, r);
                var H = r, J = [];
                return q(U, function (t) {
                    q(p.aryMethod[t], function (t) {
                        var e = H[p.remap[t] || t];
                        e && J.push([
                            t,
                            R(t, e)
                        ]);
                    });
                }), q(K(H), function (t) {
                    var e = H[t];
                    if ('function' == typeof e) {
                        for (var r = J.length; r--;)
                            if (J[r][0] == t)
                                return;
                        e.convert = A(t, e), J.push([
                            t,
                            e
                        ]);
                    }
                }), q(J, function (t) {
                    H[t[0]] = t[1];
                }), H.convert = v, O && (H.placeholder = C), q(K(H), function (t) {
                    q(p.realToAlias[t] || [], function (e) {
                        H[e] = H[t];
                    });
                }), H;
            }
            var p = r(2), f = r(3), d = Array.prototype.push;
            t.exports = u;
        },
        function (t, e) {
            e.aliasToReal = {
                each: 'forEach',
                eachRight: 'forEachRight',
                entries: 'toPairs',
                entriesIn: 'toPairsIn',
                extend: 'assignIn',
                extendAll: 'assignInAll',
                extendAllWith: 'assignInAllWith',
                extendWith: 'assignInWith',
                first: 'head',
                conforms: 'conformsTo',
                matches: 'isMatch',
                property: 'get',
                __: 'placeholder',
                F: 'stubFalse',
                T: 'stubTrue',
                all: 'every',
                allPass: 'overEvery',
                always: 'constant',
                any: 'some',
                anyPass: 'overSome',
                apply: 'spread',
                assoc: 'set',
                assocPath: 'set',
                complement: 'negate',
                compose: 'flowRight',
                contains: 'includes',
                dissoc: 'unset',
                dissocPath: 'unset',
                dropLast: 'dropRight',
                dropLastWhile: 'dropRightWhile',
                equals: 'isEqual',
                identical: 'eq',
                indexBy: 'keyBy',
                init: 'initial',
                invertObj: 'invert',
                juxt: 'over',
                omitAll: 'omit',
                nAry: 'ary',
                path: 'get',
                pathEq: 'matchesProperty',
                pathOr: 'getOr',
                paths: 'at',
                pickAll: 'pick',
                pipe: 'flow',
                pluck: 'map',
                prop: 'get',
                propEq: 'matchesProperty',
                propOr: 'getOr',
                props: 'at',
                symmetricDifference: 'xor',
                symmetricDifferenceBy: 'xorBy',
                symmetricDifferenceWith: 'xorWith',
                takeLast: 'takeRight',
                takeLastWhile: 'takeRightWhile',
                unapply: 'rest',
                unnest: 'flatten',
                useWith: 'overArgs',
                where: 'conformsTo',
                whereEq: 'isMatch',
                zipObj: 'zipObject'
            }, e.aryMethod = {
                1: [
                    'assignAll',
                    'assignInAll',
                    'attempt',
                    'castArray',
                    'ceil',
                    'create',
                    'curry',
                    'curryRight',
                    'defaultsAll',
                    'defaultsDeepAll',
                    'floor',
                    'flow',
                    'flowRight',
                    'fromPairs',
                    'invert',
                    'iteratee',
                    'memoize',
                    'method',
                    'mergeAll',
                    'methodOf',
                    'mixin',
                    'nthArg',
                    'over',
                    'overEvery',
                    'overSome',
                    'rest',
                    'reverse',
                    'round',
                    'runInContext',
                    'spread',
                    'template',
                    'trim',
                    'trimEnd',
                    'trimStart',
                    'uniqueId',
                    'words',
                    'zipAll'
                ],
                2: [
                    'add',
                    'after',
                    'ary',
                    'assign',
                    'assignAllWith',
                    'assignIn',
                    'assignInAllWith',
                    'at',
                    'before',
                    'bind',
                    'bindAll',
                    'bindKey',
                    'chunk',
                    'cloneDeepWith',
                    'cloneWith',
                    'concat',
                    'conformsTo',
                    'countBy',
                    'curryN',
                    'curryRightN',
                    'debounce',
                    'defaults',
                    'defaultsDeep',
                    'defaultTo',
                    'delay',
                    'difference',
                    'divide',
                    'drop',
                    'dropRight',
                    'dropRightWhile',
                    'dropWhile',
                    'endsWith',
                    'eq',
                    'every',
                    'filter',
                    'find',
                    'findIndex',
                    'findKey',
                    'findLast',
                    'findLastIndex',
                    'findLastKey',
                    'flatMap',
                    'flatMapDeep',
                    'flattenDepth',
                    'forEach',
                    'forEachRight',
                    'forIn',
                    'forInRight',
                    'forOwn',
                    'forOwnRight',
                    'get',
                    'groupBy',
                    'gt',
                    'gte',
                    'has',
                    'hasIn',
                    'includes',
                    'indexOf',
                    'intersection',
                    'invertBy',
                    'invoke',
                    'invokeMap',
                    'isEqual',
                    'isMatch',
                    'join',
                    'keyBy',
                    'lastIndexOf',
                    'lt',
                    'lte',
                    'map',
                    'mapKeys',
                    'mapValues',
                    'matchesProperty',
                    'maxBy',
                    'meanBy',
                    'merge',
                    'mergeAllWith',
                    'minBy',
                    'multiply',
                    'nth',
                    'omit',
                    'omitBy',
                    'overArgs',
                    'pad',
                    'padEnd',
                    'padStart',
                    'parseInt',
                    'partial',
                    'partialRight',
                    'partition',
                    'pick',
                    'pickBy',
                    'propertyOf',
                    'pull',
                    'pullAll',
                    'pullAt',
                    'random',
                    'range',
                    'rangeRight',
                    'rearg',
                    'reject',
                    'remove',
                    'repeat',
                    'restFrom',
                    'result',
                    'sampleSize',
                    'some',
                    'sortBy',
                    'sortedIndex',
                    'sortedIndexOf',
                    'sortedLastIndex',
                    'sortedLastIndexOf',
                    'sortedUniqBy',
                    'split',
                    'spreadFrom',
                    'startsWith',
                    'subtract',
                    'sumBy',
                    'take',
                    'takeRight',
                    'takeRightWhile',
                    'takeWhile',
                    'tap',
                    'throttle',
                    'thru',
                    'times',
                    'trimChars',
                    'trimCharsEnd',
                    'trimCharsStart',
                    'truncate',
                    'union',
                    'uniqBy',
                    'uniqWith',
                    'unset',
                    'unzipWith',
                    'without',
                    'wrap',
                    'xor',
                    'zip',
                    'zipObject',
                    'zipObjectDeep'
                ],
                3: [
                    'assignInWith',
                    'assignWith',
                    'clamp',
                    'differenceBy',
                    'differenceWith',
                    'findFrom',
                    'findIndexFrom',
                    'findLastFrom',
                    'findLastIndexFrom',
                    'getOr',
                    'includesFrom',
                    'indexOfFrom',
                    'inRange',
                    'intersectionBy',
                    'intersectionWith',
                    'invokeArgs',
                    'invokeArgsMap',
                    'isEqualWith',
                    'isMatchWith',
                    'flatMapDepth',
                    'lastIndexOfFrom',
                    'mergeWith',
                    'orderBy',
                    'padChars',
                    'padCharsEnd',
                    'padCharsStart',
                    'pullAllBy',
                    'pullAllWith',
                    'rangeStep',
                    'rangeStepRight',
                    'reduce',
                    'reduceRight',
                    'replace',
                    'set',
                    'slice',
                    'sortedIndexBy',
                    'sortedLastIndexBy',
                    'transform',
                    'unionBy',
                    'unionWith',
                    'update',
                    'xorBy',
                    'xorWith',
                    'zipWith'
                ],
                4: [
                    'fill',
                    'setWith',
                    'updateWith'
                ]
            }, e.aryRearg = {
                2: [
                    1,
                    0
                ],
                3: [
                    2,
                    0,
                    1
                ],
                4: [
                    3,
                    2,
                    0,
                    1
                ]
            }, e.iterateeAry = {
                dropRightWhile: 1,
                dropWhile: 1,
                every: 1,
                filter: 1,
                find: 1,
                findFrom: 1,
                findIndex: 1,
                findIndexFrom: 1,
                findKey: 1,
                findLast: 1,
                findLastFrom: 1,
                findLastIndex: 1,
                findLastIndexFrom: 1,
                findLastKey: 1,
                flatMap: 1,
                flatMapDeep: 1,
                flatMapDepth: 1,
                forEach: 1,
                forEachRight: 1,
                forIn: 1,
                forInRight: 1,
                forOwn: 1,
                forOwnRight: 1,
                map: 1,
                mapKeys: 1,
                mapValues: 1,
                partition: 1,
                reduce: 2,
                reduceRight: 2,
                reject: 1,
                remove: 1,
                some: 1,
                takeRightWhile: 1,
                takeWhile: 1,
                times: 1,
                transform: 2
            }, e.iterateeRearg = {
                mapKeys: [1],
                reduceRight: [
                    1,
                    0
                ]
            }, e.methodRearg = {
                assignInAllWith: [
                    1,
                    0
                ],
                assignInWith: [
                    1,
                    2,
                    0
                ],
                assignAllWith: [
                    1,
                    0
                ],
                assignWith: [
                    1,
                    2,
                    0
                ],
                differenceBy: [
                    1,
                    2,
                    0
                ],
                differenceWith: [
                    1,
                    2,
                    0
                ],
                getOr: [
                    2,
                    1,
                    0
                ],
                intersectionBy: [
                    1,
                    2,
                    0
                ],
                intersectionWith: [
                    1,
                    2,
                    0
                ],
                isEqualWith: [
                    1,
                    2,
                    0
                ],
                isMatchWith: [
                    2,
                    1,
                    0
                ],
                mergeAllWith: [
                    1,
                    0
                ],
                mergeWith: [
                    1,
                    2,
                    0
                ],
                padChars: [
                    2,
                    1,
                    0
                ],
                padCharsEnd: [
                    2,
                    1,
                    0
                ],
                padCharsStart: [
                    2,
                    1,
                    0
                ],
                pullAllBy: [
                    2,
                    1,
                    0
                ],
                pullAllWith: [
                    2,
                    1,
                    0
                ],
                rangeStep: [
                    1,
                    2,
                    0
                ],
                rangeStepRight: [
                    1,
                    2,
                    0
                ],
                setWith: [
                    3,
                    1,
                    2,
                    0
                ],
                sortedIndexBy: [
                    2,
                    1,
                    0
                ],
                sortedLastIndexBy: [
                    2,
                    1,
                    0
                ],
                unionBy: [
                    1,
                    2,
                    0
                ],
                unionWith: [
                    1,
                    2,
                    0
                ],
                updateWith: [
                    3,
                    1,
                    2,
                    0
                ],
                xorBy: [
                    1,
                    2,
                    0
                ],
                xorWith: [
                    1,
                    2,
                    0
                ],
                zipWith: [
                    1,
                    2,
                    0
                ]
            }, e.methodSpread = {
                assignAll: { start: 0 },
                assignAllWith: { start: 0 },
                assignInAll: { start: 0 },
                assignInAllWith: { start: 0 },
                defaultsAll: { start: 0 },
                defaultsDeepAll: { start: 0 },
                invokeArgs: { start: 2 },
                invokeArgsMap: { start: 2 },
                mergeAll: { start: 0 },
                mergeAllWith: { start: 0 },
                partial: { start: 1 },
                partialRight: { start: 1 },
                without: { start: 1 },
                zipAll: { start: 0 }
            }, e.mutate = {
                array: {
                    fill: !0,
                    pull: !0,
                    pullAll: !0,
                    pullAllBy: !0,
                    pullAllWith: !0,
                    pullAt: !0,
                    remove: !0,
                    reverse: !0
                },
                object: {
                    assign: !0,
                    assignAll: !0,
                    assignAllWith: !0,
                    assignIn: !0,
                    assignInAll: !0,
                    assignInAllWith: !0,
                    assignInWith: !0,
                    assignWith: !0,
                    defaults: !0,
                    defaultsAll: !0,
                    defaultsDeep: !0,
                    defaultsDeepAll: !0,
                    merge: !0,
                    mergeAll: !0,
                    mergeAllWith: !0,
                    mergeWith: !0
                },
                set: {
                    set: !0,
                    setWith: !0,
                    unset: !0,
                    update: !0,
                    updateWith: !0
                }
            }, e.placeholder = {
                bind: !0,
                bindKey: !0,
                curry: !0,
                curryRight: !0,
                partial: !0,
                partialRight: !0
            }, e.realToAlias = function () {
                var t = Object.prototype.hasOwnProperty, r = e.aliasToReal, n = {};
                for (var i in r) {
                    var a = r[i];
                    t.call(n, a) ? n[a].push(i) : n[a] = [i];
                }
                return n;
            }(), e.remap = {
                assignAll: 'assign',
                assignAllWith: 'assignWith',
                assignInAll: 'assignIn',
                assignInAllWith: 'assignInWith',
                curryN: 'curry',
                curryRightN: 'curryRight',
                defaultsAll: 'defaults',
                defaultsDeepAll: 'defaultsDeep',
                findFrom: 'find',
                findIndexFrom: 'findIndex',
                findLastFrom: 'findLast',
                findLastIndexFrom: 'findLastIndex',
                getOr: 'get',
                includesFrom: 'includes',
                indexOfFrom: 'indexOf',
                invokeArgs: 'invoke',
                invokeArgsMap: 'invokeMap',
                lastIndexOfFrom: 'lastIndexOf',
                mergeAll: 'merge',
                mergeAllWith: 'mergeWith',
                padChars: 'pad',
                padCharsEnd: 'padEnd',
                padCharsStart: 'padStart',
                propertyOf: 'get',
                rangeStep: 'range',
                rangeStepRight: 'rangeRight',
                restFrom: 'rest',
                spreadFrom: 'spread',
                trimChars: 'trim',
                trimCharsEnd: 'trimEnd',
                trimCharsStart: 'trimStart',
                zipAll: 'zip'
            }, e.skipFixed = {
                castArray: !0,
                flow: !0,
                flowRight: !0,
                iteratee: !0,
                mixin: !0,
                rearg: !0,
                runInContext: !0
            }, e.skipRearg = {
                add: !0,
                assign: !0,
                assignIn: !0,
                bind: !0,
                bindKey: !0,
                concat: !0,
                difference: !0,
                divide: !0,
                eq: !0,
                gt: !0,
                gte: !0,
                isEqual: !0,
                lt: !0,
                lte: !0,
                matchesProperty: !0,
                merge: !0,
                multiply: !0,
                overArgs: !0,
                partial: !0,
                partialRight: !0,
                propertyOf: !0,
                random: !0,
                range: !0,
                rangeRight: !0,
                subtract: !0,
                zip: !0,
                zipObject: !0,
                zipObjectDeep: !0
            };
        },
        function (t, e) {
            t.exports = {};
        }
    ]);
}));

(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if (typeof define === 'function' && define.amd)
        define('fp/lodash.fp', [], factory);
    else if (typeof exports === 'object')
        exports['fp'] = factory();
    else
        root['fp'] = factory();
}(this, function () {
    return function (modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId])
                return installedModules[moduleId].exports;
            var module = installedModules[moduleId] = {
                exports: {},
                id: moduleId,
                loaded: false
            };
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.loaded = true;
            return module.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.p = '';
        return __webpack_require__(0);
    }([
        function (module, exports, __webpack_require__) {
            var baseConvert = __webpack_require__(1);
            function browserConvert(lodash, options) {
                return baseConvert(lodash, lodash, options);
            }
            if (typeof _ == 'function' && typeof _.runInContext == 'function') {
                _ = browserConvert(_.runInContext());
            }
            module.exports = browserConvert;
        },
        function (module, exports, __webpack_require__) {
            var mapping = __webpack_require__(2), fallbackHolder = __webpack_require__(3);
            var push = Array.prototype.push;
            function baseArity(func, n) {
                return n == 2 ? function (a, b) {
                    return func.apply(undefined, arguments);
                } : function (a) {
                    return func.apply(undefined, arguments);
                };
            }
            function baseAry(func, n) {
                return n == 2 ? function (a, b) {
                    return func(a, b);
                } : function (a) {
                    return func(a);
                };
            }
            function cloneArray(array) {
                var length = array ? array.length : 0, result = Array(length);
                while (length--) {
                    result[length] = array[length];
                }
                return result;
            }
            function createCloner(func) {
                return function (object) {
                    return func({}, object);
                };
            }
            function flatSpread(func, start) {
                return function () {
                    var length = arguments.length, lastIndex = length - 1, args = Array(length);
                    while (length--) {
                        args[length] = arguments[length];
                    }
                    var array = args[start], otherArgs = args.slice(0, start);
                    if (array) {
                        push.apply(otherArgs, array);
                    }
                    if (start != lastIndex) {
                        push.apply(otherArgs, args.slice(start + 1));
                    }
                    return func.apply(this, otherArgs);
                };
            }
            function wrapImmutable(func, cloner) {
                return function () {
                    var length = arguments.length;
                    if (!length) {
                        return;
                    }
                    var args = Array(length);
                    while (length--) {
                        args[length] = arguments[length];
                    }
                    var result = args[0] = cloner.apply(undefined, args);
                    func.apply(undefined, args);
                    return result;
                };
            }
            function baseConvert(util, name, func, options) {
                var setPlaceholder, isLib = typeof name == 'function', isObj = name === Object(name);
                if (isObj) {
                    options = func;
                    func = name;
                    name = undefined;
                }
                if (func == null) {
                    throw new TypeError();
                }
                options || (options = {});
                var config = {
                    'cap': 'cap' in options ? options.cap : true,
                    'curry': 'curry' in options ? options.curry : true,
                    'fixed': 'fixed' in options ? options.fixed : true,
                    'immutable': 'immutable' in options ? options.immutable : true,
                    'rearg': 'rearg' in options ? options.rearg : true
                };
                var forceCurry = 'curry' in options && options.curry, forceFixed = 'fixed' in options && options.fixed, forceRearg = 'rearg' in options && options.rearg, placeholder = isLib ? func : fallbackHolder, pristine = isLib ? func.runInContext() : undefined;
                var helpers = isLib ? func : {
                    'ary': util.ary,
                    'assign': util.assign,
                    'clone': util.clone,
                    'curry': util.curry,
                    'forEach': util.forEach,
                    'isArray': util.isArray,
                    'isFunction': util.isFunction,
                    'iteratee': util.iteratee,
                    'keys': util.keys,
                    'rearg': util.rearg,
                    'toInteger': util.toInteger,
                    'toPath': util.toPath
                };
                var ary = helpers.ary, assign = helpers.assign, clone = helpers.clone, curry = helpers.curry, each = helpers.forEach, isArray = helpers.isArray, isFunction = helpers.isFunction, keys = helpers.keys, rearg = helpers.rearg, toInteger = helpers.toInteger, toPath = helpers.toPath;
                var aryMethodKeys = keys(mapping.aryMethod);
                var wrappers = {
                    'castArray': function (castArray) {
                        return function () {
                            var value = arguments[0];
                            return isArray(value) ? castArray(cloneArray(value)) : castArray.apply(undefined, arguments);
                        };
                    },
                    'iteratee': function (iteratee) {
                        return function () {
                            var func = arguments[0], arity = arguments[1], result = iteratee(func, arity), length = result.length;
                            if (config.cap && typeof arity == 'number') {
                                arity = arity > 2 ? arity - 2 : 1;
                                return length && length <= arity ? result : baseAry(result, arity);
                            }
                            return result;
                        };
                    },
                    'mixin': function (mixin) {
                        return function (source) {
                            var func = this;
                            if (!isFunction(func)) {
                                return mixin(func, Object(source));
                            }
                            var pairs = [];
                            each(keys(source), function (key) {
                                if (isFunction(source[key])) {
                                    pairs.push([
                                        key,
                                        func.prototype[key]
                                    ]);
                                }
                            });
                            mixin(func, Object(source));
                            each(pairs, function (pair) {
                                var value = pair[1];
                                if (isFunction(value)) {
                                    func.prototype[pair[0]] = value;
                                } else {
                                    delete func.prototype[pair[0]];
                                }
                            });
                            return func;
                        };
                    },
                    'nthArg': function (nthArg) {
                        return function (n) {
                            var arity = n < 0 ? 1 : toInteger(n) + 1;
                            return curry(nthArg(n), arity);
                        };
                    },
                    'rearg': function (rearg) {
                        return function (func, indexes) {
                            var arity = indexes ? indexes.length : 0;
                            return curry(rearg(func, indexes), arity);
                        };
                    },
                    'runInContext': function (runInContext) {
                        return function (context) {
                            return baseConvert(util, runInContext(context), options);
                        };
                    }
                };
                function castCap(name, func) {
                    if (config.cap) {
                        var indexes = mapping.iterateeRearg[name];
                        if (indexes) {
                            return iterateeRearg(func, indexes);
                        }
                        var n = !isLib && mapping.iterateeAry[name];
                        if (n) {
                            return iterateeAry(func, n);
                        }
                    }
                    return func;
                }
                function castCurry(name, func, n) {
                    return forceCurry || config.curry && n > 1 ? curry(func, n) : func;
                }
                function castFixed(name, func, n) {
                    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
                        var data = mapping.methodSpread[name], start = data && data.start;
                        return start === undefined ? ary(func, n) : flatSpread(func, start);
                    }
                    return func;
                }
                function castRearg(name, func, n) {
                    return config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]) ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n]) : func;
                }
                function cloneByPath(object, path) {
                    path = toPath(path);
                    var index = -1, length = path.length, lastIndex = length - 1, result = clone(Object(object)), nested = result;
                    while (nested != null && ++index < length) {
                        var key = path[index], value = nested[key];
                        if (value != null) {
                            nested[path[index]] = clone(index == lastIndex ? value : Object(value));
                        }
                        nested = nested[key];
                    }
                    return result;
                }
                function convertLib(options) {
                    return _.runInContext.convert(options)(undefined);
                }
                function createConverter(name, func) {
                    var realName = mapping.aliasToReal[name] || name, methodName = mapping.remap[realName] || realName, oldOptions = options;
                    return function (options) {
                        var newUtil = isLib ? pristine : helpers, newFunc = isLib ? pristine[methodName] : func, newOptions = assign(assign({}, oldOptions), options);
                        return baseConvert(newUtil, realName, newFunc, newOptions);
                    };
                }
                function iterateeAry(func, n) {
                    return overArg(func, function (func) {
                        return typeof func == 'function' ? baseAry(func, n) : func;
                    });
                }
                function iterateeRearg(func, indexes) {
                    return overArg(func, function (func) {
                        var n = indexes.length;
                        return baseArity(rearg(baseAry(func, n), indexes), n);
                    });
                }
                function overArg(func, transform) {
                    return function () {
                        var length = arguments.length;
                        if (!length) {
                            return func();
                        }
                        var args = Array(length);
                        while (length--) {
                            args[length] = arguments[length];
                        }
                        var index = config.rearg ? 0 : length - 1;
                        args[index] = transform(args[index]);
                        return func.apply(undefined, args);
                    };
                }
                function wrap(name, func) {
                    var result, realName = mapping.aliasToReal[name] || name, wrapped = func, wrapper = wrappers[realName];
                    if (wrapper) {
                        wrapped = wrapper(func);
                    } else if (config.immutable) {
                        if (mapping.mutate.array[realName]) {
                            wrapped = wrapImmutable(func, cloneArray);
                        } else if (mapping.mutate.object[realName]) {
                            wrapped = wrapImmutable(func, createCloner(func));
                        } else if (mapping.mutate.set[realName]) {
                            wrapped = wrapImmutable(func, cloneByPath);
                        }
                    }
                    each(aryMethodKeys, function (aryKey) {
                        each(mapping.aryMethod[aryKey], function (otherName) {
                            if (realName == otherName) {
                                var data = mapping.methodSpread[realName], afterRearg = data && data.afterRearg;
                                result = afterRearg ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey) : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);
                                result = castCap(realName, result);
                                result = castCurry(realName, result, aryKey);
                                return false;
                            }
                        });
                        return !result;
                    });
                    result || (result = wrapped);
                    if (result == func) {
                        result = forceCurry ? curry(result, 1) : function () {
                            return func.apply(this, arguments);
                        };
                    }
                    result.convert = createConverter(realName, func);
                    if (mapping.placeholder[realName]) {
                        setPlaceholder = true;
                        result.placeholder = func.placeholder = placeholder;
                    }
                    return result;
                }
                if (!isObj) {
                    return wrap(name, func);
                }
                var _ = func;
                var pairs = [];
                each(aryMethodKeys, function (aryKey) {
                    each(mapping.aryMethod[aryKey], function (key) {
                        var func = _[mapping.remap[key] || key];
                        if (func) {
                            pairs.push([
                                key,
                                wrap(key, func)
                            ]);
                        }
                    });
                });
                each(keys(_), function (key) {
                    var func = _[key];
                    if (typeof func == 'function') {
                        var length = pairs.length;
                        while (length--) {
                            if (pairs[length][0] == key) {
                                return;
                            }
                        }
                        func.convert = createConverter(key, func);
                        pairs.push([
                            key,
                            func
                        ]);
                    }
                });
                each(pairs, function (pair) {
                    _[pair[0]] = pair[1];
                });
                _.convert = convertLib;
                if (setPlaceholder) {
                    _.placeholder = placeholder;
                }
                each(keys(_), function (key) {
                    each(mapping.realToAlias[key] || [], function (alias) {
                        _[alias] = _[key];
                    });
                });
                return _;
            }
            module.exports = baseConvert;
        },
        function (module, exports) {
            exports.aliasToReal = {
                'each': 'forEach',
                'eachRight': 'forEachRight',
                'entries': 'toPairs',
                'entriesIn': 'toPairsIn',
                'extend': 'assignIn',
                'extendAll': 'assignInAll',
                'extendAllWith': 'assignInAllWith',
                'extendWith': 'assignInWith',
                'first': 'head',
                'conforms': 'conformsTo',
                'matches': 'isMatch',
                'property': 'get',
                '__': 'placeholder',
                'F': 'stubFalse',
                'T': 'stubTrue',
                'all': 'every',
                'allPass': 'overEvery',
                'always': 'constant',
                'any': 'some',
                'anyPass': 'overSome',
                'apply': 'spread',
                'assoc': 'set',
                'assocPath': 'set',
                'complement': 'negate',
                'compose': 'flowRight',
                'contains': 'includes',
                'dissoc': 'unset',
                'dissocPath': 'unset',
                'dropLast': 'dropRight',
                'dropLastWhile': 'dropRightWhile',
                'equals': 'isEqual',
                'identical': 'eq',
                'indexBy': 'keyBy',
                'init': 'initial',
                'invertObj': 'invert',
                'juxt': 'over',
                'omitAll': 'omit',
                'nAry': 'ary',
                'path': 'get',
                'pathEq': 'matchesProperty',
                'pathOr': 'getOr',
                'paths': 'at',
                'pickAll': 'pick',
                'pipe': 'flow',
                'pluck': 'map',
                'prop': 'get',
                'propEq': 'matchesProperty',
                'propOr': 'getOr',
                'props': 'at',
                'symmetricDifference': 'xor',
                'symmetricDifferenceBy': 'xorBy',
                'symmetricDifferenceWith': 'xorWith',
                'takeLast': 'takeRight',
                'takeLastWhile': 'takeRightWhile',
                'unapply': 'rest',
                'unnest': 'flatten',
                'useWith': 'overArgs',
                'where': 'conformsTo',
                'whereEq': 'isMatch',
                'zipObj': 'zipObject'
            };
            exports.aryMethod = {
                '1': [
                    'assignAll',
                    'assignInAll',
                    'attempt',
                    'castArray',
                    'ceil',
                    'create',
                    'curry',
                    'curryRight',
                    'defaultsAll',
                    'defaultsDeepAll',
                    'floor',
                    'flow',
                    'flowRight',
                    'fromPairs',
                    'invert',
                    'iteratee',
                    'memoize',
                    'method',
                    'mergeAll',
                    'methodOf',
                    'mixin',
                    'nthArg',
                    'over',
                    'overEvery',
                    'overSome',
                    'rest',
                    'reverse',
                    'round',
                    'runInContext',
                    'spread',
                    'template',
                    'trim',
                    'trimEnd',
                    'trimStart',
                    'uniqueId',
                    'words',
                    'zipAll'
                ],
                '2': [
                    'add',
                    'after',
                    'ary',
                    'assign',
                    'assignAllWith',
                    'assignIn',
                    'assignInAllWith',
                    'at',
                    'before',
                    'bind',
                    'bindAll',
                    'bindKey',
                    'chunk',
                    'cloneDeepWith',
                    'cloneWith',
                    'concat',
                    'conformsTo',
                    'countBy',
                    'curryN',
                    'curryRightN',
                    'debounce',
                    'defaults',
                    'defaultsDeep',
                    'defaultTo',
                    'delay',
                    'difference',
                    'divide',
                    'drop',
                    'dropRight',
                    'dropRightWhile',
                    'dropWhile',
                    'endsWith',
                    'eq',
                    'every',
                    'filter',
                    'find',
                    'findIndex',
                    'findKey',
                    'findLast',
                    'findLastIndex',
                    'findLastKey',
                    'flatMap',
                    'flatMapDeep',
                    'flattenDepth',
                    'forEach',
                    'forEachRight',
                    'forIn',
                    'forInRight',
                    'forOwn',
                    'forOwnRight',
                    'get',
                    'groupBy',
                    'gt',
                    'gte',
                    'has',
                    'hasIn',
                    'includes',
                    'indexOf',
                    'intersection',
                    'invertBy',
                    'invoke',
                    'invokeMap',
                    'isEqual',
                    'isMatch',
                    'join',
                    'keyBy',
                    'lastIndexOf',
                    'lt',
                    'lte',
                    'map',
                    'mapKeys',
                    'mapValues',
                    'matchesProperty',
                    'maxBy',
                    'meanBy',
                    'merge',
                    'mergeAllWith',
                    'minBy',
                    'multiply',
                    'nth',
                    'omit',
                    'omitBy',
                    'overArgs',
                    'pad',
                    'padEnd',
                    'padStart',
                    'parseInt',
                    'partial',
                    'partialRight',
                    'partition',
                    'pick',
                    'pickBy',
                    'propertyOf',
                    'pull',
                    'pullAll',
                    'pullAt',
                    'random',
                    'range',
                    'rangeRight',
                    'rearg',
                    'reject',
                    'remove',
                    'repeat',
                    'restFrom',
                    'result',
                    'sampleSize',
                    'some',
                    'sortBy',
                    'sortedIndex',
                    'sortedIndexOf',
                    'sortedLastIndex',
                    'sortedLastIndexOf',
                    'sortedUniqBy',
                    'split',
                    'spreadFrom',
                    'startsWith',
                    'subtract',
                    'sumBy',
                    'take',
                    'takeRight',
                    'takeRightWhile',
                    'takeWhile',
                    'tap',
                    'throttle',
                    'thru',
                    'times',
                    'trimChars',
                    'trimCharsEnd',
                    'trimCharsStart',
                    'truncate',
                    'union',
                    'uniqBy',
                    'uniqWith',
                    'unset',
                    'unzipWith',
                    'without',
                    'wrap',
                    'xor',
                    'zip',
                    'zipObject',
                    'zipObjectDeep'
                ],
                '3': [
                    'assignInWith',
                    'assignWith',
                    'clamp',
                    'differenceBy',
                    'differenceWith',
                    'findFrom',
                    'findIndexFrom',
                    'findLastFrom',
                    'findLastIndexFrom',
                    'getOr',
                    'includesFrom',
                    'indexOfFrom',
                    'inRange',
                    'intersectionBy',
                    'intersectionWith',
                    'invokeArgs',
                    'invokeArgsMap',
                    'isEqualWith',
                    'isMatchWith',
                    'flatMapDepth',
                    'lastIndexOfFrom',
                    'mergeWith',
                    'orderBy',
                    'padChars',
                    'padCharsEnd',
                    'padCharsStart',
                    'pullAllBy',
                    'pullAllWith',
                    'rangeStep',
                    'rangeStepRight',
                    'reduce',
                    'reduceRight',
                    'replace',
                    'set',
                    'slice',
                    'sortedIndexBy',
                    'sortedLastIndexBy',
                    'transform',
                    'unionBy',
                    'unionWith',
                    'update',
                    'xorBy',
                    'xorWith',
                    'zipWith'
                ],
                '4': [
                    'fill',
                    'setWith',
                    'updateWith'
                ]
            };
            exports.aryRearg = {
                '2': [
                    1,
                    0
                ],
                '3': [
                    2,
                    0,
                    1
                ],
                '4': [
                    3,
                    2,
                    0,
                    1
                ]
            };
            exports.iterateeAry = {
                'dropRightWhile': 1,
                'dropWhile': 1,
                'every': 1,
                'filter': 1,
                'find': 1,
                'findFrom': 1,
                'findIndex': 1,
                'findIndexFrom': 1,
                'findKey': 1,
                'findLast': 1,
                'findLastFrom': 1,
                'findLastIndex': 1,
                'findLastIndexFrom': 1,
                'findLastKey': 1,
                'flatMap': 1,
                'flatMapDeep': 1,
                'flatMapDepth': 1,
                'forEach': 1,
                'forEachRight': 1,
                'forIn': 1,
                'forInRight': 1,
                'forOwn': 1,
                'forOwnRight': 1,
                'map': 1,
                'mapKeys': 1,
                'mapValues': 1,
                'partition': 1,
                'reduce': 2,
                'reduceRight': 2,
                'reject': 1,
                'remove': 1,
                'some': 1,
                'takeRightWhile': 1,
                'takeWhile': 1,
                'times': 1,
                'transform': 2
            };
            exports.iterateeRearg = {
                'mapKeys': [1],
                'reduceRight': [
                    1,
                    0
                ]
            };
            exports.methodRearg = {
                'assignInAllWith': [
                    1,
                    0
                ],
                'assignInWith': [
                    1,
                    2,
                    0
                ],
                'assignAllWith': [
                    1,
                    0
                ],
                'assignWith': [
                    1,
                    2,
                    0
                ],
                'differenceBy': [
                    1,
                    2,
                    0
                ],
                'differenceWith': [
                    1,
                    2,
                    0
                ],
                'getOr': [
                    2,
                    1,
                    0
                ],
                'intersectionBy': [
                    1,
                    2,
                    0
                ],
                'intersectionWith': [
                    1,
                    2,
                    0
                ],
                'isEqualWith': [
                    1,
                    2,
                    0
                ],
                'isMatchWith': [
                    2,
                    1,
                    0
                ],
                'mergeAllWith': [
                    1,
                    0
                ],
                'mergeWith': [
                    1,
                    2,
                    0
                ],
                'padChars': [
                    2,
                    1,
                    0
                ],
                'padCharsEnd': [
                    2,
                    1,
                    0
                ],
                'padCharsStart': [
                    2,
                    1,
                    0
                ],
                'pullAllBy': [
                    2,
                    1,
                    0
                ],
                'pullAllWith': [
                    2,
                    1,
                    0
                ],
                'rangeStep': [
                    1,
                    2,
                    0
                ],
                'rangeStepRight': [
                    1,
                    2,
                    0
                ],
                'setWith': [
                    3,
                    1,
                    2,
                    0
                ],
                'sortedIndexBy': [
                    2,
                    1,
                    0
                ],
                'sortedLastIndexBy': [
                    2,
                    1,
                    0
                ],
                'unionBy': [
                    1,
                    2,
                    0
                ],
                'unionWith': [
                    1,
                    2,
                    0
                ],
                'updateWith': [
                    3,
                    1,
                    2,
                    0
                ],
                'xorBy': [
                    1,
                    2,
                    0
                ],
                'xorWith': [
                    1,
                    2,
                    0
                ],
                'zipWith': [
                    1,
                    2,
                    0
                ]
            };
            exports.methodSpread = {
                'assignAll': { 'start': 0 },
                'assignAllWith': { 'start': 0 },
                'assignInAll': { 'start': 0 },
                'assignInAllWith': { 'start': 0 },
                'defaultsAll': { 'start': 0 },
                'defaultsDeepAll': { 'start': 0 },
                'invokeArgs': { 'start': 2 },
                'invokeArgsMap': { 'start': 2 },
                'mergeAll': { 'start': 0 },
                'mergeAllWith': { 'start': 0 },
                'partial': { 'start': 1 },
                'partialRight': { 'start': 1 },
                'without': { 'start': 1 },
                'zipAll': { 'start': 0 }
            };
            exports.mutate = {
                'array': {
                    'fill': true,
                    'pull': true,
                    'pullAll': true,
                    'pullAllBy': true,
                    'pullAllWith': true,
                    'pullAt': true,
                    'remove': true,
                    'reverse': true
                },
                'object': {
                    'assign': true,
                    'assignAll': true,
                    'assignAllWith': true,
                    'assignIn': true,
                    'assignInAll': true,
                    'assignInAllWith': true,
                    'assignInWith': true,
                    'assignWith': true,
                    'defaults': true,
                    'defaultsAll': true,
                    'defaultsDeep': true,
                    'defaultsDeepAll': true,
                    'merge': true,
                    'mergeAll': true,
                    'mergeAllWith': true,
                    'mergeWith': true
                },
                'set': {
                    'set': true,
                    'setWith': true,
                    'unset': true,
                    'update': true,
                    'updateWith': true
                }
            };
            exports.placeholder = {
                'bind': true,
                'bindKey': true,
                'curry': true,
                'curryRight': true,
                'partial': true,
                'partialRight': true
            };
            exports.realToAlias = function () {
                var hasOwnProperty = Object.prototype.hasOwnProperty, object = exports.aliasToReal, result = {};
                for (var key in object) {
                    var value = object[key];
                    if (hasOwnProperty.call(result, value)) {
                        result[value].push(key);
                    } else {
                        result[value] = [key];
                    }
                }
                return result;
            }();
            exports.remap = {
                'assignAll': 'assign',
                'assignAllWith': 'assignWith',
                'assignInAll': 'assignIn',
                'assignInAllWith': 'assignInWith',
                'curryN': 'curry',
                'curryRightN': 'curryRight',
                'defaultsAll': 'defaults',
                'defaultsDeepAll': 'defaultsDeep',
                'findFrom': 'find',
                'findIndexFrom': 'findIndex',
                'findLastFrom': 'findLast',
                'findLastIndexFrom': 'findLastIndex',
                'getOr': 'get',
                'includesFrom': 'includes',
                'indexOfFrom': 'indexOf',
                'invokeArgs': 'invoke',
                'invokeArgsMap': 'invokeMap',
                'lastIndexOfFrom': 'lastIndexOf',
                'mergeAll': 'merge',
                'mergeAllWith': 'mergeWith',
                'padChars': 'pad',
                'padCharsEnd': 'padEnd',
                'padCharsStart': 'padStart',
                'propertyOf': 'get',
                'rangeStep': 'range',
                'rangeStepRight': 'rangeRight',
                'restFrom': 'rest',
                'spreadFrom': 'spread',
                'trimChars': 'trim',
                'trimCharsEnd': 'trimEnd',
                'trimCharsStart': 'trimStart',
                'zipAll': 'zip'
            };
            exports.skipFixed = {
                'castArray': true,
                'flow': true,
                'flowRight': true,
                'iteratee': true,
                'mixin': true,
                'rearg': true,
                'runInContext': true
            };
            exports.skipRearg = {
                'add': true,
                'assign': true,
                'assignIn': true,
                'bind': true,
                'bindKey': true,
                'concat': true,
                'difference': true,
                'divide': true,
                'eq': true,
                'gt': true,
                'gte': true,
                'isEqual': true,
                'lt': true,
                'lte': true,
                'matchesProperty': true,
                'merge': true,
                'multiply': true,
                'overArgs': true,
                'partial': true,
                'partialRight': true,
                'propertyOf': true,
                'random': true,
                'range': true,
                'rangeRight': true,
                'subtract': true,
                'zip': true,
                'zipObject': true,
                'zipObjectDeep': true
            };
        },
        function (module, exports) {
            module.exports = {};
        }
    ]);
}));
;

(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if (typeof define === 'function' && define.amd)
        define('lodash/lodash.fp', [], factory);
    else if (typeof exports === 'object')
        exports['fp'] = factory();
    else
        root['fp'] = factory();
}(this, function () {
    return function (modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId])
                return installedModules[moduleId].exports;
            var module = installedModules[moduleId] = {
                exports: {},
                id: moduleId,
                loaded: false
            };
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.loaded = true;
            return module.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.p = '';
        return __webpack_require__(0);
    }([
        function (module, exports, __webpack_require__) {
            var baseConvert = __webpack_require__(1);
            function browserConvert(lodash, options) {
                return baseConvert(lodash, lodash, options);
            }
            if (typeof _ == 'function' && typeof _.runInContext == 'function') {
                _ = browserConvert(_.runInContext());
            }
            module.exports = browserConvert;
        },
        function (module, exports, __webpack_require__) {
            var mapping = __webpack_require__(2), fallbackHolder = __webpack_require__(3);
            var push = Array.prototype.push;
            function baseArity(func, n) {
                return n == 2 ? function (a, b) {
                    return func.apply(undefined, arguments);
                } : function (a) {
                    return func.apply(undefined, arguments);
                };
            }
            function baseAry(func, n) {
                return n == 2 ? function (a, b) {
                    return func(a, b);
                } : function (a) {
                    return func(a);
                };
            }
            function cloneArray(array) {
                var length = array ? array.length : 0, result = Array(length);
                while (length--) {
                    result[length] = array[length];
                }
                return result;
            }
            function createCloner(func) {
                return function (object) {
                    return func({}, object);
                };
            }
            function flatSpread(func, start) {
                return function () {
                    var length = arguments.length, lastIndex = length - 1, args = Array(length);
                    while (length--) {
                        args[length] = arguments[length];
                    }
                    var array = args[start], otherArgs = args.slice(0, start);
                    if (array) {
                        push.apply(otherArgs, array);
                    }
                    if (start != lastIndex) {
                        push.apply(otherArgs, args.slice(start + 1));
                    }
                    return func.apply(this, otherArgs);
                };
            }
            function wrapImmutable(func, cloner) {
                return function () {
                    var length = arguments.length;
                    if (!length) {
                        return;
                    }
                    var args = Array(length);
                    while (length--) {
                        args[length] = arguments[length];
                    }
                    var result = args[0] = cloner.apply(undefined, args);
                    func.apply(undefined, args);
                    return result;
                };
            }
            function baseConvert(util, name, func, options) {
                var setPlaceholder, isLib = typeof name == 'function', isObj = name === Object(name);
                if (isObj) {
                    options = func;
                    func = name;
                    name = undefined;
                }
                if (func == null) {
                    throw new TypeError();
                }
                options || (options = {});
                var config = {
                    'cap': 'cap' in options ? options.cap : true,
                    'curry': 'curry' in options ? options.curry : true,
                    'fixed': 'fixed' in options ? options.fixed : true,
                    'immutable': 'immutable' in options ? options.immutable : true,
                    'rearg': 'rearg' in options ? options.rearg : true
                };
                var forceCurry = 'curry' in options && options.curry, forceFixed = 'fixed' in options && options.fixed, forceRearg = 'rearg' in options && options.rearg, placeholder = isLib ? func : fallbackHolder, pristine = isLib ? func.runInContext() : undefined;
                var helpers = isLib ? func : {
                    'ary': util.ary,
                    'assign': util.assign,
                    'clone': util.clone,
                    'curry': util.curry,
                    'forEach': util.forEach,
                    'isArray': util.isArray,
                    'isFunction': util.isFunction,
                    'iteratee': util.iteratee,
                    'keys': util.keys,
                    'rearg': util.rearg,
                    'toInteger': util.toInteger,
                    'toPath': util.toPath
                };
                var ary = helpers.ary, assign = helpers.assign, clone = helpers.clone, curry = helpers.curry, each = helpers.forEach, isArray = helpers.isArray, isFunction = helpers.isFunction, keys = helpers.keys, rearg = helpers.rearg, toInteger = helpers.toInteger, toPath = helpers.toPath;
                var aryMethodKeys = keys(mapping.aryMethod);
                var wrappers = {
                    'castArray': function (castArray) {
                        return function () {
                            var value = arguments[0];
                            return isArray(value) ? castArray(cloneArray(value)) : castArray.apply(undefined, arguments);
                        };
                    },
                    'iteratee': function (iteratee) {
                        return function () {
                            var func = arguments[0], arity = arguments[1], result = iteratee(func, arity), length = result.length;
                            if (config.cap && typeof arity == 'number') {
                                arity = arity > 2 ? arity - 2 : 1;
                                return length && length <= arity ? result : baseAry(result, arity);
                            }
                            return result;
                        };
                    },
                    'mixin': function (mixin) {
                        return function (source) {
                            var func = this;
                            if (!isFunction(func)) {
                                return mixin(func, Object(source));
                            }
                            var pairs = [];
                            each(keys(source), function (key) {
                                if (isFunction(source[key])) {
                                    pairs.push([
                                        key,
                                        func.prototype[key]
                                    ]);
                                }
                            });
                            mixin(func, Object(source));
                            each(pairs, function (pair) {
                                var value = pair[1];
                                if (isFunction(value)) {
                                    func.prototype[pair[0]] = value;
                                } else {
                                    delete func.prototype[pair[0]];
                                }
                            });
                            return func;
                        };
                    },
                    'nthArg': function (nthArg) {
                        return function (n) {
                            var arity = n < 0 ? 1 : toInteger(n) + 1;
                            return curry(nthArg(n), arity);
                        };
                    },
                    'rearg': function (rearg) {
                        return function (func, indexes) {
                            var arity = indexes ? indexes.length : 0;
                            return curry(rearg(func, indexes), arity);
                        };
                    },
                    'runInContext': function (runInContext) {
                        return function (context) {
                            return baseConvert(util, runInContext(context), options);
                        };
                    }
                };
                function castCap(name, func) {
                    if (config.cap) {
                        var indexes = mapping.iterateeRearg[name];
                        if (indexes) {
                            return iterateeRearg(func, indexes);
                        }
                        var n = !isLib && mapping.iterateeAry[name];
                        if (n) {
                            return iterateeAry(func, n);
                        }
                    }
                    return func;
                }
                function castCurry(name, func, n) {
                    return forceCurry || config.curry && n > 1 ? curry(func, n) : func;
                }
                function castFixed(name, func, n) {
                    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
                        var data = mapping.methodSpread[name], start = data && data.start;
                        return start === undefined ? ary(func, n) : flatSpread(func, start);
                    }
                    return func;
                }
                function castRearg(name, func, n) {
                    return config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]) ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n]) : func;
                }
                function cloneByPath(object, path) {
                    path = toPath(path);
                    var index = -1, length = path.length, lastIndex = length - 1, result = clone(Object(object)), nested = result;
                    while (nested != null && ++index < length) {
                        var key = path[index], value = nested[key];
                        if (value != null) {
                            nested[path[index]] = clone(index == lastIndex ? value : Object(value));
                        }
                        nested = nested[key];
                    }
                    return result;
                }
                function convertLib(options) {
                    return _.runInContext.convert(options)(undefined);
                }
                function createConverter(name, func) {
                    var realName = mapping.aliasToReal[name] || name, methodName = mapping.remap[realName] || realName, oldOptions = options;
                    return function (options) {
                        var newUtil = isLib ? pristine : helpers, newFunc = isLib ? pristine[methodName] : func, newOptions = assign(assign({}, oldOptions), options);
                        return baseConvert(newUtil, realName, newFunc, newOptions);
                    };
                }
                function iterateeAry(func, n) {
                    return overArg(func, function (func) {
                        return typeof func == 'function' ? baseAry(func, n) : func;
                    });
                }
                function iterateeRearg(func, indexes) {
                    return overArg(func, function (func) {
                        var n = indexes.length;
                        return baseArity(rearg(baseAry(func, n), indexes), n);
                    });
                }
                function overArg(func, transform) {
                    return function () {
                        var length = arguments.length;
                        if (!length) {
                            return func();
                        }
                        var args = Array(length);
                        while (length--) {
                            args[length] = arguments[length];
                        }
                        var index = config.rearg ? 0 : length - 1;
                        args[index] = transform(args[index]);
                        return func.apply(undefined, args);
                    };
                }
                function wrap(name, func) {
                    var result, realName = mapping.aliasToReal[name] || name, wrapped = func, wrapper = wrappers[realName];
                    if (wrapper) {
                        wrapped = wrapper(func);
                    } else if (config.immutable) {
                        if (mapping.mutate.array[realName]) {
                            wrapped = wrapImmutable(func, cloneArray);
                        } else if (mapping.mutate.object[realName]) {
                            wrapped = wrapImmutable(func, createCloner(func));
                        } else if (mapping.mutate.set[realName]) {
                            wrapped = wrapImmutable(func, cloneByPath);
                        }
                    }
                    each(aryMethodKeys, function (aryKey) {
                        each(mapping.aryMethod[aryKey], function (otherName) {
                            if (realName == otherName) {
                                var data = mapping.methodSpread[realName], afterRearg = data && data.afterRearg;
                                result = afterRearg ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey) : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);
                                result = castCap(realName, result);
                                result = castCurry(realName, result, aryKey);
                                return false;
                            }
                        });
                        return !result;
                    });
                    result || (result = wrapped);
                    if (result == func) {
                        result = forceCurry ? curry(result, 1) : function () {
                            return func.apply(this, arguments);
                        };
                    }
                    result.convert = createConverter(realName, func);
                    if (mapping.placeholder[realName]) {
                        setPlaceholder = true;
                        result.placeholder = func.placeholder = placeholder;
                    }
                    return result;
                }
                if (!isObj) {
                    return wrap(name, func);
                }
                var _ = func;
                var pairs = [];
                each(aryMethodKeys, function (aryKey) {
                    each(mapping.aryMethod[aryKey], function (key) {
                        var func = _[mapping.remap[key] || key];
                        if (func) {
                            pairs.push([
                                key,
                                wrap(key, func)
                            ]);
                        }
                    });
                });
                each(keys(_), function (key) {
                    var func = _[key];
                    if (typeof func == 'function') {
                        var length = pairs.length;
                        while (length--) {
                            if (pairs[length][0] == key) {
                                return;
                            }
                        }
                        func.convert = createConverter(key, func);
                        pairs.push([
                            key,
                            func
                        ]);
                    }
                });
                each(pairs, function (pair) {
                    _[pair[0]] = pair[1];
                });
                _.convert = convertLib;
                if (setPlaceholder) {
                    _.placeholder = placeholder;
                }
                each(keys(_), function (key) {
                    each(mapping.realToAlias[key] || [], function (alias) {
                        _[alias] = _[key];
                    });
                });
                return _;
            }
            module.exports = baseConvert;
        },
        function (module, exports) {
            exports.aliasToReal = {
                'each': 'forEach',
                'eachRight': 'forEachRight',
                'entries': 'toPairs',
                'entriesIn': 'toPairsIn',
                'extend': 'assignIn',
                'extendAll': 'assignInAll',
                'extendAllWith': 'assignInAllWith',
                'extendWith': 'assignInWith',
                'first': 'head',
                'conforms': 'conformsTo',
                'matches': 'isMatch',
                'property': 'get',
                '__': 'placeholder',
                'F': 'stubFalse',
                'T': 'stubTrue',
                'all': 'every',
                'allPass': 'overEvery',
                'always': 'constant',
                'any': 'some',
                'anyPass': 'overSome',
                'apply': 'spread',
                'assoc': 'set',
                'assocPath': 'set',
                'complement': 'negate',
                'compose': 'flowRight',
                'contains': 'includes',
                'dissoc': 'unset',
                'dissocPath': 'unset',
                'dropLast': 'dropRight',
                'dropLastWhile': 'dropRightWhile',
                'equals': 'isEqual',
                'identical': 'eq',
                'indexBy': 'keyBy',
                'init': 'initial',
                'invertObj': 'invert',
                'juxt': 'over',
                'omitAll': 'omit',
                'nAry': 'ary',
                'path': 'get',
                'pathEq': 'matchesProperty',
                'pathOr': 'getOr',
                'paths': 'at',
                'pickAll': 'pick',
                'pipe': 'flow',
                'pluck': 'map',
                'prop': 'get',
                'propEq': 'matchesProperty',
                'propOr': 'getOr',
                'props': 'at',
                'symmetricDifference': 'xor',
                'symmetricDifferenceBy': 'xorBy',
                'symmetricDifferenceWith': 'xorWith',
                'takeLast': 'takeRight',
                'takeLastWhile': 'takeRightWhile',
                'unapply': 'rest',
                'unnest': 'flatten',
                'useWith': 'overArgs',
                'where': 'conformsTo',
                'whereEq': 'isMatch',
                'zipObj': 'zipObject'
            };
            exports.aryMethod = {
                '1': [
                    'assignAll',
                    'assignInAll',
                    'attempt',
                    'castArray',
                    'ceil',
                    'create',
                    'curry',
                    'curryRight',
                    'defaultsAll',
                    'defaultsDeepAll',
                    'floor',
                    'flow',
                    'flowRight',
                    'fromPairs',
                    'invert',
                    'iteratee',
                    'memoize',
                    'method',
                    'mergeAll',
                    'methodOf',
                    'mixin',
                    'nthArg',
                    'over',
                    'overEvery',
                    'overSome',
                    'rest',
                    'reverse',
                    'round',
                    'runInContext',
                    'spread',
                    'template',
                    'trim',
                    'trimEnd',
                    'trimStart',
                    'uniqueId',
                    'words',
                    'zipAll'
                ],
                '2': [
                    'add',
                    'after',
                    'ary',
                    'assign',
                    'assignAllWith',
                    'assignIn',
                    'assignInAllWith',
                    'at',
                    'before',
                    'bind',
                    'bindAll',
                    'bindKey',
                    'chunk',
                    'cloneDeepWith',
                    'cloneWith',
                    'concat',
                    'conformsTo',
                    'countBy',
                    'curryN',
                    'curryRightN',
                    'debounce',
                    'defaults',
                    'defaultsDeep',
                    'defaultTo',
                    'delay',
                    'difference',
                    'divide',
                    'drop',
                    'dropRight',
                    'dropRightWhile',
                    'dropWhile',
                    'endsWith',
                    'eq',
                    'every',
                    'filter',
                    'find',
                    'findIndex',
                    'findKey',
                    'findLast',
                    'findLastIndex',
                    'findLastKey',
                    'flatMap',
                    'flatMapDeep',
                    'flattenDepth',
                    'forEach',
                    'forEachRight',
                    'forIn',
                    'forInRight',
                    'forOwn',
                    'forOwnRight',
                    'get',
                    'groupBy',
                    'gt',
                    'gte',
                    'has',
                    'hasIn',
                    'includes',
                    'indexOf',
                    'intersection',
                    'invertBy',
                    'invoke',
                    'invokeMap',
                    'isEqual',
                    'isMatch',
                    'join',
                    'keyBy',
                    'lastIndexOf',
                    'lt',
                    'lte',
                    'map',
                    'mapKeys',
                    'mapValues',
                    'matchesProperty',
                    'maxBy',
                    'meanBy',
                    'merge',
                    'mergeAllWith',
                    'minBy',
                    'multiply',
                    'nth',
                    'omit',
                    'omitBy',
                    'overArgs',
                    'pad',
                    'padEnd',
                    'padStart',
                    'parseInt',
                    'partial',
                    'partialRight',
                    'partition',
                    'pick',
                    'pickBy',
                    'propertyOf',
                    'pull',
                    'pullAll',
                    'pullAt',
                    'random',
                    'range',
                    'rangeRight',
                    'rearg',
                    'reject',
                    'remove',
                    'repeat',
                    'restFrom',
                    'result',
                    'sampleSize',
                    'some',
                    'sortBy',
                    'sortedIndex',
                    'sortedIndexOf',
                    'sortedLastIndex',
                    'sortedLastIndexOf',
                    'sortedUniqBy',
                    'split',
                    'spreadFrom',
                    'startsWith',
                    'subtract',
                    'sumBy',
                    'take',
                    'takeRight',
                    'takeRightWhile',
                    'takeWhile',
                    'tap',
                    'throttle',
                    'thru',
                    'times',
                    'trimChars',
                    'trimCharsEnd',
                    'trimCharsStart',
                    'truncate',
                    'union',
                    'uniqBy',
                    'uniqWith',
                    'unset',
                    'unzipWith',
                    'without',
                    'wrap',
                    'xor',
                    'zip',
                    'zipObject',
                    'zipObjectDeep'
                ],
                '3': [
                    'assignInWith',
                    'assignWith',
                    'clamp',
                    'differenceBy',
                    'differenceWith',
                    'findFrom',
                    'findIndexFrom',
                    'findLastFrom',
                    'findLastIndexFrom',
                    'getOr',
                    'includesFrom',
                    'indexOfFrom',
                    'inRange',
                    'intersectionBy',
                    'intersectionWith',
                    'invokeArgs',
                    'invokeArgsMap',
                    'isEqualWith',
                    'isMatchWith',
                    'flatMapDepth',
                    'lastIndexOfFrom',
                    'mergeWith',
                    'orderBy',
                    'padChars',
                    'padCharsEnd',
                    'padCharsStart',
                    'pullAllBy',
                    'pullAllWith',
                    'rangeStep',
                    'rangeStepRight',
                    'reduce',
                    'reduceRight',
                    'replace',
                    'set',
                    'slice',
                    'sortedIndexBy',
                    'sortedLastIndexBy',
                    'transform',
                    'unionBy',
                    'unionWith',
                    'update',
                    'xorBy',
                    'xorWith',
                    'zipWith'
                ],
                '4': [
                    'fill',
                    'setWith',
                    'updateWith'
                ]
            };
            exports.aryRearg = {
                '2': [
                    1,
                    0
                ],
                '3': [
                    2,
                    0,
                    1
                ],
                '4': [
                    3,
                    2,
                    0,
                    1
                ]
            };
            exports.iterateeAry = {
                'dropRightWhile': 1,
                'dropWhile': 1,
                'every': 1,
                'filter': 1,
                'find': 1,
                'findFrom': 1,
                'findIndex': 1,
                'findIndexFrom': 1,
                'findKey': 1,
                'findLast': 1,
                'findLastFrom': 1,
                'findLastIndex': 1,
                'findLastIndexFrom': 1,
                'findLastKey': 1,
                'flatMap': 1,
                'flatMapDeep': 1,
                'flatMapDepth': 1,
                'forEach': 1,
                'forEachRight': 1,
                'forIn': 1,
                'forInRight': 1,
                'forOwn': 1,
                'forOwnRight': 1,
                'map': 1,
                'mapKeys': 1,
                'mapValues': 1,
                'partition': 1,
                'reduce': 2,
                'reduceRight': 2,
                'reject': 1,
                'remove': 1,
                'some': 1,
                'takeRightWhile': 1,
                'takeWhile': 1,
                'times': 1,
                'transform': 2
            };
            exports.iterateeRearg = {
                'mapKeys': [1],
                'reduceRight': [
                    1,
                    0
                ]
            };
            exports.methodRearg = {
                'assignInAllWith': [
                    1,
                    0
                ],
                'assignInWith': [
                    1,
                    2,
                    0
                ],
                'assignAllWith': [
                    1,
                    0
                ],
                'assignWith': [
                    1,
                    2,
                    0
                ],
                'differenceBy': [
                    1,
                    2,
                    0
                ],
                'differenceWith': [
                    1,
                    2,
                    0
                ],
                'getOr': [
                    2,
                    1,
                    0
                ],
                'intersectionBy': [
                    1,
                    2,
                    0
                ],
                'intersectionWith': [
                    1,
                    2,
                    0
                ],
                'isEqualWith': [
                    1,
                    2,
                    0
                ],
                'isMatchWith': [
                    2,
                    1,
                    0
                ],
                'mergeAllWith': [
                    1,
                    0
                ],
                'mergeWith': [
                    1,
                    2,
                    0
                ],
                'padChars': [
                    2,
                    1,
                    0
                ],
                'padCharsEnd': [
                    2,
                    1,
                    0
                ],
                'padCharsStart': [
                    2,
                    1,
                    0
                ],
                'pullAllBy': [
                    2,
                    1,
                    0
                ],
                'pullAllWith': [
                    2,
                    1,
                    0
                ],
                'rangeStep': [
                    1,
                    2,
                    0
                ],
                'rangeStepRight': [
                    1,
                    2,
                    0
                ],
                'setWith': [
                    3,
                    1,
                    2,
                    0
                ],
                'sortedIndexBy': [
                    2,
                    1,
                    0
                ],
                'sortedLastIndexBy': [
                    2,
                    1,
                    0
                ],
                'unionBy': [
                    1,
                    2,
                    0
                ],
                'unionWith': [
                    1,
                    2,
                    0
                ],
                'updateWith': [
                    3,
                    1,
                    2,
                    0
                ],
                'xorBy': [
                    1,
                    2,
                    0
                ],
                'xorWith': [
                    1,
                    2,
                    0
                ],
                'zipWith': [
                    1,
                    2,
                    0
                ]
            };
            exports.methodSpread = {
                'assignAll': { 'start': 0 },
                'assignAllWith': { 'start': 0 },
                'assignInAll': { 'start': 0 },
                'assignInAllWith': { 'start': 0 },
                'defaultsAll': { 'start': 0 },
                'defaultsDeepAll': { 'start': 0 },
                'invokeArgs': { 'start': 2 },
                'invokeArgsMap': { 'start': 2 },
                'mergeAll': { 'start': 0 },
                'mergeAllWith': { 'start': 0 },
                'partial': { 'start': 1 },
                'partialRight': { 'start': 1 },
                'without': { 'start': 1 },
                'zipAll': { 'start': 0 }
            };
            exports.mutate = {
                'array': {
                    'fill': true,
                    'pull': true,
                    'pullAll': true,
                    'pullAllBy': true,
                    'pullAllWith': true,
                    'pullAt': true,
                    'remove': true,
                    'reverse': true
                },
                'object': {
                    'assign': true,
                    'assignAll': true,
                    'assignAllWith': true,
                    'assignIn': true,
                    'assignInAll': true,
                    'assignInAllWith': true,
                    'assignInWith': true,
                    'assignWith': true,
                    'defaults': true,
                    'defaultsAll': true,
                    'defaultsDeep': true,
                    'defaultsDeepAll': true,
                    'merge': true,
                    'mergeAll': true,
                    'mergeAllWith': true,
                    'mergeWith': true
                },
                'set': {
                    'set': true,
                    'setWith': true,
                    'unset': true,
                    'update': true,
                    'updateWith': true
                }
            };
            exports.placeholder = {
                'bind': true,
                'bindKey': true,
                'curry': true,
                'curryRight': true,
                'partial': true,
                'partialRight': true
            };
            exports.realToAlias = function () {
                var hasOwnProperty = Object.prototype.hasOwnProperty, object = exports.aliasToReal, result = {};
                for (var key in object) {
                    var value = object[key];
                    if (hasOwnProperty.call(result, value)) {
                        result[value].push(key);
                    } else {
                        result[value] = [key];
                    }
                }
                return result;
            }();
            exports.remap = {
                'assignAll': 'assign',
                'assignAllWith': 'assignWith',
                'assignInAll': 'assignIn',
                'assignInAllWith': 'assignInWith',
                'curryN': 'curry',
                'curryRightN': 'curryRight',
                'defaultsAll': 'defaults',
                'defaultsDeepAll': 'defaultsDeep',
                'findFrom': 'find',
                'findIndexFrom': 'findIndex',
                'findLastFrom': 'findLast',
                'findLastIndexFrom': 'findLastIndex',
                'getOr': 'get',
                'includesFrom': 'includes',
                'indexOfFrom': 'indexOf',
                'invokeArgs': 'invoke',
                'invokeArgsMap': 'invokeMap',
                'lastIndexOfFrom': 'lastIndexOf',
                'mergeAll': 'merge',
                'mergeAllWith': 'mergeWith',
                'padChars': 'pad',
                'padCharsEnd': 'padEnd',
                'padCharsStart': 'padStart',
                'propertyOf': 'get',
                'rangeStep': 'range',
                'rangeStepRight': 'rangeRight',
                'restFrom': 'rest',
                'spreadFrom': 'spread',
                'trimChars': 'trim',
                'trimCharsEnd': 'trimEnd',
                'trimCharsStart': 'trimStart',
                'zipAll': 'zip'
            };
            exports.skipFixed = {
                'castArray': true,
                'flow': true,
                'flowRight': true,
                'iteratee': true,
                'mixin': true,
                'rearg': true,
                'runInContext': true
            };
            exports.skipRearg = {
                'add': true,
                'assign': true,
                'assignIn': true,
                'bind': true,
                'bindKey': true,
                'concat': true,
                'difference': true,
                'divide': true,
                'eq': true,
                'gt': true,
                'gte': true,
                'isEqual': true,
                'lt': true,
                'lte': true,
                'matchesProperty': true,
                'merge': true,
                'multiply': true,
                'overArgs': true,
                'partial': true,
                'partialRight': true,
                'propertyOf': true,
                'random': true,
                'range': true,
                'rangeRight': true,
                'subtract': true,
                'zip': true,
                'zipObject': true,
                'zipObjectDeep': true
            };
        },
        function (module, exports) {
            module.exports = {};
        }
    ]);
}));
;

;
(function () {
    function n(n) {
        return K(n) && pn.call(n, 'callee') && !bn.call(n, 'callee');
    }
    function t(n, t) {
        return n.push.apply(n, t), n;
    }
    function r(n) {
        return function (t) {
            return null == t ? nn : t[n];
        };
    }
    function e(n, t, r, e, u) {
        return u(n, function (n, u, o) {
            r = e ? (e = false, n) : t(r, n, u, o);
        }), r;
    }
    function u(n, t) {
        return j(t, function (t) {
            return n[t];
        });
    }
    function o(n) {
        return n instanceof i ? n : new i(n);
    }
    function i(n, t) {
        this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!t;
    }
    function c(n, t, r) {
        if (typeof n != 'function')
            throw new TypeError('Expected a function');
        return setTimeout(function () {
            n.apply(nn, r);
        }, t);
    }
    function f(n, t) {
        var r = true;
        return mn(n, function (n, e, u) {
            return r = !!t(n, e, u);
        }), r;
    }
    function a(n, t, r) {
        for (var e = -1, u = n.length; ++e < u;) {
            var o = n[e], i = t(o);
            if (null != i && (c === nn ? i === i : r(i, c)))
                var c = i, f = o;
        }
        return f;
    }
    function l(n, t) {
        var r = [];
        return mn(n, function (n, e, u) {
            t(n, e, u) && r.push(n);
        }), r;
    }
    function p(n, r, e, u, o) {
        var i = -1, c = n.length;
        for (e || (e = D), o || (o = []); ++i < c;) {
            var f = n[i];
            0 < r && e(f) ? 1 < r ? p(f, r - 1, e, u, o) : t(o, f) : u || (o[o.length] = f);
        }
        return o;
    }
    function s(n, t) {
        return n && On(n, t, In);
    }
    function h(n, t) {
        return l(t, function (t) {
            return V(n[t]);
        });
    }
    function v(n, t) {
        return n > t;
    }
    function y(n, t, r, e, u) {
        return n === t || (null == n || null == t || !K(n) && !K(t) ? n !== n && t !== t : b(n, t, r, e, y, u));
    }
    function b(n, t, r, e, u, o) {
        var i = Nn(n), c = Nn(t), f = i ? '[object Array]' : hn.call(n), a = c ? '[object Array]' : hn.call(t), f = '[object Arguments]' == f ? '[object Object]' : f, a = '[object Arguments]' == a ? '[object Object]' : a, l = '[object Object]' == f, c = '[object Object]' == a, a = f == a;
        o || (o = []);
        var p = An(o, function (t) {
                return t[0] == n;
            }), s = An(o, function (n) {
                return n[0] == t;
            });
        if (p && s)
            return p[1] == t;
        if (o.push([
                n,
                t
            ]), o.push([
                t,
                n
            ]), a && !l) {
            if (i)
                r = B(n, t, r, e, u, o);
            else
                n: {
                    switch (f) {
                    case '[object Boolean]':
                    case '[object Date]':
                    case '[object Number]':
                        r = M(+n, +t);
                        break n;
                    case '[object Error]':
                        r = n.name == t.name && n.message == t.message;
                        break n;
                    case '[object RegExp]':
                    case '[object String]':
                        r = n == t + '';
                        break n;
                    }
                    r = false;
                }
            return o.pop(), r;
        }
        return 1 & r || (i = l && pn.call(n, '__wrapped__'), f = c && pn.call(t, '__wrapped__'), !i && !f) ? !!a && (r = R(n, t, r, e, u, o), o.pop(), r) : (i = i ? n.value() : n, f = f ? t.value() : t, r = u(i, f, r, e, o), o.pop(), r);
    }
    function g(n) {
        return typeof n == 'function' ? n : null == n ? Y : (typeof n == 'object' ? d : r)(n);
    }
    function _(n, t) {
        return n < t;
    }
    function j(n, t) {
        var r = -1, e = U(n) ? Array(n.length) : [];
        return mn(n, function (n, u, o) {
            e[++r] = t(n, u, o);
        }), e;
    }
    function d(n) {
        var t = _n(n);
        return function (r) {
            var e = t.length;
            if (null == r)
                return !e;
            for (r = Object(r); e--;) {
                var u = t[e];
                if (!(u in r && y(n[u], r[u], 3)))
                    return false;
            }
            return true;
        };
    }
    function m(n, t) {
        return n = Object(n), G(t, function (t, r) {
            return r in n && (t[r] = n[r]), t;
        }, {});
    }
    function O(n) {
        return xn(q(n, void 0, Y), n + '');
    }
    function x(n, t, r) {
        var e = -1, u = n.length;
        for (0 > t && (t = -t > u ? 0 : u + t), r = r > u ? u : r, 0 > r && (r += u), u = t > r ? 0 : r - t >>> 0, t >>>= 0, r = Array(u); ++e < u;)
            r[e] = n[e + t];
        return r;
    }
    function A(n) {
        return x(n, 0, n.length);
    }
    function E(n, t) {
        var r;
        return mn(n, function (n, e, u) {
            return r = t(n, e, u), !r;
        }), !!r;
    }
    function w(n, r) {
        return G(r, function (n, r) {
            return r.func.apply(r.thisArg, t([n], r.args));
        }, n);
    }
    function k(n, t, r, e) {
        var u = !r;
        r || (r = {});
        for (var o = -1, i = t.length; ++o < i;) {
            var c = t[o], f = e ? e(r[c], n[c], c, r, n) : nn;
            if (f === nn && (f = n[c]), u)
                r[c] = f;
            else {
                var a = r, l = a[c];
                pn.call(a, c) && M(l, f) && (f !== nn || c in a) || (a[c] = f);
            }
        }
        return r;
    }
    function N(n) {
        return O(function (t, r) {
            var e = -1, u = r.length, o = 1 < u ? r[u - 1] : nn, o = 3 < n.length && typeof o == 'function' ? (u--, o) : nn;
            for (t = Object(t); ++e < u;) {
                var i = r[e];
                i && n(t, i, e, o);
            }
            return t;
        });
    }
    function F(n) {
        return function () {
            var t = arguments, r = dn(n.prototype), t = n.apply(r, t);
            return H(t) ? t : r;
        };
    }
    function S(n, t, r) {
        function e() {
            for (var o = -1, i = arguments.length, c = -1, f = r.length, a = Array(f + i), l = this && this !== on && this instanceof e ? u : n; ++c < f;)
                a[c] = r[c];
            for (; i--;)
                a[c++] = arguments[++o];
            return l.apply(t, a);
        }
        if (typeof n != 'function')
            throw new TypeError('Expected a function');
        var u = F(n);
        return e;
    }
    function T(n, t, r, e) {
        return n === nn || M(n, ln[r]) && !pn.call(e, r) ? t : n;
    }
    function B(n, t, r, e, u, o) {
        var i = n.length, c = t.length;
        if (i != c && !(1 & r && c > i))
            return false;
        for (var c = -1, f = true, a = 2 & r ? [] : nn; ++c < i;) {
            var l = n[c], p = t[c];
            if (void 0 !== nn) {
                f = false;
                break;
            }
            if (a) {
                if (!E(t, function (n, t) {
                        if (!z(a, t) && (l === n || u(l, n, r, e, o)))
                            return a.push(t);
                    })) {
                    f = false;
                    break;
                }
            } else if (l !== p && !u(l, p, r, e, o)) {
                f = false;
                break;
            }
        }
        return f;
    }
    function R(n, t, r, e, u, o) {
        var i = 1 & r, c = In(n), f = c.length, a = In(t).length;
        if (f != a && !i)
            return false;
        for (var l = f; l--;) {
            var p = c[l];
            if (!(i ? p in t : pn.call(t, p)))
                return false;
        }
        for (a = true; ++l < f;) {
            var p = c[l], s = n[p], h = t[p];
            if (void 0 !== nn || s !== h && !u(s, h, r, e, o)) {
                a = false;
                break;
            }
            i || (i = 'constructor' == p);
        }
        return a && !i && (r = n.constructor, e = t.constructor, r != e && 'constructor' in n && 'constructor' in t && !(typeof r == 'function' && r instanceof r && typeof e == 'function' && e instanceof e) && (a = false)), a;
    }
    function D(t) {
        return Nn(t) || n(t);
    }
    function I(n) {
        var t = [];
        if (null != n)
            for (var r in Object(n))
                t.push(r);
        return t;
    }
    function q(n, t, r) {
        return t = jn(t === nn ? n.length - 1 : t, 0), function () {
            for (var e = arguments, u = -1, o = jn(e.length - t, 0), i = Array(o); ++u < o;)
                i[u] = e[t + u];
            for (u = -1, o = Array(t + 1); ++u < t;)
                o[u] = e[u];
            return o[t] = r(i), n.apply(this, o);
        };
    }
    function $(n) {
        return (null == n ? 0 : n.length) ? p(n, 1) : [];
    }
    function P(n) {
        return n && n.length ? n[0] : nn;
    }
    function z(n, t, r) {
        var e = null == n ? 0 : n.length;
        r = typeof r == 'number' ? 0 > r ? jn(e + r, 0) : r : 0, r = (r || 0) - 1;
        for (var u = t === t; ++r < e;) {
            var o = n[r];
            if (u ? o === t : o !== o)
                return r;
        }
        return -1;
    }
    function C(n, t) {
        return mn(n, g(t));
    }
    function G(n, t, r) {
        return e(n, g(t), r, 3 > arguments.length, mn);
    }
    function J(n, t) {
        var r;
        if (typeof t != 'function')
            throw new TypeError('Expected a function');
        return n = Fn(n), function () {
            return 0 < --n && (r = t.apply(this, arguments)), 1 >= n && (t = nn), r;
        };
    }
    function M(n, t) {
        return n === t || n !== n && t !== t;
    }
    function U(n) {
        var t;
        return (t = null != n) && (t = n.length, t = typeof t == 'number' && -1 < t && 0 == t % 1 && 9007199254740991 >= t), t && !V(n);
    }
    function V(n) {
        return !!H(n) && (n = hn.call(n), '[object Function]' == n || '[object GeneratorFunction]' == n || '[object AsyncFunction]' == n || '[object Proxy]' == n);
    }
    function H(n) {
        var t = typeof n;
        return null != n && ('object' == t || 'function' == t);
    }
    function K(n) {
        return null != n && typeof n == 'object';
    }
    function L(n) {
        return typeof n == 'number' || K(n) && '[object Number]' == hn.call(n);
    }
    function Q(n) {
        return typeof n == 'string' || !Nn(n) && K(n) && '[object String]' == hn.call(n);
    }
    function W(n) {
        return typeof n == 'string' ? n : null == n ? '' : n + '';
    }
    function X(n) {
        return null == n ? [] : u(n, In(n));
    }
    function Y(n) {
        return n;
    }
    function Z(n, r, e) {
        var u = In(r), o = h(r, u);
        null != e || H(r) && (o.length || !u.length) || (e = r, r = n, n = this, o = h(r, In(r)));
        var i = !(H(e) && 'chain' in e && !e.chain), c = V(n);
        return mn(o, function (e) {
            var u = r[e];
            n[e] = u, c && (n.prototype[e] = function () {
                var r = this.__chain__;
                if (i || r) {
                    var e = n(this.__wrapped__);
                    return (e.__actions__ = A(this.__actions__)).push({
                        func: u,
                        args: arguments,
                        thisArg: n
                    }), e.__chain__ = r, e;
                }
                return u.apply(n, t([this.value()], arguments));
            });
        }), n;
    }
    var nn, tn = 1 / 0, rn = /[&<>"']/g, en = RegExp(rn.source), un = typeof self == 'object' && self && self.Object === Object && self, on = typeof global == 'object' && global && global.Object === Object && global || un || Function('return this')(), cn = (un = typeof exports == 'object' && exports && !exports.nodeType && exports) && typeof module == 'object' && module && !module.nodeType && module, fn = function (n) {
            return function (t) {
                return null == n ? nn : n[t];
            };
        }({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            '\'': '&#39;'
        }), an = Array.prototype, ln = Object.prototype, pn = ln.hasOwnProperty, sn = 0, hn = ln.toString, vn = on._, yn = Object.create, bn = ln.propertyIsEnumerable, gn = on.isFinite, _n = function (n, t) {
            return function (r) {
                return n(t(r));
            };
        }(Object.keys, Object), jn = Math.max, dn = function () {
            function n() {
            }
            return function (t) {
                return H(t) ? yn ? yn(t) : (n.prototype = t, t = new n(), n.prototype = nn, t) : {};
            };
        }();
    i.prototype = dn(o.prototype), i.prototype.constructor = i;
    var mn = function (n, t) {
            return function (r, e) {
                if (null == r)
                    return r;
                if (!U(r))
                    return n(r, e);
                for (var u = r.length, o = t ? u : -1, i = Object(r); (t ? o-- : ++o < u) && false !== e(i[o], o, i););
                return r;
            };
        }(s), On = function (n) {
            return function (t, r, e) {
                var u = -1, o = Object(t);
                e = e(t);
                for (var i = e.length; i--;) {
                    var c = e[n ? i : ++u];
                    if (false === r(o[c], c, o))
                        break;
                }
                return t;
            };
        }(), xn = Y, An = function (n) {
            return function (t, r, e) {
                var u = Object(t);
                if (!U(t)) {
                    var o = g(r);
                    t = In(t), r = function (n) {
                        return o(u[n], n, u);
                    };
                }
                return r = n(t, r, e), -1 < r ? u[o ? t[r] : r] : nn;
            };
        }(function (n, t, r) {
            var e = null == n ? 0 : n.length;
            if (!e)
                return -1;
            r = null == r ? 0 : Fn(r), 0 > r && (r = jn(e + r, 0));
            n: {
                for (t = g(t), e = n.length, r += -1; ++r < e;)
                    if (t(n[r], r, n)) {
                        n = r;
                        break n;
                    }
                n = -1;
            }
            return n;
        }), En = O(function (n, t, r) {
            return S(n, t, r);
        }), wn = O(function (n, t) {
            return c(n, 1, t);
        }), kn = O(function (n, t, r) {
            return c(n, Sn(t) || 0, r);
        }), Nn = Array.isArray, Fn = Number, Sn = Number, Tn = N(function (n, t) {
            k(t, _n(t), n);
        }), Bn = N(function (n, t) {
            k(t, I(t), n);
        }), Rn = N(function (n, t, r, e) {
            k(t, qn(t), n, e);
        }), Dn = O(function (n) {
            return n.push(nn, T), Rn.apply(nn, n);
        }), In = _n, qn = I, $n = function (n) {
            return xn(q(n, nn, $), n + '');
        }(function (n, t) {
            return null == n ? {} : m(n, t);
        });
    o.assignIn = Bn, o.before = J, o.bind = En, o.chain = function (n) {
        return n = o(n), n.__chain__ = true, n;
    }, o.compact = function (n) {
        return l(n, Boolean);
    }, o.concat = function () {
        var n = arguments.length;
        if (!n)
            return [];
        for (var r = Array(n - 1), e = arguments[0]; n--;)
            r[n - 1] = arguments[n];
        return t(Nn(e) ? A(e) : [e], p(r, 1));
    }, o.create = function (n, t) {
        var r = dn(n);
        return null == t ? r : Tn(r, t);
    }, o.defaults = Dn, o.defer = wn, o.delay = kn, o.filter = function (n, t) {
        return l(n, g(t));
    }, o.flatten = $, o.flattenDeep = function (n) {
        return (null == n ? 0 : n.length) ? p(n, tn) : [];
    }, o.iteratee = g, o.keys = In, o.map = function (n, t) {
        return j(n, g(t));
    }, o.matches = function (n) {
        return d(Tn({}, n));
    }, o.mixin = Z, o.negate = function (n) {
        if (typeof n != 'function')
            throw new TypeError('Expected a function');
        return function () {
            return !n.apply(this, arguments);
        };
    }, o.once = function (n) {
        return J(2, n);
    }, o.pick = $n, o.slice = function (n, t, r) {
        var e = null == n ? 0 : n.length;
        return r = r === nn ? e : +r, e ? x(n, null == t ? 0 : +t, r) : [];
    }, o.sortBy = function (n, t) {
        var e = 0;
        return t = g(t), j(j(n, function (n, r, u) {
            return {
                value: n,
                index: e++,
                criteria: t(n, r, u)
            };
        }).sort(function (n, t) {
            var r;
            n: {
                r = n.criteria;
                var e = t.criteria;
                if (r !== e) {
                    var u = r !== nn, o = null === r, i = r === r, c = e !== nn, f = null === e, a = e === e;
                    if (!f && r > e || o && c && a || !u && a || !i) {
                        r = 1;
                        break n;
                    }
                    if (!o && r < e || f && u && i || !c && i || !a) {
                        r = -1;
                        break n;
                    }
                }
                r = 0;
            }
            return r || n.index - t.index;
        }), r('value'));
    }, o.tap = function (n, t) {
        return t(n), n;
    }, o.thru = function (n, t) {
        return t(n);
    }, o.toArray = function (n) {
        return U(n) ? n.length ? A(n) : [] : X(n);
    }, o.values = X, o.extend = Bn, Z(o, o), o.clone = function (n) {
        return H(n) ? Nn(n) ? A(n) : k(n, _n(n)) : n;
    }, o.escape = function (n) {
        return (n = W(n)) && en.test(n) ? n.replace(rn, fn) : n;
    }, o.every = function (n, t, r) {
        return t = r ? nn : t, f(n, g(t));
    }, o.find = An, o.forEach = C, o.has = function (n, t) {
        return null != n && pn.call(n, t);
    }, o.head = P, o.identity = Y, o.indexOf = z, o.isArguments = n, o.isArray = Nn, o.isBoolean = function (n) {
        return true === n || false === n || K(n) && '[object Boolean]' == hn.call(n);
    }, o.isDate = function (n) {
        return K(n) && '[object Date]' == hn.call(n);
    }, o.isEmpty = function (t) {
        return U(t) && (Nn(t) || Q(t) || V(t.splice) || n(t)) ? !t.length : !_n(t).length;
    }, o.isEqual = function (n, t) {
        return y(n, t);
    }, o.isFinite = function (n) {
        return typeof n == 'number' && gn(n);
    }, o.isFunction = V, o.isNaN = function (n) {
        return L(n) && n != +n;
    }, o.isNull = function (n) {
        return null === n;
    }, o.isNumber = L, o.isObject = H, o.isRegExp = function (n) {
        return K(n) && '[object RegExp]' == hn.call(n);
    }, o.isString = Q, o.isUndefined = function (n) {
        return n === nn;
    }, o.last = function (n) {
        var t = null == n ? 0 : n.length;
        return t ? n[t - 1] : nn;
    }, o.max = function (n) {
        return n && n.length ? a(n, Y, v) : nn;
    }, o.min = function (n) {
        return n && n.length ? a(n, Y, _) : nn;
    }, o.noConflict = function () {
        return on._ === this && (on._ = vn), this;
    }, o.noop = function () {
    }, o.reduce = G, o.result = function (n, t, r) {
        return t = null == n ? nn : n[t], t === nn && (t = r), V(t) ? t.call(n) : t;
    }, o.size = function (n) {
        return null == n ? 0 : (n = U(n) ? n : _n(n), n.length);
    }, o.some = function (n, t, r) {
        return t = r ? nn : t, E(n, g(t));
    }, o.uniqueId = function (n) {
        var t = ++sn;
        return W(n) + t;
    }, o.each = C, o.first = P, Z(o, function () {
        var n = {};
        return s(o, function (t, r) {
            pn.call(o.prototype, r) || (n[r] = t);
        }), n;
    }(), { chain: false }), o.VERSION = '4.17.3', mn('pop join replace reverse split push shift sort splice unshift'.split(' '), function (n) {
        var t = (/^(?:replace|split)$/.test(n) ? String.prototype : an)[n], r = /^(?:push|sort|unshift)$/.test(n) ? 'tap' : 'thru', e = /^(?:pop|join|replace|shift)$/.test(n);
        o.prototype[n] = function () {
            var n = arguments;
            if (e && !this.__chain__) {
                var u = this.value();
                return t.apply(Nn(u) ? u : [], n);
            }
            return this[r](function (r) {
                return t.apply(Nn(r) ? r : [], n);
            });
        };
    }), o.prototype.toJSON = o.prototype.valueOf = o.prototype.value = function () {
        return w(this.__wrapped__, this.__actions__);
    }, typeof define == 'function' && typeof define.amd == 'object' && define.amd ? (on._ = o, define('fp/lodash.core.min', [], function () {
        return o;
    })) : cn ? ((cn.exports = o)._ = o, un._ = o) : on._ = o;
}.call(this));

;
(function () {
    function n(n) {
        return K(n) && pn.call(n, 'callee') && !bn.call(n, 'callee');
    }
    function t(n, t) {
        return n.push.apply(n, t), n;
    }
    function r(n) {
        return function (t) {
            return null == t ? nn : t[n];
        };
    }
    function e(n, t, r, e, u) {
        return u(n, function (n, u, o) {
            r = e ? (e = false, n) : t(r, n, u, o);
        }), r;
    }
    function u(n, t) {
        return j(t, function (t) {
            return n[t];
        });
    }
    function o(n) {
        return n instanceof i ? n : new i(n);
    }
    function i(n, t) {
        this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!t;
    }
    function c(n, t, r) {
        if (typeof n != 'function')
            throw new TypeError('Expected a function');
        return setTimeout(function () {
            n.apply(nn, r);
        }, t);
    }
    function f(n, t) {
        var r = true;
        return mn(n, function (n, e, u) {
            return r = !!t(n, e, u);
        }), r;
    }
    function a(n, t, r) {
        for (var e = -1, u = n.length; ++e < u;) {
            var o = n[e], i = t(o);
            if (null != i && (c === nn ? i === i : r(i, c)))
                var c = i, f = o;
        }
        return f;
    }
    function l(n, t) {
        var r = [];
        return mn(n, function (n, e, u) {
            t(n, e, u) && r.push(n);
        }), r;
    }
    function p(n, r, e, u, o) {
        var i = -1, c = n.length;
        for (e || (e = D), o || (o = []); ++i < c;) {
            var f = n[i];
            0 < r && e(f) ? 1 < r ? p(f, r - 1, e, u, o) : t(o, f) : u || (o[o.length] = f);
        }
        return o;
    }
    function s(n, t) {
        return n && On(n, t, In);
    }
    function h(n, t) {
        return l(t, function (t) {
            return V(n[t]);
        });
    }
    function v(n, t) {
        return n > t;
    }
    function y(n, t, r, e, u) {
        return n === t || (null == n || null == t || !K(n) && !K(t) ? n !== n && t !== t : b(n, t, r, e, y, u));
    }
    function b(n, t, r, e, u, o) {
        var i = Nn(n), c = Nn(t), f = i ? '[object Array]' : hn.call(n), a = c ? '[object Array]' : hn.call(t), f = '[object Arguments]' == f ? '[object Object]' : f, a = '[object Arguments]' == a ? '[object Object]' : a, l = '[object Object]' == f, c = '[object Object]' == a, a = f == a;
        o || (o = []);
        var p = An(o, function (t) {
                return t[0] == n;
            }), s = An(o, function (n) {
                return n[0] == t;
            });
        if (p && s)
            return p[1] == t;
        if (o.push([
                n,
                t
            ]), o.push([
                t,
                n
            ]), a && !l) {
            if (i)
                r = B(n, t, r, e, u, o);
            else
                n: {
                    switch (f) {
                    case '[object Boolean]':
                    case '[object Date]':
                    case '[object Number]':
                        r = M(+n, +t);
                        break n;
                    case '[object Error]':
                        r = n.name == t.name && n.message == t.message;
                        break n;
                    case '[object RegExp]':
                    case '[object String]':
                        r = n == t + '';
                        break n;
                    }
                    r = false;
                }
            return o.pop(), r;
        }
        return 1 & r || (i = l && pn.call(n, '__wrapped__'), f = c && pn.call(t, '__wrapped__'), !i && !f) ? !!a && (r = R(n, t, r, e, u, o), o.pop(), r) : (i = i ? n.value() : n, f = f ? t.value() : t, r = u(i, f, r, e, o), o.pop(), r);
    }
    function g(n) {
        return typeof n == 'function' ? n : null == n ? Y : (typeof n == 'object' ? d : r)(n);
    }
    function _(n, t) {
        return n < t;
    }
    function j(n, t) {
        var r = -1, e = U(n) ? Array(n.length) : [];
        return mn(n, function (n, u, o) {
            e[++r] = t(n, u, o);
        }), e;
    }
    function d(n) {
        var t = _n(n);
        return function (r) {
            var e = t.length;
            if (null == r)
                return !e;
            for (r = Object(r); e--;) {
                var u = t[e];
                if (!(u in r && y(n[u], r[u], 3)))
                    return false;
            }
            return true;
        };
    }
    function m(n, t) {
        return n = Object(n), G(t, function (t, r) {
            return r in n && (t[r] = n[r]), t;
        }, {});
    }
    function O(n) {
        return xn(q(n, void 0, Y), n + '');
    }
    function x(n, t, r) {
        var e = -1, u = n.length;
        for (0 > t && (t = -t > u ? 0 : u + t), r = r > u ? u : r, 0 > r && (r += u), u = t > r ? 0 : r - t >>> 0, t >>>= 0, r = Array(u); ++e < u;)
            r[e] = n[e + t];
        return r;
    }
    function A(n) {
        return x(n, 0, n.length);
    }
    function E(n, t) {
        var r;
        return mn(n, function (n, e, u) {
            return r = t(n, e, u), !r;
        }), !!r;
    }
    function w(n, r) {
        return G(r, function (n, r) {
            return r.func.apply(r.thisArg, t([n], r.args));
        }, n);
    }
    function k(n, t, r, e) {
        var u = !r;
        r || (r = {});
        for (var o = -1, i = t.length; ++o < i;) {
            var c = t[o], f = e ? e(r[c], n[c], c, r, n) : nn;
            if (f === nn && (f = n[c]), u)
                r[c] = f;
            else {
                var a = r, l = a[c];
                pn.call(a, c) && M(l, f) && (f !== nn || c in a) || (a[c] = f);
            }
        }
        return r;
    }
    function N(n) {
        return O(function (t, r) {
            var e = -1, u = r.length, o = 1 < u ? r[u - 1] : nn, o = 3 < n.length && typeof o == 'function' ? (u--, o) : nn;
            for (t = Object(t); ++e < u;) {
                var i = r[e];
                i && n(t, i, e, o);
            }
            return t;
        });
    }
    function F(n) {
        return function () {
            var t = arguments, r = dn(n.prototype), t = n.apply(r, t);
            return H(t) ? t : r;
        };
    }
    function S(n, t, r) {
        function e() {
            for (var o = -1, i = arguments.length, c = -1, f = r.length, a = Array(f + i), l = this && this !== on && this instanceof e ? u : n; ++c < f;)
                a[c] = r[c];
            for (; i--;)
                a[c++] = arguments[++o];
            return l.apply(t, a);
        }
        if (typeof n != 'function')
            throw new TypeError('Expected a function');
        var u = F(n);
        return e;
    }
    function T(n, t, r, e) {
        return n === nn || M(n, ln[r]) && !pn.call(e, r) ? t : n;
    }
    function B(n, t, r, e, u, o) {
        var i = n.length, c = t.length;
        if (i != c && !(1 & r && c > i))
            return false;
        for (var c = -1, f = true, a = 2 & r ? [] : nn; ++c < i;) {
            var l = n[c], p = t[c];
            if (void 0 !== nn) {
                f = false;
                break;
            }
            if (a) {
                if (!E(t, function (n, t) {
                        if (!z(a, t) && (l === n || u(l, n, r, e, o)))
                            return a.push(t);
                    })) {
                    f = false;
                    break;
                }
            } else if (l !== p && !u(l, p, r, e, o)) {
                f = false;
                break;
            }
        }
        return f;
    }
    function R(n, t, r, e, u, o) {
        var i = 1 & r, c = In(n), f = c.length, a = In(t).length;
        if (f != a && !i)
            return false;
        for (var l = f; l--;) {
            var p = c[l];
            if (!(i ? p in t : pn.call(t, p)))
                return false;
        }
        for (a = true; ++l < f;) {
            var p = c[l], s = n[p], h = t[p];
            if (void 0 !== nn || s !== h && !u(s, h, r, e, o)) {
                a = false;
                break;
            }
            i || (i = 'constructor' == p);
        }
        return a && !i && (r = n.constructor, e = t.constructor, r != e && 'constructor' in n && 'constructor' in t && !(typeof r == 'function' && r instanceof r && typeof e == 'function' && e instanceof e) && (a = false)), a;
    }
    function D(t) {
        return Nn(t) || n(t);
    }
    function I(n) {
        var t = [];
        if (null != n)
            for (var r in Object(n))
                t.push(r);
        return t;
    }
    function q(n, t, r) {
        return t = jn(t === nn ? n.length - 1 : t, 0), function () {
            for (var e = arguments, u = -1, o = jn(e.length - t, 0), i = Array(o); ++u < o;)
                i[u] = e[t + u];
            for (u = -1, o = Array(t + 1); ++u < t;)
                o[u] = e[u];
            return o[t] = r(i), n.apply(this, o);
        };
    }
    function $(n) {
        return (null == n ? 0 : n.length) ? p(n, 1) : [];
    }
    function P(n) {
        return n && n.length ? n[0] : nn;
    }
    function z(n, t, r) {
        var e = null == n ? 0 : n.length;
        r = typeof r == 'number' ? 0 > r ? jn(e + r, 0) : r : 0, r = (r || 0) - 1;
        for (var u = t === t; ++r < e;) {
            var o = n[r];
            if (u ? o === t : o !== o)
                return r;
        }
        return -1;
    }
    function C(n, t) {
        return mn(n, g(t));
    }
    function G(n, t, r) {
        return e(n, g(t), r, 3 > arguments.length, mn);
    }
    function J(n, t) {
        var r;
        if (typeof t != 'function')
            throw new TypeError('Expected a function');
        return n = Fn(n), function () {
            return 0 < --n && (r = t.apply(this, arguments)), 1 >= n && (t = nn), r;
        };
    }
    function M(n, t) {
        return n === t || n !== n && t !== t;
    }
    function U(n) {
        var t;
        return (t = null != n) && (t = n.length, t = typeof t == 'number' && -1 < t && 0 == t % 1 && 9007199254740991 >= t), t && !V(n);
    }
    function V(n) {
        return !!H(n) && (n = hn.call(n), '[object Function]' == n || '[object GeneratorFunction]' == n || '[object AsyncFunction]' == n || '[object Proxy]' == n);
    }
    function H(n) {
        var t = typeof n;
        return null != n && ('object' == t || 'function' == t);
    }
    function K(n) {
        return null != n && typeof n == 'object';
    }
    function L(n) {
        return typeof n == 'number' || K(n) && '[object Number]' == hn.call(n);
    }
    function Q(n) {
        return typeof n == 'string' || !Nn(n) && K(n) && '[object String]' == hn.call(n);
    }
    function W(n) {
        return typeof n == 'string' ? n : null == n ? '' : n + '';
    }
    function X(n) {
        return null == n ? [] : u(n, In(n));
    }
    function Y(n) {
        return n;
    }
    function Z(n, r, e) {
        var u = In(r), o = h(r, u);
        null != e || H(r) && (o.length || !u.length) || (e = r, r = n, n = this, o = h(r, In(r)));
        var i = !(H(e) && 'chain' in e && !e.chain), c = V(n);
        return mn(o, function (e) {
            var u = r[e];
            n[e] = u, c && (n.prototype[e] = function () {
                var r = this.__chain__;
                if (i || r) {
                    var e = n(this.__wrapped__);
                    return (e.__actions__ = A(this.__actions__)).push({
                        func: u,
                        args: arguments,
                        thisArg: n
                    }), e.__chain__ = r, e;
                }
                return u.apply(n, t([this.value()], arguments));
            });
        }), n;
    }
    var nn, tn = 1 / 0, rn = /[&<>"']/g, en = RegExp(rn.source), un = typeof self == 'object' && self && self.Object === Object && self, on = typeof global == 'object' && global && global.Object === Object && global || un || Function('return this')(), cn = (un = typeof exports == 'object' && exports && !exports.nodeType && exports) && typeof module == 'object' && module && !module.nodeType && module, fn = function (n) {
            return function (t) {
                return null == n ? nn : n[t];
            };
        }({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            '\'': '&#39;'
        }), an = Array.prototype, ln = Object.prototype, pn = ln.hasOwnProperty, sn = 0, hn = ln.toString, vn = on._, yn = Object.create, bn = ln.propertyIsEnumerable, gn = on.isFinite, _n = function (n, t) {
            return function (r) {
                return n(t(r));
            };
        }(Object.keys, Object), jn = Math.max, dn = function () {
            function n() {
            }
            return function (t) {
                return H(t) ? yn ? yn(t) : (n.prototype = t, t = new n(), n.prototype = nn, t) : {};
            };
        }();
    i.prototype = dn(o.prototype), i.prototype.constructor = i;
    var mn = function (n, t) {
            return function (r, e) {
                if (null == r)
                    return r;
                if (!U(r))
                    return n(r, e);
                for (var u = r.length, o = t ? u : -1, i = Object(r); (t ? o-- : ++o < u) && false !== e(i[o], o, i););
                return r;
            };
        }(s), On = function (n) {
            return function (t, r, e) {
                var u = -1, o = Object(t);
                e = e(t);
                for (var i = e.length; i--;) {
                    var c = e[n ? i : ++u];
                    if (false === r(o[c], c, o))
                        break;
                }
                return t;
            };
        }(), xn = Y, An = function (n) {
            return function (t, r, e) {
                var u = Object(t);
                if (!U(t)) {
                    var o = g(r);
                    t = In(t), r = function (n) {
                        return o(u[n], n, u);
                    };
                }
                return r = n(t, r, e), -1 < r ? u[o ? t[r] : r] : nn;
            };
        }(function (n, t, r) {
            var e = null == n ? 0 : n.length;
            if (!e)
                return -1;
            r = null == r ? 0 : Fn(r), 0 > r && (r = jn(e + r, 0));
            n: {
                for (t = g(t), e = n.length, r += -1; ++r < e;)
                    if (t(n[r], r, n)) {
                        n = r;
                        break n;
                    }
                n = -1;
            }
            return n;
        }), En = O(function (n, t, r) {
            return S(n, t, r);
        }), wn = O(function (n, t) {
            return c(n, 1, t);
        }), kn = O(function (n, t, r) {
            return c(n, Sn(t) || 0, r);
        }), Nn = Array.isArray, Fn = Number, Sn = Number, Tn = N(function (n, t) {
            k(t, _n(t), n);
        }), Bn = N(function (n, t) {
            k(t, I(t), n);
        }), Rn = N(function (n, t, r, e) {
            k(t, qn(t), n, e);
        }), Dn = O(function (n) {
            return n.push(nn, T), Rn.apply(nn, n);
        }), In = _n, qn = I, $n = function (n) {
            return xn(q(n, nn, $), n + '');
        }(function (n, t) {
            return null == n ? {} : m(n, t);
        });
    o.assignIn = Bn, o.before = J, o.bind = En, o.chain = function (n) {
        return n = o(n), n.__chain__ = true, n;
    }, o.compact = function (n) {
        return l(n, Boolean);
    }, o.concat = function () {
        var n = arguments.length;
        if (!n)
            return [];
        for (var r = Array(n - 1), e = arguments[0]; n--;)
            r[n - 1] = arguments[n];
        return t(Nn(e) ? A(e) : [e], p(r, 1));
    }, o.create = function (n, t) {
        var r = dn(n);
        return null == t ? r : Tn(r, t);
    }, o.defaults = Dn, o.defer = wn, o.delay = kn, o.filter = function (n, t) {
        return l(n, g(t));
    }, o.flatten = $, o.flattenDeep = function (n) {
        return (null == n ? 0 : n.length) ? p(n, tn) : [];
    }, o.iteratee = g, o.keys = In, o.map = function (n, t) {
        return j(n, g(t));
    }, o.matches = function (n) {
        return d(Tn({}, n));
    }, o.mixin = Z, o.negate = function (n) {
        if (typeof n != 'function')
            throw new TypeError('Expected a function');
        return function () {
            return !n.apply(this, arguments);
        };
    }, o.once = function (n) {
        return J(2, n);
    }, o.pick = $n, o.slice = function (n, t, r) {
        var e = null == n ? 0 : n.length;
        return r = r === nn ? e : +r, e ? x(n, null == t ? 0 : +t, r) : [];
    }, o.sortBy = function (n, t) {
        var e = 0;
        return t = g(t), j(j(n, function (n, r, u) {
            return {
                value: n,
                index: e++,
                criteria: t(n, r, u)
            };
        }).sort(function (n, t) {
            var r;
            n: {
                r = n.criteria;
                var e = t.criteria;
                if (r !== e) {
                    var u = r !== nn, o = null === r, i = r === r, c = e !== nn, f = null === e, a = e === e;
                    if (!f && r > e || o && c && a || !u && a || !i) {
                        r = 1;
                        break n;
                    }
                    if (!o && r < e || f && u && i || !c && i || !a) {
                        r = -1;
                        break n;
                    }
                }
                r = 0;
            }
            return r || n.index - t.index;
        }), r('value'));
    }, o.tap = function (n, t) {
        return t(n), n;
    }, o.thru = function (n, t) {
        return t(n);
    }, o.toArray = function (n) {
        return U(n) ? n.length ? A(n) : [] : X(n);
    }, o.values = X, o.extend = Bn, Z(o, o), o.clone = function (n) {
        return H(n) ? Nn(n) ? A(n) : k(n, _n(n)) : n;
    }, o.escape = function (n) {
        return (n = W(n)) && en.test(n) ? n.replace(rn, fn) : n;
    }, o.every = function (n, t, r) {
        return t = r ? nn : t, f(n, g(t));
    }, o.find = An, o.forEach = C, o.has = function (n, t) {
        return null != n && pn.call(n, t);
    }, o.head = P, o.identity = Y, o.indexOf = z, o.isArguments = n, o.isArray = Nn, o.isBoolean = function (n) {
        return true === n || false === n || K(n) && '[object Boolean]' == hn.call(n);
    }, o.isDate = function (n) {
        return K(n) && '[object Date]' == hn.call(n);
    }, o.isEmpty = function (t) {
        return U(t) && (Nn(t) || Q(t) || V(t.splice) || n(t)) ? !t.length : !_n(t).length;
    }, o.isEqual = function (n, t) {
        return y(n, t);
    }, o.isFinite = function (n) {
        return typeof n == 'number' && gn(n);
    }, o.isFunction = V, o.isNaN = function (n) {
        return L(n) && n != +n;
    }, o.isNull = function (n) {
        return null === n;
    }, o.isNumber = L, o.isObject = H, o.isRegExp = function (n) {
        return K(n) && '[object RegExp]' == hn.call(n);
    }, o.isString = Q, o.isUndefined = function (n) {
        return n === nn;
    }, o.last = function (n) {
        var t = null == n ? 0 : n.length;
        return t ? n[t - 1] : nn;
    }, o.max = function (n) {
        return n && n.length ? a(n, Y, v) : nn;
    }, o.min = function (n) {
        return n && n.length ? a(n, Y, _) : nn;
    }, o.noConflict = function () {
        return on._ === this && (on._ = vn), this;
    }, o.noop = function () {
    }, o.reduce = G, o.result = function (n, t, r) {
        return t = null == n ? nn : n[t], t === nn && (t = r), V(t) ? t.call(n) : t;
    }, o.size = function (n) {
        return null == n ? 0 : (n = U(n) ? n : _n(n), n.length);
    }, o.some = function (n, t, r) {
        return t = r ? nn : t, E(n, g(t));
    }, o.uniqueId = function (n) {
        var t = ++sn;
        return W(n) + t;
    }, o.each = C, o.first = P, Z(o, function () {
        var n = {};
        return s(o, function (t, r) {
            pn.call(o.prototype, r) || (n[r] = t);
        }), n;
    }(), { chain: false }), o.VERSION = '4.17.3', mn('pop join replace reverse split push shift sort splice unshift'.split(' '), function (n) {
        var t = (/^(?:replace|split)$/.test(n) ? String.prototype : an)[n], r = /^(?:push|sort|unshift)$/.test(n) ? 'tap' : 'thru', e = /^(?:pop|join|replace|shift)$/.test(n);
        o.prototype[n] = function () {
            var n = arguments;
            if (e && !this.__chain__) {
                var u = this.value();
                return t.apply(Nn(u) ? u : [], n);
            }
            return this[r](function (r) {
                return t.apply(Nn(r) ? r : [], n);
            });
        };
    }), o.prototype.toJSON = o.prototype.valueOf = o.prototype.value = function () {
        return w(this.__wrapped__, this.__actions__);
    }, typeof define == 'function' && typeof define.amd == 'object' && define.amd ? (on._ = o, define('lodash/lodash.core.min', [], function () {
        return o;
    })) : cn ? ((cn.exports = o)._ = o, un._ = o) : on._ = o;
}.call(this));

;
(function () {
    var undefined;
    var VERSION = '4.17.3';
    var FUNC_ERROR_TEXT = 'Expected a function';
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1, WRAP_PARTIAL_FLAG = 32;
    var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = '[object Arguments]', arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', numberTag = '[object Number]', objectTag = '[object Object]', proxyTag = '[object Proxy]', regexpTag = '[object RegExp]', stringTag = '[object String]';
    var reUnescapedHtml = /[&<>"']/g, reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#39;'
    };
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    function arrayPush(array, values) {
        array.push.apply(array, values);
        return array;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
                return index;
            }
        }
        return -1;
    }
    function baseProperty(key) {
        return function (object) {
            return object == null ? undefined : object[key];
        };
    }
    function basePropertyOf(object) {
        return function (key) {
            return object == null ? undefined : object[key];
        };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function (value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    function baseValues(object, props) {
        return baseMap(props, function (key) {
            return object[key];
        });
    }
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    function overArg(func, transform) {
        return function (arg) {
            return func(transform(arg));
        };
    }
    var arrayProto = Array.prototype, objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var idCounter = 0;
    var nativeObjectToString = objectProto.toString;
    var oldDash = root._;
    var objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeIsFinite = root.isFinite, nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max;
    function lodash(value) {
        return value instanceof LodashWrapper ? value : new LodashWrapper(value);
    }
    var baseCreate = function () {
        function object() {
        }
        return function (proto) {
            if (!isObject(proto)) {
                return {};
            }
            if (objectCreate) {
                return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object();
            object.prototype = undefined;
            return result;
        };
    }();
    function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
    }
    LodashWrapper.prototype = baseCreate(lodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;
    function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
            baseAssignValue(object, key, value);
        }
    }
    function baseAssignValue(object, key, value) {
        object[key] = value;
    }
    function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function () {
            func.apply(undefined, args);
        }, wait);
    }
    var baseEach = createBaseEach(baseForOwn);
    function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
            result = !!predicate(value, index, collection);
            return result;
        });
        return result;
    }
    function baseExtremum(array, iteratee, comparator) {
        var index = -1, length = array.length;
        while (++index < length) {
            var value = array[index], current = iteratee(value);
            if (current != null && (computed === undefined ? current === current && !false : comparator(current, computed))) {
                var computed = current, result = value;
            }
        }
        return result;
    }
    function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
            if (predicate(value, index, collection)) {
                result.push(value);
            }
        });
        return result;
    }
    function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1, length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);
        while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                } else {
                    arrayPush(result, value);
                }
            } else if (!isStrict) {
                result[result.length] = value;
            }
        }
        return result;
    }
    var baseFor = createBaseFor();
    function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
    }
    function baseFunctions(object, props) {
        return baseFilter(props, function (key) {
            return isFunction(object[key]);
        });
    }
    function baseGetTag(value) {
        return objectToString(value);
    }
    function baseGt(value, other) {
        return value > other;
    }
    var baseIsArguments = noop;
    function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
    }
    function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
            return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : baseGetTag(object), othTag = othIsArr ? arrayTag : baseGetTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        stack || (stack = []);
        var objStack = find(stack, function (entry) {
            return entry[0] == object;
        });
        var othStack = find(stack, function (entry) {
            return entry[0] == other;
        });
        if (objStack && othStack) {
            return objStack[1] == other;
        }
        stack.push([
            object,
            other
        ]);
        stack.push([
            other,
            object
        ]);
        if (isSameTag && !objIsObj) {
            var result = objIsArr ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            stack.pop();
            return result;
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
            if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                var result = equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                stack.pop();
                return result;
            }
        }
        if (!isSameTag) {
            return false;
        }
        var result = equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        stack.pop();
        return result;
    }
    function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }
    function baseIteratee(func) {
        if (typeof func == 'function') {
            return func;
        }
        if (func == null) {
            return identity;
        }
        return (typeof func == 'object' ? baseMatches : baseProperty)(func);
    }
    function baseLt(value, other) {
        return value < other;
    }
    function baseMap(collection, iteratee) {
        var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
            result[++index] = iteratee(value, key, collection);
        });
        return result;
    }
    function baseMatches(source) {
        var props = nativeKeys(source);
        return function (object) {
            var length = props.length;
            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (length--) {
                var key = props[length];
                if (!(key in object && baseIsEqual(source[key], object[key], COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG))) {
                    return false;
                }
            }
            return true;
        };
    }
    function basePick(object, props) {
        object = Object(object);
        return reduce(props, function (result, key) {
            if (key in object) {
                result[key] = object[key];
            }
            return result;
        }, {});
    }
    function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
    }
    function baseSlice(array, start, end) {
        var index = -1, length = array.length;
        if (start < 0) {
            start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
            end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);
        while (++index < length) {
            result[index] = array[index + start];
        }
        return result;
    }
    function copyArray(source) {
        return baseSlice(source, 0, source.length);
    }
    function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
            result = predicate(value, index, collection);
            return !result;
        });
        return !!result;
    }
    function baseWrapperValue(value, actions) {
        var result = value;
        return reduce(actions, function (result, action) {
            return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
    }
    function compareAscending(value, other) {
        if (value !== other) {
            var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = false;
            var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = false;
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
            }
        }
        return 0;
    }
    function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
            if (newValue === undefined) {
                newValue = source[key];
            }
            if (isNew) {
                baseAssignValue(object, key, newValue);
            } else {
                assignValue(object, key, newValue);
            }
        }
        return object;
    }
    function createAssigner(assigner) {
        return baseRest(function (object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined;
            customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
            object = Object(object);
            while (++index < length) {
                var source = sources[index];
                if (source) {
                    assigner(object, source, index, customizer);
                }
            }
            return object;
        });
    }
    function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
            if (collection == null) {
                return collection;
            }
            if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
            while (fromRight ? index-- : ++index < length) {
                if (iteratee(iterable[index], index, iterable) === false) {
                    break;
                }
            }
            return collection;
        };
    }
    function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
            var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
            while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                }
            }
            return object;
        };
    }
    function createCtor(Ctor) {
        return function () {
            var args = arguments;
            var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
            return isObject(result) ? result : thisBinding;
        };
    }
    function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
            var iterable = Object(collection);
            if (!isArrayLike(collection)) {
                var iteratee = baseIteratee(predicate, 3);
                collection = keys(collection);
                predicate = function (key) {
                    return iteratee(iterable[key], key, iterable);
                };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
    }
    function createPartial(func, bitmask, thisArg, partials) {
        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
            }
            return fn.apply(isBind ? thisArg : this, args);
        }
        return wrapper;
    }
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
        }
        return objValue;
    }
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
        }
        var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? [] : undefined;
        while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            var compared;
            if (compared !== undefined) {
                if (compared) {
                    continue;
                }
                result = false;
                break;
            }
            if (seen) {
                if (!baseSome(other, function (othValue, othIndex) {
                        if (!indexOf(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                            return seen.push(othIndex);
                        }
                    })) {
                    result = false;
                    break;
                }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result = false;
                break;
            }
        }
        return result;
    }
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
        case boolTag:
        case dateTag:
        case numberTag:
            return eq(+object, +other);
        case errorTag:
            return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
            return object == other + '';
        }
        return false;
    }
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
            return false;
        }
        var index = objLength;
        while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false;
            }
        }
        var result = true;
        var skipCtor = isPartial;
        while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            var compared;
            if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result = false;
                break;
            }
            skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                result = false;
            }
        }
        return result;
    }
    function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
    }
    function isFlattenable(value) {
        return isArray(value) || isArguments(value);
    }
    function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
            for (var key in Object(object)) {
                result.push(key);
            }
        }
        return result;
    }
    function objectToString(value) {
        return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
            while (++index < length) {
                array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
                otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return func.apply(this, otherArgs);
        };
    }
    var setToString = identity;
    function compact(array) {
        return baseFilter(array, Boolean);
    }
    function concat() {
        var length = arguments.length;
        if (!length) {
            return [];
        }
        var args = Array(length - 1), array = arguments[0], index = length;
        while (index--) {
            args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }
    function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
            return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
            index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, baseIteratee(predicate, 3), index);
    }
    function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
    }
    function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
    }
    function head(array) {
        return array && array.length ? array[0] : undefined;
    }
    function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (typeof fromIndex == 'number') {
            fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
        } else {
            fromIndex = 0;
        }
        var index = (fromIndex || 0) - 1, isReflexive = value === value;
        while (++index < length) {
            var other = array[index];
            if (isReflexive ? other === value : other !== other) {
                return index;
            }
        }
        return -1;
    }
    function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
    }
    function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        start = start == null ? 0 : +start;
        end = end === undefined ? length : +end;
        return length ? baseSlice(array, start, end) : [];
    }
    function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
    }
    function tap(value, interceptor) {
        interceptor(value);
        return value;
    }
    function thru(value, interceptor) {
        return interceptor(value);
    }
    function wrapperChain() {
        return chain(this);
    }
    function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
    }
    function every(collection, predicate, guard) {
        predicate = guard ? undefined : predicate;
        return baseEvery(collection, baseIteratee(predicate));
    }
    function filter(collection, predicate) {
        return baseFilter(collection, baseIteratee(predicate));
    }
    var find = createFind(findIndex);
    function forEach(collection, iteratee) {
        return baseEach(collection, baseIteratee(iteratee));
    }
    function map(collection, iteratee) {
        return baseMap(collection, baseIteratee(iteratee));
    }
    function reduce(collection, iteratee, accumulator) {
        return baseReduce(collection, baseIteratee(iteratee), accumulator, arguments.length < 3, baseEach);
    }
    function size(collection) {
        if (collection == null) {
            return 0;
        }
        collection = isArrayLike(collection) ? collection : nativeKeys(collection);
        return collection.length;
    }
    function some(collection, predicate, guard) {
        predicate = guard ? undefined : predicate;
        return baseSome(collection, baseIteratee(predicate));
    }
    function sortBy(collection, iteratee) {
        var index = 0;
        iteratee = baseIteratee(iteratee);
        return baseMap(baseMap(collection, function (value, key, collection) {
            return {
                'value': value,
                'index': index++,
                'criteria': iteratee(value, key, collection)
            };
        }).sort(function (object, other) {
            return compareAscending(object.criteria, other.criteria) || object.index - other.index;
        }), baseProperty('value'));
    }
    function before(n, func) {
        var result;
        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function () {
            if (--n > 0) {
                result = func.apply(this, arguments);
            }
            if (n <= 1) {
                func = undefined;
            }
            return result;
        };
    }
    var bind = baseRest(function (func, thisArg, partials) {
        return createPartial(func, WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG, thisArg, partials);
    });
    var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
    });
    var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
    });
    function negate(predicate) {
        if (typeof predicate != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function () {
            var args = arguments;
            return !predicate.apply(this, args);
        };
    }
    function once(func) {
        return before(2, func);
    }
    function clone(value) {
        if (!isObject(value)) {
            return value;
        }
        return isArray(value) ? copyArray(value) : copyObject(value, nativeKeys(value));
    }
    function eq(value, other) {
        return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function () {
        return arguments;
    }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
    }
    function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
    }
    var isDate = baseIsDate;
    function isEmpty(value) {
        if (isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value))) {
            return !value.length;
        }
        return !nativeKeys(value).length;
    }
    function isEqual(value, other) {
        return baseIsEqual(value, other);
    }
    function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
    }
    function isFunction(value) {
        if (!isObject(value)) {
            return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
    }
    function isObjectLike(value) {
        return value != null && typeof value == 'object';
    }
    function isNaN(value) {
        return isNumber(value) && value != +value;
    }
    function isNull(value) {
        return value === null;
    }
    function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
    }
    var isRegExp = baseIsRegExp;
    function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    function isUndefined(value) {
        return value === undefined;
    }
    function toArray(value) {
        if (!isArrayLike(value)) {
            return values(value);
        }
        return value.length ? copyArray(value) : [];
    }
    var toInteger = Number;
    var toNumber = Number;
    function toString(value) {
        if (typeof value == 'string') {
            return value;
        }
        return value == null ? '' : value + '';
    }
    var assign = createAssigner(function (object, source) {
        copyObject(source, nativeKeys(source), object);
    });
    var assignIn = createAssigner(function (object, source) {
        copyObject(source, nativeKeysIn(source), object);
    });
    var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
    });
    function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : assign(result, properties);
    }
    var defaults = baseRest(function (args) {
        args.push(undefined, customDefaultsAssignIn);
        return assignInWith.apply(undefined, args);
    });
    function has(object, path) {
        return object != null && hasOwnProperty.call(object, path);
    }
    var keys = nativeKeys;
    var keysIn = nativeKeysIn;
    var pick = flatRest(function (object, paths) {
        return object == null ? {} : basePick(object, paths);
    });
    function result(object, path, defaultValue) {
        var value = object == null ? undefined : object[path];
        if (value === undefined) {
            value = defaultValue;
        }
        return isFunction(value) ? value.call(object) : value;
    }
    function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
    }
    function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }
    function identity(value) {
        return value;
    }
    var iteratee = baseIteratee;
    function matches(source) {
        return baseMatches(assign({}, source));
    }
    function mixin(object, source, options) {
        var props = keys(source), methodNames = baseFunctions(source, props);
        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
        }
        var chain = !(isObject(options) && 'chain' in options) || !!options.chain, isFunc = isFunction(object);
        baseEach(methodNames, function (methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
                object.prototype[methodName] = function () {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                        var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                        actions.push({
                            'func': func,
                            'args': arguments,
                            'thisArg': object
                        });
                        result.__chain__ = chainAll;
                        return result;
                    }
                    return func.apply(object, arrayPush([this.value()], arguments));
                };
            }
        });
        return object;
    }
    function noConflict() {
        if (root._ === this) {
            root._ = oldDash;
        }
        return this;
    }
    function noop() {
    }
    function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
    }
    function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
    }
    function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
    }
    lodash.assignIn = assignIn;
    lodash.before = before;
    lodash.bind = bind;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.create = create;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.iteratee = iteratee;
    lodash.keys = keys;
    lodash.map = map;
    lodash.matches = matches;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.once = once;
    lodash.pick = pick;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.values = values;
    lodash.extend = assignIn;
    mixin(lodash, lodash);
    lodash.clone = clone;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.forEach = forEach;
    lodash.has = has;
    lodash.head = head;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.last = last;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.reduce = reduce;
    lodash.result = result;
    lodash.size = size;
    lodash.some = some;
    lodash.uniqueId = uniqueId;
    lodash.each = forEach;
    lodash.first = head;
    mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                source[methodName] = func;
            }
        });
        return source;
    }(), { 'chain': false });
    lodash.VERSION = VERSION;
    baseEach([
        'pop',
        'join',
        'replace',
        'reverse',
        'split',
        'push',
        'shift',
        'sort',
        'splice',
        'unshift'
    ], function (methodName) {
        var func = (/^(?:replace|split)$/.test(methodName) ? String.prototype : arrayProto)[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|join|replace|shift)$/.test(methodName);
        lodash.prototype[methodName] = function () {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function (value) {
                return func.apply(isArray(value) ? value : [], args);
            });
        };
    });
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        root._ = lodash;
        define('fp/lodash.core', [], function () {
            return lodash;
        });
    } else if (freeModule) {
        (freeModule.exports = lodash)._ = lodash;
        freeExports._ = lodash;
    } else {
        root._ = lodash;
    }
}.call(this));

;
(function () {
    var undefined;
    var VERSION = '4.17.3';
    var FUNC_ERROR_TEXT = 'Expected a function';
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1, WRAP_PARTIAL_FLAG = 32;
    var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = '[object Arguments]', arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', numberTag = '[object Number]', objectTag = '[object Object]', proxyTag = '[object Proxy]', regexpTag = '[object RegExp]', stringTag = '[object String]';
    var reUnescapedHtml = /[&<>"']/g, reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#39;'
    };
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function('return this')();
    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
    function arrayPush(array, values) {
        array.push.apply(array, values);
        return array;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
                return index;
            }
        }
        return -1;
    }
    function baseProperty(key) {
        return function (object) {
            return object == null ? undefined : object[key];
        };
    }
    function basePropertyOf(object) {
        return function (key) {
            return object == null ? undefined : object[key];
        };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function (value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    function baseValues(object, props) {
        return baseMap(props, function (key) {
            return object[key];
        });
    }
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    function overArg(func, transform) {
        return function (arg) {
            return func(transform(arg));
        };
    }
    var arrayProto = Array.prototype, objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var idCounter = 0;
    var nativeObjectToString = objectProto.toString;
    var oldDash = root._;
    var objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeIsFinite = root.isFinite, nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max;
    function lodash(value) {
        return value instanceof LodashWrapper ? value : new LodashWrapper(value);
    }
    var baseCreate = function () {
        function object() {
        }
        return function (proto) {
            if (!isObject(proto)) {
                return {};
            }
            if (objectCreate) {
                return objectCreate(proto);
            }
            object.prototype = proto;
            var result = new object();
            object.prototype = undefined;
            return result;
        };
    }();
    function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
    }
    LodashWrapper.prototype = baseCreate(lodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;
    function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
            baseAssignValue(object, key, value);
        }
    }
    function baseAssignValue(object, key, value) {
        object[key] = value;
    }
    function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function () {
            func.apply(undefined, args);
        }, wait);
    }
    var baseEach = createBaseEach(baseForOwn);
    function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function (value, index, collection) {
            result = !!predicate(value, index, collection);
            return result;
        });
        return result;
    }
    function baseExtremum(array, iteratee, comparator) {
        var index = -1, length = array.length;
        while (++index < length) {
            var value = array[index], current = iteratee(value);
            if (current != null && (computed === undefined ? current === current && !false : comparator(current, computed))) {
                var computed = current, result = value;
            }
        }
        return result;
    }
    function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function (value, index, collection) {
            if (predicate(value, index, collection)) {
                result.push(value);
            }
        });
        return result;
    }
    function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1, length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);
        while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                } else {
                    arrayPush(result, value);
                }
            } else if (!isStrict) {
                result[result.length] = value;
            }
        }
        return result;
    }
    var baseFor = createBaseFor();
    function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
    }
    function baseFunctions(object, props) {
        return baseFilter(props, function (key) {
            return isFunction(object[key]);
        });
    }
    function baseGetTag(value) {
        return objectToString(value);
    }
    function baseGt(value, other) {
        return value > other;
    }
    var baseIsArguments = noop;
    function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
    }
    function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
            return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
            return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : baseGetTag(object), othTag = othIsArr ? arrayTag : baseGetTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        stack || (stack = []);
        var objStack = find(stack, function (entry) {
            return entry[0] == object;
        });
        var othStack = find(stack, function (entry) {
            return entry[0] == other;
        });
        if (objStack && othStack) {
            return objStack[1] == other;
        }
        stack.push([
            object,
            other
        ]);
        stack.push([
            other,
            object
        ]);
        if (isSameTag && !objIsObj) {
            var result = objIsArr ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            stack.pop();
            return result;
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
            if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                var result = equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                stack.pop();
                return result;
            }
        }
        if (!isSameTag) {
            return false;
        }
        var result = equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        stack.pop();
        return result;
    }
    function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }
    function baseIteratee(func) {
        if (typeof func == 'function') {
            return func;
        }
        if (func == null) {
            return identity;
        }
        return (typeof func == 'object' ? baseMatches : baseProperty)(func);
    }
    function baseLt(value, other) {
        return value < other;
    }
    function baseMap(collection, iteratee) {
        var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function (value, key, collection) {
            result[++index] = iteratee(value, key, collection);
        });
        return result;
    }
    function baseMatches(source) {
        var props = nativeKeys(source);
        return function (object) {
            var length = props.length;
            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (length--) {
                var key = props[length];
                if (!(key in object && baseIsEqual(source[key], object[key], COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG))) {
                    return false;
                }
            }
            return true;
        };
    }
    function basePick(object, props) {
        object = Object(object);
        return reduce(props, function (result, key) {
            if (key in object) {
                result[key] = object[key];
            }
            return result;
        }, {});
    }
    function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
    }
    function baseSlice(array, start, end) {
        var index = -1, length = array.length;
        if (start < 0) {
            start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
            end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result = Array(length);
        while (++index < length) {
            result[index] = array[index + start];
        }
        return result;
    }
    function copyArray(source) {
        return baseSlice(source, 0, source.length);
    }
    function baseSome(collection, predicate) {
        var result;
        baseEach(collection, function (value, index, collection) {
            result = predicate(value, index, collection);
            return !result;
        });
        return !!result;
    }
    function baseWrapperValue(value, actions) {
        var result = value;
        return reduce(actions, function (result, action) {
            return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
    }
    function compareAscending(value, other) {
        if (value !== other) {
            var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = false;
            var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = false;
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
            }
        }
        return 0;
    }
    function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
            if (newValue === undefined) {
                newValue = source[key];
            }
            if (isNew) {
                baseAssignValue(object, key, newValue);
            } else {
                assignValue(object, key, newValue);
            }
        }
        return object;
    }
    function createAssigner(assigner) {
        return baseRest(function (object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined;
            customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
            object = Object(object);
            while (++index < length) {
                var source = sources[index];
                if (source) {
                    assigner(object, source, index, customizer);
                }
            }
            return object;
        });
    }
    function createBaseEach(eachFunc, fromRight) {
        return function (collection, iteratee) {
            if (collection == null) {
                return collection;
            }
            if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
            while (fromRight ? index-- : ++index < length) {
                if (iteratee(iterable[index], index, iterable) === false) {
                    break;
                }
            }
            return collection;
        };
    }
    function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
            var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
            while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee(iterable[key], key, iterable) === false) {
                    break;
                }
            }
            return object;
        };
    }
    function createCtor(Ctor) {
        return function () {
            var args = arguments;
            var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
            return isObject(result) ? result : thisBinding;
        };
    }
    function createFind(findIndexFunc) {
        return function (collection, predicate, fromIndex) {
            var iterable = Object(collection);
            if (!isArrayLike(collection)) {
                var iteratee = baseIteratee(predicate, 3);
                collection = keys(collection);
                predicate = function (key) {
                    return iteratee(iterable[key], key, iterable);
                };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
    }
    function createPartial(func, bitmask, thisArg, partials) {
        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
            }
            return fn.apply(isBind ? thisArg : this, args);
        }
        return wrapper;
    }
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
        }
        return objValue;
    }
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
        }
        var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? [] : undefined;
        while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            var compared;
            if (compared !== undefined) {
                if (compared) {
                    continue;
                }
                result = false;
                break;
            }
            if (seen) {
                if (!baseSome(other, function (othValue, othIndex) {
                        if (!indexOf(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                            return seen.push(othIndex);
                        }
                    })) {
                    result = false;
                    break;
                }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result = false;
                break;
            }
        }
        return result;
    }
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
        case boolTag:
        case dateTag:
        case numberTag:
            return eq(+object, +other);
        case errorTag:
            return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
            return object == other + '';
        }
        return false;
    }
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
            return false;
        }
        var index = objLength;
        while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false;
            }
        }
        var result = true;
        var skipCtor = isPartial;
        while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            var compared;
            if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result = false;
                break;
            }
            skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                result = false;
            }
        }
        return result;
    }
    function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
    }
    function isFlattenable(value) {
        return isArray(value) || isArguments(value);
    }
    function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
            for (var key in Object(object)) {
                result.push(key);
            }
        }
        return result;
    }
    function objectToString(value) {
        return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
            while (++index < length) {
                array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array(start + 1);
            while (++index < start) {
                otherArgs[index] = args[index];
            }
            otherArgs[start] = transform(array);
            return func.apply(this, otherArgs);
        };
    }
    var setToString = identity;
    function compact(array) {
        return baseFilter(array, Boolean);
    }
    function concat() {
        var length = arguments.length;
        if (!length) {
            return [];
        }
        var args = Array(length - 1), array = arguments[0], index = length;
        while (index--) {
            args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }
    function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
            return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
            index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, baseIteratee(predicate, 3), index);
    }
    function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
    }
    function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
    }
    function head(array) {
        return array && array.length ? array[0] : undefined;
    }
    function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (typeof fromIndex == 'number') {
            fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
        } else {
            fromIndex = 0;
        }
        var index = (fromIndex || 0) - 1, isReflexive = value === value;
        while (++index < length) {
            var other = array[index];
            if (isReflexive ? other === value : other !== other) {
                return index;
            }
        }
        return -1;
    }
    function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
    }
    function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        start = start == null ? 0 : +start;
        end = end === undefined ? length : +end;
        return length ? baseSlice(array, start, end) : [];
    }
    function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
    }
    function tap(value, interceptor) {
        interceptor(value);
        return value;
    }
    function thru(value, interceptor) {
        return interceptor(value);
    }
    function wrapperChain() {
        return chain(this);
    }
    function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
    }
    function every(collection, predicate, guard) {
        predicate = guard ? undefined : predicate;
        return baseEvery(collection, baseIteratee(predicate));
    }
    function filter(collection, predicate) {
        return baseFilter(collection, baseIteratee(predicate));
    }
    var find = createFind(findIndex);
    function forEach(collection, iteratee) {
        return baseEach(collection, baseIteratee(iteratee));
    }
    function map(collection, iteratee) {
        return baseMap(collection, baseIteratee(iteratee));
    }
    function reduce(collection, iteratee, accumulator) {
        return baseReduce(collection, baseIteratee(iteratee), accumulator, arguments.length < 3, baseEach);
    }
    function size(collection) {
        if (collection == null) {
            return 0;
        }
        collection = isArrayLike(collection) ? collection : nativeKeys(collection);
        return collection.length;
    }
    function some(collection, predicate, guard) {
        predicate = guard ? undefined : predicate;
        return baseSome(collection, baseIteratee(predicate));
    }
    function sortBy(collection, iteratee) {
        var index = 0;
        iteratee = baseIteratee(iteratee);
        return baseMap(baseMap(collection, function (value, key, collection) {
            return {
                'value': value,
                'index': index++,
                'criteria': iteratee(value, key, collection)
            };
        }).sort(function (object, other) {
            return compareAscending(object.criteria, other.criteria) || object.index - other.index;
        }), baseProperty('value'));
    }
    function before(n, func) {
        var result;
        if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function () {
            if (--n > 0) {
                result = func.apply(this, arguments);
            }
            if (n <= 1) {
                func = undefined;
            }
            return result;
        };
    }
    var bind = baseRest(function (func, thisArg, partials) {
        return createPartial(func, WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG, thisArg, partials);
    });
    var defer = baseRest(function (func, args) {
        return baseDelay(func, 1, args);
    });
    var delay = baseRest(function (func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
    });
    function negate(predicate) {
        if (typeof predicate != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function () {
            var args = arguments;
            return !predicate.apply(this, args);
        };
    }
    function once(func) {
        return before(2, func);
    }
    function clone(value) {
        if (!isObject(value)) {
            return value;
        }
        return isArray(value) ? copyArray(value) : copyObject(value, nativeKeys(value));
    }
    function eq(value, other) {
        return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function () {
        return arguments;
    }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
    }
    function isBoolean(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
    }
    var isDate = baseIsDate;
    function isEmpty(value) {
        if (isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value))) {
            return !value.length;
        }
        return !nativeKeys(value).length;
    }
    function isEqual(value, other) {
        return baseIsEqual(value, other);
    }
    function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
    }
    function isFunction(value) {
        if (!isObject(value)) {
            return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
    }
    function isObjectLike(value) {
        return value != null && typeof value == 'object';
    }
    function isNaN(value) {
        return isNumber(value) && value != +value;
    }
    function isNull(value) {
        return value === null;
    }
    function isNumber(value) {
        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
    }
    var isRegExp = baseIsRegExp;
    function isString(value) {
        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    function isUndefined(value) {
        return value === undefined;
    }
    function toArray(value) {
        if (!isArrayLike(value)) {
            return values(value);
        }
        return value.length ? copyArray(value) : [];
    }
    var toInteger = Number;
    var toNumber = Number;
    function toString(value) {
        if (typeof value == 'string') {
            return value;
        }
        return value == null ? '' : value + '';
    }
    var assign = createAssigner(function (object, source) {
        copyObject(source, nativeKeys(source), object);
    });
    var assignIn = createAssigner(function (object, source) {
        copyObject(source, nativeKeysIn(source), object);
    });
    var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
    });
    function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : assign(result, properties);
    }
    var defaults = baseRest(function (args) {
        args.push(undefined, customDefaultsAssignIn);
        return assignInWith.apply(undefined, args);
    });
    function has(object, path) {
        return object != null && hasOwnProperty.call(object, path);
    }
    var keys = nativeKeys;
    var keysIn = nativeKeysIn;
    var pick = flatRest(function (object, paths) {
        return object == null ? {} : basePick(object, paths);
    });
    function result(object, path, defaultValue) {
        var value = object == null ? undefined : object[path];
        if (value === undefined) {
            value = defaultValue;
        }
        return isFunction(value) ? value.call(object) : value;
    }
    function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
    }
    function escape(string) {
        string = toString(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }
    function identity(value) {
        return value;
    }
    var iteratee = baseIteratee;
    function matches(source) {
        return baseMatches(assign({}, source));
    }
    function mixin(object, source, options) {
        var props = keys(source), methodNames = baseFunctions(source, props);
        if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
        }
        var chain = !(isObject(options) && 'chain' in options) || !!options.chain, isFunc = isFunction(object);
        baseEach(methodNames, function (methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
                object.prototype[methodName] = function () {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                        var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                        actions.push({
                            'func': func,
                            'args': arguments,
                            'thisArg': object
                        });
                        result.__chain__ = chainAll;
                        return result;
                    }
                    return func.apply(object, arrayPush([this.value()], arguments));
                };
            }
        });
        return object;
    }
    function noConflict() {
        if (root._ === this) {
            root._ = oldDash;
        }
        return this;
    }
    function noop() {
    }
    function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
    }
    function max(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
    }
    function min(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
    }
    lodash.assignIn = assignIn;
    lodash.before = before;
    lodash.bind = bind;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.create = create;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.iteratee = iteratee;
    lodash.keys = keys;
    lodash.map = map;
    lodash.matches = matches;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.once = once;
    lodash.pick = pick;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.values = values;
    lodash.extend = assignIn;
    mixin(lodash, lodash);
    lodash.clone = clone;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.forEach = forEach;
    lodash.has = has;
    lodash.head = head;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.last = last;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.reduce = reduce;
    lodash.result = result;
    lodash.size = size;
    lodash.some = some;
    lodash.uniqueId = uniqueId;
    lodash.each = forEach;
    lodash.first = head;
    mixin(lodash, function () {
        var source = {};
        baseForOwn(lodash, function (func, methodName) {
            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                source[methodName] = func;
            }
        });
        return source;
    }(), { 'chain': false });
    lodash.VERSION = VERSION;
    baseEach([
        'pop',
        'join',
        'replace',
        'reverse',
        'split',
        'push',
        'shift',
        'sort',
        'splice',
        'unshift'
    ], function (methodName) {
        var func = (/^(?:replace|split)$/.test(methodName) ? String.prototype : arrayProto)[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|join|replace|shift)$/.test(methodName);
        lodash.prototype[methodName] = function () {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
            }
            return this[chainName](function (value) {
                return func.apply(isArray(value) ? value : [], args);
            });
        };
    });
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        root._ = lodash;
        define('lodash/lodash.core', [], function () {
            return lodash;
        });
    } else if (freeModule) {
        (freeModule.exports = lodash)._ = lodash;
        freeExports._ = lodash;
    } else {
        root._ = lodash;
    }
}.call(this));

define('er-track/trackers/console', ['require'], function (require) {
    function logLine(entries) {
        if (!window.console) {
            return;
        }
        if (typeof console.log === 'function') {
            console.log.apply(console, entries);
        } else {
            console.log(entries.join(' '));
        }
    }
    function logWithGroup(groupName) {
        if (!window.console) {
            return;
        }
        if (console.groupCollapsed) {
            console.groupCollapsed(groupName);
            for (var i = 1; i < arguments.length; i++) {
                logLine(arguments[i]);
            }
            console.groupEnd(groupName);
        } else {
            console.log('\u27A4' + groupName);
            var prefix = '\u251C\u2500\u2500\u2500';
            for (var i = 1; i < arguments.length; i++) {
                if (i === arguments.length - 1) {
                    prefix = '\u2514\u2500\u2500\u2500';
                }
                var entry = arguments[i];
                if (typeof entry === 'string') {
                    entry = prefix + entry;
                } else {
                    entry[0] = prefix + entry[0];
                }
                logLine(entry);
            }
        }
    }
    var exports = { name: 'console' };
    exports.create = function (config) {
        return {
            name: 'console',
            trackException: function (context) {
                var entries = [
                    '\u6211\u9760\uFF0C\u6709\u4E2APromise\u51FA\u5F02\u5E38\u4E86',
                    [
                        '\u51FA\u4E8B\u7684Deferred\u5BF9\u8C61: ',
                        context.deferred
                    ],
                    [
                        '\u51FA\u4E8B\u65F6\u7ED9\u7684\u53C2\u6570: ',
                        context.args
                    ],
                    [
                        '\u51FA\u4E8B\u7684\u539F\u56E0\u5927\u6982\u662F: ',
                        context.reason
                    ]
                ];
                if (context.reason instanceof Error) {
                    entries.push('\u597D\u50CF\u662F\u4E00\u4E2A\u5F02\u5E38\u5BF9\u8C61\uFF0C\u6240\u4EE5\u628A\u8C03\u7528\u5806\u6808\u7ED9\u4F60\u770B\u770B\u597D\u4E86\uFF1A\n' + context.reason.stack);
                }
                logWithGroup.apply(null, entries);
            },
            trackEnterAction: function (context) {
                logWithGroup('\u4EB2\u4F60\u6B63\u5728\u8FDB\u5165"' + context.url + '"', [
                    'Action\uFF1A',
                    context.action
                ], [
                    'Model\uFF1A',
                    context.action.model
                ], [
                    'Model\u91CC\u7684\u6570\u636E\uFF1A',
                    context.action.model.dump()
                ], [
                    'View\uFF1A',
                    context.action.view
                ], [
                    'DOM\u5BB9\u5668\uFF1A',
                    context.action.view.getContainerElement()
                ]);
            },
            trackLeaveAction: function (context) {
                logWithGroup('\u4EB2\u4F60\u5DF2\u7ECF\u79BB\u5F00"' + context.action.context.url + '"', [
                    '\u5F53\u524D\u7684Action\uFF1A',
                    context.action
                ], ['\u524D\u5F80\u7684URL\uFF1A' + context.to.url]);
            },
            load: function (callback) {
                callback();
            }
        };
    };
    return exports;
});

define('er-track/trackers/baidu', [
    'require',
    '../loadScript'
], function (require) {
    if (!window._hmt) {
        window._hmt = [];
    }
    var exports = { name: 'baidu' };
    exports.create = function (config) {
        return {
            name: 'baidu',
            trackPageView: function (context) {
                var referrer = context.referrer || document.referrer;
                window._hmt.push([
                    '_setReferrerOverride',
                    referrer
                ]);
                window._hmt.push([
                    '_trackPageview',
                    context.url
                ]);
                return this;
            },
            load: function (callback) {
                if (!config.account) {
                    return callback();
                }
                var url = config.scriptURL || '//hm.baidu.com/hm.js';
                url += '?' + config.account;
                var loadScript = require('../loadScript');
                loadScript(url, callback);
            }
        };
    };
    return exports;
});

define('er-track/main', [
    'require',
    './events'
], function (require) {
    var exports = {};
    var globalConfig = { packageName: 'er-track' };
    exports.config = function (name, value) {
        globalConfig[name] = value;
        return this;
    };
    exports.create = function () {
        var config = {};
        function getConfig(name) {
            return config[name] || globalConfig[name] || null;
        }
        var trackers = {};
        function each(method, args) {
            for (var name in trackers) {
                if (trackers.hasOwnProperty(name)) {
                    var tracker = trackers[name];
                    tracker[method] && tracker[method].apply(tracker, args);
                }
            }
        }
        var instance = {};
        instance.config = function (name, value) {
            config[name] = value;
            return this;
        };
        instance.use = function (name) {
            if (trackers[name]) {
                return trackers[name];
            }
            var proxy = {
                name: name,
                configuration: {},
                config: function (name, value) {
                    this.configuration[name] = value;
                    return this;
                },
                setAccount: function (account) {
                    return this.config('account', account);
                }
            };
            trackers[name] = proxy;
            return proxy;
        };
        var pendingCommands = [];
        function flushPendingCommands() {
            for (var i = 0; i < pendingCommands.length; i++) {
                var method = pendingCommands[i][0];
                var args = pendingCommands[i][1];
                each(method, args);
            }
        }
        instance.start = function () {
            var dependencies = [];
            for (var name in trackers) {
                if (trackers.hasOwnProperty(name)) {
                    var moduleName = getConfig('packageName') + '/trackers/' + name;
                    dependencies.push(moduleName);
                }
            }
            window.require(dependencies, function () {
                var pendingUnits = arguments.length;
                function forward() {
                    pendingUnits--;
                    if (pendingUnits === 0) {
                        flushPendingCommands();
                        pendingCommands = {
                            push: function (command) {
                                each(command[0], command[1]);
                            }
                        };
                    }
                }
                for (var i = 0; i < arguments.length; i++) {
                    var factory = arguments[i];
                    var config = trackers[factory.name].configuration;
                    var tracker = factory.create(config);
                    trackers[factory.name] = tracker;
                    tracker.load(forward);
                }
            });
        };
        var events = require('./events');
        function pushCommand() {
            pendingCommands.push.apply(pendingCommands, arguments);
        }
        instance.include = function (name) {
            if (events.hasOwnProperty(name)) {
                events[name](pushCommand);
            }
            return this;
        };
        instance.includeAll = function () {
            for (var name in events) {
                instance.include(name);
            }
            return this;
        };
        return instance;
    };
    return exports;
});

define('er-track', ['er-track/main'], function (main) { return main; });

define('er-track/loadScript', ['require'], function (require) {
    return function (url, callback) {
        var script = document.createElement('script');
        script.charset = 'utf-8';
        script.async = true;
        script.src = url;
        if (callback) {
            var complete = false;
            script.onload = script.onreadystatechange = function () {
                if (!complete && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {
                    complete = true;
                    callback();
                }
            };
        }
        var holder = document.getElementsByTagName('script')[0];
        if (holder && holder.parentNode) {
            holder.parentNode.insertBefore(script, holder);
        } else {
            var container = document.getElementsByTagName('head')[0] || document.body;
            container.insertBefore(script, container.firstChild);
        }
    };
});

define('er-track/events', [
    'require',
    'er/events',
    'er/Deferred',
    'er/ajax'
], function (require) {
    return {
        pageView: function (track) {
            require('er/events').on('redirect', function (e) {
                track([
                    'trackPageView',
                    [e]
                ]);
            });
        },
        exception: function (track) {
            require('er/Deferred').on('exception', function (e) {
                track([
                    'trackException',
                    [e]
                ]);
            });
        },
        requestTimeout: function (track) {
            require('er/ajax').on('timeout', function (e) {
                var args = [
                    e.options.url,
                    e.options
                ];
                track([
                    'trackRequestTimeout',
                    args
                ]);
            });
        },
        enterAction: function (track) {
            require('er/events').on('enteractioncomplete', function (e) {
                track([
                    'trackEnterAction',
                    [e]
                ]);
            });
        },
        leaveAction: function (track) {
            require('er/events').on('leaveaction', function (e) {
                track([
                    'trackLeaveAction',
                    [e]
                ]);
            });
        }
    };
});

define('etpl/tpl', [
    'require',
    'exports',
    'module',
    '.'
], function (require, exports, module) {
    var etpl = require('.');
    return {
        load: function (resourceId, req, load, config) {
            var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
            xhr.open('GET', req.toUrl(resourceId), true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4) {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        var source = xhr.responseText;
                        var moduleConfig = module.config();
                        if (typeof moduleConfig.autoCompile == 'undefined' || moduleConfig.autoCompile) {
                            etpl.compile(source);
                        }
                        load(source);
                    }
                    xhr.onreadystatechange = new Function();
                    xhr = null;
                }
            };
            xhr.send(null);
        }
    };
});

define('er/tpl', [
    'require',
    'etpl/tpl'
], function (require) {
    return require('etpl/tpl');
});

define('er/template', [
    'require',
    'etpl/main'
], function (require) {
    var template = require('etpl/main');
    template.merge = function (output, tplName, model) {
        var html = '';
        try {
            var html = template.render(tplName, model);
        } catch (ex) {
        }
        if (output) {
            output.innerHTML = html;
        }
        return html;
    };
    return template;
});

define('er/main', [
    'require',
    './controller',
    './router',
    './locator'
], function (require) {
    var main = {
        version: '3.1.0-beta.5',
        start: function () {
            require('./controller').start();
            require('./router').start();
            require('./locator').start();
        }
    };
    return main;
});

define('er', ['er/main'], function (main) { return main; });

define('er/permission', [], function () {
    var authorities = {};
    var permssion = {
        add: function (data) {
            for (var key in data) {
                if (data.hasOwnProperty(key)) {
                    var value = data[key];
                    if (typeof value === 'object') {
                        this.add(value);
                    } else {
                        authorities[key] = value;
                    }
                }
            }
        },
        isAllow: function (name) {
            return !!authorities[name];
        }
    };
    return permssion;
});

define('er/datasource', [
    'require',
    './util',
    './ajax',
    './permission'
], function (require) {
    var datasource = {};
    datasource.constant = function (value) {
        return function () {
            return value;
        };
    };
    datasource.remote = function (url, options) {
        return function (model) {
            options = require('./util').mix({
                url: url,
                dataType: 'json'
            }, options);
            if (typeof options.data === 'function') {
                options.data = options.data(model);
            }
            var ajax = require('./ajax');
            return ajax.request(options);
        };
    };
    datasource.permission = function (name) {
        return function () {
            var permission = require('./permission');
            return permission.isAllow(name);
        };
    };
    datasource.defaultValue = function (defaultValue, name) {
        return function (model, options) {
            if (!options.name && !name) {
                throw new Error('No property name specified to determine whether value exists in this model');
            }
            var propertyName = name || options.name;
            return model.hasValue(propertyName) ? model.get(propertyName) : defaultValue;
        };
    };
    datasource.convertTo = function (type, name) {
        return function (model, options) {
            if (!options.name && !name) {
                throw new Error('No property name specified to convert');
            }
            var property = name || options.name;
            var value = model.get(property);
            switch (type) {
            case 'number':
                return parseInt(value, 10);
            case 'string':
                return value + '';
            case 'boolean':
                return !!value;
            default:
                return value;
            }
        };
    };
    return datasource;
});

define('er/router', [
    'require',
    './URL',
    'eoo',
    'mini-event/EventTarget',
    './locator',
    './events'
], function (require) {
    var exports = {};
    exports.constructor = function () {
        this.routes = [];
        this.backup = null;
    };
    function executeRoute(e) {
        var url = require('./URL').parse(e.url);
        var path = url.getPath();
        for (var i = 0; i < this.routes.length; i++) {
            var route = this.routes[i];
            if (route.rule instanceof RegExp && route.rule.test(path) || route.rule === path) {
                route.handler.call(this, url);
                return;
            }
        }
        if (this.backup) {
            this.backup(url);
        }
        this.getEventBus().fire('route', {
            url: url,
            router: this
        });
    }
    exports.add = function (rule, handler) {
        this.routes.push({
            rule: rule,
            handler: handler
        });
    };
    exports.setBackup = function (handler) {
        this.backup = handler;
    };
    exports.getLocator = function () {
        return this.locator;
    };
    exports.setLocator = function (locator) {
        this.locator = locator;
    };
    exports.getEventBus = function () {
        return this.eventBus;
    };
    exports.setEventBus = function (eventBus) {
        this.eventBus = eventBus;
    };
    exports.start = function () {
        this.getLocator().on('redirect', executeRoute, this);
    };
    var Router = require('eoo').create(require('mini-event/EventTarget'), exports);
    var instance = new Router();
    instance.setLocator(require('./locator'));
    instance.setEventBus(require('./events'));
    instance.Router = Router;
    return instance;
});

define('er/controller', [
    'require',
    './Deferred',
    './URL',
    './config',
    './util',
    './assert',
    'mini-event/EventTarget',
    'eoo',
    './locator',
    './router',
    './events',
    './permission'
], function (require) {
    var Deferred = require('./Deferred');
    var URL = require('./URL');
    var config = require('./config');
    var util = require('./util');
    var assert = require('./assert');
    var exports = {};
    exports.constructor = function () {
        this.actionPathMapping = {};
        this.childActionMapping = {};
        this.currentURL = null;
        this.currentAction = null;
        this.globalActionLoader = null;
        this.childActionLoaders = {};
    };
    exports.registerAction = function (actionConfigs) {
        if (!actionConfigs.hasOwnProperty('length')) {
            actionConfigs = [actionConfigs];
        }
        for (var i = 0; i < actionConfigs.length; i++) {
            var actionConfig = actionConfigs[i];
            assert.hasProperty(actionConfig, 'path', 'action config should contains a "path" property');
            this.actionPathMapping[actionConfig.path] = actionConfig;
        }
    };
    exports.getDefaultTitle = function () {
        return this.defaultTitle;
    };
    exports.setDefaultTitle = function (title) {
        this.defaultTitle = title;
    };
    exports.getRouter = function () {
        return this.router;
    };
    exports.setRouter = function (router) {
        this.router = router;
    };
    exports.getLocator = function () {
        return this.locator;
    };
    exports.setLocator = function (locator) {
        this.locator = locator;
    };
    exports.getEventBus = function () {
        return this.eventBus;
    };
    exports.setEventBus = function (eventBus) {
        this.eventBus = eventBus;
    };
    exports.getPermissionProvider = function () {
        return this.permissionProvider;
    };
    exports.setPermissionProvider = function (permissionProvider) {
        this.permissionProvider = permissionProvider;
    };
    exports.getMainContainer = function () {
        return this.mainContainer || config.mainElement;
    };
    exports.setMainContainer = function (mainContainer) {
        this.mainContainer = mainContainer;
    };
    exports.getNoAuthorityLocation = function () {
        return this.noAuthorityLocation || config.noAuthorityLocation;
    };
    exports.setNoAuthorityLocation = function (noAuthorityLocation) {
        this.noAuthorityLocation = noAuthorityLocation;
    };
    exports.getNotFoundLocation = function () {
        return this.notFoundLocation || config.notFoundLocation;
    };
    exports.setNotFoundLocation = function (notFoundLocation) {
        this.notFoundLocation = notFoundLocation;
    };
    exports.start = function () {
        if (!this.getDefaultTitle()) {
            this.setDefaultTitle(config.systemName || document.title);
        }
        this.getRouter().setBackup(util.bind(this.renderAction, this));
    };
    exports.findActionConfig = function (actionContext) {
        var path = actionContext.url.getPath();
        var actionConfig = this.actionPathMapping[path];
        return actionConfig;
    };
    exports.resolveActionConfig = function (actionConfig, actionContext) {
        return actionConfig;
    };
    exports.checkAuthority = function (actionConfig, actionContext) {
        var authority = actionConfig.authority;
        if (!authority) {
            return true;
        }
        var permissionProvider = this.getPermissionProvider();
        if (typeof authority === 'function') {
            return authority(actionContext, actionConfig, permissionProvider);
        }
        if (typeof authority === 'string') {
            authority = authority.split('|');
        }
        for (var i = 0; i < authority.length; i++) {
            if (permissionProvider.isAllow(util.trim(authority[i]))) {
                return true;
            }
        }
        return false;
    };
    exports.findEligibleActionConfig = function (actionContext) {
        var actionConfig = this.findActionConfig(actionContext);
        if (actionConfig && actionConfig.movedTo) {
            this.getEventBus().fire('actionmoved', {
                controller: this,
                url: actionContext.url,
                config: actionConfig,
                movedTo: actionConfig.movedTo
            });
            actionContext.originalURL = actionContext.url;
            actionContext.url = URL.parse(actionConfig.movedTo);
            return this.findEligibleActionConfig(actionContext);
        }
        if (actionConfig && (actionConfig.childActionOnly && !actionContext.isChildAction)) {
            actionConfig = null;
        }
        if (!actionConfig) {
            this.getEventBus().fire('actionnotfound', util.mix({
                controller: this,
                failType: 'NotFound',
                reason: 'Not found'
            }, actionContext));
            actionContext.originalURL = actionContext.url;
            actionContext.url = URL.parse(this.getNotFoundLocation());
            if (!this.actionPathMapping[actionContext.url.getPath()]) {
                return null;
            }
            return this.findEligibleActionConfig(actionContext);
        }
        var hasAuthority = this.checkAuthority(actionConfig, actionContext);
        if (!hasAuthority) {
            this.getEventBus().fire('permissiondenied', util.mix({
                controller: this,
                failType: 'PermissionDenied',
                reason: 'Permission denied',
                config: actionConfig
            }, actionContext));
            var location = actionConfig.noAuthorityLocation || this.getNoAuthorityLocation();
            actionContext.originalURL = actionContext.url;
            actionContext.url = URL.parse(location);
            return this.findEligibleActionConfig(actionContext);
        }
        return actionConfig;
    };
    exports.loadAction = function (actionContext) {
        var actionConfig = this.findEligibleActionConfig(actionContext);
        actionConfig = this.resolveActionConfig(actionConfig, actionContext);
        if (!actionConfig) {
            var failed = new Deferred();
            failed.syncModeEnabled = false;
            failed.reject('no action configured for url ' + actionContext.url.getPath());
            return failed.promise;
        }
        if (actionConfig.title) {
            actionContext.title = actionConfig.title;
            actionContext.args.title = actionConfig.title;
        }
        if (actionConfig.documentTitle) {
            actionContext.documentTitle = actionConfig.documentTitle;
            actionContext.args.documentTitle = actionConfig.documentTitle;
        }
        if (actionConfig.args) {
            for (var name in actionConfig.args) {
                if (actionConfig.args.hasOwnProperty(name)) {
                    if (!actionContext.args.hasOwnProperty(name)) {
                        actionContext.args[name] = actionConfig.args[name];
                    }
                    if (!actionContext.hasOwnProperty(name)) {
                        actionContext[name] = actionConfig.args[name];
                    }
                }
            }
        }
        var loading = new Deferred();
        loading.syncModeEnabled = false;
        var loader = loading.promise;
        var aborted = false;
        var abort = function () {
            if (!aborted) {
                aborted = true;
                this.getEventBus().fire('actionabort', util.mix({ controller: this }, actionContext));
            }
        };
        loader.abort = util.bind(abort, this);
        if (!actionContext.isChildAction) {
            this.currentURL = actionContext.url;
        }
        var callback = function (SpecificAction) {
            if (aborted) {
                return;
            }
            if (!SpecificAction) {
                var reason = 'No action implement for ' + actionConfig.type;
                var error = util.mix({
                    controller: this,
                    failType: 'NoModule',
                    config: actionConfig,
                    reason: reason
                }, actionContext);
                this.getEventBus().fire('actionfail', error);
                this.getEventBus().notifyError(error);
                loading.reject(reason);
                return;
            }
            this.getEventBus().fire('actionloaded', {
                controller: this,
                url: actionContext.url,
                config: actionConfig,
                action: SpecificAction
            });
            if (typeof SpecificAction === 'function') {
                loading.resolve(new SpecificAction(), actionContext);
            } else if (typeof SpecificAction.createRuntimeAction === 'function') {
                var resolveActionInstance = function (action) {
                    if (!action) {
                        var reason = 'Action factory returns non-action';
                        var error = util.mix({
                            controller: this,
                            failType: 'InvalidFactory',
                            config: actionConfig,
                            reason: reason,
                            action: action
                        }, actionContext);
                        this.getEventBus().fire('actionfail', error);
                        this.getEventBus().notifyError(error);
                        loading.reject(reason);
                    } else {
                        loading.resolve(action, actionContext);
                    }
                };
                resolveActionInstance = util.bind(resolveActionInstance, this);
                var actionFactoryProduct = SpecificAction.createRuntimeAction(actionContext);
                Deferred.when(actionFactoryProduct).then(resolveActionInstance);
            } else {
                loading.resolve(SpecificAction, actionContext);
            }
        };
        callback = util.bind(callback, this);
        if (typeof actionConfig.type === 'string') {
            window.require([actionConfig.type], callback);
        } else {
            callback(actionConfig.type);
        }
        return loader;
    };
    exports.enterAction = function (action, actionContext) {
        if (!actionContext.isChildAction) {
            if (actionContext.url !== this.currentURL) {
                return;
            }
            if (this.currentAction) {
                this.getEventBus().fire('leaveaction', {
                    controller: this,
                    action: this.currentAction,
                    to: util.mix({}, actionContext)
                });
                if (typeof this.currentAction.leave === 'function') {
                    this.currentAction.leave();
                }
            }
            this.currentAction = action;
            document.title = actionContext.title || actionContext.documentTitle || this.getDefaultTitle();
        }
        this.getEventBus().fire('enteraction', util.mix({
            controller: this,
            action: action
        }, actionContext));
        var notifyEnterComplete = function () {
            this.getEventBus().fire('enteractioncomplete', util.mix({
                controller: this,
                action: action
            }, actionContext));
        };
        notifyEnterComplete = util.bind(notifyEnterComplete, this);
        var notifyEnterFail = function (reason) {
            var message = '';
            if (!reason) {
                message = 'Invoke action.enter() causes error';
            } else if (reason.message) {
                message = reason.message;
                if (reason.stack) {
                    message += '\n' + reason.stack;
                }
            } else if (window.JSON && typeof JSON.stringify === 'function') {
                try {
                    message = JSON.stringify(reason);
                } catch (parseJSONError) {
                    message = reason;
                }
            } else {
                message = reason;
            }
            var error = util.mix({
                controller: this,
                action: action,
                failType: 'EnterFail',
                reason: message
            }, actionContext);
            this.getEventBus().fire('enteractionfail', error);
            this.getEventBus().notifyError(error);
        };
        notifyEnterFail = util.bind(notifyEnterFail, this);
        var entering = action.enter(actionContext);
        entering.then(notifyEnterComplete, notifyEnterFail);
        return entering;
    };
    exports.forward = function (url, container, options, isChildAction) {
        var actionContext = {
            url: url,
            container: container,
            isChildAction: !!isChildAction
        };
        if (isChildAction) {
            var referrerInfo = this.childActionMapping[container];
            actionContext.referrer = referrerInfo ? referrerInfo.url : null;
        } else {
            actionContext.referrer = this.currentURL;
        }
        util.mix(actionContext, options);
        actionContext.args = util.mix({}, actionContext);
        util.mix(actionContext.args, url.getQuery());
        this.getEventBus().fire('forwardaction', util.mix({ controller: this }, actionContext));
        var loader = this.loadAction(actionContext);
        assert.has(loader, 'loadAction should always return a Promise');
        return loader;
    };
    exports.renderAction = function (url) {
        if (typeof url === 'string') {
            url = URL.parse(url);
        }
        if (this.globalActionLoader && typeof this.globalActionLoader.abort === 'function') {
            this.globalActionLoader.abort();
        }
        if (this.currentAction && typeof this.currentAction.filterRedirect === 'function' && this.currentAction.filterRedirect(url) === false) {
            return Deferred.rejected('Redirect aborted by previous action');
        }
        this.globalActionLoader = this.forward(url, this.getMainContainer(), null, false);
        var events = this.getEventBus();
        return this.globalActionLoader.then(util.bind(this.enterAction, this)).fail(util.bind(events.notifyError, events));
    };
    function removeChildAction(controller, container, targetContext) {
        var info = controller.childActionMapping[container.id];
        if (!info) {
            return;
        }
        controller.childActionMapping[container.id] = undefined;
        if (info.hijack) {
            if (container.removeEventListener) {
                container.removeEventListener('click', info.hijack, false);
            } else {
                container.detachEvent('onclick', info.hijack);
            }
        }
        if (info.action) {
            if (!targetContext) {
                targetContext = {
                    url: null,
                    referrer: info.url,
                    container: container.id,
                    isChildAction: true
                };
            }
            controller.getEventBus().fire('leaveaction', {
                controller: controller,
                action: info.action,
                to: targetContext
            });
            if (typeof info.action.leave === 'function') {
                info.action.leave();
            }
        }
    }
    function addChildAction(controller, container, action, hijack, context) {
        removeChildAction(controller, container, context);
        if (container.addEventListener) {
            container.addEventListener('click', hijack, false);
        } else {
            container.attachEvent('onclick', hijack);
        }
        var info = {
            url: context.url,
            container: container.id,
            action: action,
            hijack: hijack
        };
        controller.childActionMapping[container.id] = info;
        var EventTarget = require('mini-event/EventTarget');
        if (action instanceof EventTarget) {
            action.on('leave', function () {
                removeChildAction(controller, container);
            });
        }
    }
    exports.enterChildAction = function (action, actionContext) {
        this.childActionLoaders[actionContext.container] = null;
        var container = document.getElementById(actionContext.container);
        if (!container) {
            return;
        }
        var locator = this.getLocator();
        var currentController = this;
        function redirect(url, options, extra) {
            options = options || {};
            url = locator.resolveURL(url);
            if (options.global) {
                var container = document.getElementById(actionContext.container);
                var globalRedirectPerformed = locator.redirect(url, options);
                if (globalRedirectPerformed && container) {
                    removeChildAction(currentController, container);
                }
                return globalRedirectPerformed;
            }
            var childActionInfo = currentController.childActionMapping[actionContext.container];
            var changed = url.toString() !== childActionInfo.url.toString();
            var shouldPerformRedirect = changed || options.force;
            if (shouldPerformRedirect) {
                if (options.silent) {
                    childActionInfo.url = url;
                } else {
                    currentController.renderChildAction(url, childActionInfo.container, extra);
                }
            }
            return shouldPerformRedirect;
        }
        function isChildActionRedirected(e) {
            if (e.isChildActionRedirected) {
                return true;
            }
            var innermostContainer = e.target || e.srcElement;
            while (innermostContainer) {
                if (innermostContainer.id && currentController.childActionMapping[innermostContainer.id]) {
                    break;
                }
                innermostContainer = innermostContainer.parentNode;
            }
            if (innermostContainer.id !== actionContext.container) {
                e.isChildActionRedirected = true;
                return true;
            }
            return false;
        }
        function hijack(e) {
            e = e || window.event;
            var target = e.target || e.srcElement;
            if (target.nodeName.toLowerCase() !== 'a') {
                return;
            }
            var linkTarget = target.getAttribute('target');
            if (linkTarget && linkTarget !== '_self') {
                return;
            }
            var href = target.getAttribute('href', 2) || '';
            if (href.charAt(0) !== '#') {
                return;
            }
            var redirectAttributes = (target.getAttribute('data-redirect') || '').split(/[,\s]/);
            var redirectOptions = {};
            for (var i = 0; i < redirectAttributes.length; i++) {
                var redirectAttributeName = util.trim(redirectAttributes[i]);
                if (redirectAttributeName) {
                    redirectOptions[redirectAttributeName] = true;
                }
            }
            if (!redirectOptions.global && isChildActionRedirected(e)) {
                return;
            }
            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
            var url = href.substring(1);
            redirect(url, redirectOptions);
        }
        action.redirect = redirect;
        action.reload = function (extra) {
            this.redirect(actionContext.url, { force: true }, extra);
        };
        action.back = function (defaultURL, extra) {
            var referrer = this.context && this.context.referrer;
            var url = referrer || defaultURL;
            this.redirect(url, null, extra);
        };
        addChildAction(this, container, action, hijack, actionContext);
        return this.enterAction(action, actionContext);
    };
    exports.renderChildAction = function (url, container, options) {
        assert.has(container);
        if (typeof url === 'string') {
            url = URL.parse(url);
        }
        var previousLoader = this.childActionLoaders[container];
        if (previousLoader && typeof previousLoader.abort === 'function') {
            previousLoader.abort();
        }
        var actionInfo = this.childActionMapping[container];
        var previousAction = actionInfo && actionInfo.action;
        if (previousAction && typeof previousAction.filterRedirect === 'function' && previousAction.filterRedirect(url) === false) {
            return Deferred.rejected('Redirect aborted by previous action');
        }
        var loader = this.forward(url, container, options, true);
        var events = this.getEventBus();
        var loadingChildAction = loader.then(util.bind(this.enterChildAction, this)).fail(util.bind(events.notifyError, events));
        loadingChildAction.abort = loader.abort;
        this.childActionLoaders[container] = loadingChildAction;
        return loadingChildAction;
    };
    var Controller = require('eoo').create(require('mini-event/EventTarget'), exports);
    var instance = new Controller();
    instance.setLocator(require('./locator'));
    instance.setRouter(require('./router'));
    instance.setEventBus(require('./events'));
    instance.setPermissionProvider(require('./permission'));
    instance.Controller = Controller;
    return instance;
});

(function (root) {
    function extend(target, source) {
        for (var key in source) {
            if (source.hasOwnProperty(key)) {
                target[key] = source[key];
            }
        }
        return target;
    }
    function Stack() {
        this.raw = [];
        this.length = 0;
    }
    Stack.prototype = {
        push: function (elem) {
            this.raw[this.length++] = elem;
        },
        pop: function () {
            if (this.length > 0) {
                var elem = this.raw[--this.length];
                this.raw.length = this.length;
                return elem;
            }
        },
        top: function () {
            return this.raw[this.length - 1];
        },
        bottom: function () {
            return this.raw[0];
        },
        find: function (condition) {
            var index = this.length;
            while (index--) {
                var item = this.raw[index];
                if (condition(item)) {
                    return item;
                }
            }
        }
    };
    var guidIndex = 178245;
    function generateGUID() {
        return '___' + guidIndex++;
    }
    function inherits(subClass, superClass) {
        var F = new Function();
        F.prototype = superClass.prototype;
        subClass.prototype = new F();
        subClass.prototype.constructor = subClass;
    }
    var HTML_ENTITY = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#39;'
    };
    function htmlFilterReplacer(c) {
        return HTML_ENTITY[c];
    }
    var DEFAULT_FILTERS = {
        html: function (source) {
            return source.replace(/[&<>"']/g, htmlFilterReplacer);
        },
        url: encodeURIComponent,
        raw: function (source) {
            return source;
        }
    };
    function stringLiteralize(source) {
        return '"' + source.replace(/\x5C/g, '\\\\').replace(/"/g, '\\"').replace(/\x0A/g, '\\n').replace(/\x09/g, '\\t').replace(/\x0D/g, '\\r') + '"';
    }
    function stringFormat(source) {
        var args = arguments;
        return source.replace(/\{([0-9]+)\}/g, function (match, index) {
            return args[index - 0 + 1];
        });
    }
    var RENDER_STRING_DECLATION = 'var r="";';
    var RENDER_STRING_ADD_START = 'r+=';
    var RENDER_STRING_ADD_END = ';';
    var RENDER_STRING_RETURN = 'return r;';
    if (typeof navigator != 'undefined' && /msie\s*([0-9]+)/i.test(navigator.userAgent) && RegExp.$1 - 0 < 8) {
        RENDER_STRING_DECLATION = 'var r=[],ri=0;';
        RENDER_STRING_ADD_START = 'r[ri++]=';
        RENDER_STRING_RETURN = 'return r.join("");';
    }
    function toGetVariableLiteral(name) {
        name = name.replace(/^\s*\*/, '');
        return stringFormat('gv({0},["{1}"])', stringLiteralize(name), name.replace(/\[['"]?([^'"]+)['"]?\]/g, function (match, name) {
            return '.' + name;
        }).split('.').join('","'));
    }
    function parseTextBlock(source, open, close, greedy, onInBlock, onOutBlock) {
        var closeLen = close.length;
        var texts = source.split(open);
        var level = 0;
        var buf = [];
        for (var i = 0, len = texts.length; i < len; i++) {
            var text = texts[i];
            if (i) {
                var openBegin = 1;
                level++;
                while (1) {
                    var closeIndex = text.indexOf(close);
                    if (closeIndex < 0) {
                        buf.push(level > 1 && openBegin ? open : '', text);
                        break;
                    }
                    level = greedy ? level - 1 : 0;
                    buf.push(level > 0 && openBegin ? open : '', text.slice(0, closeIndex), level > 0 ? close : '');
                    text = text.slice(closeIndex + closeLen);
                    openBegin = 0;
                    if (level === 0) {
                        break;
                    }
                }
                if (level === 0) {
                    onInBlock(buf.join(''));
                    onOutBlock(text);
                    buf = [];
                }
            } else {
                text && onOutBlock(text);
            }
        }
        if (level > 0 && buf.length > 0) {
            onOutBlock(open);
            onOutBlock(buf.join(''));
        }
    }
    function compileVariable(source, engine, forText) {
        var code = [];
        var options = engine.options;
        var toStringHead = '';
        var toStringFoot = '';
        var wrapHead = '';
        var wrapFoot = '';
        var defaultFilter;
        if (forText) {
            toStringHead = 'ts(';
            toStringFoot = ')';
            wrapHead = RENDER_STRING_ADD_START;
            wrapFoot = RENDER_STRING_ADD_END;
            defaultFilter = options.defaultFilter;
        }
        parseTextBlock(source, options.variableOpen, options.variableClose, 1, function (text) {
            if (forText && text.indexOf('|') < 0 && defaultFilter) {
                text += '|' + defaultFilter;
            }
            var filterCharIndex = text.indexOf('|');
            var variableName = (filterCharIndex > 0 ? text.slice(0, filterCharIndex) : text).replace(/^\s+/, '').replace(/\s+$/, '');
            var filterSource = filterCharIndex > 0 ? text.slice(filterCharIndex + 1) : '';
            var variableRawValue = variableName.indexOf('*') === 0;
            var variableCode = [
                variableRawValue ? '' : toStringHead,
                toGetVariableLiteral(variableName),
                variableRawValue ? '' : toStringFoot
            ];
            if (filterSource) {
                filterSource = compileVariable(filterSource, engine);
                var filterSegs = filterSource.split('|');
                for (var i = 0, len = filterSegs.length; i < len; i++) {
                    var seg = filterSegs[i];
                    if (/^\s*([a-z0-9_-]+)(\((.*)\))?\s*$/i.test(seg)) {
                        variableCode.unshift('fs["' + RegExp.$1 + '"](');
                        if (RegExp.$3) {
                            variableCode.push(',', RegExp.$3);
                        }
                        variableCode.push(')');
                    }
                }
            }
            code.push(wrapHead, variableCode.join(''), wrapFoot);
        }, function (text) {
            code.push(wrapHead, forText ? stringLiteralize(text) : text, wrapFoot);
        });
        return code.join('');
    }
    function TextNode(value, engine) {
        this.value = value;
        this.engine = engine;
    }
    TextNode.prototype = {
        getRendererBody: function () {
            var value = this.value;
            var options = this.engine.options;
            if (!value || options.strip && /^\s*$/.test(value)) {
                return '';
            }
            return compileVariable(value, this.engine, 1);
        },
        getContent: function () {
            return this.value;
        }
    };
    function Command(value, engine) {
        this.value = value;
        this.engine = engine;
        this.children = [];
    }
    Command.prototype = {
        addChild: function (node) {
            this.children.push(node);
        },
        open: function (context) {
            var parent = context.stack.top();
            this.parent = parent;
            parent && parent.addChild(this);
            context.stack.push(this);
        },
        close: function (context) {
            while (context.stack.pop().constructor !== this.constructor) {
            }
        },
        addTextNode: function (node) {
            this.addChild(node);
        },
        getRendererBody: function () {
            var buf = [];
            var children = this.children;
            for (var i = 0; i < children.length; i++) {
                buf.push(children[i].getRendererBody());
            }
            return buf.join('');
        }
    };
    function autoCloseCommand(context, CommandType) {
        var stack = context.stack;
        var closeEnd = CommandType ? stack.find(function (item) {
            return item instanceof CommandType;
        }) : stack.bottom();
        if (closeEnd) {
            var node;
            do {
                node = stack.top();
                if (!node.autoClose) {
                    throw new Error(node.type + ' must be closed manually: ' + node.value);
                }
                node.autoClose(context);
            } while (node !== closeEnd);
        }
        return closeEnd;
    }
    var RENDERER_BODY_START = '' + 'data=data||{};' + 'var v={},fs=engine.filters,hg=typeof data.get=="function",' + 'gv=function(n,ps){' + 'var p=ps[0],d=v[p];' + 'if(d==null){' + 'if(hg){return data.get(n);}' + 'd=data[p];' + '}' + 'for(var i=1,l=ps.length;i<l;i++)if(d!=null)d = d[ps[i]];' + 'return d;' + '},' + 'ts=function(s){' + 'if(typeof s==="string"){return s;}' + 'if(s==null){s="";}' + 'return ""+s;' + '};';
    function TargetCommand(value, engine) {
        if (!/^\s*([a-z0-9_-]+)\s*(\(\s*master\s*=\s*([a-z0-9_-]+)\s*\))?\s*/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.master = RegExp.$3;
        this.name = RegExp.$1;
        Command.call(this, value, engine);
        this.contents = {};
    }
    inherits(TargetCommand, Command);
    function MasterCommand(value, engine) {
        if (!/^\s*([a-z0-9_-]+)\s*(\(\s*master\s*=\s*([a-z0-9_-]+)\s*\))?\s*/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.master = RegExp.$3;
        this.name = RegExp.$1;
        Command.call(this, value, engine);
        this.contents = {};
    }
    inherits(MasterCommand, Command);
    function ContentCommand(value, engine) {
        if (!/^\s*([a-z0-9_-]+)\s*$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        Command.call(this, value, engine);
    }
    inherits(ContentCommand, Command);
    function ContentPlaceHolderCommand(value, engine) {
        if (!/^\s*([a-z0-9_-]+)\s*$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        Command.call(this, value, engine);
    }
    inherits(ContentPlaceHolderCommand, Command);
    function ImportCommand(value, engine) {
        if (!/^\s*([a-z0-9_-]+)\s*$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        Command.call(this, value, engine);
    }
    inherits(ImportCommand, Command);
    function VarCommand(value, engine) {
        if (!/^\s*([a-z0-9_]+)\s*=([\s\S]*)$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        this.expr = RegExp.$2;
        Command.call(this, value, engine);
    }
    inherits(VarCommand, Command);
    function FilterCommand(value, engine) {
        if (!/^\s*([a-z0-9_-]+)\s*(\(([\s\S]*)\))?\s*$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        this.args = RegExp.$3;
        Command.call(this, value, engine);
    }
    inherits(FilterCommand, Command);
    function UseCommand(value, engine) {
        if (!/^\s*([a-z0-9_-]+)\s*(\(([\s\S]*)\))?\s*$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        this.args = RegExp.$3;
        Command.call(this, value, engine);
    }
    inherits(UseCommand, Command);
    function ForCommand(value, engine) {
        if (!/^\s*(\$\{[\s\S]+\})\s+as\s+\$\{([0-9a-z_]+)\}\s*(,\s*\$\{([0-9a-z_]+)\})?\s*$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.list = RegExp.$1;
        this.item = RegExp.$2;
        this.index = RegExp.$4;
        Command.call(this, value, engine);
    }
    inherits(ForCommand, Command);
    function IfCommand(value, engine) {
        Command.call(this, value, engine);
    }
    inherits(IfCommand, Command);
    function ElifCommand(value, engine) {
        IfCommand.call(this, value, engine);
    }
    inherits(ElifCommand, IfCommand);
    function ElseCommand(value, engine) {
        Command.call(this, value, engine);
    }
    inherits(ElseCommand, Command);
    var TMNodeState = {
        READING: 1,
        READED: 2,
        APPLIED: 3,
        READY: 4
    };
    MasterCommand.prototype.close = MasterCommand.prototype.autoClose = TargetCommand.prototype.close = TargetCommand.prototype.autoClose = function (context) {
        Command.prototype.close.call(this, context);
        this.state = this.master ? TMNodeState.READED : TMNodeState.APPLIED;
        context.targetOrMaster = null;
    };
    TargetCommand.prototype.applyMaster = MasterCommand.prototype.applyMaster = function () {
        if (this.state >= TMNodeState.APPLIED) {
            return 1;
        }
        var masterNode = this.engine.masters[this.master];
        if (masterNode && masterNode.applyMaster()) {
            this.children = [];
            for (var i = 0, len = masterNode.children.length; i < len; i++) {
                var child = masterNode.children[i];
                if (child instanceof ContentPlaceHolderCommand) {
                    this.children.push.apply(this.children, (this.contents[child.name] || child).children);
                } else {
                    this.children.push(child);
                }
            }
            this.state = TMNodeState.APPLIED;
            return 1;
        }
    };
    TargetCommand.prototype.isReady = function () {
        if (this.state >= TMNodeState.READY) {
            return 1;
        }
        var engine = this.engine;
        var readyState = 1;
        function checkReadyState(node) {
            for (var i = 0, len = node.children.length; i < len; i++) {
                var child = node.children[i];
                if (child instanceof ImportCommand) {
                    var target = engine.targets[child.name];
                    readyState = readyState && target && target.isReady(engine);
                } else if (child instanceof Command) {
                    checkReadyState(child);
                }
            }
        }
        if (this.applyMaster()) {
            checkReadyState(this);
            readyState && (this.state = TMNodeState.READY);
            return readyState;
        }
    };
    TargetCommand.prototype.getRenderer = function () {
        if (this.renderer) {
            return this.renderer;
        }
        if (this.isReady()) {
            var realRenderer = new Function('data', 'engine', [
                RENDERER_BODY_START,
                RENDER_STRING_DECLATION,
                this.getRendererBody(),
                RENDER_STRING_RETURN
            ].join('\n'));
            var engine = this.engine;
            this.renderer = function (data) {
                return realRenderer(data, engine);
            };
            return this.renderer;
        }
        return null;
    };
    TargetCommand.prototype.getContent = function () {
        if (this.isReady()) {
            var buf = [];
            var children = this.children;
            for (var i = 0; i < children.length; i++) {
                buf.push(children[i].getContent());
            }
            return buf.join('');
        }
        return '';
    };
    function addTargetOrMasterToContext(targetOrMaster, context) {
        context.targetOrMaster = targetOrMaster;
        var engine = context.engine;
        var name = targetOrMaster.name;
        var isTarget = targetOrMaster instanceof TargetCommand;
        var prop = isTarget ? 'targets' : 'masters';
        if (engine[prop][name]) {
            switch (engine.options.namingConflict) {
            case 'override':
                engine[prop][name] = targetOrMaster;
                isTarget && context.targets.push(name);
            case 'ignore':
                break;
            default:
                throw new Error((isTarget ? 'Target' : 'Master') + ' is exists: ' + name);
            }
        } else {
            engine[prop][name] = targetOrMaster;
            isTarget && context.targets.push(name);
        }
    }
    TargetCommand.prototype.open = MasterCommand.prototype.open = function (context) {
        autoCloseCommand(context);
        Command.prototype.open.call(this, context);
        this.state = TMNodeState.READING;
        addTargetOrMasterToContext(this, context);
    };
    ImportCommand.prototype.open = VarCommand.prototype.open = UseCommand.prototype.open = function (context) {
        var parent = context.stack.top();
        this.parent = parent;
        parent.addChild(this);
    };
    UseCommand.prototype.beforeOpen = ImportCommand.prototype.beforeOpen = VarCommand.prototype.beforeOpen = ForCommand.prototype.beforeOpen = FilterCommand.prototype.beforeOpen = IfCommand.prototype.beforeOpen = TextNode.prototype.beforeAdd = function (context) {
        if (context.stack.bottom()) {
            return;
        }
        var target = new TargetCommand(generateGUID(), context.engine);
        target.open(context);
    };
    UseCommand.prototype.close = ImportCommand.prototype.close = ElseCommand.prototype.close = VarCommand.prototype.close = function () {
    };
    ImportCommand.prototype.getContent = function () {
        var target = this.engine.targets[this.name];
        return target.getContent();
    };
    ImportCommand.prototype.getRendererBody = function () {
        var target = this.engine.targets[this.name];
        return target.getRendererBody();
    };
    UseCommand.prototype.getRendererBody = function () {
        return stringFormat('{0}engine.render({2},{{3}}){1}', RENDER_STRING_ADD_START, RENDER_STRING_ADD_END, stringLiteralize(this.name), compileVariable(this.args, this.engine).replace(/(^|,)\s*([a-z0-9_]+)\s*=/gi, function (match, start, argName) {
            return (start || '') + stringLiteralize(argName) + ':';
        }));
    };
    VarCommand.prototype.getRendererBody = function () {
        if (this.expr) {
            return stringFormat('v[{0}]={1};', stringLiteralize(this.name), compileVariable(this.expr, this.engine));
        }
        return '';
    };
    IfCommand.prototype.getRendererBody = function () {
        var rendererBody = stringFormat('if({0}){{1}}', compileVariable(this.value, this.engine), Command.prototype.getRendererBody.call(this));
        var elseCommand = this['else'];
        if (elseCommand) {
            return [
                rendererBody,
                stringFormat('else{{0}}', elseCommand.getRendererBody())
            ].join('');
        }
        return rendererBody;
    };
    ForCommand.prototype.getRendererBody = function () {
        return stringFormat('' + 'var {0}={1};' + 'if({0} instanceof Array)' + 'for (var {4}=0,{5}={0}.length;{4}<{5};{4}++){v[{2}]={4};v[{3}]={0}[{4}];{6}}' + 'else if(typeof {0}==="object")' + 'for(var {4} in {0}){v[{2}]={4};v[{3}]={0}[{4}];{6}}', generateGUID(), compileVariable(this.list, this.engine), stringLiteralize(this.index || generateGUID()), stringLiteralize(this.item), generateGUID(), generateGUID(), Command.prototype.getRendererBody.call(this));
    };
    FilterCommand.prototype.getRendererBody = function () {
        var args = this.args;
        return stringFormat('{2}fs[{5}]((function(){{0}{4}{1}})(){6}){3}', RENDER_STRING_DECLATION, RENDER_STRING_RETURN, RENDER_STRING_ADD_START, RENDER_STRING_ADD_END, Command.prototype.getRendererBody.call(this), stringLiteralize(this.name), args ? ',' + compileVariable(args, this.engine) : '');
    };
    ContentCommand.prototype.open = function (context) {
        autoCloseCommand(context, ContentCommand);
        Command.prototype.open.call(this, context);
        context.targetOrMaster.contents[this.name] = this;
    };
    ContentPlaceHolderCommand.prototype.open = function (context) {
        autoCloseCommand(context, ContentPlaceHolderCommand);
        Command.prototype.open.call(this, context);
    };
    ContentCommand.prototype.autoClose = IfCommand.prototype.autoClose = Command.prototype.close;
    ContentPlaceHolderCommand.prototype.autoClose = function (context) {
        var parentChildren = this.parent.children;
        parentChildren.push.apply(parentChildren, this.children);
        this.children.length = 0;
        this.close(context);
    };
    IfCommand.prototype.addChild = function (node) {
        var elseCommand = this['else'];
        (elseCommand ? elseCommand.children : this.children).push(node);
    };
    ElifCommand.prototype.open = function (context) {
        var elseCommand = new ElseCommand();
        elseCommand.open(context);
        var ifCommand = autoCloseCommand(context, IfCommand);
        ifCommand.addChild(this);
        context.stack.push(this);
    };
    ElseCommand.prototype.open = function (context) {
        var ifCommand = autoCloseCommand(context, IfCommand);
        ifCommand['else'] = this;
        context.stack.push(ifCommand);
    };
    var commandTypes = {};
    function addCommandType(name, Type) {
        commandTypes[name] = Type;
        Type.prototype.type = name;
    }
    addCommandType('target', TargetCommand);
    addCommandType('master', MasterCommand);
    addCommandType('content', ContentCommand);
    addCommandType('contentplaceholder', ContentPlaceHolderCommand);
    addCommandType('import', ImportCommand);
    addCommandType('use', UseCommand);
    addCommandType('var', VarCommand);
    addCommandType('for', ForCommand);
    addCommandType('if', IfCommand);
    addCommandType('elif', ElifCommand);
    addCommandType('else', ElseCommand);
    addCommandType('filter', FilterCommand);
    function Engine(options) {
        this.options = {
            commandOpen: '<!--',
            commandClose: '-->',
            variableOpen: '${',
            variableClose: '}',
            defaultFilter: 'html'
        };
        this.config(options);
        this.masters = {};
        this.targets = {};
        this.filters = extend({}, DEFAULT_FILTERS);
    }
    Engine.prototype.config = function (options) {
        extend(this.options, options);
    };
    Engine.prototype.compile = Engine.prototype.parse = function (source) {
        if (source) {
            var targetNames = parseSource(source, this);
            if (targetNames.length) {
                return this.targets[targetNames[0]].getRenderer();
            }
        }
        return new Function('return ""');
    };
    Engine.prototype.getRenderer = function (name) {
        var target = this.targets[name];
        if (target) {
            return target.getRenderer();
        }
    };
    Engine.prototype.get = function (name) {
        var target = this.targets[name];
        if (target) {
            return target.getContent();
        }
        return '';
    };
    Engine.prototype.render = function (name, data) {
        var renderer = this.getRenderer(name);
        if (renderer) {
            return renderer(data);
        }
        return '';
    };
    Engine.prototype.addFilter = function (name, filter) {
        if (typeof filter == 'function') {
            this.filters[name] = filter;
        }
    };
    function parseSource(source, engine) {
        var commandOpen = engine.options.commandOpen;
        var commandClose = engine.options.commandClose;
        var stack = new Stack();
        var analyseContext = {
            engine: engine,
            targets: [],
            stack: stack
        };
        var textBuf = [];
        function flushTextBuf() {
            if (textBuf.length > 0) {
                var text = textBuf.join('');
                var textNode = new TextNode(text, engine);
                textNode.beforeAdd(analyseContext);
                stack.top().addTextNode(textNode);
                textBuf = [];
                if (engine.options.strip && analyseContext.current instanceof Command) {
                    textNode.value = text.replace(/^[\x20\t\r]*\n/, '');
                }
                analyseContext.current = textNode;
            }
        }
        var NodeType;
        function isInstanceofNodeType(node) {
            return node instanceof NodeType;
        }
        parseTextBlock(source, commandOpen, commandClose, 0, function (text) {
            var match = /^\s*(\/)?([a-z]+)\s*(:([\s\S]*))?$/.exec(text);
            if (match && (NodeType = commandTypes[match[2].toLowerCase()]) && typeof NodeType == 'function') {
                flushTextBuf();
                var currentNode = analyseContext.current;
                if (engine.options.strip && currentNode instanceof TextNode) {
                    currentNode.value = currentNode.value.replace(/\r?\n[\x20\t]*$/, '\n');
                }
                if (match[1]) {
                    currentNode = stack.find(isInstanceofNodeType);
                    currentNode && currentNode.close(analyseContext);
                } else {
                    currentNode = new NodeType(match[4], engine);
                    if (typeof currentNode.beforeOpen == 'function') {
                        currentNode.beforeOpen(analyseContext);
                    }
                    currentNode.open(analyseContext);
                }
                analyseContext.current = currentNode;
            } else if (!/^\s*\/\//.test(text)) {
                textBuf.push(commandOpen, text, commandClose);
            }
            NodeType = null;
        }, function (text) {
            textBuf.push(text);
        });
        flushTextBuf();
        autoCloseCommand(analyseContext);
        return analyseContext.targets;
    }
    var etpl = new Engine();
    etpl.Engine = Engine;
    if (typeof exports == 'object' && typeof module == 'object') {
        exports = module.exports = etpl;
    } else if (typeof define == 'function' && define.amd) {
        define('etpl/main', [], etpl);
    } else {
        root.etpl = etpl;
    }
}(this));

define('etpl', ['etpl/main'], function (main) { return main; });

define('er/View', [
    'require',
    './util',
    './Model',
    'etpl',
    'eoo',
    'mini-event/EventTarget'
], function (require) {
    var util = require('./util');
    var exports = {};
    exports.constructor = function () {
        this.initialize();
    };
    exports.initialize = util.noop;
    exports.template = '';
    exports.getTemplateName = function () {
        return this.template || '';
    };
    exports.model = null;
    exports.container = '';
    exports.getContainerElement = function () {
        return util.getElement(this.container) || null;
    };
    exports.getTemplateData = function () {
        var model = this.model;
        if (model && typeof model.get !== 'function') {
            var Model = require('./Model');
            model = new Model(model);
        }
        var visit = function (propertyPath) {
            var path = propertyPath.replace(/\[(\d+)\]/g, '.$1').split('.');
            var propertyName = path.shift();
            var value = model.get(propertyName);
            while (value && (propertyName = path.shift())) {
                value = value[propertyName];
            }
            return value;
        };
        return {
            get: visit,
            relatedModel: model
        };
    };
    exports.render = function () {
        var container = this.getContainerElement();
        if (!container) {
            var url = this.model && typeof this.model.get === 'function' && this.model.get('url');
            throw new Error('Container not found when rendering ' + (url ? '"' + url + '"' : 'view'));
        }
        var template = require('etpl');
        var html = template.render(this.getTemplateName(), this.getTemplateData());
        container.innerHTML = html;
        this.enterDocument();
    };
    exports.enterDocument = require('./util').noop;
    exports.dispose = function () {
        var container = this.getContainerElement();
        container && (container.innerHTML = '');
    };
    var View = require('eoo').create(require('mini-event/EventTarget'), exports);
    return View;
});

define('er/URL', [
    'require',
    './util',
    'eoo'
], function (require) {
    var util = require('./util');
    var exports = {};
    exports.constructor = function (path, search, searchSeparator) {
        path = path || '/';
        search = search || '';
        searchSeparator = searchSeparator || '~';
        this.toString = function () {
            return search ? path + searchSeparator + search : path;
        };
        this.getPath = function () {
            return path;
        };
        this.getSearch = function () {
            return search;
        };
        var query = null;
        this.getQuery = function (key) {
            if (!query) {
                query = URL.parseQuery(search);
            }
            return key ? query[key] : util.mix({}, query);
        };
    };
    exports.compare = function (another) {
        if (typeof another === 'string') {
            another = URL.parse(another);
        }
        var result = {};
        var thisPath = this.getPath();
        var anotherPath = another.getPath();
        if (thisPath === anotherPath) {
            result.path = false;
        } else {
            result.path = {
                key: 'path',
                self: thisPath,
                other: anotherPath
            };
        }
        var thisQuery = this.getQuery();
        var anotherQuery = another.getQuery();
        var queryDifferenceIndex = {};
        var queryDifference = [];
        var hasQueryDifference = false;
        for (var key in thisQuery) {
            if (thisQuery.hasOwnProperty(key)) {
                var thisValue = thisQuery[key];
                var anotherValue = anotherQuery[key];
                if (thisValue !== anotherValue) {
                    hasQueryDifference = true;
                    var diff = {
                        key: key,
                        self: thisValue,
                        other: anotherValue
                    };
                    queryDifference.push(diff);
                    queryDifferenceIndex[key] = diff;
                }
            }
        }
        for (var key in anotherQuery) {
            if (anotherQuery.hasOwnProperty(key) && !thisQuery.hasOwnProperty(key)) {
                hasQueryDifference = true;
                var diff = {
                    key: key,
                    self: undefined,
                    other: anotherQuery[key]
                };
                queryDifference.push(diff);
                queryDifferenceIndex[key] = diff;
            }
        }
        result.queryDifference = queryDifference;
        result.query = hasQueryDifference ? queryDifferenceIndex : false;
        return result;
    };
    var URL = require('eoo').create(exports);
    URL.parse = function (url, options) {
        var defaults = { querySeparator: '~' };
        options = util.mix(defaults, options);
        var querySeparatorIndex = url.indexOf(options.querySeparator);
        if (querySeparatorIndex >= 0) {
            return new URL(url.slice(0, querySeparatorIndex), url.slice(querySeparatorIndex + 1), options.querySeparator);
        } else {
            return new URL(url, '', options.querySeparator);
        }
    };
    URL.withQuery = function (path, query, options) {
        path = path + '';
        var defaults = { querySeparator: '~' };
        options = util.mix(defaults, options);
        var separator = path.indexOf(options.querySeparator) < 0 ? options.querySeparator : '&';
        var search = URL.serialize(query);
        var url = path + separator + search;
        return URL.parse(url, options);
    };
    URL.parseQuery = function (str) {
        var pairs = str.split('&');
        var query = {};
        for (var i = 0; i < pairs.length; i++) {
            var pair = pairs[i];
            if (!pair) {
                continue;
            }
            var index = pair.indexOf('=');
            var key = index < 0 ? decodeURIComponent(pair) : decodeURIComponent(pair.slice(0, index));
            var value = index < 0 ? true : decodeURIComponent(pair.slice(index + 1));
            if (query.hasOwnProperty(key)) {
                if (value !== true) {
                    query[key] = [].concat(query[key], value);
                }
            } else {
                query[key] = value;
            }
        }
        return query;
    };
    URL.serialize = function (query) {
        if (!query) {
            return '';
        }
        var search = '';
        for (var key in query) {
            if (query.hasOwnProperty(key)) {
                var value = query[key];
                search += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(value);
            }
        }
        return search.slice(1);
    };
    URL.empty = new URL();
    return URL;
});

define('er/Observable', [
    'require',
    'mini-event/EventTarget'
], function (require) {
    return require('mini-event/EventTarget');
});

define('er/Enum', [
    'require',
    'eoo'
], function (require) {
    var exports = {};
    exports.constructor = function () {
        this.valueIndex = [];
        this.aliasIndex = {};
        this.textIndex = {};
        for (var i = 0; i < arguments.length; i++) {
            var element = arguments[i];
            if (element.value == null) {
                element.value = i;
            }
            this.addElement(element);
        }
    };
    exports.addElement = function (element) {
        if (this.hasOwnProperty(element.value)) {
            throw new Error('Already defined an element with value' + element.value + ' in this enum type');
        }
        if (this.hasOwnProperty(element.alias)) {
            throw new Error('Already defined an element with alias "' + element.alias + '" in this enum type');
        }
        this[element.value] = element.alias;
        this[element.alias] = element.value;
        this.valueIndex[element.value] = element;
        this.aliasIndex[element.alias] = element;
        this.textIndex[element.text] = element;
    };
    exports.fromValue = function (value) {
        return this.valueIndex[value];
    };
    exports.fromAlias = function (alias) {
        return this.aliasIndex[alias];
    };
    exports.fromText = function (text) {
        return this.textIndex[text];
    };
    exports.getTextFromValue = function (value) {
        return this.fromValue(value).text;
    };
    exports.getTextFromAlias = function (alias) {
        return this.fromAlias(alias).text;
    };
    exports.getValueFromAlias = function (alias) {
        return this.fromAlias(alias).value;
    };
    exports.getValueFromText = function (text) {
        return this.fromText(text).value;
    };
    exports.getAliasFromValue = function (value) {
        return this.fromValue(value).alias;
    };
    exports.getAliasFromText = function (text) {
        return this.fromText(text).alias;
    };
    exports.toArray = function () {
        var array = [];
        if (arguments.length > 0) {
            for (var i = 0; i < arguments.length; i++) {
                var hint = arguments[i];
                if (typeof hint === 'string') {
                    array.push(this.fromAlias(hint));
                } else {
                    array.push(hint);
                }
            }
        } else {
            for (var i = 0; i < this.valueIndex.length; i++) {
                if (this.valueIndex[i]) {
                    array.push(this.valueIndex[i]);
                }
            }
        }
        return array;
    };
    var Enum = require('eoo').create(exports);
    return Enum;
});

define('er/config', [], {
    mainElement: 'main',
    indexURL: '/',
    systemName: '',
    noAuthorityLocation: '/401',
    notFoundLocation: '/404'
});

define('er/locator', [
    'require',
    './config',
    './events',
    'mini-event/EventTarget'
], function (require) {
    var locator = {};
    var currentLocation = '';
    function getLocation() {
        var index = location.href.indexOf('#');
        var url = index === -1 ? '' : location.href.slice(index);
        return url;
    }
    function forwardHash() {
        var url = getLocation();
        locator.redirect(url);
    }
    var rollTimer = 0;
    var startupTimer = 1;
    function start(firstTime) {
        if (window.addEventListener) {
            window.addEventListener('hashchange', forwardHash, false);
        } else if ('onhashchange' in window && document.documentMode > 7) {
            window.attachEvent('onhashchange', forwardHash);
        } else {
            rollTimer = setInterval(forwardHash, 100);
        }
        if (firstTime) {
            startupTimer = setTimeout(forwardHash, 0);
        }
    }
    function stop() {
        if (rollTimer) {
            clearInterval(rollTimer);
            rollTimer = null;
        }
        if (startupTimer) {
            clearTimeout(startupTimer);
            startupTimer = null;
        }
        if (window.removeEventListener) {
            window.removeEventListener('hashchange', forwardHash, false);
        } else if ('onhashchange' in window && document.documentMode > 7) {
            window.detachEvent('onhashchange', forwardHash);
        }
    }
    function updateURL(url, options) {
        var changed = currentLocation !== url;
        if (changed && getLocation() !== url) {
            if (options.silent) {
                stop();
                location.hash = url;
                start(false);
            } else {
                location.hash = url;
            }
        }
        currentLocation = url;
        return changed;
    }
    locator.start = function () {
        start(true);
    };
    locator.stop = stop;
    locator.resolveURL = function (url) {
        url = url + '';
        if (url.indexOf('#') === 0) {
            url = url.slice(1);
        }
        if (!url || url === '/') {
            url = require('./config').indexURL;
        }
        return url;
    };
    locator.redirect = function (url, options) {
        options = options || {};
        url = locator.resolveURL(url);
        var referrer = currentLocation;
        var isLocationChanged = updateURL(url, options);
        var shouldPerformRedirect = isLocationChanged || options.force;
        if (shouldPerformRedirect) {
            if (!options.silent) {
                locator.fire('redirect', {
                    url: url,
                    referrer: referrer
                });
            }
            require('./events').fire('redirect', {
                url: url,
                referrer: referrer
            });
        }
        return shouldPerformRedirect;
    };
    locator.reload = function () {
        if (currentLocation) {
            locator.redirect(currentLocation, { force: true });
        }
    };
    require('mini-event/EventTarget').enable(locator);
    return locator;
});

define('er/Action', [
    'require',
    './util',
    './Deferred',
    './events',
    './locator',
    'eoo',
    'mini-event/EventTarget'
], function (require) {
    var util = require('./util');
    function reportErrors() {
        var errors = [];
        for (var i = 0; i < arguments.length; i++) {
            var result = arguments[i];
            if (!result.success) {
                errors.push(result);
            }
        }
        return this.handleError(errors);
    }
    var exports = {};
    exports.constructor = function () {
        this.disposed = false;
        this.initialize();
    };
    exports.initialize = util.noop;
    exports.context = null;
    exports.modelType = null;
    exports.viewType = null;
    exports.enter = function (actionContext) {
        this.context = actionContext || {};
        this.fire('enter');
        var args = util.mix({}, actionContext && actionContext.args);
        if (this.model) {
            this.model.fill(args);
        } else {
            this.model = this.createModel(args);
        }
        this.fire('beforemodelload');
        if (this.model && typeof this.model.load === 'function') {
            var loadingModel = this.model.load();
            return loadingModel.then(util.bind(this.forwardToView, this), util.bind(reportErrors, this));
        } else {
            this.forwardToView();
            return require('./Deferred').resolved(this);
        }
    };
    exports.handleError = function (errors) {
        throw errors;
    };
    exports.createModel = function (context) {
        if (this.modelType) {
            var model = new this.modelType(context);
            return model;
        } else {
            return {};
        }
    };
    exports.forwardToView = function () {
        if (this.disposed) {
            return this;
        }
        this.fire('modelloaded');
        if (!this.view) {
            this.view = this.createView();
        }
        if (this.view) {
            this.view.model = this.model;
            if (!this.view.container) {
                this.view.container = this.context.container;
            }
            this.fire('beforerender');
            this.view.render();
            this.fire('rendered');
            this.initBehavior();
            this.fire('entercomplete');
        } else {
            var events = require('./events');
            events.notifyError('No view attached to this action');
        }
        return this;
    };
    exports.createView = function () {
        return this.viewType ? new this.viewType() : null;
    };
    exports.initBehavior = util.noop;
    exports.filterRedirect = util.noop;
    exports.leave = function () {
        if (this.disposed) {
            return this;
        }
        this.disposed = true;
        this.fire('beforeleave');
        if (this.model) {
            if (typeof this.model.dispose === 'function') {
                this.model.dispose();
            }
            this.model = null;
        }
        if (this.view) {
            if (typeof this.view.dispose === 'function') {
                this.view.dispose();
            }
            this.view = null;
        }
        this.fire('leave');
        this.destroyEvents();
    };
    exports.redirect = function (url, options) {
        var locator = require('./locator');
        locator.redirect(url, options);
    };
    exports.reload = function () {
        var locator = require('./locator');
        locator.reload();
    };
    exports.back = function (defaultURL) {
        var referrer = this.context && this.context.referrer;
        var url = referrer || defaultURL;
        if (url) {
            this.redirect(url);
        }
    };
    var Action = require('eoo').create(require('mini-event/EventTarget'), exports);
    return Action;
});

void function (define, undefined) {
    define('eoo/defineAccessor', ['require'], function (require) {
        var MEMBERS = '__eooPrivateMembers__';
        function simpleGetter(name) {
            var body = 'return typeof this.' + MEMBERS + ' === \'object\' ? this.' + MEMBERS + '[\'' + name + '\'] : undefined;';
            return new Function(body);
        }
        function simpleSetter(name) {
            var body = 'this.' + MEMBERS + ' = this.' + MEMBERS + ' || {};\n' + 'this.' + MEMBERS + '[\'' + name + '\'] = value;';
            return new Function('value', body);
        }
        return function (obj, name, accessor) {
            var upperName = name.charAt(0).toUpperCase() + name.slice(1);
            var getter = 'get' + upperName;
            var setter = 'set' + upperName;
            if (!accessor) {
                obj[getter] = !accessor || typeof accessor.get !== 'function' ? simpleGetter(name) : accessor.get;
                obj[setter] = !accessor || typeof accessor.set !== 'function' ? simpleSetter(name) : accessor.set;
            } else {
                typeof accessor.get === 'function' && (obj[getter] = accessor.get);
                typeof accessor.set === 'function' && (obj[setter] = accessor.set);
            }
        };
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

define('mini-event/lib', ['require'], function (require) {
    var lib = {};
    lib.extend = function (source) {
        for (var i = 1; i < arguments.length; i++) {
            var addition = arguments[i];
            if (!addition) {
                continue;
            }
            for (var key in addition) {
                if (addition.hasOwnProperty(key)) {
                    source[key] = addition[key];
                }
            }
        }
        return source;
    };
    return lib;
});

define('mini-event/EventTarget', [
    'require',
    './lib',
    './Event',
    './EventQueue'
], function (require) {
    var lib = require('./lib');
    var Event = require('./Event');
    var EventQueue = require('./EventQueue');
    function EventTarget() {
    }
    EventTarget.prototype.on = function (type, fn, thisObject, options) {
        if (!this.miniEventPool) {
            this.miniEventPool = {};
        }
        if (!this.miniEventPool.hasOwnProperty(type)) {
            this.miniEventPool[type] = new EventQueue();
        }
        var queue = this.miniEventPool[type];
        options = lib.extend({}, options);
        if (thisObject) {
            options.thisObject = thisObject;
        }
        queue.add(fn, options);
    };
    EventTarget.prototype.once = function (type, fn, thisObject, options) {
        options = lib.extend({}, options);
        options.once = true;
        this.on(type, fn, thisObject, options);
    };
    EventTarget.prototype.un = function (type, handler, thisObject) {
        if (!this.miniEventPool || !this.miniEventPool.hasOwnProperty(type)) {
            return;
        }
        var queue = this.miniEventPool[type];
        queue.remove(handler, thisObject);
    };
    EventTarget.prototype.fire = function (type, args) {
        if (arguments.length === 1 && typeof type === 'object') {
            args = type;
            type = args.type;
        }
        if (!type) {
            throw new Error('No event type specified');
        }
        if (type === '*') {
            throw new Error('Cannot fire global event');
        }
        var event = args instanceof Event ? args : new Event(type, args);
        event.target = this;
        var inlineHandler = this['on' + type];
        if (typeof inlineHandler === 'function') {
            inlineHandler.call(this, event);
        }
        if (this.miniEventPool && this.miniEventPool.hasOwnProperty(type)) {
            var queue = this.miniEventPool[type];
            queue.execute(event, this);
        }
        if (this.miniEventPool && this.miniEventPool.hasOwnProperty('*')) {
            var globalQueue = this.miniEventPool['*'];
            globalQueue.execute(event, this);
        }
        return event;
    };
    EventTarget.prototype.destroyEvents = function () {
        if (!this.miniEventPool) {
            return;
        }
        for (var name in this.miniEventPool) {
            if (this.miniEventPool.hasOwnProperty(name)) {
                this.miniEventPool[name].dispose();
            }
        }
        this.miniEventPool = null;
    };
    EventTarget.enable = function (target) {
        target.miniEventPool = {};
        lib.extend(target, EventTarget.prototype);
    };
    return EventTarget;
});

define('er/Deferred', [
    'require',
    './util',
    './assert',
    'eoo',
    'mini-event/EventTarget'
], function (require) {
    var util = require('./util');
    var assert = require('./assert');
    var setImmediate = typeof window.setImmediate === 'function' ? function (fn) {
        window.setImmediate(fn);
    } : function (fn) {
        window.setTimeout(fn, 0);
    };
    function tryFlush(deferred) {
        if (deferred.state === 'pending') {
            return;
        }
        var callbacks = deferred.state === 'resolved' ? deferred._doneCallbacks.slice() : deferred._failCallbacks.slice();
        function flush() {
            for (var i = 0; i < callbacks.length; i++) {
                var callback = callbacks[i];
                try {
                    callback.apply(deferred.promise, deferred._args);
                } catch (ex) {
                }
            }
        }
        if (deferred.syncModeEnabled) {
            flush();
        } else {
            setImmediate(flush);
        }
        deferred._doneCallbacks = [];
        deferred._failCallbacks = [];
    }
    function pipe(original, deferred, callback, actionType) {
        return function () {
            if (typeof callback === 'function') {
                var resolver = deferred.resolver;
                try {
                    var returnValue = callback.apply(original.promise, arguments);
                    if (Deferred.isPromise(returnValue)) {
                        returnValue.then(resolver.resolve, resolver.reject);
                    } else {
                        resolver.resolve(returnValue);
                    }
                } catch (error) {
                    Deferred.fire('exception', {
                        deferred: original,
                        args: [error],
                        reason: error
                    });
                    resolver.reject(error);
                }
            } else {
                deferred[actionType].apply(deferred, original._args);
            }
        };
    }
    var exports = {};
    exports.constructor = function () {
        this.state = 'pending';
        this._args = null;
        this._doneCallbacks = [];
        this._failCallbacks = [];
        this.promise = {
            done: util.bind(this.done, this),
            fail: util.bind(this.fail, this),
            ensure: util.bind(this.ensure, this),
            then: util.bind(this.then, this),
            thenGetProperty: this.thenGetProperty,
            thenReturn: this.thenReturn,
            thenBind: this.thenBind,
            thenSwallowException: this.thenSwallowException
        };
        this.promise.promise = this.promise;
        this.resolver = {
            resolve: util.bind(this.resolve, this),
            reject: util.bind(this.reject, this)
        };
    };
    exports.syncModeEnabled = false;
    exports.resolve = function () {
        if (this.state !== 'pending') {
            return;
        }
        this.state = 'resolved';
        this._args = [].slice.call(arguments);
        Deferred.fire('resolve', {
            deferred: this,
            args: this._args,
            reason: this._args[0]
        });
        tryFlush(this);
    };
    exports.reject = function () {
        if (this.state !== 'pending') {
            return;
        }
        this.state = 'rejected';
        this._args = [].slice.call(arguments);
        Deferred.fire('reject', {
            deferred: this,
            args: this._args,
            reason: this._args[0]
        });
        tryFlush(this);
    };
    exports.done = function (callback) {
        return this.then(callback);
    };
    exports.fail = function (callback) {
        return this.then(null, callback);
    };
    exports.ensure = function (callback) {
        return this.then(callback, callback);
    };
    exports.then = function (done, fail) {
        var deferred = new Deferred();
        deferred.syncModeEnabled = this.syncModeEnabled;
        this._doneCallbacks.push(pipe(this, deferred, done, 'resolve'));
        this._failCallbacks.push(pipe(this, deferred, fail, 'reject'));
        tryFlush(this);
        return deferred.promise;
    };
    exports.thenGetProperty = function (propertyName) {
        var handler = function (result) {
            return result[propertyName];
        };
        return this.then(handler);
    };
    exports.thenReturn = function (value) {
        var handler = function () {
            return value;
        };
        return this.then(handler);
    };
    exports.thenBind = function () {
        return this.then(util.bind.apply(util, arguments));
    };
    exports.thenSwallowException = function () {
        return this.fail(util.noop);
    };
    var Deferred = require('eoo').create(exports);
    require('mini-event/EventTarget').enable(Deferred);
    Deferred.isPromise = function (value) {
        return value && typeof value.then === 'function';
    };
    Deferred.all = function () {
        var workingUnits = [].concat.apply([], arguments);
        var workingCount = workingUnits.length;
        if (!workingCount) {
            return Deferred.resolved();
        }
        var actionType = 'resolve';
        var result = [];
        var jointDeferred = new Deferred();
        function resolveOne(whichToFill) {
            workingCount--;
            assert.greaterThanOrEquals(workingCount, 0, 'workingCount should be positive');
            var unitResult = [].slice.call(arguments, 1);
            if (unitResult.length <= 1) {
                unitResult = unitResult[0];
            }
            result[whichToFill] = unitResult;
            if (workingCount === 0) {
                jointDeferred[actionType].apply(jointDeferred, result);
            }
        }
        function rejectOne() {
            actionType = 'reject';
            resolveOne.apply(this, arguments);
        }
        for (var i = 0; i < workingUnits.length; i++) {
            var unit = workingUnits[i];
            unit.then(util.bind(resolveOne, unit, i), util.bind(rejectOne, unit, i));
        }
        return jointDeferred.promise;
    };
    Deferred.resolved = function () {
        var deferred = new Deferred();
        deferred.resolve.apply(deferred, arguments);
        return deferred.promise;
    };
    Deferred.rejected = function () {
        var deferred = new Deferred();
        deferred.reject.apply(deferred, arguments);
        return deferred.promise;
    };
    Deferred.when = function (value) {
        if (Deferred.isPromise(value)) {
            return value;
        }
        var deferred = new Deferred();
        deferred.syncModeEnabled = true;
        deferred.resolve(value);
        return deferred.promise;
    };
    Deferred.require = function (modules) {
        var deferred = new Deferred();
        window.require(modules, deferred.resolver.resolve);
        deferred.promise.abort = deferred.resolver.reject;
        return deferred.promise;
    };
    return Deferred;
});

define('ef/ViewPanel', [
    'require',
    'underscore',
    'esui/Control',
    'er/Deferred',
    'esui/painters',
    'mini-event',
    'eoo',
    'esui'
], function (require) {
    var u = require('underscore');
    var Control = require('esui/Control');
    var exports = {};
    exports.type = 'ViewPanel';
    exports.loadView = function (viewType) {
        var loadingView = require('er/Deferred').require([viewType]);
        return loadingView;
    };
    exports.repaint = require('esui/painters').createRepaint(Control.prototype.repaint, {
        name: 'viewType',
        paint: function (viewPanel, viewType) {
            viewPanel.disposeView();
            var loadingView = viewPanel.loadView(viewType);
            loadingView.then(u.bind(viewPanel.fire, viewPanel, 'viewloaded'));
            viewPanel.view = loadingView.then(u.bind(viewPanel.renderView, viewPanel));
        }
    });
    exports.disposeView = function () {
        var view = this.get('view');
        if (view && typeof view.dispose === 'function') {
            view.dispose();
        }
        this.view = null;
    };
    function delegateViewEvents(e) {
        var event = require('mini-event').fromEvent(e, {
            preserveData: true,
            syncState: true
        });
        event.type = 'view@' + e.type;
        this.fire(event);
    }
    function getViewName() {
        return this.viewContext.id + '-' + this.id;
    }
    exports.renderView = function (View) {
        if (this.helper.isInStage('RENDERED')) {
            this.loadedView = View;
            var view = this.view = typeof View === 'function' ? new View() : View;
            view.name = getViewName.call(this);
            view.model = this.get('model');
            view.container = this.main.id;
            view.render();
            this.fire('viewrendered');
            view.on('*', delegateViewEvents, this);
        }
        return this.view;
    };
    exports.refresh = function () {
        var view = this.get('loadedView');
        if (!view) {
            throw new Error('No view module or instance loaded yet');
        }
        this.disposeView();
        this.renderView(view);
    };
    var ViewPanel = require('eoo').create(Control, exports);
    require('esui').register(ViewPanel);
    return ViewPanel;
});

define('underscore/underscore', [
    'require',
    'exports',
    'module'
], function (require, exports, module) {
    (function () {
        var root = this;
        var previousUnderscore = root._;
        var breaker = {};
        var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
        var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
        var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
        var _ = function (obj) {
            if (obj instanceof _)
                return obj;
            if (!(this instanceof _))
                return new _(obj);
            this._wrapped = obj;
        };
        if (typeof exports !== 'undefined') {
            if (typeof module !== 'undefined' && module.exports) {
                exports = module.exports = _;
            }
            exports._ = _;
        } else {
            root._ = _;
        }
        _.VERSION = '1.6.0';
        var createCallback = function (func, context, argCount) {
            if (context === void 0)
                return func;
            switch (argCount == null ? 3 : argCount) {
            case 1:
                return function (value) {
                    return func.call(context, value);
                };
            case 2:
                return function (value, other) {
                    return func.call(context, value, other);
                };
            case 3:
                return function (value, index, collection) {
                    return func.call(context, value, index, collection);
                };
            case 4:
                return function (accumulator, value, index, collection) {
                    return func.call(context, accumulator, value, index, collection);
                };
            }
            return function () {
                return func.apply(context, arguments);
            };
        };
        var lookupIterator = function (value, context, argCount) {
            if (value == null)
                return _.identity;
            if (_.isFunction(value))
                return createCallback(value, context, argCount);
            if (_.isObject(value))
                return _.matches(value);
            return _.property(value);
        };
        _.each = _.forEach = function (obj, iterator, context) {
            var i, length;
            if (obj == null)
                return obj;
            iterator = createCallback(iterator, context);
            if (obj.length === +obj.length) {
                for (i = 0, length = obj.length; i < length; i++) {
                    if (iterator(obj[i], i, obj) === breaker)
                        break;
                }
            } else {
                var keys = _.keys(obj);
                for (i = 0, length = keys.length; i < length; i++) {
                    if (iterator(obj[keys[i]], keys[i], obj) === breaker)
                        break;
                }
            }
            return obj;
        };
        _.map = _.collect = function (obj, iterator, context) {
            var results = [];
            if (obj == null)
                return results;
            iterator = lookupIterator(iterator, context);
            _.each(obj, function (value, index, list) {
                results.push(iterator(value, index, list));
            });
            return results;
        };
        var reduceError = 'Reduce of empty array with no initial value';
        _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
            var initial = arguments.length > 2;
            if (obj == null)
                obj = [];
            iterator = createCallback(iterator, context, 4);
            _.each(obj, function (value, index, list) {
                if (!initial) {
                    memo = value;
                    initial = true;
                } else {
                    memo = iterator(memo, value, index, list);
                }
            });
            if (!initial)
                throw TypeError(reduceError);
            return memo;
        };
        _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
            var initial = arguments.length > 2;
            if (obj == null)
                obj = [];
            var length = obj.length;
            iterator = createCallback(iterator, context, 4);
            if (length !== +length) {
                var keys = _.keys(obj);
                length = keys.length;
            }
            _.each(obj, function (value, index, list) {
                index = keys ? keys[--length] : --length;
                if (!initial) {
                    memo = obj[index];
                    initial = true;
                } else {
                    memo = iterator(memo, obj[index], index, list);
                }
            });
            if (!initial)
                throw TypeError(reduceError);
            return memo;
        };
        _.find = _.detect = function (obj, predicate, context) {
            var result;
            predicate = lookupIterator(predicate, context);
            _.some(obj, function (value, index, list) {
                if (predicate(value, index, list)) {
                    result = value;
                    return true;
                }
            });
            return result;
        };
        _.filter = _.select = function (obj, predicate, context) {
            var results = [];
            if (obj == null)
                return results;
            predicate = lookupIterator(predicate, context);
            _.each(obj, function (value, index, list) {
                if (predicate(value, index, list))
                    results.push(value);
            });
            return results;
        };
        _.reject = function (obj, predicate, context) {
            return _.filter(obj, _.negate(lookupIterator(predicate)), context);
        };
        _.every = _.all = function (obj, predicate, context) {
            var result = true;
            if (obj == null)
                return result;
            predicate = lookupIterator(predicate, context);
            _.each(obj, function (value, index, list) {
                result = predicate(value, index, list);
                if (!result)
                    return breaker;
            });
            return !!result;
        };
        _.some = _.any = function (obj, predicate, context) {
            var result = false;
            if (obj == null)
                return result;
            predicate = lookupIterator(predicate, context);
            _.each(obj, function (value, index, list) {
                result = predicate(value, index, list);
                if (result)
                    return breaker;
            });
            return !!result;
        };
        _.contains = _.include = function (obj, target) {
            if (obj == null)
                return false;
            if (obj.length === +obj.length)
                return _.indexOf(obj, target) >= 0;
            return _.some(obj, function (value) {
                return value === target;
            });
        };
        _.invoke = function (obj, method) {
            var args = slice.call(arguments, 2);
            var isFunc = _.isFunction(method);
            return _.map(obj, function (value) {
                return (isFunc ? method : value[method]).apply(value, args);
            });
        };
        _.pluck = function (obj, key) {
            return _.map(obj, _.property(key));
        };
        _.where = function (obj, attrs) {
            return _.filter(obj, _.matches(attrs));
        };
        _.findWhere = function (obj, attrs) {
            return _.find(obj, _.matches(attrs));
        };
        _.max = function (obj, iterator, context) {
            var result = -Infinity, lastComputed = -Infinity, value, computed;
            if (!iterator && _.isArray(obj)) {
                for (var i = 0, length = obj.length; i < length; i++) {
                    value = obj[i];
                    if (value > result) {
                        result = value;
                    }
                }
            } else {
                iterator = lookupIterator(iterator, context);
                _.each(obj, function (value, index, list) {
                    computed = iterator(value, index, list);
                    if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                        result = value;
                        lastComputed = computed;
                    }
                });
            }
            return result;
        };
        _.min = function (obj, iterator, context) {
            var result = Infinity, lastComputed = Infinity, value, computed;
            if (!iterator && _.isArray(obj)) {
                for (var i = 0, length = obj.length; i < length; i++) {
                    value = obj[i];
                    if (value < result) {
                        result = value;
                    }
                }
            } else {
                iterator = lookupIterator(iterator, context);
                _.each(obj, function (value, index, list) {
                    computed = iterator(value, index, list);
                    if (computed < lastComputed || computed === Infinity && result === Infinity) {
                        result = value;
                        lastComputed = computed;
                    }
                });
            }
            return result;
        };
        _.shuffle = function (obj) {
            var rand;
            var index = 0;
            var shuffled = [];
            _.each(obj, function (value) {
                rand = _.random(index++);
                shuffled[index - 1] = shuffled[rand];
                shuffled[rand] = value;
            });
            return shuffled;
        };
        _.sample = function (obj, n, guard) {
            if (n == null || guard) {
                if (obj.length !== +obj.length)
                    obj = _.values(obj);
                return obj[_.random(obj.length - 1)];
            }
            return _.shuffle(obj).slice(0, Math.max(0, n));
        };
        _.sortBy = function (obj, iterator, context) {
            iterator = lookupIterator(iterator, context);
            return _.pluck(_.map(obj, function (value, index, list) {
                return {
                    value: value,
                    index: index,
                    criteria: iterator(value, index, list)
                };
            }).sort(function (left, right) {
                var a = left.criteria;
                var b = right.criteria;
                if (a !== b) {
                    if (a > b || a === void 0)
                        return 1;
                    if (a < b || b === void 0)
                        return -1;
                }
                return left.index - right.index;
            }), 'value');
        };
        var group = function (behavior) {
            return function (obj, iterator, context) {
                var result = {};
                iterator = lookupIterator(iterator, context);
                _.each(obj, function (value, index) {
                    var key = iterator(value, index, obj);
                    behavior(result, value, key);
                });
                return result;
            };
        };
        _.groupBy = group(function (result, value, key) {
            if (_.has(result, key))
                result[key].push(value);
            else
                result[key] = [value];
        });
        _.indexBy = group(function (result, value, key) {
            result[key] = value;
        });
        _.countBy = group(function (result, value, key) {
            if (_.has(result, key))
                result[key]++;
            else
                result[key] = 1;
        });
        _.sortedIndex = function (array, obj, iterator, context) {
            iterator = lookupIterator(iterator, context, 1);
            var value = iterator(obj);
            var low = 0, high = array.length;
            while (low < high) {
                var mid = low + high >>> 1;
                if (iterator(array[mid]) < value)
                    low = mid + 1;
                else
                    high = mid;
            }
            return low;
        };
        _.toArray = function (obj) {
            if (!obj)
                return [];
            if (_.isArray(obj))
                return slice.call(obj);
            if (obj.length === +obj.length)
                return _.map(obj, _.identity);
            return _.values(obj);
        };
        _.size = function (obj) {
            if (obj == null)
                return 0;
            return obj.length === +obj.length ? obj.length : _.keys(obj).length;
        };
        _.partition = function (obj, predicate, context) {
            predicate = lookupIterator(predicate, context);
            var pass = [], fail = [];
            _.each(obj, function (value, key, obj) {
                (predicate(value, key, obj) ? pass : fail).push(value);
            });
            return [
                pass,
                fail
            ];
        };
        _.first = _.head = _.take = function (array, n, guard) {
            if (array == null)
                return void 0;
            if (n == null || guard)
                return array[0];
            if (n < 0)
                return [];
            return slice.call(array, 0, n);
        };
        _.initial = function (array, n, guard) {
            return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
        };
        _.last = function (array, n, guard) {
            if (array == null)
                return void 0;
            if (n == null || guard)
                return array[array.length - 1];
            return slice.call(array, Math.max(array.length - n, 0));
        };
        _.rest = _.tail = _.drop = function (array, n, guard) {
            return slice.call(array, n == null || guard ? 1 : n);
        };
        _.compact = function (array) {
            return _.filter(array, _.identity);
        };
        var flatten = function (input, shallow, strict, output) {
            if (shallow && _.every(input, _.isArray)) {
                return concat.apply(output, input);
            }
            for (var i = 0, length = input.length; i < length; i++) {
                var value = input[i];
                if (!_.isArray(value) && !_.isArguments(value)) {
                    if (!strict)
                        output.push(value);
                } else if (shallow) {
                    push.apply(output, value);
                } else {
                    flatten(value, shallow, strict, output);
                }
            }
            return output;
        };
        _.flatten = function (array, shallow) {
            return flatten(array, shallow, false, []);
        };
        _.without = function (array) {
            return _.difference(array, slice.call(arguments, 1));
        };
        _.uniq = _.unique = function (array, isSorted, iterator, context) {
            if (array == null)
                return [];
            if (_.isFunction(isSorted)) {
                context = iterator;
                iterator = isSorted;
                isSorted = false;
            }
            if (iterator)
                iterator = lookupIterator(iterator, context);
            var result = [];
            var seen = [];
            for (var i = 0, length = array.length; i < length; i++) {
                var value = array[i];
                if (iterator)
                    value = iterator(value, i, array);
                if (isSorted ? !i || seen !== value : !_.contains(seen, value)) {
                    if (isSorted)
                        seen = value;
                    else
                        seen.push(value);
                    result.push(array[i]);
                }
            }
            return result;
        };
        _.union = function () {
            return _.uniq(flatten(arguments, true, true, []));
        };
        _.intersection = function (array) {
            if (array == null)
                return [];
            var result = [];
            var argsLength = arguments.length;
            for (var i = 0, length = array.length; i < length; i++) {
                var item = array[i];
                if (_.contains(result, item))
                    continue;
                for (var j = 1; j < argsLength; j++) {
                    if (!_.contains(arguments[j], item))
                        break;
                }
                if (j === argsLength)
                    result.push(item);
            }
            return result;
        };
        _.difference = function (array) {
            var rest = flatten(slice.call(arguments, 1), true, true, []);
            return _.filter(array, function (value) {
                return !_.contains(rest, value);
            });
        };
        _.zip = function (array) {
            if (array == null)
                return [];
            var length = _.max(arguments, 'length').length;
            var results = Array(length);
            for (var i = 0; i < length; i++) {
                results[i] = _.pluck(arguments, i);
            }
            return results;
        };
        _.object = function (list, values) {
            if (list == null)
                return {};
            var result = {};
            for (var i = 0, length = list.length; i < length; i++) {
                if (values) {
                    result[list[i]] = values[i];
                } else {
                    result[list[i][0]] = list[i][1];
                }
            }
            return result;
        };
        _.indexOf = function (array, item, isSorted) {
            if (array == null)
                return -1;
            var i = 0, length = array.length;
            if (isSorted) {
                if (typeof isSorted == 'number') {
                    i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
                } else {
                    i = _.sortedIndex(array, item);
                    return array[i] === item ? i : -1;
                }
            }
            for (; i < length; i++)
                if (array[i] === item)
                    return i;
            return -1;
        };
        _.lastIndexOf = function (array, item, from) {
            if (array == null)
                return -1;
            var i = from == null ? array.length : from;
            while (i--)
                if (array[i] === item)
                    return i;
            return -1;
        };
        _.range = function (start, stop, step) {
            if (arguments.length <= 1) {
                stop = start || 0;
                start = 0;
            }
            step = arguments[2] || 1;
            var length = Math.max(Math.ceil((stop - start) / step), 0);
            var idx = 0;
            var range = Array(length);
            while (idx < length) {
                range[idx++] = start;
                start += step;
            }
            return range;
        };
        var Ctor = function () {
        };
        _.bind = function (func, context) {
            var args, bound;
            if (nativeBind && func.bind === nativeBind)
                return nativeBind.apply(func, slice.call(arguments, 1));
            if (!_.isFunction(func))
                throw TypeError('Bind must be called on a function');
            args = slice.call(arguments, 2);
            bound = function () {
                if (!(this instanceof bound))
                    return func.apply(context, args.concat(slice.call(arguments)));
                Ctor.prototype = func.prototype;
                var self = new Ctor();
                Ctor.prototype = null;
                var result = func.apply(self, args.concat(slice.call(arguments)));
                if (Object(result) === result)
                    return result;
                return self;
            };
            return bound;
        };
        _.partial = function (func) {
            var boundArgs = slice.call(arguments, 1);
            return function () {
                var position = 0;
                var args = boundArgs.slice();
                for (var i = 0, length = args.length; i < length; i++) {
                    if (args[i] === _)
                        args[i] = arguments[position++];
                }
                while (position < arguments.length)
                    args.push(arguments[position++]);
                return func.apply(this, args);
            };
        };
        _.bindAll = function (obj) {
            var i = 1, length = arguments.length, key;
            if (length <= 1)
                throw Error('bindAll must be passed function names');
            for (; i < length; i++) {
                key = arguments[i];
                obj[key] = createCallback(obj[key], obj, Infinity);
            }
            return obj;
        };
        _.memoize = function (func, hasher) {
            var memoize = function (key) {
                var cache = memoize.cache;
                var address = hasher ? hasher.apply(this, arguments) : key;
                if (!_.has(cache, address))
                    cache[address] = func.apply(this, arguments);
                return cache[key];
            };
            memoize.cache = {};
            return memoize;
        };
        _.delay = function (func, wait) {
            var args = slice.call(arguments, 2);
            return setTimeout(function () {
                return func.apply(null, args);
            }, wait);
        };
        _.defer = function (func) {
            return _.delay.apply(_, [
                func,
                1
            ].concat(slice.call(arguments, 1)));
        };
        _.throttle = function (func, wait, options) {
            var context, args, result;
            var timeout = null;
            var previous = 0;
            if (!options)
                options = {};
            var later = function () {
                previous = options.leading === false ? 0 : _.now();
                timeout = null;
                result = func.apply(context, args);
                if (!timeout)
                    context = args = null;
            };
            return function () {
                var now = _.now();
                if (!previous && options.leading === false)
                    previous = now;
                var remaining = wait - (now - previous);
                context = this;
                args = arguments;
                if (remaining <= 0 || remaining > wait) {
                    clearTimeout(timeout);
                    timeout = null;
                    previous = now;
                    result = func.apply(context, args);
                    if (!timeout)
                        context = args = null;
                } else if (!timeout && options.trailing !== false) {
                    timeout = setTimeout(later, remaining);
                }
                return result;
            };
        };
        _.debounce = function (func, wait, immediate) {
            var timeout, args, context, timestamp, result;
            var later = function () {
                var last = _.now() - timestamp;
                if (last < wait && last > 0) {
                    timeout = setTimeout(later, wait - last);
                } else {
                    timeout = null;
                    if (!immediate) {
                        result = func.apply(context, args);
                        if (!timeout)
                            context = args = null;
                    }
                }
            };
            return function () {
                context = this;
                args = arguments;
                timestamp = _.now();
                var callNow = immediate && !timeout;
                if (!timeout)
                    timeout = setTimeout(later, wait);
                if (callNow) {
                    result = func.apply(context, args);
                    context = args = null;
                }
                return result;
            };
        };
        _.once = function (func) {
            var ran = false, memo;
            return function () {
                if (ran)
                    return memo;
                ran = true;
                memo = func.apply(this, arguments);
                func = null;
                return memo;
            };
        };
        _.wrap = function (func, wrapper) {
            return _.partial(wrapper, func);
        };
        _.negate = function (predicate) {
            return function () {
                return !predicate.apply(this, arguments);
            };
        };
        _.compose = function () {
            var funcs = arguments;
            return function () {
                var args = arguments;
                for (var i = funcs.length - 1; i >= 0; i--) {
                    args = [funcs[i].apply(this, args)];
                }
                return args[0];
            };
        };
        _.after = function (times, func) {
            return function () {
                if (--times < 1) {
                    return func.apply(this, arguments);
                }
            };
        };
        _.keys = function (obj) {
            if (!_.isObject(obj))
                return [];
            if (nativeKeys)
                return nativeKeys(obj);
            var keys = [];
            for (var key in obj)
                if (_.has(obj, key))
                    keys.push(key);
            return keys;
        };
        _.values = function (obj) {
            var keys = _.keys(obj);
            var length = keys.length;
            var values = Array(length);
            for (var i = 0; i < length; i++) {
                values[i] = obj[keys[i]];
            }
            return values;
        };
        _.pairs = function (obj) {
            var keys = _.keys(obj);
            var length = keys.length;
            var pairs = Array(length);
            for (var i = 0; i < length; i++) {
                pairs[i] = [
                    keys[i],
                    obj[keys[i]]
                ];
            }
            return pairs;
        };
        _.invert = function (obj) {
            var result = {};
            var keys = _.keys(obj);
            for (var i = 0, length = keys.length; i < length; i++) {
                result[obj[keys[i]]] = keys[i];
            }
            return result;
        };
        _.functions = _.methods = function (obj) {
            var names = [];
            for (var key in obj) {
                if (_.isFunction(obj[key]))
                    names.push(key);
            }
            return names.sort();
        };
        _.extend = function (obj) {
            if (!_.isObject(obj))
                return obj;
            var source, prop;
            for (var i = 1, length = arguments.length; i < length; i++) {
                source = arguments[i];
                for (prop in source) {
                    obj[prop] = source[prop];
                }
            }
            return obj;
        };
        _.pick = function (obj, iterator, context) {
            var result = {}, key;
            if (_.isFunction(iterator)) {
                for (key in obj) {
                    var value = obj[key];
                    if (iterator.call(context, value, key, obj))
                        result[key] = value;
                }
            } else {
                var keys = concat.apply([], slice.call(arguments, 1));
                for (var i = 0, length = keys.length; i < length; i++) {
                    key = keys[i];
                    if (key in obj)
                        result[key] = obj[key];
                }
            }
            return result;
        };
        _.omit = function (obj, iterator, context) {
            if (_.isFunction(iterator)) {
                iterator = _.negate(iterator);
            } else {
                var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
                iterator = function (value, key) {
                    return !_.contains(keys, key);
                };
            }
            return _.pick(obj, iterator, context);
        };
        _.defaults = function (obj) {
            if (!_.isObject(obj))
                return obj;
            for (var i = 1, length = arguments.length; i < length; i++) {
                var source = arguments[i];
                for (var prop in source) {
                    if (obj[prop] === void 0)
                        obj[prop] = source[prop];
                }
            }
            return obj;
        };
        _.clone = function (obj) {
            if (!_.isObject(obj))
                return obj;
            return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
        };
        _.tap = function (obj, interceptor) {
            interceptor(obj);
            return obj;
        };
        var eq = function (a, b, aStack, bStack) {
            if (a === b)
                return a !== 0 || 1 / a === 1 / b;
            if (a == null || b == null)
                return a === b;
            if (a instanceof _)
                a = a._wrapped;
            if (b instanceof _)
                b = b._wrapped;
            var className = toString.call(a);
            if (className !== toString.call(b))
                return false;
            switch (className) {
            case '[object RegExp]':
            case '[object String]':
                return '' + a === '' + b;
            case '[object Number]':
                if (a != +a)
                    return b != +b;
                return a == 0 ? 1 / a == 1 / b : a == +b;
            case '[object Date]':
            case '[object Boolean]':
                return +a === +b;
            }
            if (typeof a != 'object' || typeof b != 'object')
                return false;
            var length = aStack.length;
            while (length--) {
                if (aStack[length] === a)
                    return bStack[length] === b;
            }
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && 'constructor' in a && 'constructor' in b && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor)) {
                return false;
            }
            aStack.push(a);
            bStack.push(b);
            var size, result;
            if (className === '[object Array]') {
                size = a.length;
                result = size === b.length;
                if (result) {
                    while (size--) {
                        if (!(result = eq(a[size], b[size], aStack, bStack)))
                            break;
                    }
                }
            } else {
                var keys = _.keys(a), key;
                size = keys.length;
                result = _.keys(b).length == size;
                if (result) {
                    while (size--) {
                        key = keys[size];
                        if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))
                            break;
                    }
                }
            }
            aStack.pop();
            bStack.pop();
            return result;
        };
        _.isEqual = function (a, b) {
            return eq(a, b, [], []);
        };
        _.isEmpty = function (obj) {
            if (obj == null)
                return true;
            if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))
                return obj.length === 0;
            for (var key in obj)
                if (_.has(obj, key))
                    return false;
            return true;
        };
        _.isElement = function (obj) {
            return !!(obj && obj.nodeType === 1);
        };
        _.isArray = nativeIsArray || function (obj) {
            return toString.call(obj) === '[object Array]';
        };
        _.isObject = function (obj) {
            return obj === Object(obj);
        };
        _.each([
            'Arguments',
            'Function',
            'String',
            'Number',
            'Date',
            'RegExp'
        ], function (name) {
            _['is' + name] = function (obj) {
                return toString.call(obj) === '[object ' + name + ']';
            };
        });
        if (!_.isArguments(arguments)) {
            _.isArguments = function (obj) {
                return _.has(obj, 'callee');
            };
        }
        if (typeof /./ !== 'function') {
            _.isFunction = function (obj) {
                return typeof obj === 'function';
            };
        }
        _.isFinite = function (obj) {
            return isFinite(obj) && !isNaN(parseFloat(obj));
        };
        _.isNaN = function (obj) {
            return _.isNumber(obj) && obj !== +obj;
        };
        _.isBoolean = function (obj) {
            return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
        };
        _.isNull = function (obj) {
            return obj === null;
        };
        _.isUndefined = function (obj) {
            return obj === void 0;
        };
        _.has = function (obj, key) {
            return obj != null && hasOwnProperty.call(obj, key);
        };
        _.noConflict = function () {
            root._ = previousUnderscore;
            return this;
        };
        _.identity = function (value) {
            return value;
        };
        _.constant = function (value) {
            return function () {
                return value;
            };
        };
        _.noop = function () {
        };
        _.property = function (key) {
            return function (obj) {
                return obj[key];
            };
        };
        _.matches = function (attrs) {
            return function (obj) {
                if (obj == null)
                    return _.isEmpty(attrs);
                if (obj === attrs)
                    return true;
                for (var key in attrs)
                    if (attrs[key] !== obj[key])
                        return false;
                return true;
            };
        };
        _.times = function (n, iterator, context) {
            var accum = Array(Math.max(0, n));
            iterator = createCallback(iterator, context, 1);
            for (var i = 0; i < n; i++)
                accum[i] = iterator(i);
            return accum;
        };
        _.random = function (min, max) {
            if (max == null) {
                max = min;
                min = 0;
            }
            return min + Math.floor(Math.random() * (max - min + 1));
        };
        _.now = Date.now || function () {
            return new Date().getTime();
        };
        var entityMap = {
            escape: {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                '\'': '&#x27;'
            }
        };
        entityMap.unescape = _.invert(entityMap.escape);
        var entityRegexes = {
            escape: RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
            unescape: RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
        };
        _.each([
            'escape',
            'unescape'
        ], function (method) {
            _[method] = function (string) {
                if (string == null)
                    return '';
                return ('' + string).replace(entityRegexes[method], function (match) {
                    return entityMap[method][match];
                });
            };
        });
        _.result = function (object, property) {
            if (object == null)
                return void 0;
            var value = object[property];
            return _.isFunction(value) ? object[property]() : value;
        };
        var idCounter = 0;
        _.uniqueId = function (prefix) {
            var id = ++idCounter + '';
            return prefix ? prefix + id : id;
        };
        _.templateSettings = {
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: /<%=([\s\S]+?)%>/g,
            escape: /<%-([\s\S]+?)%>/g
        };
        var noMatch = /(.)^/;
        var escapes = {
            '\'': '\'',
            '\\': '\\',
            '\r': 'r',
            '\n': 'n',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
        };
        var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
        var escapeChar = function (match) {
            return '\\' + escapes[match];
        };
        _.template = function (text, data, settings) {
            settings = _.defaults({}, settings, _.templateSettings);
            var matcher = RegExp([
                (settings.escape || noMatch).source,
                (settings.interpolate || noMatch).source,
                (settings.evaluate || noMatch).source
            ].join('|') + '|$', 'g');
            var index = 0;
            var source = '__p+=\'';
            text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
                source += text.slice(index, offset).replace(escaper, escapeChar);
                index = offset + match.length;
                if (escape) {
                    source += '\'+\n((__t=(' + escape + '))==null?\'\':_.escape(__t))+\n\'';
                } else if (interpolate) {
                    source += '\'+\n((__t=(' + interpolate + '))==null?\'\':__t)+\n\'';
                } else if (evaluate) {
                    source += '\';\n' + evaluate + '\n__p+=\'';
                }
                return match;
            });
            source += '\';\n';
            if (!settings.variable)
                source = 'with(obj||{}){\n' + source + '}\n';
            source = 'var __t,__p=\'\',__j=Array.prototype.join,' + 'print=function(){__p+=__j.call(arguments,\'\');};\n' + source + 'return __p;\n';
            try {
                var render = Function(settings.variable || 'obj', '_', source);
            } catch (e) {
                e.source = source;
                throw e;
            }
            if (data)
                return render(data, _);
            var template = function (data) {
                return render.call(this, data, _);
            };
            var argument = settings.variable || 'obj';
            template.source = 'function(' + argument + '){\n' + source + '}';
            return template;
        };
        _.chain = function (obj) {
            var instance = _(obj);
            instance._chain = true;
            return instance;
        };
        var result = function (obj) {
            return this._chain ? _(obj).chain() : obj;
        };
        _.mixin = function (obj) {
            _.each(_.functions(obj), function (name) {
                var func = _[name] = obj[name];
                _.prototype[name] = function () {
                    var args = [this._wrapped];
                    push.apply(args, arguments);
                    return result.call(this, func.apply(_, args));
                };
            });
        };
        _.mixin(_);
        _.each([
            'pop',
            'push',
            'reverse',
            'shift',
            'sort',
            'splice',
            'unshift'
        ], function (name) {
            var method = ArrayProto[name];
            _.prototype[name] = function () {
                var obj = this._wrapped;
                method.apply(obj, arguments);
                if ((name === 'shift' || name === 'splice') && obj.length === 0)
                    delete obj[0];
                return result.call(this, obj);
            };
        });
        _.each([
            'concat',
            'join',
            'slice'
        ], function (name) {
            var method = ArrayProto[name];
            _.prototype[name] = function () {
                return result.call(this, method.apply(this._wrapped, arguments));
            };
        });
        _.prototype.value = function () {
            return this._wrapped;
        };
    }.call(this));
});

define('underscore', ['underscore/underscore'], function (main) { return main; });

define('ef/UIView', [
    'require',
    'underscore',
    'er/View',
    'ef/ActionDialog',
    'esui',
    'esui/Dialog',
    'esui/main',
    'esui/ViewContext',
    'eoo'
], function (require) {
    var u = require('underscore');
    var View = require('er/View');
    require('ef/ActionDialog');
    var exports = {};
    function getProperty(target, path) {
        var value = target;
        for (var i = 0; i < path.length; i++) {
            value = value[path[i]];
        }
        return value;
    }
    exports.replaceValue = function (value) {
        if (typeof value !== 'string') {
            return value;
        }
        if (value === '@@' || value === '**') {
            return this.model;
        }
        var prefix = value.charAt(0);
        var actualValue = value.substring(1);
        if (prefix === '@' || prefix === '*') {
            var path = actualValue.split('.');
            var firstLevelPropertyValue = this.model.get(path[0]);
            return path.length > 1 ? getProperty(firstLevelPropertyValue, path.slice(1)) : firstLevelPropertyValue;
        }
        return value;
    };
    exports.get = function (id) {
        return this.viewContext.get(id);
    };
    exports.getSafely = function (id) {
        return this.viewContext.getSafely(id);
    };
    exports.getGroup = function (name) {
        return this.viewContext.getGroup(name);
    };
    exports.create = function (type, options) {
        options = options || {};
        if (!options.viewContext) {
            options.viewContext = this.viewContext;
        }
        return require('esui').create(type, options);
    };
    exports.alert = function (content, title) {
        var options = typeof content === 'string' ? {
            title: title || document.title,
            content: content
        } : u.clone(content);
        if (!options.viewContext) {
            options.viewContext = this.viewContext;
        }
        var Dialog = require('esui/Dialog');
        return Dialog.alert(options);
    };
    exports.confirm = function (content, title) {
        var options = typeof content === 'string' ? {
            title: title || document.title,
            content: content
        } : u.clone(content);
        if (!options.viewContext) {
            options.viewContext = this.viewContext;
        }
        var Dialog = require('esui/Dialog');
        return Dialog.confirm(options);
    };
    exports.popActionDialog = function (options) {
        var main = document.createElement('div');
        document.body.appendChild(main);
        var defaults = {
            width: 600,
            needFoot: false,
            draggable: true,
            closeOnHide: true,
            autoClose: true,
            main: main,
            viewContext: this.viewContext
        };
        options = u.defaults({}, options, defaults);
        var ui = require('esui/main');
        var dialog = ui.create('ActionDialog', options);
        dialog.render();
        dialog.show();
        return dialog;
    };
    exports.uiEvents = null;
    exports.getUIEvents = function () {
        return this.uiEvents || {};
    };
    exports.uiProperties = null;
    exports.getUIProperties = function () {
        return this.uiProperties;
    };
    function bindEventToControl(view, id, eventName, handler) {
        if (typeof handler === 'string') {
            handler = view[handler];
        }
        if (typeof handler !== 'function') {
            return handler;
        }
        var control = view.get(id);
        if (control) {
            control.on(eventName, handler, view);
        }
        return handler;
    }
    exports.bindEvents = function () {
        var events = this.getUIEvents();
        if (!events) {
            return;
        }
        u.each(events, function (handler, key) {
            this.bindUIEvent(key, handler);
        }, this);
    };
    exports.bindUIEvent = function (compositeKey, handler) {
        var segments = compositeKey.split(':');
        if (segments.length > 1) {
            var id = segments[0];
            var type = segments[1];
            bindEventToControl(this, id, type, handler);
        } else {
            var map = handler;
            if (typeof map !== 'object') {
                return;
            }
            u.each(map, function (handler, type) {
                bindEventToControl(this, compositeKey, type, handler);
            }, this);
        }
    };
    var counter = 8785925;
    function getGUID() {
        return 'ef-' + counter++;
    }
    exports.getViewName = function () {
        if (this.name) {
            return this.name;
        }
        var name = this.constructor && this.constructor.name;
        if (!name && this.constructor) {
            var functionString = this.constructor.toString();
            var match = /function\s+([^\(]*)/.exec(functionString);
            name = match && match[1].replace(/\s+$/g, '');
        }
        if (!name) {
            name = getGUID();
        }
        name = name.replace(/View$/, '');
        name = name.replace(/[A-Z]{2,}/g, function (match) {
            return match.charAt(0) + match.slice(1, -1).toLowerCase() + match.charAt(match.length - 1);
        });
        name = name.replace(/[A-Z]/g, function (match) {
            return '-' + match.toLowerCase();
        });
        if (name.charAt(0) === '-') {
            name = name.substring(1);
        }
        return name;
    };
    exports.createViewContext = function () {
        var ViewContext = require('esui/ViewContext');
        var name = this.getViewName();
        return new ViewContext(name || null);
    };
    exports.enterDocument = function () {
        this.viewContext = this.createViewContext();
        var container = this.getContainerElement();
        var options = {
            viewContext: this.viewContext,
            properties: this.getUIProperties(),
            valueReplacer: u.bind(this.replaceValue, this)
        };
        try {
            require('esui').init(container, options);
        } catch (ex) {
            var error = new Error('ESUI initialization error on view ' + 'because: ' + ex.message);
            error.actualError = ex;
            throw error;
        }
        this.bindEvents();
    };
    exports.dispose = function () {
        if (this.viewContext) {
            this.viewContext.dispose();
            this.viewContext = null;
        }
        this.$super(arguments);
    };
    var UIView = require('eoo').create(View, exports);
    return UIView;
});

define('er/util', [], function () {
    var now = +new Date();
    var util = {};
    util.guid = function () {
        return 'er' + now++;
    };
    util.mix = function (source) {
        for (var i = 1; i < arguments.length; i++) {
            var destination = arguments[i];
            if (!destination) {
                continue;
            }
            for (var key in destination) {
                if (destination.hasOwnProperty(key)) {
                    source[key] = destination[key];
                }
            }
        }
        return source;
    };
    var nativeBind = Function.prototype.bind;
    util.bind = nativeBind ? function (fn) {
        return nativeBind.apply(fn, [].slice.call(arguments, 1));
    } : function (fn, context) {
        var extraArgs = [].slice.call(arguments, 2);
        return function () {
            var args = extraArgs.concat([].slice.call(arguments));
            return fn.apply(context, args);
        };
    };
    util.noop = function () {
    };
    var dontEnumBug = !{ toString: 1 }.propertyIsEnumerable('toString');
    util.inherits = function (type, superType) {
        var Empty = function () {
        };
        Empty.prototype = superType.prototype;
        var proto = new Empty();
        var originalPrototype = type.prototype;
        type.prototype = proto;
        for (var key in originalPrototype) {
            proto[key] = originalPrototype[key];
        }
        if (dontEnumBug) {
            if (originalPrototype.hasOwnProperty('toString')) {
                proto.toString = originalPrototype.toString;
            }
            if (originalPrototype.hasOwnProperty('valueOf')) {
                proto.valueOf = originalPrototype.valueOf;
            }
        }
        type.prototype.constructor = type;
        return type;
    };
    util.parseJSON = function (text) {
        if (!text) {
            return undefined;
        }
        if (window.JSON && typeof JSON.parse === 'function') {
            return JSON.parse(text);
        } else {
            return new Function('return (' + text + ');')();
        }
    };
    var whitespace = /(^[\s\t\xa0\u3000]+)|([\u3000\xa0\s\t]+$)/g;
    util.trim = function (source) {
        return source.replace(whitespace, '');
    };
    util.encodeHTML = function (source) {
        source = source + '';
        return source.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
    };
    util.getElement = function (element) {
        if (typeof element === 'string') {
            element = document.getElementById(element);
        }
        return element;
    };
    return util;
});

define('er/Model', [
    'require',
    './util',
    './Deferred',
    'eoo',
    'mini-event/EventTarget'
], function (require) {
    var util = require('./util');
    var Deferred = require('./Deferred');
    var SILENT = { silent: true };
    function loadData(model, options) {
        function addDataToModel(value) {
            if (options.dump) {
                model.fill(value, SILENT);
            } else {
                model.set(options.name, value, SILENT);
            }
            return {
                success: true,
                name: options.name,
                options: options,
                value: value
            };
        }
        function buildError(error) {
            return {
                success: false,
                name: options.name,
                options: options,
                error: error
            };
        }
        try {
            var value = options.retrieve(model, options);
            if (Deferred.isPromise(value)) {
                if (typeof value.abort === 'function') {
                    model.addPendingWorker(value);
                }
                return value.then(addDataToModel, function (error) {
                    error = buildError(error);
                    try {
                        var result = model.handleError(error);
                        return addDataToModel(result);
                    } catch (ex) {
                        if (ex.success === false) {
                            throw ex;
                        } else {
                            throw buildError(ex);
                        }
                    }
                });
            } else {
                var result = addDataToModel(value);
                return Deferred.resolved(result);
            }
        } catch (ex) {
            var error = buildError(ex);
            return Deferred.rejected(error);
        }
    }
    function loadSequence(model, datasource) {
        var loading = Deferred.resolved();
        for (var i = 0; i < datasource.length; i++) {
            var unit = datasource[i];
            var task = util.bind(load, null, model, unit);
            loading = loading.then(task);
        }
        return loading;
    }
    function loadParallel(model, datasource) {
        var workers = [];
        for (var name in datasource) {
            if (datasource.hasOwnProperty(name)) {
                var unit = datasource[name];
                if (typeof unit === 'function') {
                    unit = {
                        retrieve: unit,
                        name: name
                    };
                } else if (typeof unit.retrieve === 'function') {
                    unit = util.mix({ name: name }, unit);
                }
                workers.push(load(model, unit));
            }
        }
        return Deferred.all(workers);
    }
    function load(model, datasource) {
        if (!datasource) {
            return Deferred.resolved();
        }
        if (typeof datasource === 'function') {
            var options = {
                retrieve: datasource,
                dump: true
            };
            return loadData(model, options);
        }
        if (datasource instanceof Array) {
            return loadSequence(model, datasource);
        }
        if (typeof datasource.retrieve === 'function') {
            return loadData(model, datasource);
        }
        return loadParallel(model, datasource);
    }
    var exports = {};
    exports.constructor = function (context) {
        this.store = {};
        this.pendingWorkers = [];
        if (context) {
            this.fill(context, SILENT);
        }
        this.initialize();
    };
    exports.initialize = util.noop;
    function removePendingWorker(model, worker) {
        for (var i = 0; i < model.pendingWorkers.length; i++) {
            if (model.pendingWorkers[i] === worker) {
                model.pendingWorkers.splice(i, 1);
                return;
            }
        }
    }
    exports.addPendingWorker = function (worker) {
        this.pendingWorkers.push(worker);
        worker.ensure(util.bind(removePendingWorker, null, this, worker));
    };
    exports.datasource = null;
    exports.getDatasource = function () {
        return this.datasource;
    };
    function forwardToPrepare() {
        function processError(ex) {
            var error = {
                success: false,
                name: '$prepare',
                options: {},
                error: ex
            };
            throw error;
        }
        try {
            var preparing = this.prepare();
            if (Deferred.isPromise(preparing)) {
                return preparing.fail(processError);
            } else {
                return preparing;
            }
        } catch (ex) {
            processError(ex);
        }
    }
    exports.load = function () {
        try {
            var datasource = this.getDatasource();
            var loading = load(this, datasource);
            return loading.then(util.bind(forwardToPrepare, this));
        } catch (ex) {
            return Deferred.rejected(ex);
        }
    };
    exports.prepare = util.noop;
    exports.get = function (name) {
        return this.store[name];
    };
    function setProperty(model, name, value) {
        var type = model.store.hasOwnProperty(name) ? 'change' : 'add';
        var oldValue = model.store[name];
        model.store[name] = value;
        if (oldValue !== value) {
            return {
                type: type,
                name: name,
                oldValue: oldValue,
                newValue: value
            };
        }
        return null;
    }
    exports.set = function (name, value, options) {
        options = options || {};
        var record = setProperty(this, name, value);
        if (record && !options.silent) {
            var event = { changes: [record] };
            this.fire('change', event);
        }
        return value;
    };
    exports.fill = function (extension, options) {
        options = options || {};
        var changes = [];
        for (var name in extension) {
            if (extension.hasOwnProperty(name)) {
                var record = setProperty(this, name, extension[name]);
                if (record) {
                    changes.push(record);
                }
            }
        }
        if (changes.length && !options.silent) {
            var event = { changes: changes };
            this.fire('change', event);
        }
        return extension;
    };
    exports.remove = function (name, options) {
        if (!this.store.hasOwnProperty(name)) {
            return;
        }
        options = options || {};
        var value = this.store[name];
        delete this.store[name];
        if (!options.silent) {
            var event = {
                changes: [{
                        type: 'remove',
                        name: name,
                        oldValue: value,
                        newValue: undefined
                    }]
            };
            this.fire('change', event);
        }
        return value;
    };
    exports.getAsModel = function (name) {
        var value = this.get(name);
        if (!value || {}.toString.call(value) !== '[object Object]') {
            return new Model();
        } else {
            return new Model(value);
        }
    };
    exports.dump = function () {
        return util.mix({}, this.store);
    };
    exports.has = function (name) {
        return this.store.hasOwnProperty(name);
    };
    exports.hasValue = function (name) {
        return this.has(name) && this.store[name] != null;
    };
    exports.hasReadableValue = function (name) {
        return this.hasValue(name) && this.store[name] !== '';
    };
    exports.valueOf = function () {
        return this.dump();
    };
    exports.clone = function () {
        return new Model(this.store);
    };
    exports.handleError = function (error) {
        throw error;
    };
    exports.dispose = function () {
        if (this.pendingWorkers) {
            for (var i = 0; i < this.pendingWorkers.length; i++) {
                var worker = this.pendingWorkers[i];
                if (typeof worker.abort === 'function') {
                    try {
                        worker.abort();
                    } catch (ex) {
                    }
                }
            }
            this.pendingWorkers = null;
        }
    };
    var Model = require('eoo').create(require('mini-event/EventTarget'), exports);
    return Model;
});

define('ef/UIModel', [
    'require',
    'er/Model',
    'eoo'
], function (require) {
    var Model = require('er/Model');
    var exports = {};
    function pad(s) {
        s = s + '';
        return s.length === 1 ? '0' + s : s;
    }
    var formatters = {
        date: function (date) {
            return date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate());
        },
        dateRange: function (range) {
            return formatters.date(range.begin) + ',' + formatters.date(range.end);
        },
        time: function (time) {
            return formatters.date(time) + ' ' + pad(time.getHours()) + ':' + pad(time.getMinutes()) + ':' + pad(time.getSeconds());
        },
        timeRange: function (range) {
            return formatters.time(range.begin) + ',' + formatters.time(range.end);
        }
    };
    exports.formatters = {};
    exports.set = function (name, value, options) {
        if (this.formatters.hasOwnProperty(name)) {
            value = this.formatters[name](value);
        }
        this.$super([
            name,
            value,
            options
        ]);
    };
    exports.fill = function (extension, options) {
        for (var name in extension) {
            if (extension.hasOwnProperty(name) && this.formatters.hasOwnProperty(name)) {
                var formatter = this.formatters[name];
                var value = extension[name];
                extension[name] = formatter(value);
            }
        }
        this.$super(arguments);
    };
    exports.getPart = function (names) {
        if (Object.prototype.toString.call(names) !== '[object Array]') {
            names = [].slice.call(arguments);
        }
        var part = {};
        for (var i = 0; i < names.length; i++) {
            var name = names[i];
            part[name] = this.get(name);
        }
        return part;
    };
    var UIModel = require('eoo').create(Model, exports);
    UIModel.formatters = formatters;
    return UIModel;
});

define('er/assert', [], function () {
    if (window.DEBUG) {
        var assert = function (condition, message) {
            if (!condition) {
                throw new Error(message);
            }
        };
        assert.has = function (obj, message) {
            assert(obj != null, message);
        };
        assert.equals = function (x, y, message) {
            assert(x === y, message);
        };
        assert.hasProperty = function (obj, propertyName, message) {
            assert(obj[propertyName] != null, message);
        };
        assert.lessThan = function (value, max, message) {
            assert(value < max, message);
        };
        assert.greaterThan = function (value, min, message) {
            assert(value > min, message);
        };
        assert.lessThanOrEquals = function (value, max, message) {
            assert(value <= max, message);
        };
        assert.greaterThanOrEquals = function (value, min, message) {
            assert(value >= min, message);
        };
        return assert;
    } else {
        var assert = function () {
        };
        assert.has = assert;
        assert.equals = assert;
        assert.hasProperty = assert;
        assert.lessThan = assert;
        assert.greaterThan = assert;
        assert.lessThanOrEquals = assert;
        assert.greaterThanOrEquals = assert;
        return assert;
    }
});

define('er/ajax', [
    'require',
    './assert',
    './util',
    './Deferred',
    'eoo',
    'mini-event/EventTarget'
], function (require) {
    var TIMESTAMP_PARAM_KEY = '_';
    function serializeArray(prefix, array) {
        var encodedKey = prefix ? encodeURIComponent(prefix) : '';
        var encoded = [];
        for (var i = 0; i < array.length; i++) {
            var item = array[i];
            encoded[i] = this.serializeData('', item);
        }
        return encodedKey ? encodedKey + '=' + encoded.join(',') : encoded.join(',');
    }
    function serializeData(prefix, data) {
        if (arguments.length === 1) {
            data = prefix;
            prefix = '';
        }
        if (data == null) {
            data = '';
        }
        var getKey = this.serializeData.getKey;
        var encodedKey = prefix ? encodeURIComponent(prefix) : '';
        var type = Object.prototype.toString.call(data);
        switch (type) {
        case '[object Array]':
            return this.serializeArray(prefix, data);
        case '[object Object]':
            var result = [];
            for (var name in data) {
                var propertyKey = getKey(name, prefix);
                var propertyValue = this.serializeData(propertyKey, data[name]);
                result.push(propertyValue);
            }
            return result.join('&');
        default:
            return encodedKey ? encodedKey + '=' + encodeURIComponent(data) : encodeURIComponent(data);
        }
    }
    serializeData.getKey = function (propertyName, parentKey) {
        return parentKey ? parentKey + '.' + propertyName : propertyName;
    };
    var exports = {};
    exports.constructor = function () {
        this.hooks = {
            serializeData: serializeData,
            serializeArray: serializeArray
        };
        this.config = {
            cache: false,
            timeout: 0,
            charset: ''
        };
    };
    exports.request = function (options) {
        if (typeof this.hooks.beforeExecute === 'function') {
            this.hooks.beforeExecute(options);
        }
        var assert = require('./assert');
        assert.hasProperty(options, 'url', 'url property is required');
        var defaults = {
            method: 'POST',
            data: {},
            cache: this.config.cache,
            timeout: this.config.timeout,
            charset: this.config.charset
        };
        var util = require('./util');
        options = util.mix(defaults, options);
        var Deferred = require('./Deferred');
        var requesting = new Deferred();
        if (typeof this.hooks.beforeCreate === 'function') {
            var canceled = this.hooks.beforeCreate(options, requesting);
            if (canceled === true) {
                var fakeXHR = requesting.promise;
                fakeXHR.abort = function () {
                };
                fakeXHR.setRequestHeader = function () {
                };
                return fakeXHR;
            }
        }
        var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new window.ActiveXObject('Microsoft.XMLHTTP');
        util.mix(xhr, options.xhrFields);
        var fakeXHR = requesting.promise;
        var xhrWrapper = {
            abort: function () {
                xhr.onreadystatechange = null;
                try {
                    xhr.abort();
                } catch (ex) {
                }
                if (!fakeXHR.status) {
                    fakeXHR.status = 0;
                }
                fakeXHR.readyState = xhr.readyState;
                fakeXHR.responseText = '';
                fakeXHR.responseXML = '';
                requesting.reject(fakeXHR);
            },
            setRequestHeader: function (name, value) {
                xhr.setRequestHeader(name, value);
            },
            getAllResponseHeaders: function () {
                return xhr.getAllResponseHeaders();
            },
            getResponseHeader: function (name) {
                return xhr.getResponseHeader(name);
            },
            getRequestOption: function (name) {
                return options[name];
            }
        };
        util.mix(fakeXHR, xhrWrapper);
        var eventObject = {
            xhr: fakeXHR,
            options: options
        };
        fakeXHR.then(util.bind(this.fire, this, 'done', eventObject), util.bind(this.fire, this, 'fail', eventObject));
        var processRequestStatus = function () {
            if (xhr.readyState === 4) {
                var status = fakeXHR.status || xhr.status;
                if (status === 1223) {
                    status = 204;
                }
                fakeXHR.status = fakeXHR.status || status;
                fakeXHR.readyState = xhr.readyState;
                fakeXHR.responseText = xhr.responseText;
                fakeXHR.responseXML = xhr.responseXML;
                if (typeof this.hooks.afterReceive === 'function') {
                    this.hooks.afterReceive(fakeXHR, options);
                }
                if (status < 200 || status >= 300 && status !== 304) {
                    requesting.reject(fakeXHR);
                    return;
                }
                var data = xhr.responseText;
                if (options.dataType === 'json') {
                    try {
                        data = util.parseJSON(data);
                    } catch (ex) {
                        fakeXHR.error = ex;
                        requesting.reject(fakeXHR);
                        return;
                    }
                }
                if (typeof this.hooks.afterParse === 'function') {
                    try {
                        data = this.hooks.afterParse(data, fakeXHR, options);
                    } catch (ex) {
                        fakeXHR.error = ex;
                        requesting.reject(fakeXHR);
                        return;
                    }
                }
                requesting.resolve(data);
            }
        };
        xhr.onreadystatechange = util.bind(processRequestStatus, this);
        var method = options.method.toUpperCase();
        var data = {};
        if (method === 'GET') {
            util.mix(data, options.data);
        }
        if (options.cache === false) {
            data[TIMESTAMP_PARAM_KEY] = +new Date();
        }
        var query = this.hooks.serializeData('', data, 'application/x-www-form-urlencoded');
        var url = options.url;
        if (query) {
            var delimiter = url.indexOf('?') >= 0 ? '&' : '?';
            url += delimiter + query;
        }
        xhr.open(method, url, true);
        if (typeof this.hooks.beforeSend === 'function') {
            this.hooks.beforeSend(fakeXHR, options);
        }
        if (method === 'GET') {
            xhr.send();
        } else {
            var contentType = options.contentType || 'application/x-www-form-urlencoded';
            var query = this.hooks.serializeData('', options.data, contentType, fakeXHR);
            if (options.charset) {
                contentType += ';charset=' + options.charset;
            }
            xhr.setRequestHeader('Content-Type', contentType);
            xhr.send(query);
        }
        if (options.timeout > 0) {
            var notifyTimeout = function () {
                this.fire('timeout', {
                    xhr: fakeXHR,
                    options: options
                });
                fakeXHR.status = 408;
                fakeXHR.abort();
            };
            var tick = setTimeout(util.bind(notifyTimeout, this), options.timeout);
            var clearTick = function () {
                clearTimeout(tick);
            };
            fakeXHR.ensure(clearTick);
        }
        return fakeXHR;
    };
    exports.get = function (url, data, cache) {
        var options = {
            method: 'GET',
            url: url,
            data: data,
            cache: cache || this.config.cache
        };
        return this.request(options);
    };
    exports.getJSON = function (url, data, cache) {
        var options = {
            method: 'GET',
            url: url,
            data: data,
            dataType: 'json',
            cache: cache || this.config.cache
        };
        return this.request(options);
    };
    exports.post = function (url, data, dataType) {
        var options = {
            method: 'POST',
            url: url,
            data: data,
            dataType: dataType || 'json'
        };
        return this.request(options);
    };
    exports.log = function (url, data) {
        var img = new Image();
        var pool = window.ER_LOG_POOL || (window.ER_LOG_POOL = {});
        var id = +new Date();
        pool[id] = img;
        img.onload = img.onerror = img.onabort = function () {
            img.onload = img.onerror = img.onabort = null;
            pool[id] = null;
            img = null;
        };
        var query = this.hooks.serializeData('', data, 'application/x-www-form-urlencoded');
        if (query) {
            var delimiter = url.indexOf('?') >= 0 ? ':' : '?';
            url += delimiter + query;
        }
        img.src = url;
    };
    var Ajax = require('eoo').create(require('mini-event/EventTarget'), exports);
    var instance = new Ajax();
    instance.Ajax = Ajax;
    return instance;
});

define('ef/RemoteTreeStrategy', [
    'require',
    'esui/TreeStrategy',
    'er/ajax',
    'eoo'
], function (require) {
    var TreeStrategy = require('esui/TreeStrategy');
    var exports = {};
    exports.constructor = function (options) {
        if (options.requestMethod) {
            options.requestMethod = options.requestMethod.toLowerCase();
        }
        TreeStrategy.apply(this, arguments);
        this.workingRequests = {};
    };
    exports.urlTemplate = '';
    exports.requestMethod = 'get';
    exports.getRequestURL = function (node) {
        return lib.format(this.urlTemplate, node);
    };
    exports.getRequestData = function (node) {
        return null;
    };
    exports.requestNodeData = function (node) {
        var url = this.getRequestURL(node);
        var data = this.getRequestData(node);
        var ajax = require('er/ajax');
        return this.requestMethod === 'get' ? ajax.getJSON(url, data, this.useCache || false) : ajax.post(url, data, 'json');
    };
    function expandNode(tree, strategy, e) {
        var node = e.node;
        if (node.children) {
            tree.expandNode(node.id);
            return;
        }
        var xhr = tree.workingRequests[node.id];
        if (xhr) {
            xhr.abort();
        }
        xhr = this.requestNodeData(node);
        tree.workingRequests[node.id] = xhr;
        xhr.done(lib.bind(tree.expandNode, tree, node.id));
    }
    exports.enableToggleStrategy = function (tree) {
        tree.on('expand', lib.curry(expandNode, tree, this));
        tree.on('collapse', function (e) {
            this.collapseNode(e.node.id, false);
        });
    };
    var RemoteTreeStrategy = require('eoo').create(TreeStrategy, exports);
    return RemoteTreeStrategy;
});

void function (define) {
    define('eoo/oo', [], function () {
        var Empty = function () {
        };
        var NAME_PROPERTY_NAME = '__eooName__';
        var OWNER_PROPERTY_NAME = '__eooOwner__';
        function Class() {
            return Class.create.apply(Class, arguments);
        }
        Class.create = function (BaseClass, overrides) {
            overrides = overrides || {};
            BaseClass = BaseClass || Class;
            if (typeof BaseClass === 'object') {
                overrides = BaseClass;
                BaseClass = Class;
            }
            var kclass = inherit(BaseClass);
            var proto = kclass.prototype;
            eachObject(overrides, function (value, key) {
                if (typeof value === 'function') {
                    value[NAME_PROPERTY_NAME] = key;
                    value[OWNER_PROPERTY_NAME] = kclass;
                }
                proto[key] = value;
            });
            kclass.toString = toString;
            return kclass;
        };
        Class.static = typeof Object.create === 'function' ? Object.create : function (o) {
            if (arguments.length > 1) {
                throw new Error('Second argument not supported');
            }
            if (!(o instanceof Object)) {
                throw new TypeError('Argument must be an object');
            }
            Empty.prototype = o;
            return new Empty();
        };
        Class.defineMembers = function (BaseClass, exports) {
            exports = exports || {};
            if (typeof BaseClass !== 'function') {
                throw new TypeError('First argument must be a function');
            }
            var proto = BaseClass.prototype;
            eachObject(exports, function (value, key) {
                if (typeof value === 'function') {
                    value[NAME_PROPERTY_NAME] = key;
                    value[OWNER_PROPERTY_NAME] = BaseClass;
                }
                proto[key] = value;
            });
        };
        Class.toString = function () {
            return 'function Class() { [native code] }';
        };
        Class.prototype = {
            constructor: function () {
            },
            $self: Class,
            $superClass: Object,
            $super: function (args) {
                var method = this.$super.caller;
                var name = method[NAME_PROPERTY_NAME];
                var superClass = method[OWNER_PROPERTY_NAME].$superClass;
                var superMethod = superClass.prototype[name];
                if (typeof superMethod !== 'function') {
                    throw new TypeError('Call the super class\'s ' + name + ', but it is not a function!');
                }
                return superMethod.apply(this, args);
            }
        };
        function inherit(BaseClass) {
            var kclass = function () {
                return kclass.prototype.constructor.apply(this, arguments);
            };
            Empty.prototype = BaseClass.prototype;
            var proto = kclass.prototype = new Empty();
            proto.$self = kclass;
            if (!('$super' in proto)) {
                proto.$super = Class.prototype.$super;
            }
            kclass.$superClass = BaseClass;
            return kclass;
        }
        var hasEnumBug = !{ toString: 1 }.propertyIsEnumerable('toString');
        var enumProperties = [
            'constructor',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'toString',
            'toLocaleString',
            'valueOf'
        ];
        function hasOwnProperty(obj, key) {
            return Object.prototype.hasOwnProperty.call(obj, key);
        }
        function eachObject(obj, fn) {
            for (var k in obj) {
                hasOwnProperty(obj, k) && fn(obj[k], k, obj);
            }
            if (hasEnumBug) {
                for (var i = enumProperties.length - 1; i > -1; --i) {
                    var key = enumProperties[i];
                    hasOwnProperty(obj, key) && fn(obj[key], key, obj);
                }
            }
        }
        function toString() {
            return this.prototype.constructor.toString();
        }
        return Class;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

void function (define) {
    define('eoo/main', [
        'require',
        './oo',
        './defineAccessor'
    ], function (require) {
        var oo = require('./oo');
        oo.defineAccessor = require('./defineAccessor');
        return oo;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

define('eoo', ['eoo/main'], function (main) { return main; });

define('er/events', [
    'require',
    'eoo',
    'mini-event/EventTarget'
], function (require) {
    var exports = {};
    exports.notifyError = function (error) {
        if (typeof error === 'string') {
            error = new Error(error);
        }
        this.fire('error', { error: error });
        return error;
    };
    var EventBus = require('eoo').create(require('mini-event/EventTarget'), exports);
    var instance = new EventBus();
    instance.EventBus = EventBus;
    return instance;
});

define('ef/ActionPanel', [
    'require',
    'er/events',
    'esui/Panel',
    'mini-event',
    'er/Deferred',
    'esui/painters',
    'er/controller',
    'eoo',
    'esui'
], function (require) {
    var events = require('er/events');
    var Panel = require('esui/Panel');
    var exports = {};
    exports.type = 'ActionPanel';
    exports.setContent = function () {
    };
    exports.actionType = null;
    exports.action = null;
    function delegateActionEvent(e) {
        var event = require('mini-event').fromEvent(e, {
            preserveData: true,
            syncState: true
        });
        event.type = 'action@' + e.type;
        this.fire(event);
    }
    function attachAction(e) {
        if (!e.isChildAction || e.container !== this.main.id) {
            return;
        }
        this.action = e.action;
        this.action.on('enter', this.enterAction, this);
        if (typeof this.action.on === 'function') {
            this.action.on('*', delegateActionEvent, this);
        }
        this.fire('actionattach');
    }
    function notifyActionLoadComplete(e) {
        if (!e.isChildAction || e.container !== this.main.id) {
            return;
        }
        this.fire('actionloaded');
    }
    function notifyActionLoadFailed(e) {
        if (!e.isChildAction || e.container !== this.main.id) {
            return;
        }
        this.action = null;
        this.fire('actionloadfail', {
            failType: e.failType,
            reason: e.reason
        });
    }
    function notifyActionLoadAborted(e) {
        if (!e.isChildAction || e.container !== this.main.id) {
            return;
        }
        this.fire('actionloadabort');
    }
    exports.initStructure = function () {
        events.on('enteraction', attachAction, this);
        events.on('enteractioncomplete', notifyActionLoadComplete, this);
        events.on('actionnotfound', notifyActionLoadFailed, this);
        events.on('permissiondenied', notifyActionLoadFailed, this);
        events.on('actionfail', notifyActionLoadFailed, this);
        events.on('enteractionfail', notifyActionLoadFailed, this);
        events.on('actionabort', notifyActionLoadAborted, this);
    };
    exports.enterAction = function () {
        this.url = this.action.context.url.toString();
    };
    exports.disposeAction = function () {
        var Deferred = require('er/Deferred');
        var action = this.action;
        if (!action) {
            return;
        }
        if (Deferred.isPromise(action) && typeof action.abort === 'function') {
            action.abort();
        } else {
            if (typeof action.un === 'function') {
                action.un('*', delegateActionEvent, this);
            }
            if (typeof action.leave === 'function') {
                action.leave();
            }
        }
        this.action = null;
    };
    exports.repaint = require('esui/painters').createRepaint(Panel.prototype.repaint, {
        name: [
            'url',
            'actionOptions'
        ],
        paint: function (panel, url, actionOptions) {
            panel.disposeAction();
            if (!url) {
                return;
            }
            if (panel.lazy && panel.helper.isInStage('INITED')) {
                return;
            }
            var controller = require('er/controller');
            panel.action = controller.renderChildAction(url, panel.main.id, actionOptions);
            if (typeof panel.action.abort !== 'function') {
                panel.action = null;
            }
        }
    });
    exports.dispose = function () {
        this.disposeAction();
        events.un('enteraction', attachAction, this);
        events.un('enteractioncomplete', notifyActionLoadComplete, this);
        events.un('actionnotfound', notifyActionLoadFailed, this);
        events.un('permissiondenied', notifyActionLoadFailed, this);
        events.un('actionfail', notifyActionLoadFailed, this);
        events.un('enteractionfail', notifyActionLoadFailed, this);
        events.un('actionabort', notifyActionLoadAborted, this);
        this.$super(arguments);
    };
    exports.reload = function (actionOptions) {
        var url = this.url;
        this.url = null;
        this.setProperties({
            url: url,
            actionOptions: actionOptions
        });
    };
    var ActionPanel = require('eoo').create(Panel, exports);
    require('esui').register(ActionPanel);
    return ActionPanel;
});

define('ef/ActionDialog', [
    'require',
    'esui/main',
    'esui/Dialog',
    './ActionPanel',
    'mini-event',
    'esui/painters',
    'eoo',
    'esui'
], function (require) {
    var ui = require('esui/main');
    var Dialog = require('esui/Dialog');
    require('./ActionPanel');
    var exports = {};
    exports.type = 'ActionDialog';
    exports.styleType = 'Dialog';
    exports.setContent = function () {
    };
    exports.createBF = function (type, mainDOM) {
        if (mainDOM) {
            this.content = mainDOM.innerHTML;
        } else {
            mainDOM = document.createElement('div');
            this.main.appendChild(mainDOM);
        }
        this.helper.addPartClasses(type + '-panel', mainDOM);
        var properties = { main: mainDOM };
        var panelType = 'Panel';
        if (type === 'body') {
            properties.url = this.url;
            properties.actionOptions = this.actionOptions;
            panelType = 'ActionPanel';
        }
        var panel = ui.create(panelType, properties);
        if (type === 'body') {
            panel.on('actionattach', function () {
                if (this.autoClose) {
                    var action = this.get('action');
                    if (typeof action.on === 'function') {
                        action.on('handlefinish', false);
                        action.on('handlefinish', this.dispose, this);
                    }
                }
                this.fire('actionattach');
            }, this);
            panel.on('actionloaded', function () {
                this.resize();
            }, this);
            panel.on('*', function (e) {
                if (e.type.indexOf('action@') === 0) {
                    this.fire(e);
                }
            }, this);
            var Event = require('mini-event');
            Event.delegate(panel, this, 'actionloaded');
            Event.delegate(panel, this, 'actionloadfail');
            Event.delegate(panel, this, 'actionloadabort');
        }
        panel.render();
        this.addChild(panel, type);
        return panel;
    };
    exports.repaint = require('esui/painters').createRepaint(Dialog.prototype.repaint, {
        name: [
            'url',
            'actionOptions'
        ],
        paint: function (dialog, url, actionOptions) {
            var body = dialog.getBody();
            var properties = {
                url: url,
                actionOptions: actionOptions
            };
            body.setProperties(properties);
        }
    });
    exports.getAction = function () {
        var actionPanel = this.getBody();
        if (actionPanel) {
            return actionPanel.get('action');
        } else {
            return null;
        }
    };
    exports.reload = function () {
        var actionPanel = this.getBody();
        if (actionPanel) {
            actionPanel.reload();
        }
    };
    var ActionDialog = require('eoo').create(Dialog, exports);
    require('esui').register(ActionDialog);
    return ActionDialog;
});

define('startup/ria', [], {});